// Generated by Haxe 3.4.2 (git build master @ 19a3e04)
(function ($hx_exports, $global) { "use strict";
$hx_exports["kha"] = $hx_exports["kha"] || {};
$hx_exports["kha"]["input"] = $hx_exports["kha"]["input"] || {};
;$hx_exports["kha"]["_Color"] = $hx_exports["kha"]["_Color"] || {};
var $hxClasses = {},$estr = function() { return js_Boot.__string_rec(this,''); };
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var EReg = function(r,opt) {
	this.r = new RegExp(r,opt.split("u").join(""));
};
$hxClasses["EReg"] = EReg;
EReg.__name__ = true;
EReg.prototype = {
	r: null
	,match: function(s) {
		if(this.r.global) {
			this.r.lastIndex = 0;
		}
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	,matched: function(n) {
		if(this.r.m != null && n >= 0 && n < this.r.m.length) {
			return this.r.m[n];
		} else {
			throw new js__$Boot_HaxeError("EReg::matched");
		}
	}
	,__class__: EReg
};
var HxOverrides = function() { };
$hxClasses["HxOverrides"] = HxOverrides;
HxOverrides.__name__ = true;
HxOverrides.strDate = function(s) {
	var _g = s.length;
	switch(_g) {
	case 8:
		var k = s.split(":");
		var d = new Date();
		d["setTime"](0);
		d["setUTCHours"](k[0]);
		d["setUTCMinutes"](k[1]);
		d["setUTCSeconds"](k[2]);
		return d;
	case 10:
		var k1 = s.split("-");
		return new Date(k1[0],k1[1] - 1,k1[2],0,0,0);
	case 19:
		var k2 = s.split(" ");
		var y = k2[0].split("-");
		var t = k2[1].split(":");
		return new Date(y[0],y[1] - 1,y[2],t[0],t[1],t[2]);
	default:
		throw new js__$Boot_HaxeError("Invalid date format : " + s);
	}
};
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.remove = function(a,obj) {
	var i = a.indexOf(obj);
	if(i == -1) {
		return false;
	}
	a.splice(i,1);
	return true;
};
HxOverrides.iter = function(a) {
	return { cur : 0, arr : a, hasNext : function() {
		return this.cur < this.arr.length;
	}, next : function() {
		return this.arr[this.cur++];
	}};
};
var Lambda = function() { };
$hxClasses["Lambda"] = Lambda;
Lambda.__name__ = true;
Lambda.array = function(it) {
	var a = [];
	var i = $iterator(it)();
	while(i.hasNext()) {
		var i1 = i.next();
		a.push(i1);
	}
	return a;
};
var List = function() {
	this.length = 0;
};
$hxClasses["List"] = List;
List.__name__ = true;
List.prototype = {
	h: null
	,q: null
	,length: null
	,add: function(item) {
		var x = new _$List_ListNode(item,null);
		if(this.h == null) {
			this.h = x;
		} else {
			this.q.next = x;
		}
		this.q = x;
		this.length++;
	}
	,iterator: function() {
		return new _$List_ListIterator(this.h);
	}
	,__class__: List
};
var _$List_ListNode = function(item,next) {
	this.item = item;
	this.next = next;
};
$hxClasses["_List.ListNode"] = _$List_ListNode;
_$List_ListNode.__name__ = true;
_$List_ListNode.prototype = {
	item: null
	,next: null
	,__class__: _$List_ListNode
};
var _$List_ListIterator = function(head) {
	this.head = head;
};
$hxClasses["_List.ListIterator"] = _$List_ListIterator;
_$List_ListIterator.__name__ = true;
_$List_ListIterator.prototype = {
	head: null
	,hasNext: function() {
		return this.head != null;
	}
	,next: function() {
		var val = this.head.item;
		this.head = this.head.next;
		return val;
	}
	,__class__: _$List_ListIterator
};
var Main = function() { };
$hxClasses["Main"] = Main;
Main.__name__ = true;
Main.main = function() {
	quake_Sys.main();
};
Math.__name__ = true;
var Reflect = function() { };
$hxClasses["Reflect"] = Reflect;
Reflect.__name__ = true;
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( e ) {
		return null;
	}
};
Reflect.isFunction = function(f) {
	if(typeof(f) == "function") {
		return !(f.__name__ || f.__ename__);
	} else {
		return false;
	}
};
var Std = function() { };
$hxClasses["Std"] = Std;
Std.__name__ = true;
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.parseInt = function(x) {
	var v = parseInt(x,10);
	if(v == 0 && (HxOverrides.cca(x,1) == 120 || HxOverrides.cca(x,1) == 88)) {
		v = parseInt(x);
	}
	if(isNaN(v)) {
		return null;
	}
	return v;
};
var StringTools = function() { };
$hxClasses["StringTools"] = StringTools;
StringTools.__name__ = true;
StringTools.endsWith = function(s,end) {
	var elen = end.length;
	var slen = s.length;
	if(slen >= elen) {
		return HxOverrides.substr(s,slen - elen,elen) == end;
	} else {
		return false;
	}
};
var Tools = function() { };
$hxClasses["Tools"] = Tools;
Tools.__name__ = true;
Tools.toFixed = function(f,p) {
	return f.toFixed(p);
};
var Type = function() { };
$hxClasses["Type"] = Type;
Type.__name__ = true;
Type.resolveClass = function(name) {
	var cl = $hxClasses[name];
	if(cl == null || !cl.__name__) {
		return null;
	}
	return cl;
};
Type.resolveEnum = function(name) {
	var e = $hxClasses[name];
	if(e == null || !e.__ename__) {
		return null;
	}
	return e;
};
Type.createEmptyInstance = function(cl) {
	function empty() {}; empty.prototype = cl.prototype;
	return new empty();
};
Type.createEnum = function(e,constr,params) {
	var f = Reflect.field(e,constr);
	if(f == null) {
		throw new js__$Boot_HaxeError("No such constructor " + constr);
	}
	if(Reflect.isFunction(f)) {
		if(params == null) {
			throw new js__$Boot_HaxeError("Constructor " + constr + " need parameters");
		}
		return f.apply(e,params);
	}
	if(params != null && params.length != 0) {
		throw new js__$Boot_HaxeError("Constructor " + constr + " does not need parameters");
	}
	return f;
};
Type.getInstanceFields = function(c) {
	var a = [];
	for(var i in c.prototype) a.push(i);
	HxOverrides.remove(a,"__class__");
	HxOverrides.remove(a,"__properties__");
	return a;
};
var _$UInt_UInt_$Impl_$ = {};
$hxClasses["_UInt.UInt_Impl_"] = _$UInt_UInt_$Impl_$;
_$UInt_UInt_$Impl_$.__name__ = true;
_$UInt_UInt_$Impl_$.gt = function(a,b) {
	var aNeg = a < 0;
	var bNeg = b < 0;
	if(aNeg != bNeg) {
		return aNeg;
	} else {
		return a > b;
	}
};
_$UInt_UInt_$Impl_$.gte = function(a,b) {
	var aNeg = a < 0;
	var bNeg = b < 0;
	if(aNeg != bNeg) {
		return aNeg;
	} else {
		return a >= b;
	}
};
_$UInt_UInt_$Impl_$.toFloat = function(this1) {
	var $int = this1;
	if($int < 0) {
		return 4294967296.0 + $int;
	} else {
		return $int + 0.0;
	}
};
var haxe_IMap = function() { };
$hxClasses["haxe.IMap"] = haxe_IMap;
haxe_IMap.__name__ = true;
haxe_IMap.prototype = {
	get: null
	,iterator: null
	,__class__: haxe_IMap
};
var haxe__$Int64__$_$_$Int64 = function(high,low) {
	this.high = high;
	this.low = low;
};
$hxClasses["haxe._Int64.___Int64"] = haxe__$Int64__$_$_$Int64;
haxe__$Int64__$_$_$Int64.__name__ = true;
haxe__$Int64__$_$_$Int64.prototype = {
	high: null
	,low: null
	,__class__: haxe__$Int64__$_$_$Int64
};
var haxe_Log = function() { };
$hxClasses["haxe.Log"] = haxe_Log;
haxe_Log.__name__ = true;
haxe_Log.trace = function(v,infos) {
	js_Boot.__trace(v,infos);
};
var haxe__$Unserializer_DefaultResolver = function() {
};
$hxClasses["haxe._Unserializer.DefaultResolver"] = haxe__$Unserializer_DefaultResolver;
haxe__$Unserializer_DefaultResolver.__name__ = true;
haxe__$Unserializer_DefaultResolver.prototype = {
	resolveClass: function(name) {
		return Type.resolveClass(name);
	}
	,resolveEnum: function(name) {
		return Type.resolveEnum(name);
	}
	,__class__: haxe__$Unserializer_DefaultResolver
};
var haxe_Unserializer = function(buf) {
	this.buf = buf;
	this.length = buf.length;
	this.pos = 0;
	this.scache = [];
	this.cache = [];
	var r = haxe_Unserializer.DEFAULT_RESOLVER;
	if(r == null) {
		r = new haxe__$Unserializer_DefaultResolver();
		haxe_Unserializer.DEFAULT_RESOLVER = r;
	}
	this.resolver = r;
};
$hxClasses["haxe.Unserializer"] = haxe_Unserializer;
haxe_Unserializer.__name__ = true;
haxe_Unserializer.initCodes = function() {
	var codes = [];
	var _g1 = 0;
	var _g = haxe_Unserializer.BASE64.length;
	while(_g1 < _g) {
		var i = _g1++;
		codes[haxe_Unserializer.BASE64.charCodeAt(i)] = i;
	}
	return codes;
};
haxe_Unserializer.run = function(v) {
	return new haxe_Unserializer(v).unserialize();
};
haxe_Unserializer.prototype = {
	buf: null
	,pos: null
	,length: null
	,cache: null
	,scache: null
	,resolver: null
	,readDigits: function() {
		var k = 0;
		var s = false;
		var fpos = this.pos;
		while(true) {
			var c = this.buf.charCodeAt(this.pos);
			if(c != c) {
				break;
			}
			if(c == 45) {
				if(this.pos != fpos) {
					break;
				}
				s = true;
				this.pos++;
				continue;
			}
			if(c < 48 || c > 57) {
				break;
			}
			k = k * 10 + (c - 48);
			this.pos++;
		}
		if(s) {
			k *= -1;
		}
		return k;
	}
	,readFloat: function() {
		var p1 = this.pos;
		while(true) {
			var c = this.buf.charCodeAt(this.pos);
			if(c != c) {
				break;
			}
			if(c >= 43 && c < 58 || c == 101 || c == 69) {
				this.pos++;
			} else {
				break;
			}
		}
		return parseFloat(HxOverrides.substr(this.buf,p1,this.pos - p1));
	}
	,unserializeObject: function(o) {
		while(true) {
			if(this.pos >= this.length) {
				throw new js__$Boot_HaxeError("Invalid object");
			}
			if(this.buf.charCodeAt(this.pos) == 103) {
				break;
			}
			var k = this.unserialize();
			if(typeof(k) != "string") {
				throw new js__$Boot_HaxeError("Invalid object key");
			}
			var v = this.unserialize();
			o[k] = v;
		}
		this.pos++;
	}
	,unserializeEnum: function(edecl,tag) {
		if(this.buf.charCodeAt(this.pos++) != 58) {
			throw new js__$Boot_HaxeError("Invalid enum format");
		}
		var nargs = this.readDigits();
		if(nargs == 0) {
			return Type.createEnum(edecl,tag);
		}
		var args = [];
		while(nargs-- > 0) args.push(this.unserialize());
		return Type.createEnum(edecl,tag,args);
	}
	,unserialize: function() {
		var _g = this.buf.charCodeAt(this.pos++);
		switch(_g) {
		case 65:
			var name = this.unserialize();
			var cl = this.resolver.resolveClass(name);
			if(cl == null) {
				throw new js__$Boot_HaxeError("Class not found " + name);
			}
			return cl;
		case 66:
			var name1 = this.unserialize();
			var e = this.resolver.resolveEnum(name1);
			if(e == null) {
				throw new js__$Boot_HaxeError("Enum not found " + name1);
			}
			return e;
		case 67:
			var name2 = this.unserialize();
			var cl1 = this.resolver.resolveClass(name2);
			if(cl1 == null) {
				throw new js__$Boot_HaxeError("Class not found " + name2);
			}
			var o = Type.createEmptyInstance(cl1);
			this.cache.push(o);
			o.hxUnserialize(this);
			if(this.buf.charCodeAt(this.pos++) != 103) {
				throw new js__$Boot_HaxeError("Invalid custom data");
			}
			return o;
		case 77:
			var h = new haxe_ds_ObjectMap();
			this.cache.push(h);
			var buf = this.buf;
			while(this.buf.charCodeAt(this.pos) != 104) {
				var s = this.unserialize();
				h.set(s,this.unserialize());
			}
			this.pos++;
			return h;
		case 82:
			var n = this.readDigits();
			if(n < 0 || n >= this.scache.length) {
				throw new js__$Boot_HaxeError("Invalid string reference");
			}
			return this.scache[n];
		case 97:
			var buf1 = this.buf;
			var a = [];
			this.cache.push(a);
			while(true) {
				var c = this.buf.charCodeAt(this.pos);
				if(c == 104) {
					this.pos++;
					break;
				}
				if(c == 117) {
					this.pos++;
					var n1 = this.readDigits();
					a[a.length + n1 - 1] = null;
				} else {
					a.push(this.unserialize());
				}
			}
			return a;
		case 98:
			var h1 = new haxe_ds_StringMap();
			this.cache.push(h1);
			var buf2 = this.buf;
			while(this.buf.charCodeAt(this.pos) != 104) {
				var s1 = this.unserialize();
				var value = this.unserialize();
				if(__map_reserved[s1] != null) {
					h1.setReserved(s1,value);
				} else {
					h1.h[s1] = value;
				}
			}
			this.pos++;
			return h1;
		case 99:
			var name3 = this.unserialize();
			var cl2 = this.resolver.resolveClass(name3);
			if(cl2 == null) {
				throw new js__$Boot_HaxeError("Class not found " + name3);
			}
			var o1 = Type.createEmptyInstance(cl2);
			this.cache.push(o1);
			this.unserializeObject(o1);
			return o1;
		case 100:
			return this.readFloat();
		case 102:
			return false;
		case 105:
			return this.readDigits();
		case 106:
			var name4 = this.unserialize();
			var edecl = this.resolver.resolveEnum(name4);
			if(edecl == null) {
				throw new js__$Boot_HaxeError("Enum not found " + name4);
			}
			this.pos++;
			var index = this.readDigits();
			var tag = edecl.__constructs__.slice()[index];
			if(tag == null) {
				throw new js__$Boot_HaxeError("Unknown enum index " + name4 + "@" + index);
			}
			var e1 = this.unserializeEnum(edecl,tag);
			this.cache.push(e1);
			return e1;
		case 107:
			return NaN;
		case 108:
			var l = new List();
			this.cache.push(l);
			var buf3 = this.buf;
			while(this.buf.charCodeAt(this.pos) != 104) l.add(this.unserialize());
			this.pos++;
			return l;
		case 109:
			return -Infinity;
		case 110:
			return null;
		case 111:
			var o2 = { };
			this.cache.push(o2);
			this.unserializeObject(o2);
			return o2;
		case 112:
			return Infinity;
		case 113:
			var h2 = new haxe_ds_IntMap();
			this.cache.push(h2);
			var buf4 = this.buf;
			var c1 = this.buf.charCodeAt(this.pos++);
			while(c1 == 58) {
				var i = this.readDigits();
				var value1 = this.unserialize();
				h2.h[i] = value1;
				c1 = this.buf.charCodeAt(this.pos++);
			}
			if(c1 != 104) {
				throw new js__$Boot_HaxeError("Invalid IntMap format");
			}
			return h2;
		case 114:
			var n2 = this.readDigits();
			if(n2 < 0 || n2 >= this.cache.length) {
				throw new js__$Boot_HaxeError("Invalid reference");
			}
			return this.cache[n2];
		case 115:
			var len = this.readDigits();
			var buf5 = this.buf;
			if(this.buf.charCodeAt(this.pos++) != 58 || this.length - this.pos < len) {
				throw new js__$Boot_HaxeError("Invalid bytes length");
			}
			var codes = haxe_Unserializer.CODES;
			if(codes == null) {
				codes = haxe_Unserializer.initCodes();
				haxe_Unserializer.CODES = codes;
			}
			var i1 = this.pos;
			var rest = len & 3;
			var size = (len >> 2) * 3 + (rest >= 2 ? rest - 1 : 0);
			var max = i1 + (len - rest);
			var bytes = new haxe_io_Bytes(new ArrayBuffer(size));
			var bpos = 0;
			while(i1 < max) {
				var c11 = codes[buf5.charCodeAt(i1++)];
				var c2 = codes[buf5.charCodeAt(i1++)];
				bytes.b[bpos++] = (c11 << 2 | c2 >> 4) & 255;
				var c3 = codes[buf5.charCodeAt(i1++)];
				bytes.b[bpos++] = (c2 << 4 | c3 >> 2) & 255;
				var c4 = codes[buf5.charCodeAt(i1++)];
				bytes.b[bpos++] = (c3 << 6 | c4) & 255;
			}
			if(rest >= 2) {
				var c12 = codes[buf5.charCodeAt(i1++)];
				var c21 = codes[buf5.charCodeAt(i1++)];
				bytes.b[bpos++] = (c12 << 2 | c21 >> 4) & 255;
				if(rest == 3) {
					var c31 = codes[buf5.charCodeAt(i1++)];
					bytes.b[bpos++] = (c21 << 4 | c31 >> 2) & 255;
				}
			}
			this.pos += len;
			this.cache.push(bytes);
			return bytes;
		case 116:
			return true;
		case 118:
			var d;
			if(this.buf.charCodeAt(this.pos) >= 48 && this.buf.charCodeAt(this.pos) <= 57 && this.buf.charCodeAt(this.pos + 1) >= 48 && this.buf.charCodeAt(this.pos + 1) <= 57 && this.buf.charCodeAt(this.pos + 2) >= 48 && this.buf.charCodeAt(this.pos + 2) <= 57 && this.buf.charCodeAt(this.pos + 3) >= 48 && this.buf.charCodeAt(this.pos + 3) <= 57 && this.buf.charCodeAt(this.pos + 4) == 45) {
				d = HxOverrides.strDate(HxOverrides.substr(this.buf,this.pos,19));
				this.pos += 19;
			} else {
				var t = this.readFloat();
				d = new Date(t);
			}
			this.cache.push(d);
			return d;
		case 119:
			var name5 = this.unserialize();
			var edecl1 = this.resolver.resolveEnum(name5);
			if(edecl1 == null) {
				throw new js__$Boot_HaxeError("Enum not found " + name5);
			}
			var e2 = this.unserializeEnum(edecl1,this.unserialize());
			this.cache.push(e2);
			return e2;
		case 120:
			throw js__$Boot_HaxeError.wrap(this.unserialize());
			break;
		case 121:
			var len1 = this.readDigits();
			if(this.buf.charCodeAt(this.pos++) != 58 || this.length - this.pos < len1) {
				throw new js__$Boot_HaxeError("Invalid string length");
			}
			var s2 = HxOverrides.substr(this.buf,this.pos,len1);
			this.pos += len1;
			s2 = decodeURIComponent(s2.split("+").join(" "));
			this.scache.push(s2);
			return s2;
		case 122:
			return 0;
		default:
		}
		this.pos--;
		throw new js__$Boot_HaxeError("Invalid char " + this.buf.charAt(this.pos) + " at position " + this.pos);
	}
	,__class__: haxe_Unserializer
};
var haxe_io_Bytes = function(data) {
	this.length = data.byteLength;
	this.b = new Uint8Array(data);
	this.b.bufferValue = data;
	data.hxBytes = this;
	data.bytes = this.b;
};
$hxClasses["haxe.io.Bytes"] = haxe_io_Bytes;
haxe_io_Bytes.__name__ = true;
haxe_io_Bytes.ofString = function(s) {
	var a = [];
	var i = 0;
	while(i < s.length) {
		var c = s.charCodeAt(i++);
		if(55296 <= c && c <= 56319) {
			c = c - 55232 << 10 | s.charCodeAt(i++) & 1023;
		}
		if(c <= 127) {
			a.push(c);
		} else if(c <= 2047) {
			a.push(192 | c >> 6);
			a.push(128 | c & 63);
		} else if(c <= 65535) {
			a.push(224 | c >> 12);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		} else {
			a.push(240 | c >> 18);
			a.push(128 | c >> 12 & 63);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		}
	}
	return new haxe_io_Bytes(new Uint8Array(a).buffer);
};
haxe_io_Bytes.ofData = function(b) {
	var hb = b.hxBytes;
	if(hb != null) {
		return hb;
	}
	return new haxe_io_Bytes(b);
};
haxe_io_Bytes.prototype = {
	length: null
	,b: null
	,data: null
	,blit: function(pos,src,srcpos,len) {
		if(pos < 0 || srcpos < 0 || len < 0 || pos + len > this.length || srcpos + len > src.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		if(srcpos == 0 && len == src.b.byteLength) {
			this.b.set(src.b,pos);
		} else {
			this.b.set(src.b.subarray(srcpos,srcpos + len),pos);
		}
	}
	,sub: function(pos,len) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		return new haxe_io_Bytes(this.b.buffer.slice(pos + this.b.byteOffset,pos + this.b.byteOffset + len));
	}
	,getDouble: function(pos) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		return this.data.getFloat64(pos,true);
	}
	,getFloat: function(pos) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		return this.data.getFloat32(pos,true);
	}
	,setDouble: function(pos,v) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		this.data.setFloat64(pos,v,true);
	}
	,setFloat: function(pos,v) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		this.data.setFloat32(pos,v,true);
	}
	,getUInt16: function(pos) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		return this.data.getUint16(pos,true);
	}
	,getInt32: function(pos) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		return this.data.getInt32(pos,true);
	}
	,setInt32: function(pos,v) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		this.data.setInt32(pos,v,true);
	}
	,getString: function(pos,len) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		var s = "";
		var b = this.b;
		var fcc = String.fromCharCode;
		var i = pos;
		var max = pos + len;
		while(i < max) {
			var c = b[i++];
			if(c < 128) {
				if(c == 0) {
					break;
				}
				s += fcc(c);
			} else if(c < 224) {
				s += fcc((c & 63) << 6 | b[i++] & 127);
			} else if(c < 240) {
				var c2 = b[i++];
				s += fcc((c & 31) << 12 | (c2 & 127) << 6 | b[i++] & 127);
			} else {
				var c21 = b[i++];
				var c3 = b[i++];
				var u = (c & 15) << 18 | (c21 & 127) << 12 | (c3 & 127) << 6 | b[i++] & 127;
				s += fcc((u >> 10) + 55232);
				s += fcc(u & 1023 | 56320);
			}
		}
		return s;
	}
	,toString: function() {
		return this.getString(0,this.length);
	}
	,__class__: haxe_io_Bytes
};
var haxe_crypto_Base64 = function() { };
$hxClasses["haxe.crypto.Base64"] = haxe_crypto_Base64;
haxe_crypto_Base64.__name__ = true;
haxe_crypto_Base64.encode = function(bytes,complement) {
	if(complement == null) {
		complement = true;
	}
	var str = new haxe_crypto_BaseCode(haxe_crypto_Base64.BYTES).encodeBytes(bytes).toString();
	if(complement) {
		var _g = bytes.length % 3;
		switch(_g) {
		case 1:
			str += "==";
			break;
		case 2:
			str += "=";
			break;
		default:
		}
	}
	return str;
};
var haxe_crypto_BaseCode = function(base) {
	var len = base.length;
	var nbits = 1;
	while(len > 1 << nbits) ++nbits;
	if(nbits > 8 || len != 1 << nbits) {
		throw new js__$Boot_HaxeError("BaseCode : base length must be a power of two.");
	}
	this.base = base;
	this.nbits = nbits;
};
$hxClasses["haxe.crypto.BaseCode"] = haxe_crypto_BaseCode;
haxe_crypto_BaseCode.__name__ = true;
haxe_crypto_BaseCode.prototype = {
	base: null
	,nbits: null
	,encodeBytes: function(b) {
		var nbits = this.nbits;
		var base = this.base;
		var size = b.length * 8 / nbits | 0;
		var out = new haxe_io_Bytes(new ArrayBuffer(size + (b.length * 8 % nbits == 0 ? 0 : 1)));
		var buf = 0;
		var curbits = 0;
		var mask = (1 << nbits) - 1;
		var pin = 0;
		var pout = 0;
		while(pout < size) {
			while(curbits < nbits) {
				curbits += 8;
				buf <<= 8;
				buf |= b.b[pin++];
			}
			curbits -= nbits;
			out.b[pout++] = base.b[buf >> curbits & mask] & 255;
		}
		if(curbits > 0) {
			out.b[pout++] = base.b[buf << nbits - curbits & mask] & 255;
		}
		return out;
	}
	,__class__: haxe_crypto_BaseCode
};
var haxe_ds_IntMap = function() {
	this.h = { };
};
$hxClasses["haxe.ds.IntMap"] = haxe_ds_IntMap;
haxe_ds_IntMap.__name__ = true;
haxe_ds_IntMap.__interfaces__ = [haxe_IMap];
haxe_ds_IntMap.prototype = {
	h: null
	,get: function(key) {
		return this.h[key];
	}
	,keys: function() {
		var a = [];
		for( var key in this.h ) if(this.h.hasOwnProperty(key)) {
			a.push(key | 0);
		}
		return HxOverrides.iter(a);
	}
	,iterator: function() {
		return { ref : this.h, it : this.keys(), hasNext : function() {
			return this.it.hasNext();
		}, next : function() {
			var i = this.it.next();
			return this.ref[i];
		}};
	}
	,__class__: haxe_ds_IntMap
};
var haxe_ds_ObjectMap = function() {
	this.h = { __keys__ : { }};
};
$hxClasses["haxe.ds.ObjectMap"] = haxe_ds_ObjectMap;
haxe_ds_ObjectMap.__name__ = true;
haxe_ds_ObjectMap.__interfaces__ = [haxe_IMap];
haxe_ds_ObjectMap.prototype = {
	h: null
	,set: function(key,value) {
		var id = key.__id__ || (key.__id__ = ++haxe_ds_ObjectMap.count);
		this.h[id] = value;
		this.h.__keys__[id] = key;
	}
	,get: function(key) {
		return this.h[key.__id__];
	}
	,keys: function() {
		var a = [];
		for( var key in this.h.__keys__ ) {
		if(this.h.hasOwnProperty(key)) {
			a.push(this.h.__keys__[key]);
		}
		}
		return HxOverrides.iter(a);
	}
	,iterator: function() {
		return { ref : this.h, it : this.keys(), hasNext : function() {
			return this.it.hasNext();
		}, next : function() {
			var i = this.it.next();
			return this.ref[i.__id__];
		}};
	}
	,__class__: haxe_ds_ObjectMap
};
var haxe_ds__$StringMap_StringMapIterator = function(map,keys) {
	this.map = map;
	this.keys = keys;
	this.index = 0;
	this.count = keys.length;
};
$hxClasses["haxe.ds._StringMap.StringMapIterator"] = haxe_ds__$StringMap_StringMapIterator;
haxe_ds__$StringMap_StringMapIterator.__name__ = true;
haxe_ds__$StringMap_StringMapIterator.prototype = {
	map: null
	,keys: null
	,index: null
	,count: null
	,hasNext: function() {
		return this.index < this.count;
	}
	,next: function() {
		var _this = this.map;
		var key = this.keys[this.index++];
		if(__map_reserved[key] != null) {
			return _this.getReserved(key);
		} else {
			return _this.h[key];
		}
	}
	,__class__: haxe_ds__$StringMap_StringMapIterator
};
var haxe_ds_StringMap = function() {
	this.h = { };
};
$hxClasses["haxe.ds.StringMap"] = haxe_ds_StringMap;
haxe_ds_StringMap.__name__ = true;
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.prototype = {
	h: null
	,rh: null
	,get: function(key) {
		if(__map_reserved[key] != null) {
			return this.getReserved(key);
		}
		return this.h[key];
	}
	,setReserved: function(key,value) {
		if(this.rh == null) {
			this.rh = { };
		}
		this.rh["$" + key] = value;
	}
	,getReserved: function(key) {
		if(this.rh == null) {
			return null;
		} else {
			return this.rh["$" + key];
		}
	}
	,existsReserved: function(key) {
		if(this.rh == null) {
			return false;
		}
		return this.rh.hasOwnProperty("$" + key);
	}
	,keys: function() {
		return HxOverrides.iter(this.arrayKeys());
	}
	,arrayKeys: function() {
		var out = [];
		for( var key in this.h ) {
		if(this.h.hasOwnProperty(key)) {
			out.push(key);
		}
		}
		if(this.rh != null) {
			for( var key in this.rh ) {
			if(key.charCodeAt(0) == 36) {
				out.push(key.substr(1));
			}
			}
		}
		return out;
	}
	,iterator: function() {
		return new haxe_ds__$StringMap_StringMapIterator(this,this.arrayKeys());
	}
	,__class__: haxe_ds_StringMap
};
var haxe_io_BytesBuffer = function() {
	this.b = [];
};
$hxClasses["haxe.io.BytesBuffer"] = haxe_io_BytesBuffer;
haxe_io_BytesBuffer.__name__ = true;
haxe_io_BytesBuffer.prototype = {
	b: null
	,getBytes: function() {
		var bytes = new haxe_io_Bytes(new Uint8Array(this.b).buffer);
		this.b = null;
		return bytes;
	}
	,__class__: haxe_io_BytesBuffer
};
var haxe_io_Input = function() { };
$hxClasses["haxe.io.Input"] = haxe_io_Input;
haxe_io_Input.__name__ = true;
haxe_io_Input.prototype = {
	bigEndian: null
	,readByte: function() {
		throw new js__$Boot_HaxeError("Not implemented");
	}
	,readBytes: function(s,pos,len) {
		var k = len;
		var b = s.b;
		if(pos < 0 || len < 0 || pos + len > s.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		try {
			while(k > 0) {
				b[pos] = this.readByte();
				++pos;
				--k;
			}
		} catch( eof ) {
			if (eof instanceof js__$Boot_HaxeError) eof = eof.val;
			if( js_Boot.__instanceof(eof,haxe_io_Eof) ) {
			} else throw(eof);
		}
		return len - k;
	}
	,readFullBytes: function(s,pos,len) {
		while(len > 0) {
			var k = this.readBytes(s,pos,len);
			if(k == 0) {
				throw new js__$Boot_HaxeError(haxe_io_Error.Blocked);
			}
			pos += k;
			len -= k;
		}
	}
	,read: function(nbytes) {
		var s = new haxe_io_Bytes(new ArrayBuffer(nbytes));
		var p = 0;
		while(nbytes > 0) {
			var k = this.readBytes(s,p,nbytes);
			if(k == 0) {
				throw new js__$Boot_HaxeError(haxe_io_Error.Blocked);
			}
			p += k;
			nbytes -= k;
		}
		return s;
	}
	,readInt32: function() {
		var ch1 = this.readByte();
		var ch2 = this.readByte();
		var ch3 = this.readByte();
		var ch4 = this.readByte();
		if(this.bigEndian) {
			return ch4 | ch3 << 8 | ch2 << 16 | ch1 << 24;
		} else {
			return ch1 | ch2 << 8 | ch3 << 16 | ch4 << 24;
		}
	}
	,readString: function(len) {
		var b = new haxe_io_Bytes(new ArrayBuffer(len));
		this.readFullBytes(b,0,len);
		return b.toString();
	}
	,__class__: haxe_io_Input
};
var haxe_io_BytesInput = function(b,pos,len) {
	if(pos == null) {
		pos = 0;
	}
	if(len == null) {
		len = b.length - pos;
	}
	if(pos < 0 || len < 0 || pos + len > b.length) {
		throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
	}
	this.b = b.b;
	this.pos = pos;
	this.len = len;
	this.totlen = len;
};
$hxClasses["haxe.io.BytesInput"] = haxe_io_BytesInput;
haxe_io_BytesInput.__name__ = true;
haxe_io_BytesInput.__super__ = haxe_io_Input;
haxe_io_BytesInput.prototype = $extend(haxe_io_Input.prototype,{
	b: null
	,pos: null
	,len: null
	,totlen: null
	,set_position: function(p) {
		if(p < 0) {
			p = 0;
		} else if(p > this.totlen) {
			p = this.totlen;
		}
		this.len = this.totlen - p;
		return this.pos = p;
	}
	,readByte: function() {
		if(this.len == 0) {
			throw new js__$Boot_HaxeError(new haxe_io_Eof());
		}
		this.len--;
		return this.b[this.pos++];
	}
	,readBytes: function(buf,pos,len) {
		if(pos < 0 || len < 0 || pos + len > buf.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		if(this.len == 0 && len > 0) {
			throw new js__$Boot_HaxeError(new haxe_io_Eof());
		}
		if(this.len < len) {
			len = this.len;
		}
		var b1 = this.b;
		var b2 = buf.b;
		var _g1 = 0;
		var _g = len;
		while(_g1 < _g) {
			var i = _g1++;
			b2[pos + i] = b1[this.pos + i];
		}
		this.pos += len;
		this.len -= len;
		return len;
	}
	,__class__: haxe_io_BytesInput
});
var haxe_io_Output = function() { };
$hxClasses["haxe.io.Output"] = haxe_io_Output;
haxe_io_Output.__name__ = true;
haxe_io_Output.prototype = {
	bigEndian: null
	,writeByte: function(c) {
		throw new js__$Boot_HaxeError("Not implemented");
	}
	,writeBytes: function(s,pos,len) {
		if(pos < 0 || len < 0 || pos + len > s.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		var b = s.b;
		var k = len;
		while(k > 0) {
			this.writeByte(b[pos]);
			++pos;
			--k;
		}
		return len;
	}
	,write: function(s) {
		var l = s.length;
		var p = 0;
		while(l > 0) {
			var k = this.writeBytes(s,p,l);
			if(k == 0) {
				throw new js__$Boot_HaxeError(haxe_io_Error.Blocked);
			}
			p += k;
			l -= k;
		}
	}
	,writeFloat: function(x) {
		this.writeInt32(haxe_io_FPHelper.floatToI32(x));
	}
	,writeInt32: function(x) {
		if(this.bigEndian) {
			this.writeByte(x >>> 24);
			this.writeByte(x >> 16 & 255);
			this.writeByte(x >> 8 & 255);
			this.writeByte(x & 255);
		} else {
			this.writeByte(x & 255);
			this.writeByte(x >> 8 & 255);
			this.writeByte(x >> 16 & 255);
			this.writeByte(x >>> 24);
		}
	}
	,__class__: haxe_io_Output
};
var haxe_io_BytesOutput = function() {
	this.b = new haxe_io_BytesBuffer();
};
$hxClasses["haxe.io.BytesOutput"] = haxe_io_BytesOutput;
haxe_io_BytesOutput.__name__ = true;
haxe_io_BytesOutput.__super__ = haxe_io_Output;
haxe_io_BytesOutput.prototype = $extend(haxe_io_Output.prototype,{
	b: null
	,writeByte: function(c) {
		this.b.b.push(c);
	}
	,writeBytes: function(buf,pos,len) {
		var _this = this.b;
		if(pos < 0 || len < 0 || pos + len > buf.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		var b1 = _this.b;
		var b2 = buf.b;
		var _g1 = pos;
		var _g = pos + len;
		while(_g1 < _g) {
			var i = _g1++;
			_this.b.push(b2[i]);
		}
		return len;
	}
	,getBytes: function() {
		return this.b.getBytes();
	}
	,__class__: haxe_io_BytesOutput
});
var haxe_io_Eof = function() {
};
$hxClasses["haxe.io.Eof"] = haxe_io_Eof;
haxe_io_Eof.__name__ = true;
haxe_io_Eof.prototype = {
	toString: function() {
		return "Eof";
	}
	,__class__: haxe_io_Eof
};
var haxe_io_Error = $hxClasses["haxe.io.Error"] = { __ename__ : true, __constructs__ : ["Blocked","Overflow","OutsideBounds","Custom"] };
haxe_io_Error.Blocked = ["Blocked",0];
haxe_io_Error.Blocked.toString = $estr;
haxe_io_Error.Blocked.__enum__ = haxe_io_Error;
haxe_io_Error.Overflow = ["Overflow",1];
haxe_io_Error.Overflow.toString = $estr;
haxe_io_Error.Overflow.__enum__ = haxe_io_Error;
haxe_io_Error.OutsideBounds = ["OutsideBounds",2];
haxe_io_Error.OutsideBounds.toString = $estr;
haxe_io_Error.OutsideBounds.__enum__ = haxe_io_Error;
haxe_io_Error.Custom = function(e) { var $x = ["Custom",3,e]; $x.__enum__ = haxe_io_Error; $x.toString = $estr; return $x; };
var haxe_io_FPHelper = function() { };
$hxClasses["haxe.io.FPHelper"] = haxe_io_FPHelper;
haxe_io_FPHelper.__name__ = true;
haxe_io_FPHelper.i32ToFloat = function(i) {
	var sign = 1 - (i >>> 31 << 1);
	var exp = i >>> 23 & 255;
	var sig = i & 8388607;
	if(sig == 0 && exp == 0) {
		return 0.0;
	}
	return sign * (1 + Math.pow(2,-23) * sig) * Math.pow(2,exp - 127);
};
haxe_io_FPHelper.floatToI32 = function(f) {
	if(f == 0) {
		return 0;
	}
	var af = f < 0 ? -f : f;
	var exp = Math.floor(Math.log(af) / 0.6931471805599453);
	if(exp < -127) {
		exp = -127;
	} else if(exp > 128) {
		exp = 128;
	}
	var sig = Math.round((af / Math.pow(2,exp) - 1) * 8388608);
	if(sig == 8388608 && exp < 128) {
		sig = 0;
		++exp;
	}
	return (f < 0 ? -2147483648 : 0) | exp + 127 << 23 | sig;
};
haxe_io_FPHelper.i64ToDouble = function(low,high) {
	var sign = 1 - (high >>> 31 << 1);
	var exp = (high >> 20 & 2047) - 1023;
	var sig = (high & 1048575) * 4294967296. + (low >>> 31) * 2147483648. + (low & 2147483647);
	if(sig == 0 && exp == -1023) {
		return 0.0;
	}
	return sign * (1.0 + Math.pow(2,-52) * sig) * Math.pow(2,exp);
};
haxe_io_FPHelper.doubleToI64 = function(v) {
	var i64 = haxe_io_FPHelper.i64tmp;
	if(v == 0) {
		i64.low = 0;
		i64.high = 0;
	} else if(!isFinite(v)) {
		if(v > 0) {
			i64.low = 0;
			i64.high = 2146435072;
		} else {
			i64.low = 0;
			i64.high = -1048576;
		}
	} else {
		var av = v < 0 ? -v : v;
		var exp = Math.floor(Math.log(av) / 0.6931471805599453);
		var sig = Math.round((av / Math.pow(2,exp) - 1) * 4503599627370496.);
		var sig_l = sig | 0;
		var sig_h = sig / 4294967296.0 | 0;
		i64.low = sig_l;
		i64.high = (v < 0 ? -2147483648 : 0) | exp + 1023 << 20 | sig_h;
	}
	return i64;
};
var haxe_io__$UInt8Array_UInt8Array_$Impl_$ = {};
$hxClasses["haxe.io._UInt8Array.UInt8Array_Impl_"] = haxe_io__$UInt8Array_UInt8Array_$Impl_$;
haxe_io__$UInt8Array_UInt8Array_$Impl_$.__name__ = true;
haxe_io__$UInt8Array_UInt8Array_$Impl_$.fromBytes = function(bytes,bytePos,length) {
	if(bytePos == null) {
		bytePos = 0;
	}
	if(length == null) {
		length = bytes.length - bytePos;
	}
	return new Uint8Array(bytes.b.bufferValue,bytePos,length);
};
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	this.message = String(val);
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
$hxClasses["js._Boot.HaxeError"] = js__$Boot_HaxeError;
js__$Boot_HaxeError.__name__ = true;
js__$Boot_HaxeError.wrap = function(val) {
	if((val instanceof Error)) {
		return val;
	} else {
		return new js__$Boot_HaxeError(val);
	}
};
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
	val: null
	,__class__: js__$Boot_HaxeError
});
var js_Boot = function() { };
$hxClasses["js.Boot"] = js_Boot;
js_Boot.__name__ = true;
js_Boot.__unhtml = function(s) {
	return s.split("&").join("&amp;").split("<").join("&lt;").split(">").join("&gt;");
};
js_Boot.__trace = function(v,i) {
	var msg = i != null ? i.fileName + ":" + i.lineNumber + ": " : "";
	msg += js_Boot.__string_rec(v,"");
	if(i != null && i.customParams != null) {
		var _g = 0;
		var _g1 = i.customParams;
		while(_g < _g1.length) {
			var v1 = _g1[_g];
			++_g;
			msg += "," + js_Boot.__string_rec(v1,"");
		}
	}
	var d;
	var tmp;
	if(typeof(document) != "undefined") {
		d = document.getElementById("haxe:trace");
		tmp = d != null;
	} else {
		tmp = false;
	}
	if(tmp) {
		d.innerHTML += js_Boot.__unhtml(msg) + "<br/>";
	} else if(typeof console != "undefined" && console.log != null) {
		console.log(msg);
	}
};
js_Boot.getClass = function(o) {
	if((o instanceof Array) && o.__enum__ == null) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o instanceof Array) {
			if(o.__enum__) {
				if(o.length == 2) {
					return o[0];
				}
				var str = o[0] + "(";
				s += "\t";
				var _g1 = 2;
				var _g = o.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(i != 2) {
						str += "," + js_Boot.__string_rec(o[i],s);
					} else {
						str += js_Boot.__string_rec(o[i],s);
					}
				}
				return str + ")";
			}
			var l = o.length;
			var i1;
			var str1 = "[";
			s += "\t";
			var _g11 = 0;
			var _g2 = l;
			while(_g11 < _g2) {
				var i2 = _g11++;
				str1 += (i2 > 0 ? "," : "") + js_Boot.__string_rec(o[i2],s);
			}
			str1 += "]";
			return str1;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var k = null;
		var str2 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str2.length != 2) {
			str2 += ", \n";
		}
		str2 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str2 += "\n" + s + "}";
		return str2;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) {
		return false;
	}
	if(cc == cl) {
		return true;
	}
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g1 = 0;
		var _g = intf.length;
		while(_g1 < _g) {
			var i = _g1++;
			var i1 = intf[i];
			if(i1 == cl || js_Boot.__interfLoop(i1,cl)) {
				return true;
			}
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		if((o instanceof Array)) {
			return o.__enum__ == null;
		} else {
			return false;
		}
		break;
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return true;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return (o|0) === o;
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(o instanceof cl) {
					return true;
				}
				if(js_Boot.__interfLoop(js_Boot.getClass(o),cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(o instanceof cl) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class ? o.__name__ != null : false) {
			return true;
		}
		if(cl == Enum ? o.__ename__ != null : false) {
			return true;
		}
		return o.__enum__ == cl;
	}
};
js_Boot.__cast = function(o,t) {
	if(js_Boot.__instanceof(o,t)) {
		return o;
	} else {
		throw new js__$Boot_HaxeError("Cannot cast " + Std.string(o) + " to " + Std.string(t));
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var js_Browser = function() { };
$hxClasses["js.Browser"] = js_Browser;
js_Browser.__name__ = true;
js_Browser.getLocalStorage = function() {
	try {
		var s = window.localStorage;
		s.getItem("");
		return s;
	} catch( e ) {
		return null;
	}
};
var js_html_compat_ArrayBuffer = function(a) {
	if((a instanceof Array) && a.__enum__ == null) {
		this.a = a;
		this.byteLength = a.length;
	} else {
		var len = a;
		this.a = [];
		var _g1 = 0;
		var _g = len;
		while(_g1 < _g) {
			var i = _g1++;
			this.a[i] = 0;
		}
		this.byteLength = len;
	}
};
$hxClasses["js.html.compat.ArrayBuffer"] = js_html_compat_ArrayBuffer;
js_html_compat_ArrayBuffer.__name__ = true;
js_html_compat_ArrayBuffer.sliceImpl = function(begin,end) {
	var u = new Uint8Array(this,begin,end == null ? null : end - begin);
	var result = new ArrayBuffer(u.byteLength);
	var resultArray = new Uint8Array(result);
	resultArray.set(u);
	return result;
};
js_html_compat_ArrayBuffer.prototype = {
	byteLength: null
	,a: null
	,slice: function(begin,end) {
		return new js_html_compat_ArrayBuffer(this.a.slice(begin,end));
	}
	,__class__: js_html_compat_ArrayBuffer
};
var js_html_compat_DataView = function(buffer,byteOffset,byteLength) {
	this.buf = buffer;
	this.offset = byteOffset == null ? 0 : byteOffset;
	this.length = byteLength == null ? buffer.byteLength - this.offset : byteLength;
	if(this.offset < 0 || this.length < 0 || this.offset + this.length > buffer.byteLength) {
		throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
	}
	this.byteLength = this.length;
	this.byteOffset = this.offset;
	this.buffer = this.buf;
};
$hxClasses["js.html.compat.DataView"] = js_html_compat_DataView;
js_html_compat_DataView.__name__ = true;
js_html_compat_DataView.prototype = {
	buf: null
	,offset: null
	,length: null
	,byteLength: null
	,byteOffset: null
	,buffer: null
	,getInt8: function(byteOffset) {
		var v = this.buf.a[this.offset + byteOffset];
		if(v >= 128) {
			return v - 256;
		} else {
			return v;
		}
	}
	,getUint8: function(byteOffset) {
		return this.buf.a[this.offset + byteOffset];
	}
	,getInt16: function(byteOffset,littleEndian) {
		var v = this.getUint16(byteOffset,littleEndian);
		if(v >= 32768) {
			return v - 65536;
		} else {
			return v;
		}
	}
	,getUint16: function(byteOffset,littleEndian) {
		if(littleEndian) {
			return this.buf.a[this.offset + byteOffset] | this.buf.a[this.offset + byteOffset + 1] << 8;
		} else {
			return this.buf.a[this.offset + byteOffset] << 8 | this.buf.a[this.offset + byteOffset + 1];
		}
	}
	,getInt32: function(byteOffset,littleEndian) {
		var p = this.offset + byteOffset;
		var a = this.buf.a[p++];
		var b = this.buf.a[p++];
		var c = this.buf.a[p++];
		var d = this.buf.a[p++];
		if(littleEndian) {
			return a | b << 8 | c << 16 | d << 24;
		} else {
			return d | c << 8 | b << 16 | a << 24;
		}
	}
	,getUint32: function(byteOffset,littleEndian) {
		var v = this.getInt32(byteOffset,littleEndian);
		if(v < 0) {
			return v + 4294967296.;
		} else {
			return v;
		}
	}
	,getFloat32: function(byteOffset,littleEndian) {
		return haxe_io_FPHelper.i32ToFloat(this.getInt32(byteOffset,littleEndian));
	}
	,getFloat64: function(byteOffset,littleEndian) {
		var a = this.getInt32(byteOffset,littleEndian);
		var b = this.getInt32(byteOffset + 4,littleEndian);
		return haxe_io_FPHelper.i64ToDouble(littleEndian ? a : b,littleEndian ? b : a);
	}
	,setInt8: function(byteOffset,value) {
		this.buf.a[byteOffset + this.offset] = value < 0 ? value + 128 & 255 : value & 255;
	}
	,setUint8: function(byteOffset,value) {
		this.buf.a[byteOffset + this.offset] = value & 255;
	}
	,setInt16: function(byteOffset,value,littleEndian) {
		this.setUint16(byteOffset,value < 0 ? value + 65536 : value,littleEndian);
	}
	,setUint16: function(byteOffset,value,littleEndian) {
		var p = byteOffset + this.offset;
		if(littleEndian) {
			this.buf.a[p] = value & 255;
			this.buf.a[p++] = value >> 8 & 255;
		} else {
			this.buf.a[p++] = value >> 8 & 255;
			this.buf.a[p] = value & 255;
		}
	}
	,setInt32: function(byteOffset,value,littleEndian) {
		this.setUint32(byteOffset,value,littleEndian);
	}
	,setUint32: function(byteOffset,value,littleEndian) {
		var p = byteOffset + this.offset;
		if(littleEndian) {
			this.buf.a[p++] = value & 255;
			this.buf.a[p++] = value >> 8 & 255;
			this.buf.a[p++] = value >> 16 & 255;
			this.buf.a[p++] = value >>> 24;
		} else {
			this.buf.a[p++] = value >>> 24;
			this.buf.a[p++] = value >> 16 & 255;
			this.buf.a[p++] = value >> 8 & 255;
			this.buf.a[p++] = value & 255;
		}
	}
	,setFloat32: function(byteOffset,value,littleEndian) {
		this.setUint32(byteOffset,haxe_io_FPHelper.floatToI32(value),littleEndian);
	}
	,setFloat64: function(byteOffset,value,littleEndian) {
		var i64 = haxe_io_FPHelper.doubleToI64(value);
		if(littleEndian) {
			this.setUint32(byteOffset,i64.low);
			this.setUint32(byteOffset,i64.high);
		} else {
			this.setUint32(byteOffset,i64.high);
			this.setUint32(byteOffset,i64.low);
		}
	}
	,__class__: js_html_compat_DataView
};
var js_html_compat_Float32Array = function() { };
$hxClasses["js.html.compat.Float32Array"] = js_html_compat_Float32Array;
js_html_compat_Float32Array.__name__ = true;
js_html_compat_Float32Array._new = function(arg1,offset,length) {
	var arr;
	if(typeof(arg1) == "number") {
		arr = [];
		var _g1 = 0;
		var _g = arg1;
		while(_g1 < _g) {
			var i = _g1++;
			arr[i] = 0;
		}
		arr.byteLength = arr.length << 2;
		arr.byteOffset = 0;
		var _g2 = [];
		var _g21 = 0;
		var _g11 = arr.length << 2;
		while(_g21 < _g11) {
			var i1 = _g21++;
			_g2.push(0);
		}
		arr.buffer = new js_html_compat_ArrayBuffer(_g2);
	} else if(js_Boot.__instanceof(arg1,js_html_compat_ArrayBuffer)) {
		var buffer = arg1;
		if(offset == null) {
			offset = 0;
		}
		if(length == null) {
			length = buffer.byteLength - offset >> 2;
		}
		arr = [];
		var _g12 = 0;
		var _g3 = length;
		while(_g12 < _g3) {
			var i2 = _g12++;
			var val = buffer.a[offset++] | buffer.a[offset++] << 8 | buffer.a[offset++] << 16 | buffer.a[offset++] << 24;
			arr.push(haxe_io_FPHelper.i32ToFloat(val));
		}
		arr.byteLength = arr.length << 2;
		arr.byteOffset = offset;
		arr.buffer = buffer;
	} else if((arg1 instanceof Array) && arg1.__enum__ == null) {
		arr = arg1.slice();
		var buffer1 = [];
		var _g4 = 0;
		while(_g4 < arr.length) {
			var f = arr[_g4];
			++_g4;
			var i3 = haxe_io_FPHelper.floatToI32(f);
			buffer1.push(i3 & 255);
			buffer1.push(i3 >> 8 & 255);
			buffer1.push(i3 >> 16 & 255);
			buffer1.push(i3 >>> 24);
		}
		arr.byteLength = arr.length << 2;
		arr.byteOffset = 0;
		arr.buffer = new js_html_compat_ArrayBuffer(buffer1);
	} else {
		throw new js__$Boot_HaxeError("TODO " + Std.string(arg1));
	}
	arr.subarray = js_html_compat_Float32Array._subarray;
	arr.set = js_html_compat_Float32Array._set;
	return arr;
};
js_html_compat_Float32Array._set = function(arg,offset) {
	if(js_Boot.__instanceof(arg.buffer,js_html_compat_ArrayBuffer)) {
		var a = arg;
		if(arg.byteLength + offset > this.byteLength) {
			throw new js__$Boot_HaxeError("set() outside of range");
		}
		var _g1 = 0;
		var _g = arg.byteLength;
		while(_g1 < _g) {
			var i = _g1++;
			this[i + offset] = a[i];
		}
	} else if((arg instanceof Array) && arg.__enum__ == null) {
		var a1 = arg;
		if(a1.length + offset > this.byteLength) {
			throw new js__$Boot_HaxeError("set() outside of range");
		}
		var _g11 = 0;
		var _g2 = a1.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			this[i1 + offset] = a1[i1];
		}
	} else {
		throw new js__$Boot_HaxeError("TODO");
	}
};
js_html_compat_Float32Array._subarray = function(start,end) {
	var a = js_html_compat_Float32Array._new(this.slice(start,end));
	a.byteOffset = start * 4;
	return a;
};
var js_html_compat_Uint8Array = function() { };
$hxClasses["js.html.compat.Uint8Array"] = js_html_compat_Uint8Array;
js_html_compat_Uint8Array.__name__ = true;
js_html_compat_Uint8Array._new = function(arg1,offset,length) {
	var arr;
	if(typeof(arg1) == "number") {
		arr = [];
		var _g1 = 0;
		var _g = arg1;
		while(_g1 < _g) {
			var i = _g1++;
			arr[i] = 0;
		}
		arr.byteLength = arr.length;
		arr.byteOffset = 0;
		arr.buffer = new js_html_compat_ArrayBuffer(arr);
	} else if(js_Boot.__instanceof(arg1,js_html_compat_ArrayBuffer)) {
		var buffer = arg1;
		if(offset == null) {
			offset = 0;
		}
		if(length == null) {
			length = buffer.byteLength - offset;
		}
		if(offset == 0) {
			arr = buffer.a;
		} else {
			arr = buffer.a.slice(offset,offset + length);
		}
		arr.byteLength = arr.length;
		arr.byteOffset = offset;
		arr.buffer = buffer;
	} else if((arg1 instanceof Array) && arg1.__enum__ == null) {
		arr = arg1.slice();
		arr.byteLength = arr.length;
		arr.byteOffset = 0;
		arr.buffer = new js_html_compat_ArrayBuffer(arr);
	} else {
		throw new js__$Boot_HaxeError("TODO " + Std.string(arg1));
	}
	arr.subarray = js_html_compat_Uint8Array._subarray;
	arr.set = js_html_compat_Uint8Array._set;
	return arr;
};
js_html_compat_Uint8Array._set = function(arg,offset) {
	if(js_Boot.__instanceof(arg.buffer,js_html_compat_ArrayBuffer)) {
		var a = arg;
		if(arg.byteLength + offset > this.byteLength) {
			throw new js__$Boot_HaxeError("set() outside of range");
		}
		var _g1 = 0;
		var _g = arg.byteLength;
		while(_g1 < _g) {
			var i = _g1++;
			this[i + offset] = a[i];
		}
	} else if((arg instanceof Array) && arg.__enum__ == null) {
		var a1 = arg;
		if(a1.length + offset > this.byteLength) {
			throw new js__$Boot_HaxeError("set() outside of range");
		}
		var _g11 = 0;
		var _g2 = a1.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			this[i1 + offset] = a1[i1];
		}
	} else {
		throw new js__$Boot_HaxeError("TODO");
	}
};
js_html_compat_Uint8Array._subarray = function(start,end) {
	var a = js_html_compat_Uint8Array._new(this.slice(start,end));
	a.byteOffset = start;
	return a;
};
var kha__$Assets_ImageList = function() {
	this.names = [];
};
$hxClasses["kha._Assets.ImageList"] = kha__$Assets_ImageList;
kha__$Assets_ImageList.__name__ = true;
kha__$Assets_ImageList.prototype = {
	names: null
	,__class__: kha__$Assets_ImageList
};
var kha__$Assets_SoundList = function() {
	this.names = [];
};
$hxClasses["kha._Assets.SoundList"] = kha__$Assets_SoundList;
kha__$Assets_SoundList.__name__ = true;
kha__$Assets_SoundList.prototype = {
	names: null
	,__class__: kha__$Assets_SoundList
};
var kha__$Assets_BlobList = function() {
	this.names = [];
};
$hxClasses["kha._Assets.BlobList"] = kha__$Assets_BlobList;
kha__$Assets_BlobList.__name__ = true;
kha__$Assets_BlobList.prototype = {
	names: null
	,__class__: kha__$Assets_BlobList
};
var kha__$Assets_FontList = function() {
	this.names = [];
};
$hxClasses["kha._Assets.FontList"] = kha__$Assets_FontList;
kha__$Assets_FontList.__name__ = true;
kha__$Assets_FontList.prototype = {
	names: null
	,__class__: kha__$Assets_FontList
};
var kha__$Assets_VideoList = function() {
	this.names = [];
};
$hxClasses["kha._Assets.VideoList"] = kha__$Assets_VideoList;
kha__$Assets_VideoList.__name__ = true;
kha__$Assets_VideoList.prototype = {
	names: null
	,__class__: kha__$Assets_VideoList
};
var kha_Assets = function() { };
$hxClasses["kha.Assets"] = kha_Assets;
kha_Assets.__name__ = true;
kha_Assets.loadEverything = function(callback) {
	var fileCount = 0;
	var _g = 0;
	var _g1 = Type.getInstanceFields(kha__$Assets_BlobList);
	while(_g < _g1.length) {
		var blob = _g1[_g];
		++_g;
		if(StringTools.endsWith(blob,"Load")) {
			fileCount += 1;
		}
	}
	var _g2 = 0;
	var _g11 = Type.getInstanceFields(kha__$Assets_ImageList);
	while(_g2 < _g11.length) {
		var image = _g11[_g2];
		++_g2;
		if(StringTools.endsWith(image,"Load")) {
			fileCount += 1;
		}
	}
	var _g3 = 0;
	var _g12 = Type.getInstanceFields(kha__$Assets_SoundList);
	while(_g3 < _g12.length) {
		var sound = _g12[_g3];
		++_g3;
		if(StringTools.endsWith(sound,"Load")) {
			fileCount += 1;
		}
	}
	var _g4 = 0;
	var _g13 = Type.getInstanceFields(kha__$Assets_FontList);
	while(_g4 < _g13.length) {
		var font = _g13[_g4];
		++_g4;
		if(StringTools.endsWith(font,"Load")) {
			fileCount += 1;
		}
	}
	var _g5 = 0;
	var _g14 = Type.getInstanceFields(kha__$Assets_VideoList);
	while(_g5 < _g14.length) {
		var video = _g14[_g5];
		++_g5;
		if(StringTools.endsWith(video,"Load")) {
			fileCount += 1;
		}
	}
	if(fileCount == 0) {
		callback();
		return;
	}
	var filesLeft = fileCount;
	var _g6 = 0;
	var _g15 = Type.getInstanceFields(kha__$Assets_BlobList);
	while(_g6 < _g15.length) {
		var blob1 = _g15[_g6];
		++_g6;
		if(StringTools.endsWith(blob1,"Load")) {
			(Reflect.field(kha_Assets.blobs,blob1))(function() {
				filesLeft -= 1;
				kha_Assets.progress = 1 - filesLeft / fileCount;
				if(filesLeft == 0) {
					callback();
				}
			});
		}
	}
	var _g7 = 0;
	var _g16 = Type.getInstanceFields(kha__$Assets_ImageList);
	while(_g7 < _g16.length) {
		var image1 = _g16[_g7];
		++_g7;
		if(StringTools.endsWith(image1,"Load")) {
			(Reflect.field(kha_Assets.images,image1))(function() {
				filesLeft -= 1;
				kha_Assets.progress = 1 - filesLeft / fileCount;
				if(filesLeft == 0) {
					callback();
				}
			});
		}
	}
	var _g8 = 0;
	var _g17 = Type.getInstanceFields(kha__$Assets_SoundList);
	while(_g8 < _g17.length) {
		var sound1 = [_g17[_g8]];
		++_g8;
		if(StringTools.endsWith(sound1[0],"Load")) {
			(Reflect.field(kha_Assets.sounds,sound1[0]))((function(sound2) {
				return function() {
					var sound3 = Reflect.field(kha_Assets.sounds,sound2[0].substring(0,sound2[0].length - 4));
					sound3.uncompress((function() {
						return function() {
							filesLeft -= 1;
							kha_Assets.progress = 1 - filesLeft / fileCount;
							if(filesLeft == 0) {
								callback();
							}
						};
					})());
				};
			})(sound1));
		}
	}
	var _g9 = 0;
	var _g18 = Type.getInstanceFields(kha__$Assets_FontList);
	while(_g9 < _g18.length) {
		var font1 = _g18[_g9];
		++_g9;
		if(StringTools.endsWith(font1,"Load")) {
			(Reflect.field(kha_Assets.fonts,font1))(function() {
				filesLeft -= 1;
				kha_Assets.progress = 1 - filesLeft / fileCount;
				if(filesLeft == 0) {
					callback();
				}
			});
		}
	}
	var _g10 = 0;
	var _g19 = Type.getInstanceFields(kha__$Assets_VideoList);
	while(_g10 < _g19.length) {
		var video1 = _g19[_g10];
		++_g10;
		if(StringTools.endsWith(video1,"Load")) {
			(Reflect.field(kha_Assets.videos,video1))(function() {
				filesLeft -= 1;
				kha_Assets.progress = 1 - filesLeft / fileCount;
				if(filesLeft == 0) {
					callback();
				}
			});
		}
	}
};
kha_Assets.loadImage = function(name,done) {
	var description = Reflect.field(kha_Assets.images,name + "Description");
	kha_LoaderImpl.loadImageFromDescription(description,function(image) {
		kha_Assets.images[name] = image;
		done(image);
	});
};
kha_Assets.loadImageFromPath = function(path,readable,done) {
	var description = { files : [path], readable : readable};
	kha_LoaderImpl.loadImageFromDescription(description,done);
};
kha_Assets.get_imageFormats = function() {
	return kha_LoaderImpl.getImageFormats();
};
kha_Assets.loadBlob = function(name,done) {
	var description = Reflect.field(kha_Assets.blobs,name + "Description");
	kha_LoaderImpl.loadBlobFromDescription(description,function(blob) {
		kha_Assets.blobs[name] = blob;
		done(blob);
	});
};
kha_Assets.loadBlobFromPath = function(path,done) {
	var description = { files : [path]};
	kha_LoaderImpl.loadBlobFromDescription(description,done);
};
kha_Assets.loadSound = function(name,done) {
	var description = Reflect.field(kha_Assets.sounds,name + "Description");
	kha_LoaderImpl.loadSoundFromDescription(description,function(sound) {
		kha_Assets.sounds[name] = sound;
		done(sound);
	});
	return;
};
kha_Assets.loadSoundFromPath = function(path,done) {
	var description = { files : [path]};
	kha_LoaderImpl.loadSoundFromDescription(description,done);
	return;
};
kha_Assets.get_soundFormats = function() {
	return kha_LoaderImpl.getSoundFormats();
};
kha_Assets.loadFont = function(name,done) {
	var description = Reflect.field(kha_Assets.fonts,name + "Description");
	kha_LoaderImpl.loadFontFromDescription(description,function(font) {
		kha_Assets.fonts[name] = font;
		done(font);
	});
	return;
};
kha_Assets.loadFontFromPath = function(path,done) {
	var description = { files : [path]};
	kha_LoaderImpl.loadFontFromDescription(description,done);
	return;
};
kha_Assets.get_fontFormats = function() {
	return ["ttf"];
};
kha_Assets.loadVideo = function(name,done) {
	var description = Reflect.field(kha_Assets.videos,name + "Description");
	kha_LoaderImpl.loadVideoFromDescription(description,function(video) {
		kha_Assets.videos[name] = video;
		done(video);
	});
	return;
};
kha_Assets.loadVideoFromPath = function(path,done) {
	var description = { files : [path]};
	kha_LoaderImpl.loadVideoFromDescription(description,done);
	return;
};
kha_Assets.get_videoFormats = function() {
	return kha_LoaderImpl.getVideoFormats();
};
var kha_Canvas = function() { };
$hxClasses["kha.Canvas"] = kha_Canvas;
kha_Canvas.__name__ = true;
kha_Canvas.prototype = {
	get_width: null
	,get_height: null
	,get_g1: null
	,get_g2: null
	,get_g4: null
	,width: null
	,height: null
	,g1: null
	,g2: null
	,g4: null
	,__class__: kha_Canvas
};
var kha_Resource = function() { };
$hxClasses["kha.Resource"] = kha_Resource;
kha_Resource.__name__ = true;
kha_Resource.prototype = {
	unload: null
	,__class__: kha_Resource
};
var kha_Image = function() { };
$hxClasses["kha.Image"] = kha_Image;
kha_Image.__name__ = true;
kha_Image.__interfaces__ = [kha_Resource,kha_Canvas];
kha_Image.create = function(width,height,format,usage) {
	if(format == null) {
		format = kha_graphics4_TextureFormat.RGBA32;
	}
	if(usage == null) {
		usage = kha_graphics4_Usage.StaticUsage;
	}
	if(kha_SystemImpl.gl == null) {
		return new kha_CanvasImage(width,height,format,false);
	} else {
		return new kha_WebGLImage(width,height,format,false,0);
	}
};
kha_Image.create3D = function(width,height,depth,format,usage) {
	return null;
};
kha_Image.createRenderTarget = function(width,height,format,depthStencil,antiAliasingSamples,contextId) {
	if(contextId == null) {
		contextId = 0;
	}
	if(antiAliasingSamples == null) {
		antiAliasingSamples = 1;
	}
	if(depthStencil == null) {
		depthStencil = 0;
	}
	if(format == null) {
		format = kha_graphics4_TextureFormat.RGBA32;
	}
	if(kha_SystemImpl.gl == null) {
		return new kha_CanvasImage(width,height,format,true);
	} else {
		return new kha_WebGLImage(width,height,format,true,depthStencil);
	}
};
kha_Image.fromImage = function(image,readable) {
	if(kha_SystemImpl.gl == null) {
		var img = new kha_CanvasImage(image.width,image.height,kha_graphics4_TextureFormat.RGBA32,false);
		img.image = image;
		img.createTexture();
		return img;
	} else {
		var img1 = new kha_WebGLImage(image.width,image.height,kha_graphics4_TextureFormat.RGBA32,false,0);
		img1.image = image;
		img1.createTexture();
		return img1;
	}
};
kha_Image.fromBytes = function(bytes,width,height,format,usage) {
	if(format == null) {
		format = kha_graphics4_TextureFormat.RGBA32;
	}
	if(usage == null) {
		usage = kha_graphics4_Usage.StaticUsage;
	}
	if(kha_SystemImpl.gl != null) {
		var img = new kha_WebGLImage(width,height,format,false,0);
		img.image = img.bytesToArray(bytes);
		img.createTexture();
		return img;
	}
	return null;
};
kha_Image.fromBytes3D = function(bytes,width,height,depth,format,usage) {
	return null;
};
kha_Image.fromEncodedBytes = function(bytes,fileExtention,doneCallback,errorCallback,readable) {
	if(readable == null) {
		readable = false;
	}
	var dataUrl = "data:image;base64," + haxe_crypto_Base64.encode(bytes);
	var imageElement = js_Boot.__cast(window.document.createElement("img") , HTMLImageElement);
	imageElement.onload = function() {
		var tmp = kha_Image.fromImage(imageElement,readable);
		doneCallback(tmp);
	};
	imageElement.onerror = function() {
		errorCallback("Image was not created");
	};
	imageElement.src = dataUrl;
};
kha_Image.fromVideo = function(video) {
	if(kha_SystemImpl.gl == null) {
		var img = new kha_CanvasImage(video.element.videoWidth,video.element.videoHeight,kha_graphics4_TextureFormat.RGBA32,false);
		img.video = video.element;
		img.createTexture();
		return img;
	} else {
		var img1 = new kha_WebGLImage(video.element.videoWidth,video.element.videoHeight,kha_graphics4_TextureFormat.RGBA32,false,0);
		img1.video = video.element;
		img1.createTexture();
		return img1;
	}
};
kha_Image.get_maxSize = function() {
	if(kha_SystemImpl.gl == null) {
		return 8192;
	} else {
		return kha_SystemImpl.gl.getParameter(3379);
	}
};
kha_Image.get_nonPow2Supported = function() {
	return kha_SystemImpl.gl != null;
};
kha_Image.prototype = {
	isOpaque: function(x,y) {
		return false;
	}
	,at: function(x,y) {
		return -16777216;
	}
	,unload: function() {
	}
	,lock: function(level) {
		if(level == null) {
			level = 0;
		}
		return null;
	}
	,unlock: function() {
	}
	,getPixels: function() {
		return null;
	}
	,generateMipmaps: function(levels) {
	}
	,setMipmaps: function(mipmaps) {
	}
	,setDepthStencilFrom: function(image) {
	}
	,clear: function(x,y,z,width,height,depth,color) {
	}
	,width: null
	,get_width: function() {
		return 0;
	}
	,height: null
	,get_height: function() {
		return 0;
	}
	,depth: null
	,get_depth: function() {
		return 1;
	}
	,realWidth: null
	,get_realWidth: function() {
		return 0;
	}
	,realHeight: null
	,get_realHeight: function() {
		return 0;
	}
	,g1: null
	,get_g1: function() {
		return null;
	}
	,g2: null
	,get_g2: function() {
		return null;
	}
	,g4: null
	,get_g4: function() {
		return null;
	}
	,__class__: kha_Image
};
var kha_CanvasImage = function(width,height,format,renderTarget) {
	this.g2canvas = null;
	this.myWidth = width;
	this.myHeight = height;
	this.format = format;
	this.renderTarget = renderTarget;
	this.image = null;
	this.video = null;
	if(renderTarget) {
		this.createTexture();
	}
};
$hxClasses["kha.CanvasImage"] = kha_CanvasImage;
kha_CanvasImage.__name__ = true;
kha_CanvasImage.init = function() {
	var canvas = window.document.createElement("canvas");
	if(canvas != null) {
		kha_CanvasImage.context = canvas.getContext("2d");
		canvas.width = 2048;
		canvas.height = 2048;
		kha_CanvasImage.context.globalCompositeOperation = "copy";
	}
};
kha_CanvasImage.upperPowerOfTwo = function(v) {
	--v;
	v |= v >>> 1;
	v |= v >>> 2;
	v |= v >>> 4;
	v |= v >>> 8;
	v |= v >>> 16;
	return ++v;
};
kha_CanvasImage.__super__ = kha_Image;
kha_CanvasImage.prototype = $extend(kha_Image.prototype,{
	image: null
	,video: null
	,data: null
	,myWidth: null
	,myHeight: null
	,format: null
	,renderTarget: null
	,frameBuffer: null
	,graphics1: null
	,g2canvas: null
	,get_g1: function() {
		if(this.graphics1 == null) {
			this.graphics1 = new kha_graphics2_Graphics1(this);
		}
		return this.graphics1;
	}
	,get_g2: function() {
		if(this.g2canvas == null) {
			var canvas = window.document.createElement("canvas");
			this.image = canvas;
			var context = canvas.getContext("2d");
			canvas.width = this.get_width();
			canvas.height = this.get_height();
			this.g2canvas = new kha_js_CanvasGraphics(context);
		}
		return this.g2canvas;
	}
	,get_g4: function() {
		return null;
	}
	,get_width: function() {
		return this.myWidth;
	}
	,get_height: function() {
		return this.myHeight;
	}
	,get_realWidth: function() {
		return this.myWidth;
	}
	,get_realHeight: function() {
		return this.myHeight;
	}
	,isOpaque: function(x,y) {
		if(this.data == null) {
			if(kha_CanvasImage.context == null) {
				return true;
			} else {
				this.createImageData();
			}
		}
		return this.data.data[y * (this.image.width | 0) * 4 + x * 4 + 3] != 0;
	}
	,at: function(x,y) {
		if(this.data == null) {
			if(kha_CanvasImage.context == null) {
				return -16777216;
			} else {
				this.createImageData();
			}
		}
		return kha__$Color_Color_$Impl_$._new(this.data.data[y * (this.image.width | 0) * 4 + x * 4]);
	}
	,createImageData: function() {
		kha_CanvasImage.context.strokeStyle = "rgba(0,0,0,0)";
		kha_CanvasImage.context.fillStyle = "rgba(0,0,0,0)";
		kha_CanvasImage.context.fillRect(0,0,this.image.width,this.image.height);
		kha_CanvasImage.context.drawImage(this.image,0,0,this.image.width,this.image.height,0,0,this.image.width,this.image.height);
		this.data = kha_CanvasImage.context.getImageData(0,0,this.image.width,this.image.height);
	}
	,texture: null
	,createTexture: function() {
		if(kha_SystemImpl.gl == null) {
			return;
		}
		this.texture = kha_SystemImpl.gl.createTexture();
		kha_SystemImpl.gl.bindTexture(3553,this.texture);
		kha_SystemImpl.gl.texParameteri(3553,10240,9729);
		kha_SystemImpl.gl.texParameteri(3553,10241,9729);
		kha_SystemImpl.gl.texParameteri(3553,10242,33071);
		kha_SystemImpl.gl.texParameteri(3553,10243,33071);
		if(this.renderTarget) {
			this.frameBuffer = kha_SystemImpl.gl.createFramebuffer();
			kha_SystemImpl.gl.bindFramebuffer(36160,this.frameBuffer);
			kha_SystemImpl.gl.texImage2D(3553,0,6408,this.get_realWidth(),this.get_realHeight(),0,6408,5121,null);
			kha_SystemImpl.gl.framebufferTexture2D(36160,36064,3553,this.texture,0);
			kha_SystemImpl.gl.bindFramebuffer(36160,null);
		} else if(this.video != null) {
			kha_SystemImpl.gl.texImage2D(3553,0,6408,6408,5121,this.video);
		} else {
			kha_SystemImpl.gl.texImage2D(3553,0,6408,6408,5121,this.image);
		}
		kha_SystemImpl.gl.bindTexture(3553,null);
	}
	,set: function(stage) {
		kha_SystemImpl.gl.activeTexture(33984 + stage);
		kha_SystemImpl.gl.bindTexture(3553,this.texture);
		if(this.video != null) {
			kha_SystemImpl.gl.texImage2D(3553,0,6408,6408,5121,this.video);
		}
	}
	,bytes: null
	,lock: function(level) {
		if(level == null) {
			level = 0;
		}
		this.bytes = new haxe_io_Bytes(new ArrayBuffer(this.format == kha_graphics4_TextureFormat.RGBA32 ? 4 * this.get_width() * this.get_height() : this.get_width() * this.get_height()));
		return this.bytes;
	}
	,unlock: function() {
		if(kha_SystemImpl.gl != null) {
			this.texture = kha_SystemImpl.gl.createTexture();
			kha_SystemImpl.gl.bindTexture(3553,this.texture);
			kha_SystemImpl.gl.texParameteri(3553,10240,9729);
			kha_SystemImpl.gl.texParameteri(3553,10241,9729);
			kha_SystemImpl.gl.texParameteri(3553,10242,33071);
			kha_SystemImpl.gl.texParameteri(3553,10243,33071);
			kha_SystemImpl.gl.texImage2D(3553,0,6409,this.get_width(),this.get_height(),0,6409,5121,new Uint8Array(this.bytes.b.bufferValue));
			if(kha_SystemImpl.gl.getError() == 1282) {
				var rgbaBytes = new haxe_io_Bytes(new ArrayBuffer(this.get_width() * this.get_height() * 4));
				var _g1 = 0;
				var _g = this.get_height();
				while(_g1 < _g) {
					var y = _g1++;
					var _g3 = 0;
					var _g2 = this.get_width();
					while(_g3 < _g2) {
						var x = _g3++;
						var _this = this.bytes;
						var pos = y * this.get_width() + x;
						var value = _this.b[pos];
						var pos1 = y * this.get_width() * 4 + x * 4;
						rgbaBytes.b[pos1] = value & 255;
						var pos2 = y * this.get_width() * 4 + x * 4 + 1;
						rgbaBytes.b[pos2] = value & 255;
						var pos3 = y * this.get_width() * 4 + x * 4 + 2;
						rgbaBytes.b[pos3] = value & 255;
						var pos4 = y * this.get_width() * 4 + x * 4 + 3;
						rgbaBytes.b[pos4] = 255;
					}
				}
				kha_SystemImpl.gl.texImage2D(3553,0,6408,this.get_width(),this.get_height(),0,6408,5121,new Uint8Array(rgbaBytes.b.bufferValue));
			}
			kha_SystemImpl.gl.bindTexture(3553,null);
			this.bytes = null;
		}
	}
	,unload: function() {
		this.image = null;
		this.video = null;
		this.data = null;
	}
	,__class__: kha_CanvasImage
});
var kha__$Color_Color_$Impl_$ = $hx_exports["kha"]["_Color"]["Color_Impl_"] = {};
$hxClasses["kha._Color.Color_Impl_"] = kha__$Color_Color_$Impl_$;
kha__$Color_Color_$Impl_$.__name__ = true;
kha__$Color_Color_$Impl_$.fromValue = function(value) {
	return kha__$Color_Color_$Impl_$._new(value);
};
kha__$Color_Color_$Impl_$.fromBytes = function(r,g,b,a) {
	if(a == null) {
		a = 255;
	}
	return kha__$Color_Color_$Impl_$._new(a << 24 | r << 16 | g << 8 | b);
};
kha__$Color_Color_$Impl_$.fromFloats = function(r,g,b,a) {
	if(a == null) {
		a = 1;
	}
	return kha__$Color_Color_$Impl_$._new((a * 255 | 0) << 24 | (r * 255 | 0) << 16 | (g * 255 | 0) << 8 | (b * 255 | 0));
};
kha__$Color_Color_$Impl_$.fromString = function(value) {
	if((value.length == 7 || value.length == 9) && value.charCodeAt(0) == 35) {
		var colorValue = Std.parseInt("0x" + HxOverrides.substr(value,1,null));
		if(value.length == 7) {
			colorValue += -16777216;
		}
		return kha__$Color_Color_$Impl_$._new(colorValue);
	} else {
		throw new js__$Boot_HaxeError("Invalid Color string: '" + value + "'");
	}
};
kha__$Color_Color_$Impl_$._new = function(value) {
	var this1 = value;
	return this1;
};
kha__$Color_Color_$Impl_$.get_value = function(this1) {
	return this1;
};
kha__$Color_Color_$Impl_$.set_value = function(this1,value) {
	this1 = value;
	return this1;
};
kha__$Color_Color_$Impl_$.get_Rb = function(this1) {
	return (this1 & 16711680) >>> 16;
};
kha__$Color_Color_$Impl_$.get_Gb = function(this1) {
	return (this1 & 65280) >>> 8;
};
kha__$Color_Color_$Impl_$.get_Bb = function(this1) {
	return this1 & 255;
};
kha__$Color_Color_$Impl_$.get_Ab = function(this1) {
	return this1 >>> 24;
};
kha__$Color_Color_$Impl_$.set_Rb = function(this1,i) {
	this1 = this1 >>> 24 << 24 | i << 16 | (this1 & 65280) >>> 8 << 8 | this1 & 255;
	return i;
};
kha__$Color_Color_$Impl_$.set_Gb = function(this1,i) {
	this1 = this1 >>> 24 << 24 | (this1 & 16711680) >>> 16 << 16 | i << 8 | this1 & 255;
	return i;
};
kha__$Color_Color_$Impl_$.set_Bb = function(this1,i) {
	this1 = this1 >>> 24 << 24 | (this1 & 16711680) >>> 16 << 16 | (this1 & 65280) >>> 8 << 8 | i;
	return i;
};
kha__$Color_Color_$Impl_$.set_Ab = function(this1,i) {
	this1 = i << 24 | (this1 & 16711680) >>> 16 << 16 | (this1 & 65280) >>> 8 << 8 | this1 & 255;
	return i;
};
kha__$Color_Color_$Impl_$.get_R = function(this1) {
	return ((this1 & 16711680) >>> 16) * 0.00392156862745098;
};
kha__$Color_Color_$Impl_$.get_G = function(this1) {
	return ((this1 & 65280) >>> 8) * 0.00392156862745098;
};
kha__$Color_Color_$Impl_$.get_B = function(this1) {
	return (this1 & 255) * 0.00392156862745098;
};
kha__$Color_Color_$Impl_$.get_A = function(this1) {
	return (this1 >>> 24) * 0.00392156862745098;
};
kha__$Color_Color_$Impl_$.set_R = function(this1,f) {
	this1 = ((this1 >>> 24) * 0.00392156862745098 * 255 | 0) << 24 | (f * 255 | 0) << 16 | (((this1 & 65280) >>> 8) * 0.00392156862745098 * 255 | 0) << 8 | ((this1 & 255) * 0.00392156862745098 * 255 | 0);
	return f;
};
kha__$Color_Color_$Impl_$.set_G = function(this1,f) {
	this1 = ((this1 >>> 24) * 0.00392156862745098 * 255 | 0) << 24 | (((this1 & 16711680) >>> 16) * 0.00392156862745098 * 255 | 0) << 16 | (f * 255 | 0) << 8 | ((this1 & 255) * 0.00392156862745098 * 255 | 0);
	return f;
};
kha__$Color_Color_$Impl_$.set_B = function(this1,f) {
	this1 = ((this1 >>> 24) * 0.00392156862745098 * 255 | 0) << 24 | (((this1 & 16711680) >>> 16) * 0.00392156862745098 * 255 | 0) << 16 | (((this1 & 65280) >>> 8) * 0.00392156862745098 * 255 | 0) << 8 | (f * 255 | 0);
	return f;
};
kha__$Color_Color_$Impl_$.set_A = function(this1,f) {
	this1 = (f * 255 | 0) << 24 | (((this1 & 16711680) >>> 16) * 0.00392156862745098 * 255 | 0) << 16 | (((this1 & 65280) >>> 8) * 0.00392156862745098 * 255 | 0) << 8 | ((this1 & 255) * 0.00392156862745098 * 255 | 0);
	return f;
};
var kha_CompilerDefines = function() { };
$hxClasses["kha.CompilerDefines"] = kha_CompilerDefines;
kha_CompilerDefines.__name__ = true;
var kha_EnvironmentVariables = function() {
};
$hxClasses["kha.EnvironmentVariables"] = kha_EnvironmentVariables;
kha_EnvironmentVariables.__name__ = true;
kha_EnvironmentVariables.prototype = {
	getVariable: function(name) {
		return "";
	}
	,__class__: kha_EnvironmentVariables
};
var kha_Font = function() { };
$hxClasses["kha.Font"] = kha_Font;
kha_Font.__name__ = true;
kha_Font.__interfaces__ = [kha_Resource];
kha_Font.prototype = {
	height: null
	,width: null
	,widthOfCharacters: null
	,baseline: null
	,__class__: kha_Font
};
var kha_FontStyle = function(bold,italic,underlined) {
	this.bold = bold;
	this.italic = italic;
	this.underlined = underlined;
};
$hxClasses["kha.FontStyle"] = kha_FontStyle;
kha_FontStyle.__name__ = true;
kha_FontStyle.prototype = {
	bold: null
	,italic: null
	,underlined: null
	,getBold: function() {
		return this.bold;
	}
	,getItalic: function() {
		return this.italic;
	}
	,getUnderlined: function() {
		return this.underlined;
	}
	,__class__: kha_FontStyle
};
var kha_Framebuffer = function(windowId,g1,g2,g4) {
	this.windowId = windowId;
	this.graphics1 = g1;
	this.graphics2 = g2;
	this.graphics4 = g4;
};
$hxClasses["kha.Framebuffer"] = kha_Framebuffer;
kha_Framebuffer.__name__ = true;
kha_Framebuffer.__interfaces__ = [kha_Canvas];
kha_Framebuffer.prototype = {
	windowId: null
	,graphics1: null
	,graphics2: null
	,graphics4: null
	,init: function(g1,g2,g4) {
		this.graphics1 = g1;
		this.graphics2 = g2;
		this.graphics4 = g4;
	}
	,g1: null
	,get_g1: function() {
		return this.graphics1;
	}
	,g2: null
	,get_g2: function() {
		return this.graphics2;
	}
	,g4: null
	,get_g4: function() {
		return this.graphics4;
	}
	,width: null
	,get_width: function() {
		return kha_System.windowWidth(this.windowId);
	}
	,height: null
	,get_height: function() {
		return kha_System.windowHeight(this.windowId);
	}
	,__class__: kha_Framebuffer
};
var kha_AlignedQuad = function() {
};
$hxClasses["kha.AlignedQuad"] = kha_AlignedQuad;
kha_AlignedQuad.__name__ = true;
kha_AlignedQuad.prototype = {
	x0: null
	,y0: null
	,s0: null
	,t0: null
	,x1: null
	,y1: null
	,s1: null
	,t1: null
	,xadvance: null
	,__class__: kha_AlignedQuad
};
var kha_KravurImage = function(size,ascent,descent,lineGap,width,height,chars,pixels) {
	this.mySize = size;
	this.width = width;
	this.height = height;
	this.chars = chars;
	this.baseline = ascent;
	var _g = 0;
	while(_g < chars.length) {
		var $char = chars[_g];
		++_g;
		$char.yoff += this.baseline;
	}
	this.texture = kha_Image.create(width,height,kha_graphics4_TextureFormat.L8);
	var bytes = this.texture.lock();
	var pos = 0;
	var _g1 = 0;
	var _g2 = height;
	while(_g1 < _g2) {
		var y = _g1++;
		var _g3 = 0;
		var _g21 = width;
		while(_g3 < _g21) {
			var x = _g3++;
			var v = pixels.readU8(pos);
			bytes.b[pos] = v & 255;
			++pos;
		}
	}
	this.texture.unlock();
};
$hxClasses["kha.KravurImage"] = kha_KravurImage;
kha_KravurImage.__name__ = true;
kha_KravurImage.prototype = {
	mySize: null
	,chars: null
	,texture: null
	,width: null
	,height: null
	,baseline: null
	,getTexture: function() {
		return this.texture;
	}
	,getBakedQuad: function(char_index,xpos,ypos) {
		if(char_index >= this.chars.length) {
			return null;
		}
		var ipw = 1.0 / this.width;
		var iph = 1.0 / this.height;
		var b = this.chars[char_index];
		if(b == null) {
			return null;
		}
		var round_x = Math.round(xpos + b.xoff);
		var round_y = Math.round(ypos + b.yoff);
		var q = new kha_AlignedQuad();
		q.x0 = round_x;
		q.y0 = round_y;
		q.x1 = round_x + b.x1 - b.x0;
		q.y1 = round_y + b.y1 - b.y0;
		q.s0 = b.x0 * ipw;
		q.t0 = b.y0 * iph;
		q.s1 = b.x1 * ipw;
		q.t1 = b.y1 * iph;
		q.xadvance = b.xadvance;
		return q;
	}
	,getCharWidth: function(charIndex) {
		if(charIndex < 32) {
			return 0;
		}
		if(charIndex - 32 >= this.chars.length) {
			return 0;
		}
		return this.chars[charIndex - 32].xadvance;
	}
	,getHeight: function() {
		return this.mySize;
	}
	,stringWidth: function(string) {
		var str = new String(string);
		var width = 0;
		var _g1 = 0;
		var _g = str.length;
		while(_g1 < _g) {
			var c = _g1++;
			width += this.getCharWidth(HxOverrides.cca(str,c));
		}
		return width;
	}
	,charactersWidth: function(characters,start,length) {
		var width = 0;
		var _g1 = start;
		var _g = start + length;
		while(_g1 < _g) {
			var i = _g1++;
			width += this.getCharWidth(characters[i]);
		}
		return width;
	}
	,getBaselinePosition: function() {
		return this.baseline;
	}
	,__class__: kha_KravurImage
};
var kha_Kravur = function(blob) {
	this.images = new haxe_ds_IntMap();
	this.blob = blob;
};
$hxClasses["kha.Kravur"] = kha_Kravur;
kha_Kravur.__name__ = true;
kha_Kravur.__interfaces__ = [kha_Font];
kha_Kravur.prototype = {
	blob: null
	,images: null
	,_get: function(fontSize,glyphs) {
		if(!this.images.h.hasOwnProperty(fontSize)) {
			if(glyphs == null) {
				glyphs = [];
				var _g = 32;
				while(_g < 256) {
					var i = _g++;
					glyphs.push(i);
				}
			}
			var width = 64;
			var height = 32;
			var length = glyphs.length;
			var this1 = new Array(length);
			var baked = this1;
			var _g1 = 0;
			var _g2 = baked.length;
			while(_g1 < _g2) {
				var i1 = _g1++;
				baked[i1] = new kha_graphics2_truetype_Stbtt_$bakedchar();
			}
			var pixels = null;
			var status = -1;
			while(status < 0) {
				if(height < width) {
					height *= 2;
				} else {
					width *= 2;
				}
				pixels = kha_internal_BytesBlob.alloc(width * height);
				status = kha_graphics2_truetype_StbTruetype.stbtt_BakeFontBitmap(this.blob,0,fontSize,pixels,width,height,glyphs,baked);
			}
			var info = new kha_graphics2_truetype_Stbtt_$fontinfo();
			kha_graphics2_truetype_StbTruetype.stbtt_InitFont(info,this.blob,0);
			var metrics = kha_graphics2_truetype_StbTruetype.stbtt_GetFontVMetrics(info);
			var scale = kha_graphics2_truetype_StbTruetype.stbtt_ScaleForPixelHeight(info,fontSize);
			var ascent = Math.round(metrics.ascent * scale);
			var descent = Math.round(metrics.descent * scale);
			var lineGap = Math.round(metrics.lineGap * scale);
			var image = new kha_KravurImage(fontSize | 0,ascent,descent,lineGap,width,height,baked,pixels);
			this.images.h[fontSize] = image;
			return image;
		}
		return this.images.h[fontSize];
	}
	,height: function(fontSize) {
		return this._get(fontSize).getHeight();
	}
	,width: function(fontSize,str) {
		return this._get(fontSize).stringWidth(str);
	}
	,widthOfCharacters: function(fontSize,characters,start,length) {
		return this._get(fontSize).charactersWidth(characters,start,length);
	}
	,baseline: function(fontSize) {
		return this._get(fontSize).getBaselinePosition();
	}
	,unload: function() {
		this.blob = null;
		this.images = null;
	}
	,__class__: kha_Kravur
};
var kha_LoaderImpl = function() { };
$hxClasses["kha.LoaderImpl"] = kha_LoaderImpl;
kha_LoaderImpl.__name__ = true;
kha_LoaderImpl.getImageFormats = function() {
	return ["png","jpg","hdr"];
};
kha_LoaderImpl.loadImageFromDescription = function(desc,done) {
	var readable = Object.prototype.hasOwnProperty.call(desc,"readable") && desc.readable;
	if(StringTools.endsWith(desc.files[0],".hdr")) {
		kha_LoaderImpl.loadBlobFromDescription(desc,function(blob) {
			var hdrImage = kha_internal_HdrFormat.parse(blob.toBytes());
			var tmp = kha_Image.fromBytes(haxe_io_Bytes.ofData(hdrImage.data.buffer),hdrImage.width,hdrImage.height,kha_graphics4_TextureFormat.RGBA128,readable ? kha_graphics4_Usage.DynamicUsage : kha_graphics4_Usage.StaticUsage);
			done(tmp);
		});
	} else {
		var img = window.document.createElement("img");
		img.onload = function(event) {
			var tmp1 = kha_Image.fromImage(img,readable);
			done(tmp1);
		};
		img.src = desc.files[0];
		img.crossOrigin = "";
	}
};
kha_LoaderImpl.getSoundFormats = function() {
	var element = window.document.createElement("audio");
	var formats = [];
	if(element.canPlayType("audio/mp4") != "") {
		formats.push("mp4");
	}
	if(kha_SystemImpl._hasWebAudio || element.canPlayType("audio/ogg") != "") {
		formats.push("ogg");
	}
	return formats;
};
kha_LoaderImpl.loadSoundFromDescription = function(desc,done) {
	if(kha_SystemImpl._hasWebAudio) {
		var element = window.document.createElement("audio");
		if(element.canPlayType("audio/mp4") != "") {
			var _g1 = 0;
			var _g = desc.files.length;
			while(_g1 < _g) {
				var i = _g1++;
				var file = desc.files[i];
				if(StringTools.endsWith(file,".mp4")) {
					new kha_js_WebAudioSound(file,done);
					return;
				}
			}
		}
		var _g11 = 0;
		var _g2 = desc.files.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			var file1 = desc.files[i1];
			if(StringTools.endsWith(file1,".ogg")) {
				new kha_js_WebAudioSound(file1,done);
				return;
			}
		}
	} else if(kha_SystemImpl.mobile) {
		var element1 = window.document.createElement("audio");
		if(element1.canPlayType("audio/mp4") != "") {
			var _g12 = 0;
			var _g3 = desc.files.length;
			while(_g12 < _g3) {
				var i2 = _g12++;
				var file2 = desc.files[i2];
				if(StringTools.endsWith(file2,".mp4")) {
					new kha_js_MobileWebAudioSound(file2,done);
					return;
				}
			}
		}
		var _g13 = 0;
		var _g4 = desc.files.length;
		while(_g13 < _g4) {
			var i3 = _g13++;
			var file3 = desc.files[i3];
			if(StringTools.endsWith(file3,".ogg")) {
				new kha_js_MobileWebAudioSound(file3,done);
				return;
			}
		}
	} else {
		new kha_js_Sound(desc.files,done);
	}
};
kha_LoaderImpl.getVideoFormats = function() {
	return ["mp4","webm"];
};
kha_LoaderImpl.loadVideoFromDescription = function(desc,done) {
	kha_js_Video.fromFile(desc.files,done);
};
kha_LoaderImpl.loadBlobFromDescription = function(desc,done) {
	var request = new XMLHttpRequest();
	request.open("GET",desc.files[0],true);
	request.responseType = "arraybuffer";
	request.onreadystatechange = function() {
		if(request.readyState != 4) {
			return;
		}
		if(request.status >= 200 && request.status < 400 || request.status == 0 && request.statusText == "") {
			var bytes = null;
			var arrayBuffer = request.response;
			if(arrayBuffer != null) {
				var byteArray = new Uint8Array(arrayBuffer);
				bytes = haxe_io_Bytes.ofData(byteArray);
			} else if(request.responseBody != null) {
				var data = VBArray(request.responseBody).toArray();
				bytes = new haxe_io_Bytes(new ArrayBuffer(data.length));
				var _g1 = 0;
				var _g = data.length;
				while(_g1 < _g) {
					var i = _g1++;
					bytes.b[i] = data[i] & 255;
				}
			} else {
				haxe_Log.trace("Error loading " + desc.files[0],{ fileName : "LoaderImpl.hx", lineNumber : 145, className : "kha.LoaderImpl", methodName : "loadBlobFromDescription"});
				window.console.log("loadBlob failed");
			}
			done(new kha_internal_BytesBlob(bytes));
		} else {
			haxe_Log.trace("Error loading " + desc.files[0],{ fileName : "LoaderImpl.hx", lineNumber : 151, className : "kha.LoaderImpl", methodName : "loadBlobFromDescription"});
			window.console.log("loadBlob failed");
		}
	};
	request.send(null);
};
kha_LoaderImpl.loadFontFromDescription = function(desc,done) {
	kha_LoaderImpl.loadBlobFromDescription(desc,function(blob) {
		if(kha_SystemImpl.gl == null) {
			done(new kha_js_Font(new kha_Kravur(blob)));
		} else {
			done(new kha_Kravur(blob));
		}
	});
};
var kha_Rotation = function(center,angle) {
	this.center = center;
	this.angle = angle;
};
$hxClasses["kha.Rotation"] = kha_Rotation;
kha_Rotation.__name__ = true;
kha_Rotation.prototype = {
	center: null
	,angle: null
	,__class__: kha_Rotation
};
var kha_TimeTask = function() {
};
$hxClasses["kha.TimeTask"] = kha_TimeTask;
kha_TimeTask.__name__ = true;
kha_TimeTask.prototype = {
	task: null
	,start: null
	,period: null
	,duration: null
	,next: null
	,id: null
	,groupId: null
	,active: null
	,paused: null
	,__class__: kha_TimeTask
};
var kha_FrameTask = function(task,priority,id) {
	this.task = task;
	this.priority = priority;
	this.id = id;
	this.active = true;
	this.paused = false;
};
$hxClasses["kha.FrameTask"] = kha_FrameTask;
kha_FrameTask.__name__ = true;
kha_FrameTask.prototype = {
	task: null
	,priority: null
	,id: null
	,active: null
	,paused: null
	,__class__: kha_FrameTask
};
var kha_Scheduler = function() { };
$hxClasses["kha.Scheduler"] = kha_Scheduler;
kha_Scheduler.__name__ = true;
kha_Scheduler.init = function() {
	kha_Scheduler.deltas = [];
	var _g1 = 0;
	var _g = kha_Scheduler.DIF_COUNT;
	while(_g1 < _g) {
		var i = _g1++;
		kha_Scheduler.deltas[i] = 0;
	}
	kha_Scheduler.stopped = true;
	kha_Scheduler.frame_tasks_sorted = true;
	kha_Scheduler.current = kha_Scheduler.lastTime = kha_Scheduler.realTime();
	kha_Scheduler.currentFrameTaskId = 0;
	kha_Scheduler.currentTimeTaskId = 0;
	kha_Scheduler.currentGroupId = 0;
	kha_Scheduler.timeTasks = [];
	kha_Scheduler.pausedTimeTasks = [];
	kha_Scheduler.outdatedTimeTasks = [];
	kha_Scheduler.timeTasksScratchpad = [];
	kha_Scheduler.frameTasks = [];
	kha_Scheduler.toDeleteFrame = [];
};
kha_Scheduler.start = function(restartTimers) {
	if(restartTimers == null) {
		restartTimers = false;
	}
	kha_Scheduler.vsync = kha_System.get_vsync();
	var hz = kha_System.get_refreshRate();
	if(hz >= 57 && hz <= 63) {
		hz = 60;
	}
	kha_Scheduler.onedifhz = 1.0 / hz;
	kha_Scheduler.stopped = false;
	kha_Scheduler.resetTime();
	kha_Scheduler.lastTime = kha_Scheduler.realTime() - kha_Scheduler.startTime;
	var _g1 = 0;
	var _g = kha_Scheduler.DIF_COUNT;
	while(_g1 < _g) {
		var i = _g1++;
		kha_Scheduler.deltas[i] = 0;
	}
	if(restartTimers) {
		var _g2 = 0;
		var _g11 = kha_Scheduler.timeTasks;
		while(_g2 < _g11.length) {
			var timeTask = _g11[_g2];
			++_g2;
			timeTask.paused = false;
		}
		var _g3 = 0;
		var _g12 = kha_Scheduler.frameTasks;
		while(_g3 < _g12.length) {
			var frameTask = _g12[_g3];
			++_g3;
			frameTask.paused = false;
		}
	}
};
kha_Scheduler.stop = function() {
	kha_Scheduler.stopped = true;
};
kha_Scheduler.isStopped = function() {
	return kha_Scheduler.stopped;
};
kha_Scheduler.warpTimeTasks = function(time,tasks) {
	var _g = 0;
	while(_g < tasks.length) {
		var timeTask = tasks[_g];
		++_g;
		if(timeTask.start >= time) {
			timeTask.next = timeTask.start;
		} else if(timeTask.period > 0) {
			var sinceStart = time - timeTask.start;
			var times = Math.ceil(sinceStart / timeTask.period);
			timeTask.next = timeTask.start + times * timeTask.period;
		}
	}
};
kha_Scheduler.back = function(time) {
	if(time >= kha_Scheduler.lastTime) {
		return;
	}
	kha_Scheduler.current = time;
	kha_Scheduler.lastTime = time;
	kha_Scheduler.warpTimeTasks(time,kha_Scheduler.outdatedTimeTasks);
	kha_Scheduler.warpTimeTasks(time,kha_Scheduler.timeTasks);
	var _g = 0;
	var _g1 = kha_Scheduler.outdatedTimeTasks;
	while(_g < _g1.length) {
		var task = _g1[_g];
		++_g;
		if(task.next >= time) {
			kha_Scheduler.timeTasksScratchpad.push(task);
		}
	}
	var _g2 = 0;
	var _g11 = kha_Scheduler.timeTasksScratchpad;
	while(_g2 < _g11.length) {
		var task1 = _g11[_g2];
		++_g2;
		HxOverrides.remove(kha_Scheduler.outdatedTimeTasks,task1);
	}
	var _g3 = 0;
	var _g12 = kha_Scheduler.timeTasksScratchpad;
	while(_g3 < _g12.length) {
		var task2 = _g12[_g3];
		++_g3;
		kha_Scheduler.insertSorted(kha_Scheduler.timeTasks,task2);
	}
	while(kha_Scheduler.timeTasksScratchpad.length > 0) HxOverrides.remove(kha_Scheduler.timeTasksScratchpad,kha_Scheduler.timeTasksScratchpad[0]);
	var _g4 = 0;
	var _g13 = kha_Scheduler.outdatedTimeTasks;
	while(_g4 < _g13.length) {
		var task3 = _g13[_g4];
		++_g4;
		if(task3.next < time - 1.0) {
			kha_Scheduler.timeTasksScratchpad.push(task3);
		}
	}
	var _g5 = 0;
	var _g14 = kha_Scheduler.timeTasksScratchpad;
	while(_g5 < _g14.length) {
		var task4 = _g14[_g5];
		++_g5;
		HxOverrides.remove(kha_Scheduler.outdatedTimeTasks,task4);
	}
	while(kha_Scheduler.timeTasksScratchpad.length > 0) HxOverrides.remove(kha_Scheduler.timeTasksScratchpad,kha_Scheduler.timeTasksScratchpad[0]);
};
kha_Scheduler.executeFrame = function() {
	var now = kha_Scheduler.realTime() - kha_Scheduler.startTime;
	var delta = now - kha_Scheduler.lastTime;
	var frameEnd = kha_Scheduler.current;
	if(delta < 0) {
		return;
	}
	if(delta > kha_Scheduler.maxframetime) {
		kha_Scheduler.startTime += delta - kha_Scheduler.maxframetime;
		delta = kha_Scheduler.maxframetime;
		frameEnd += delta;
	} else if(kha_Scheduler.vsync) {
		var realdif = kha_Scheduler.onedifhz;
		while(realdif < delta - kha_Scheduler.onedifhz) realdif += kha_Scheduler.onedifhz;
		delta = realdif;
		var _g1 = 0;
		var _g = kha_Scheduler.DIF_COUNT - 2;
		while(_g1 < _g) {
			var i = _g1++;
			delta += kha_Scheduler.deltas[i];
			kha_Scheduler.deltas[i] = kha_Scheduler.deltas[i + 1];
		}
		delta += kha_Scheduler.deltas[kha_Scheduler.DIF_COUNT - 2];
		delta /= kha_Scheduler.DIF_COUNT;
		kha_Scheduler.deltas[kha_Scheduler.DIF_COUNT - 2] = realdif;
		frameEnd += delta;
	} else {
		var _g11 = 0;
		var _g2 = kha_Scheduler.DIF_COUNT - 1;
		while(_g11 < _g2) {
			var i1 = _g11++;
			kha_Scheduler.deltas[i1] = kha_Scheduler.deltas[i1 + 1];
		}
		kha_Scheduler.deltas[kha_Scheduler.DIF_COUNT - 1] = delta;
		var next = 0;
		var _g12 = 0;
		var _g3 = kha_Scheduler.DIF_COUNT;
		while(_g12 < _g3) {
			var i2 = _g12++;
			next += kha_Scheduler.deltas[i2];
		}
		next /= kha_Scheduler.DIF_COUNT;
		frameEnd += next;
	}
	kha_Scheduler.lastTime = frameEnd;
	if(!kha_Scheduler.stopped) {
		kha_Scheduler.current = frameEnd;
	}
	var _g4 = 0;
	var _g13 = kha_Scheduler.pausedTimeTasks;
	while(_g4 < _g13.length) {
		var pausedTask = _g13[_g4];
		++_g4;
		pausedTask.next += delta;
	}
	if(kha_Scheduler.stopped) {
		var _g5 = 0;
		var _g14 = kha_Scheduler.timeTasks;
		while(_g5 < _g14.length) {
			var timeTask = _g14[_g5];
			++_g5;
			timeTask.next += delta;
		}
	}
	while(kha_Scheduler.timeTasks.length > 0) {
		kha_Scheduler.activeTimeTask = kha_Scheduler.timeTasks[0];
		if(kha_Scheduler.activeTimeTask.next <= frameEnd) {
			kha_Scheduler.activeTimeTask.next += kha_Scheduler.activeTimeTask.period;
			HxOverrides.remove(kha_Scheduler.timeTasks,kha_Scheduler.activeTimeTask);
			if(kha_Scheduler.activeTimeTask.active && kha_Scheduler.activeTimeTask.task()) {
				if(kha_Scheduler.activeTimeTask.period > 0 && (kha_Scheduler.activeTimeTask.duration == 0 || kha_Scheduler.activeTimeTask.duration >= kha_Scheduler.activeTimeTask.start + kha_Scheduler.activeTimeTask.next)) {
					kha_Scheduler.insertSorted(kha_Scheduler.timeTasks,kha_Scheduler.activeTimeTask);
				} else {
					kha_Scheduler.archiveTimeTask(kha_Scheduler.activeTimeTask,frameEnd);
				}
			} else {
				kha_Scheduler.activeTimeTask.active = false;
				kha_Scheduler.archiveTimeTask(kha_Scheduler.activeTimeTask,frameEnd);
			}
		} else {
			break;
		}
	}
	kha_Scheduler.activeTimeTask = null;
	kha_Scheduler.sortFrameTasks();
	var _g6 = 0;
	var _g15 = kha_Scheduler.frameTasks;
	while(_g6 < _g15.length) {
		var frameTask = _g15[_g6];
		++_g6;
		if(!kha_Scheduler.stopped && !frameTask.paused && frameTask.active) {
			if(!frameTask.task()) {
				frameTask.active = false;
			}
		}
	}
	var _g7 = 0;
	var _g16 = kha_Scheduler.frameTasks;
	while(_g7 < _g16.length) {
		var frameTask1 = _g16[_g7];
		++_g7;
		if(!frameTask1.active) {
			kha_Scheduler.toDeleteFrame.push(frameTask1);
		}
	}
	while(kha_Scheduler.toDeleteFrame.length > 0) HxOverrides.remove(kha_Scheduler.frameTasks,kha_Scheduler.toDeleteFrame.pop());
};
kha_Scheduler.archiveTimeTask = function(timeTask,frameEnd) {
};
kha_Scheduler.time = function() {
	return kha_Scheduler.current;
};
kha_Scheduler.realTime = function() {
	return kha_System.get_time();
};
kha_Scheduler.resetTime = function() {
	var now = kha_System.get_time();
	var dif = now - kha_Scheduler.startTime;
	kha_Scheduler.startTime = now;
	var _g = 0;
	var _g1 = kha_Scheduler.timeTasks;
	while(_g < _g1.length) {
		var timeTask = _g1[_g];
		++_g;
		timeTask.start -= dif;
		timeTask.next -= dif;
	}
	var _g11 = 0;
	var _g2 = kha_Scheduler.DIF_COUNT;
	while(_g11 < _g2) {
		var i = _g11++;
		kha_Scheduler.deltas[i] = 0;
	}
	kha_Scheduler.current = 0;
	kha_Scheduler.lastTime = 0;
};
kha_Scheduler.addBreakableFrameTask = function(task,priority) {
	kha_Scheduler.frameTasks.push(new kha_FrameTask(task,priority,++kha_Scheduler.currentFrameTaskId));
	kha_Scheduler.frame_tasks_sorted = false;
	return kha_Scheduler.currentFrameTaskId;
};
kha_Scheduler.addFrameTask = function(task,priority) {
	return kha_Scheduler.addBreakableFrameTask(function() {
		task();
		return true;
	},priority);
};
kha_Scheduler.pauseFrameTask = function(id,paused) {
	var _g = 0;
	var _g1 = kha_Scheduler.frameTasks;
	while(_g < _g1.length) {
		var frameTask = _g1[_g];
		++_g;
		if(frameTask.id == id) {
			frameTask.paused = paused;
			break;
		}
	}
};
kha_Scheduler.removeFrameTask = function(id) {
	var _g = 0;
	var _g1 = kha_Scheduler.frameTasks;
	while(_g < _g1.length) {
		var frameTask = _g1[_g];
		++_g;
		if(frameTask.id == id) {
			frameTask.active = false;
			break;
		}
	}
};
kha_Scheduler.generateGroupId = function() {
	return ++kha_Scheduler.currentGroupId;
};
kha_Scheduler.addBreakableTimeTaskToGroup = function(groupId,task,start,period,duration) {
	if(duration == null) {
		duration = 0;
	}
	if(period == null) {
		period = 0;
	}
	var t = new kha_TimeTask();
	t.active = true;
	t.task = task;
	t.id = ++kha_Scheduler.currentTimeTaskId;
	t.groupId = groupId;
	t.start = kha_Scheduler.current + start;
	t.period = 0;
	if(period != 0) {
		t.period = period;
	}
	t.duration = 0;
	if(duration != 0) {
		t.duration = t.start + duration;
	}
	t.next = t.start;
	kha_Scheduler.insertSorted(kha_Scheduler.timeTasks,t);
	return t.id;
};
kha_Scheduler.addTimeTaskToGroup = function(groupId,task,start,period,duration) {
	if(duration == null) {
		duration = 0;
	}
	if(period == null) {
		period = 0;
	}
	return kha_Scheduler.addBreakableTimeTaskToGroup(groupId,function() {
		task();
		return true;
	},start,period,duration);
};
kha_Scheduler.addBreakableTimeTask = function(task,start,period,duration) {
	if(duration == null) {
		duration = 0;
	}
	if(period == null) {
		period = 0;
	}
	return kha_Scheduler.addBreakableTimeTaskToGroup(0,task,start,period,duration);
};
kha_Scheduler.addTimeTask = function(task,start,period,duration) {
	if(duration == null) {
		duration = 0;
	}
	if(period == null) {
		period = 0;
	}
	return kha_Scheduler.addTimeTaskToGroup(0,task,start,period,duration);
};
kha_Scheduler.getTimeTask = function(id) {
	if(kha_Scheduler.activeTimeTask != null && kha_Scheduler.activeTimeTask.id == id) {
		return kha_Scheduler.activeTimeTask;
	}
	var _g = 0;
	var _g1 = kha_Scheduler.timeTasks;
	while(_g < _g1.length) {
		var timeTask = _g1[_g];
		++_g;
		if(timeTask.id == id) {
			return timeTask;
		}
	}
	var _g2 = 0;
	var _g11 = kha_Scheduler.pausedTimeTasks;
	while(_g2 < _g11.length) {
		var timeTask1 = _g11[_g2];
		++_g2;
		if(timeTask1.id == id) {
			return timeTask1;
		}
	}
	return null;
};
kha_Scheduler.pauseTimeTask = function(id,paused) {
	var timeTask = kha_Scheduler.getTimeTask(id);
	if(timeTask != null) {
		kha_Scheduler.pauseRunningTimeTask(timeTask,paused);
	}
	if(kha_Scheduler.activeTimeTask != null && kha_Scheduler.activeTimeTask.id == id) {
		kha_Scheduler.activeTimeTask.paused = paused;
	}
};
kha_Scheduler.pauseRunningTimeTask = function(timeTask,paused) {
	timeTask.paused = paused;
	if(paused) {
		HxOverrides.remove(kha_Scheduler.timeTasks,timeTask);
		kha_Scheduler.pausedTimeTasks.push(timeTask);
	} else {
		kha_Scheduler.insertSorted(kha_Scheduler.timeTasks,timeTask);
		HxOverrides.remove(kha_Scheduler.pausedTimeTasks,timeTask);
	}
};
kha_Scheduler.pauseTimeTasks = function(groupId,paused) {
	var _g = 0;
	var _g1 = kha_Scheduler.timeTasks;
	while(_g < _g1.length) {
		var timeTask = _g1[_g];
		++_g;
		if(timeTask.groupId == groupId) {
			kha_Scheduler.pauseRunningTimeTask(timeTask,paused);
		}
	}
	if(kha_Scheduler.activeTimeTask != null && kha_Scheduler.activeTimeTask.groupId == groupId) {
		kha_Scheduler.activeTimeTask.paused = paused;
	}
};
kha_Scheduler.removeTimeTask = function(id) {
	var timeTask = kha_Scheduler.getTimeTask(id);
	if(timeTask != null) {
		timeTask.active = false;
		HxOverrides.remove(kha_Scheduler.timeTasks,timeTask);
	}
};
kha_Scheduler.removeTimeTasks = function(groupId) {
	var _g = 0;
	var _g1 = kha_Scheduler.timeTasks;
	while(_g < _g1.length) {
		var timeTask = _g1[_g];
		++_g;
		if(timeTask.groupId == groupId) {
			timeTask.active = false;
			kha_Scheduler.timeTasksScratchpad.push(timeTask);
		}
	}
	var _g2 = 0;
	var _g11 = kha_Scheduler.timeTasksScratchpad;
	while(_g2 < _g11.length) {
		var timeTask1 = _g11[_g2];
		++_g2;
		HxOverrides.remove(kha_Scheduler.timeTasks,timeTask1);
	}
	while(kha_Scheduler.timeTasksScratchpad.length > 0) HxOverrides.remove(kha_Scheduler.timeTasksScratchpad,kha_Scheduler.timeTasksScratchpad[0]);
	if(kha_Scheduler.activeTimeTask != null && kha_Scheduler.activeTimeTask.groupId == groupId) {
		kha_Scheduler.activeTimeTask.active = false;
	}
};
kha_Scheduler.numTasksInSchedule = function() {
	return kha_Scheduler.timeTasks.length + kha_Scheduler.frameTasks.length;
};
kha_Scheduler.insertSorted = function(list,task) {
	var _g1 = 0;
	var _g = list.length;
	while(_g1 < _g) {
		var i = _g1++;
		if(list[i].next > task.next) {
			list.splice(i,0,task);
			return;
		}
	}
	list.push(task);
};
kha_Scheduler.sortFrameTasks = function() {
	if(kha_Scheduler.frame_tasks_sorted) {
		return;
	}
	kha_Scheduler.frameTasks.sort(function(a,b) {
		if(a.priority > b.priority) {
			return 1;
		} else if(a.priority < b.priority) {
			return -1;
		} else {
			return 0;
		}
	});
	kha_Scheduler.frame_tasks_sorted = true;
};
var kha_ScreenRotation = $hxClasses["kha.ScreenRotation"] = { __ename__ : true, __constructs__ : ["RotationNone","Rotation90","Rotation180","Rotation270"] };
kha_ScreenRotation.RotationNone = ["RotationNone",0];
kha_ScreenRotation.RotationNone.toString = $estr;
kha_ScreenRotation.RotationNone.__enum__ = kha_ScreenRotation;
kha_ScreenRotation.Rotation90 = ["Rotation90",1];
kha_ScreenRotation.Rotation90.toString = $estr;
kha_ScreenRotation.Rotation90.__enum__ = kha_ScreenRotation;
kha_ScreenRotation.Rotation180 = ["Rotation180",2];
kha_ScreenRotation.Rotation180.toString = $estr;
kha_ScreenRotation.Rotation180.__enum__ = kha_ScreenRotation;
kha_ScreenRotation.Rotation270 = ["Rotation270",3];
kha_ScreenRotation.Rotation270.toString = $estr;
kha_ScreenRotation.Rotation270.__enum__ = kha_ScreenRotation;
var kha_Shaders = function() { };
$hxClasses["kha.Shaders"] = kha_Shaders;
kha_Shaders.__name__ = true;
kha_Shaders.init = function() {
	var blobs = [];
	var _g = 0;
	while(_g < 3) {
		var i = _g++;
		var data = Reflect.field(kha_Shaders,"painter_colored_fragData" + i);
		var bytes = haxe_Unserializer.run(data);
		blobs.push(kha_internal_BytesBlob.fromBytes(bytes));
	}
	kha_Shaders.painter_colored_frag = new kha_graphics4_FragmentShader(blobs,["painter-colored.frag.essl","painter-colored-relaxed.frag.essl","painter-colored-webgl2.frag.essl"]);
	var blobs1 = [];
	var _g1 = 0;
	while(_g1 < 3) {
		var i1 = _g1++;
		var data1 = Reflect.field(kha_Shaders,"painter_colored_vertData" + i1);
		var bytes1 = haxe_Unserializer.run(data1);
		blobs1.push(kha_internal_BytesBlob.fromBytes(bytes1));
	}
	kha_Shaders.painter_colored_vert = new kha_graphics4_VertexShader(blobs1,["painter-colored.vert.essl","painter-colored-relaxed.vert.essl","painter-colored-webgl2.vert.essl"]);
	var blobs2 = [];
	var _g2 = 0;
	while(_g2 < 3) {
		var i2 = _g2++;
		var data2 = Reflect.field(kha_Shaders,"painter_image_fragData" + i2);
		var bytes2 = haxe_Unserializer.run(data2);
		blobs2.push(kha_internal_BytesBlob.fromBytes(bytes2));
	}
	kha_Shaders.painter_image_frag = new kha_graphics4_FragmentShader(blobs2,["painter-image.frag.essl","painter-image-relaxed.frag.essl","painter-image-webgl2.frag.essl"]);
	var blobs3 = [];
	var _g3 = 0;
	while(_g3 < 3) {
		var i3 = _g3++;
		var data3 = Reflect.field(kha_Shaders,"painter_image_vertData" + i3);
		var bytes3 = haxe_Unserializer.run(data3);
		blobs3.push(kha_internal_BytesBlob.fromBytes(bytes3));
	}
	kha_Shaders.painter_image_vert = new kha_graphics4_VertexShader(blobs3,["painter-image.vert.essl","painter-image-relaxed.vert.essl","painter-image-webgl2.vert.essl"]);
	var blobs4 = [];
	var _g4 = 0;
	while(_g4 < 3) {
		var i4 = _g4++;
		var data4 = Reflect.field(kha_Shaders,"painter_text_fragData" + i4);
		var bytes4 = haxe_Unserializer.run(data4);
		blobs4.push(kha_internal_BytesBlob.fromBytes(bytes4));
	}
	kha_Shaders.painter_text_frag = new kha_graphics4_FragmentShader(blobs4,["painter-text.frag.essl","painter-text-relaxed.frag.essl","painter-text-webgl2.frag.essl"]);
	var blobs5 = [];
	var _g5 = 0;
	while(_g5 < 3) {
		var i5 = _g5++;
		var data5 = Reflect.field(kha_Shaders,"painter_text_vertData" + i5);
		var bytes5 = haxe_Unserializer.run(data5);
		blobs5.push(kha_internal_BytesBlob.fromBytes(bytes5));
	}
	kha_Shaders.painter_text_vert = new kha_graphics4_VertexShader(blobs5,["painter-text.vert.essl","painter-text-relaxed.vert.essl","painter-text-webgl2.vert.essl"]);
	var blobs6 = [];
	var _g6 = 0;
	while(_g6 < 3) {
		var i6 = _g6++;
		var data6 = Reflect.field(kha_Shaders,"painter_video_fragData" + i6);
		var bytes6 = haxe_Unserializer.run(data6);
		blobs6.push(kha_internal_BytesBlob.fromBytes(bytes6));
	}
	kha_Shaders.painter_video_frag = new kha_graphics4_FragmentShader(blobs6,["painter-video.frag.essl","painter-video-relaxed.frag.essl","painter-video-webgl2.frag.essl"]);
	var blobs7 = [];
	var _g7 = 0;
	while(_g7 < 3) {
		var i7 = _g7++;
		var data7 = Reflect.field(kha_Shaders,"painter_video_vertData" + i7);
		var bytes7 = haxe_Unserializer.run(data7);
		blobs7.push(kha_internal_BytesBlob.fromBytes(bytes7));
	}
	kha_Shaders.painter_video_vert = new kha_graphics4_VertexShader(blobs7,["painter-video.vert.essl","painter-video-relaxed.vert.essl","painter-video-webgl2.vert.essl"]);
};
var kha_Sound = function() {
};
$hxClasses["kha.Sound"] = kha_Sound;
kha_Sound.__name__ = true;
kha_Sound.__interfaces__ = [kha_Resource];
kha_Sound.prototype = {
	compressedData: null
	,uncompressedData: null
	,uncompress: function(done) {
		var output = new haxe_io_BytesOutput();
		var header = kha_audio2_ogg_vorbis_Reader.readAll(this.compressedData,output,true);
		var soundBytes = output.getBytes();
		var count = soundBytes.length / 4 | 0;
		if(header.channel == 1) {
			var this1 = new Array(count * 2);
			this.uncompressedData = this1;
			var _g1 = 0;
			var _g = count;
			while(_g1 < _g) {
				var i = _g1++;
				this.uncompressedData[i * 2] = soundBytes.getFloat(i * 4);
				this.uncompressedData[i * 2 + 1] = soundBytes.getFloat(i * 4);
			}
		} else {
			var this2 = new Array(count);
			this.uncompressedData = this2;
			var _g11 = 0;
			var _g2 = count;
			while(_g11 < _g2) {
				var i1 = _g11++;
				this.uncompressedData[i1] = soundBytes.getFloat(i1 * 4);
			}
		}
		this.compressedData = null;
		done();
	}
	,unload: function() {
		this.compressedData = null;
		this.uncompressedData = null;
	}
	,__class__: kha_Sound
};
var kha_System = function() { };
$hxClasses["kha.System"] = kha_System;
kha_System.__name__ = true;
kha_System.init = function(options,callback) {
	if(options.title == null) {
		options.title = "Kha";
	}
	if(options.width == null) {
		options.width = 800;
	}
	if(options.height == null) {
		options.height = 600;
	}
	if(options.samplesPerPixel == null) {
		options.samplesPerPixel = 1;
	}
	if(options.vSync == null) {
		options.vSync = true;
	}
	if(options.windowMode == null) {
		options.windowMode = kha_WindowMode.Window;
	}
	if(options.resizable == null) {
		options.resizable = false;
	}
	if(options.maximizable == null) {
		options.maximizable = false;
	}
	if(options.minimizable == null) {
		options.minimizable = true;
	}
	kha_System.theTitle = options.title;
	kha_SystemImpl.init(options,callback);
};
kha_System.initEx = function(title,options,windowCallback,callback) {
	kha_System.theTitle = title;
	kha_SystemImpl.initEx(title,options,windowCallback,callback);
};
kha_System.get_title = function() {
	return kha_System.theTitle;
};
kha_System.notifyOnRender = function(listener,id) {
	if(id == null) {
		id = 0;
	}
	while(id >= kha_System.renderListeners.length) kha_System.renderListeners.push([]);
	kha_System.renderListeners[id].push(listener);
};
kha_System.removeRenderListener = function(listener,id) {
	if(id == null) {
		id = 0;
	}
	HxOverrides.remove(kha_System.renderListeners[id],listener);
};
kha_System.notifyOnApplicationState = function(foregroundListener,resumeListener,pauseListener,backgroundListener,shutdownListener) {
	if(foregroundListener != null) {
		kha_System.foregroundListeners.push(foregroundListener);
	}
	if(resumeListener != null) {
		kha_System.resumeListeners.push(resumeListener);
	}
	if(pauseListener != null) {
		kha_System.pauseListeners.push(pauseListener);
	}
	if(backgroundListener != null) {
		kha_System.backgroundListeners.push(backgroundListener);
	}
	if(shutdownListener != null) {
		kha_System.shutdownListeners.push(shutdownListener);
	}
};
kha_System.notifyOnDropFiles = function(dropFilesListener) {
	kha_System.dropFilesListeners.push(dropFilesListener);
};
kha_System.notifyOnCutCopyPaste = function(cutListener,copyListener,pasteListener) {
	kha_System.cutListener = cutListener;
	kha_System.copyListener = copyListener;
	kha_System.pasteListener = pasteListener;
};
kha_System.render = function(id,framebuffer) {
	if(kha_System.renderListeners.length == 0) {
		return;
	}
	var _g = 0;
	var _g1 = kha_System.renderListeners[id];
	while(_g < _g1.length) {
		var listener = _g1[_g];
		++_g;
		listener(framebuffer);
	}
};
kha_System.foreground = function() {
	var _g = 0;
	var _g1 = kha_System.foregroundListeners;
	while(_g < _g1.length) {
		var listener = _g1[_g];
		++_g;
		listener();
	}
};
kha_System.resume = function() {
	var _g = 0;
	var _g1 = kha_System.resumeListeners;
	while(_g < _g1.length) {
		var listener = _g1[_g];
		++_g;
		listener();
	}
};
kha_System.pause = function() {
	var _g = 0;
	var _g1 = kha_System.pauseListeners;
	while(_g < _g1.length) {
		var listener = _g1[_g];
		++_g;
		listener();
	}
};
kha_System.background = function() {
	var _g = 0;
	var _g1 = kha_System.backgroundListeners;
	while(_g < _g1.length) {
		var listener = _g1[_g];
		++_g;
		listener();
	}
};
kha_System.shutdown = function() {
	var _g = 0;
	var _g1 = kha_System.shutdownListeners;
	while(_g < _g1.length) {
		var listener = _g1[_g];
		++_g;
		listener();
	}
};
kha_System.dropFiles = function(filePath) {
	var _g = 0;
	var _g1 = kha_System.dropFilesListeners;
	while(_g < _g1.length) {
		var listener = _g1[_g];
		++_g;
		listener(filePath);
	}
};
kha_System.get_time = function() {
	return kha_SystemImpl.getTime();
};
kha_System.windowWidth = function(windowId) {
	if(windowId == null) {
		windowId = 0;
	}
	return kha_SystemImpl.windowWidth(windowId);
};
kha_System.windowHeight = function(windowId) {
	if(windowId == null) {
		windowId = 0;
	}
	return kha_SystemImpl.windowHeight(windowId);
};
kha_System.screenDpi = function() {
	return kha_SystemImpl.screenDpi();
};
kha_System.get_screenRotation = function() {
	return kha_SystemImpl.getScreenRotation();
};
kha_System.get_vsync = function() {
	return kha_SystemImpl.getVsync();
};
kha_System.get_refreshRate = function() {
	return kha_SystemImpl.getRefreshRate();
};
kha_System.get_systemId = function() {
	return kha_SystemImpl.getSystemId();
};
kha_System.requestShutdown = function() {
	kha_SystemImpl.requestShutdown();
};
kha_System.changeResolution = function(width,height) {
	kha_SystemImpl.changeResolution(width,height);
};
kha_System.loadUrl = function(url) {
	kha_SystemImpl.loadUrl(url);
};
var kha_GamepadStates = function() {
	this.axes = [];
	this.buttons = [];
};
$hxClasses["kha.GamepadStates"] = kha_GamepadStates;
kha_GamepadStates.__name__ = true;
kha_GamepadStates.prototype = {
	axes: null
	,buttons: null
	,__class__: kha_GamepadStates
};
var kha_SystemImpl = function() { };
$hxClasses["kha.SystemImpl"] = kha_SystemImpl;
kha_SystemImpl.__name__ = true;
kha_SystemImpl.errorHandler = function(message,source,lineno,colno,error) {
	window.console.error(error.stack);
	return true;
};
kha_SystemImpl.init = function(options,callback) {
	kha_SystemImpl.options = options;
	kha_SystemImpl.mobile = kha_SystemImpl.isMobile();
	kha_SystemImpl.chrome = kha_SystemImpl.isChrome();
	kha_SystemImpl.firefox = kha_SystemImpl.isFirefox();
	kha_SystemImpl.init2();
	callback();
};
kha_SystemImpl.initEx = function(title,options,windowCallback,callback) {
	haxe_Log.trace("initEx is not supported on the html5 target, running init() with first window options",{ fileName : "SystemImpl.hx", lineNumber : 78, className : "kha.SystemImpl", methodName : "initEx"});
	kha_SystemImpl.init({ title : title, width : options[0].width, height : options[0].height},callback);
	if(windowCallback != null) {
		windowCallback(0);
	}
};
kha_SystemImpl.isMobile = function() {
	var agent = window.navigator.userAgent;
	if(agent.indexOf("Android") >= 0 || agent.indexOf("webOS") >= 0 || agent.indexOf("iPhone") >= 0 || agent.indexOf("iPad") >= 0 || agent.indexOf("iPod") >= 0 || agent.indexOf("BlackBerry") >= 0 || agent.indexOf("Windows Phone") >= 0) {
		return true;
	} else {
		return false;
	}
};
kha_SystemImpl.isChrome = function() {
	var agent = window.navigator.userAgent;
	if(agent.indexOf("Chrome") >= 0) {
		return true;
	} else {
		return false;
	}
};
kha_SystemImpl.isFirefox = function() {
	var agent = window.navigator.userAgent;
	if(agent.indexOf("Firefox") >= 0) {
		return true;
	} else {
		return false;
	}
};
kha_SystemImpl.windowWidth = function(windowId) {
	if(windowId == null) {
		windowId = 0;
	}
	if(kha_SystemImpl.khanvas.width == 0 && kha_SystemImpl.options.width != null) {
		return kha_SystemImpl.options.width;
	} else {
		return kha_SystemImpl.khanvas.width;
	}
};
kha_SystemImpl.windowHeight = function(windowId) {
	if(windowId == null) {
		windowId = 0;
	}
	if(kha_SystemImpl.khanvas.height == 0 && kha_SystemImpl.options.height != null) {
		return kha_SystemImpl.options.height;
	} else {
		return kha_SystemImpl.khanvas.height;
	}
};
kha_SystemImpl.screenDpi = function() {
	var dpiElement = window.document.createElement("div");
	dpiElement.style.position = "absolute";
	dpiElement.style.width = "1in";
	dpiElement.style.height = "1in";
	dpiElement.style.left = "-100%";
	dpiElement.style.top = "-100%";
	window.document.body.appendChild(dpiElement);
	var dpi = dpiElement.offsetHeight;
	dpiElement.remove();
	return dpi;
};
kha_SystemImpl.setCanvas = function(canvas) {
	kha_SystemImpl.khanvas = canvas;
};
kha_SystemImpl.getScreenRotation = function() {
	return kha_ScreenRotation.RotationNone;
};
kha_SystemImpl.getTime = function() {
	var performance = window.performance ? window.performance : window.Date;
	return performance.now() / 1000;
};
kha_SystemImpl.getVsync = function() {
	return true;
};
kha_SystemImpl.getRefreshRate = function() {
	return 60;
};
kha_SystemImpl.getSystemId = function() {
	return "HTML5";
};
kha_SystemImpl.requestShutdown = function() {
	window.close();
};
kha_SystemImpl.init2 = function(backbufferFormat) {
	haxe_Log.trace = js_Boot.__trace;
	kha_SystemImpl.keyboard = new kha_input_Keyboard();
	kha_SystemImpl.mouse = new kha_input_MouseImpl();
	kha_SystemImpl.surface = new kha_input_Surface();
	kha_SystemImpl.gamepads = [];
	kha_SystemImpl.gamepadStates = [];
	var _g = 0;
	while(_g < 4) {
		var i = _g++;
		kha_SystemImpl.gamepads[i] = new kha_input_Gamepad(i);
		kha_SystemImpl.gamepadStates[i] = new kha_GamepadStates();
	}
	kha_SystemImpl.pressedKeys = [];
	var _g1 = 0;
	while(_g1 < 256) {
		var i1 = _g1++;
		kha_SystemImpl.pressedKeys.push(false);
	}
	var _g2 = 0;
	while(_g2 < 256) {
		var i2 = _g2++;
		kha_SystemImpl.pressedKeys.push(null);
	}
	window.document.addEventListener("copy",function(e_) {
		var e = e_;
		if(kha_System.copyListener != null) {
			var data = kha_System.copyListener();
			if(data != null) {
				e.clipboardData.setData("text/plain",data);
			}
			e.preventDefault();
		}
	});
	window.document.addEventListener("cut",function(e_1) {
		var e1 = e_1;
		if(kha_System.cutListener != null) {
			var data1 = kha_System.cutListener();
			if(data1 != null) {
				e1.clipboardData.setData("text/plain",data1);
			}
			e1.preventDefault();
		}
	});
	window.document.addEventListener("paste",function(e_2) {
		var e2 = e_2;
		if(kha_System.pasteListener != null) {
			var tmp = e2.clipboardData.getData("text/plain");
			kha_System.pasteListener(tmp);
			e2.preventDefault();
		}
	});
	kha_CanvasImage.init();
	kha_Scheduler.init();
	kha_SystemImpl.loadFinished();
	kha_EnvironmentVariables.instance = new kha_js_EnvironmentVariables();
};
kha_SystemImpl.getMouse = function(num) {
	if(num != 0) {
		return null;
	}
	return kha_SystemImpl.mouse;
};
kha_SystemImpl.getKeyboard = function(num) {
	if(num != 0) {
		return null;
	}
	return kha_SystemImpl.keyboard;
};
kha_SystemImpl.checkGamepad = function(pad) {
	var _g1 = 0;
	var _g = pad.axes.length;
	while(_g1 < _g) {
		var i = _g1++;
		if(pad.axes[i] != null) {
			if(kha_SystemImpl.gamepadStates[pad.index].axes[i] != pad.axes[i]) {
				var axis = pad.axes[i];
				if(i % 2 == 1) {
					axis = -axis;
				}
				kha_SystemImpl.gamepadStates[pad.index].axes[i] = axis;
				kha_SystemImpl.gamepads[pad.index].sendAxisEvent(i,axis);
			}
		}
	}
	var _g11 = 0;
	var _g2 = pad.buttons.length;
	while(_g11 < _g2) {
		var i1 = _g11++;
		if(pad.buttons[i1] != null) {
			if(kha_SystemImpl.gamepadStates[pad.index].buttons[i1] != pad.buttons[i1].value) {
				kha_SystemImpl.gamepadStates[pad.index].buttons[i1] = pad.buttons[i1].value;
				kha_SystemImpl.gamepads[pad.index].sendButtonEvent(i1,pad.buttons[i1].value);
			}
		}
	}
	if(pad.axes.length <= 4 && pad.buttons.length > 7) {
		kha_SystemImpl.gamepadStates[pad.index].axes[4] = pad.buttons[6].value;
		kha_SystemImpl.gamepads[pad.index].sendAxisEvent(4,pad.buttons[6].value);
		kha_SystemImpl.gamepadStates[pad.index].axes[5] = pad.buttons[7].value;
		kha_SystemImpl.gamepads[pad.index].sendAxisEvent(5,pad.buttons[7].value);
	}
};
kha_SystemImpl.loadFinished = function() {
	var canvas = kha_SystemImpl.khanvas;
	if(canvas == null) {
		canvas = window.document.getElementById(kha_CompilerDefines.canvas_id);
	}
	canvas.style.cursor = "default";
	var gl = false;
	try {
		kha_SystemImpl.gl = canvas.getContext("webgl2",{ alpha : false, antialias : kha_SystemImpl.options.samplesPerPixel > 1, stencil : true, preserveDrawingBuffer : true});
		kha_SystemImpl.gl.pixelStorei(37441,1);
		kha_SystemImpl.halfFloat = { HALF_FLOAT_OES : 5131};
		kha_SystemImpl.depthTexture = { UNSIGNED_INT_24_8_WEBGL : 34042};
		kha_SystemImpl.drawBuffers = { COLOR_ATTACHMENT0_WEBGL : 36064};
		kha_SystemImpl.elementIndexUint = true;
		kha_SystemImpl.gl.getExtension("EXT_color_buffer_float");
		kha_SystemImpl.gl.getExtension("OES_texture_float_linear");
		kha_SystemImpl.gl.getExtension("OES_texture_half_float_linear");
		kha_SystemImpl.anisotropicFilter = kha_SystemImpl.gl.getExtension("EXT_texture_filter_anisotropic");
		if(kha_SystemImpl.anisotropicFilter == null) {
			kha_SystemImpl.anisotropicFilter = kha_SystemImpl.gl.getExtension("WEBKIT_EXT_texture_filter_anisotropic");
		}
		gl = true;
		kha_SystemImpl.gl2 = true;
		kha_Shaders.init();
	} catch( e ) {
		haxe_Log.trace("Could not initialize WebGL 2, falling back to WebGL.",{ fileName : "SystemImpl.hx", lineNumber : 327, className : "kha.SystemImpl", methodName : "loadFinished"});
	}
	if(!kha_SystemImpl.gl2) {
		try {
			kha_SystemImpl.gl = canvas.getContext("experimental-webgl",{ alpha : false, antialias : kha_SystemImpl.options.samplesPerPixel > 1, stencil : true, preserveDrawingBuffer : true});
			if(kha_SystemImpl.gl != null) {
				kha_SystemImpl.gl.pixelStorei(37441,1);
				kha_SystemImpl.gl.getExtension("OES_texture_float");
				kha_SystemImpl.gl.getExtension("OES_texture_float_linear");
				kha_SystemImpl.halfFloat = kha_SystemImpl.gl.getExtension("OES_texture_half_float");
				kha_SystemImpl.gl.getExtension("OES_texture_half_float_linear");
				kha_SystemImpl.depthTexture = kha_SystemImpl.gl.getExtension("WEBGL_depth_texture");
				kha_SystemImpl.gl.getExtension("EXT_shader_texture_lod");
				kha_SystemImpl.gl.getExtension("OES_standard_derivatives");
				kha_SystemImpl.anisotropicFilter = kha_SystemImpl.gl.getExtension("EXT_texture_filter_anisotropic");
				if(kha_SystemImpl.anisotropicFilter == null) {
					kha_SystemImpl.anisotropicFilter = kha_SystemImpl.gl.getExtension("WEBKIT_EXT_texture_filter_anisotropic");
				}
				kha_SystemImpl.drawBuffers = kha_SystemImpl.gl.getExtension("WEBGL_draw_buffers");
				kha_SystemImpl.elementIndexUint = kha_SystemImpl.gl.getExtension("OES_element_index_uint");
				gl = true;
				kha_Shaders.init();
			}
		} catch( e1 ) {
			haxe_Log.trace("Could not initialize WebGL, falling back to Canvas.",{ fileName : "SystemImpl.hx", lineNumber : 351, className : "kha.SystemImpl", methodName : "loadFinished"});
		}
	}
	kha_SystemImpl.setCanvas(canvas);
	if(gl) {
		var g4 = new kha_js_graphics4_Graphics();
		kha_SystemImpl.frame = new kha_Framebuffer(0,null,null,g4);
		kha_SystemImpl.frame.init(new kha_graphics2_Graphics1(kha_SystemImpl.frame),new kha_js_graphics4_Graphics2(kha_SystemImpl.frame),g4);
	} else {
		var g2 = new kha_js_CanvasGraphics(canvas.getContext("2d"));
		kha_SystemImpl.frame = new kha_Framebuffer(0,null,g2,null);
		kha_SystemImpl.frame.init(new kha_graphics2_Graphics1(kha_SystemImpl.frame),g2,null);
	}
	if(!kha_SystemImpl.mobile && kha_audio2_Audio._init()) {
		kha_SystemImpl._hasWebAudio = true;
		kha_audio2_Audio1._init();
	} else if(kha_SystemImpl.mobile) {
		kha_SystemImpl._hasWebAudio = false;
		kha_js_MobileWebAudio._init();
		kha_audio2_Audio1 = kha_js_MobileWebAudio;
	} else {
		kha_SystemImpl._hasWebAudio = false;
		kha_js_AudioElementAudio._compile();
		kha_audio2_Audio1 = kha_js_AudioElementAudio;
	}
	kha_vr_VrInterface.instance = new kha_js_vr_VrInterface();
	kha_Scheduler.start();
	var $window = window;
	var requestAnimationFrame = $window.requestAnimationFrame;
	if(requestAnimationFrame == null) {
		requestAnimationFrame = $window.mozRequestAnimationFrame;
	}
	if(requestAnimationFrame == null) {
		requestAnimationFrame = $window.webkitRequestAnimationFrame;
	}
	if(requestAnimationFrame == null) {
		requestAnimationFrame = $window.msRequestAnimationFrame;
	}
	var animate = null;
	animate = function(timestamp) {
		var window1 = window;
		if(requestAnimationFrame == null) {
			window1.setTimeout(animate,16.666666666666668);
		} else {
			requestAnimationFrame(animate);
		}
		var sysGamepads = kha_SystemImpl.getGamepads();
		if(sysGamepads != null) {
			var _g1 = 0;
			var _g = sysGamepads.length;
			while(_g1 < _g) {
				var i = _g1++;
				var pad = sysGamepads[i];
				if(pad != null) {
					kha_SystemImpl.checkGamepad(pad);
				}
			}
		}
		kha_Scheduler.executeFrame();
		if(canvas.getContext) {
			var displayWidth = canvas.clientWidth;
			var displayHeight = canvas.clientHeight;
			if(canvas.width != displayWidth || canvas.height != displayHeight) {
				canvas.width = displayWidth;
				canvas.height = displayHeight;
			}
			kha_System.render(0,kha_SystemImpl.frame);
			if(kha_SystemImpl.gl != null) {
				kha_SystemImpl.gl.clearColor(1,1,1,1);
				kha_SystemImpl.gl.colorMask(false,false,false,true);
				kha_SystemImpl.gl.clear(16384);
				kha_SystemImpl.gl.colorMask(true,true,true,true);
			}
		}
	};
	var animate1 = animate;
	if(requestAnimationFrame == null) {
		$window.setTimeout(animate1,16.666666666666668);
	} else {
		requestAnimationFrame(animate1);
	}
	if(canvas.getAttribute("tabindex") == null) {
		canvas.setAttribute("tabindex","0");
	}
	canvas.focus();
	canvas.oncontextmenu = function(event) {
		event.stopPropagation();
		event.preventDefault();
	};
	canvas.onmousedown = kha_SystemImpl.mouseDown;
	canvas.onmousemove = kha_SystemImpl.mouseMove;
	if(kha_SystemImpl.keyboard != null) {
		canvas.onkeydown = kha_SystemImpl.keyDown;
		canvas.onkeyup = kha_SystemImpl.keyUp;
		canvas.onkeypress = kha_SystemImpl.keyPress;
	}
	canvas.onblur = kha_SystemImpl.onBlur;
	canvas.onfocus = kha_SystemImpl.onFocus;
	canvas.onmousewheel = canvas.onwheel = kha_SystemImpl.mouseWheel;
	canvas.onmouseleave = kha_SystemImpl.mouseLeave;
	canvas.addEventListener("wheel mousewheel",kha_SystemImpl.mouseWheel,false);
	canvas.addEventListener("touchstart",kha_SystemImpl.touchDown,false);
	canvas.addEventListener("touchend",kha_SystemImpl.touchUp,false);
	canvas.addEventListener("touchmove",kha_SystemImpl.touchMove,false);
	window.addEventListener("unload",kha_SystemImpl.unload);
};
kha_SystemImpl.lockMouse = function() {
	if(($_=kha_SystemImpl.khanvas,$bind($_,$_.requestPointerLock))) {
		kha_SystemImpl.khanvas.requestPointerLock();
	} else if(kha_SystemImpl.khanvas.mozRequestPointerLock) {
		kha_SystemImpl.khanvas.mozRequestPointerLock();
	} else if(kha_SystemImpl.khanvas.webkitRequestPointerLock) {
		kha_SystemImpl.khanvas.webkitRequestPointerLock();
	}
};
kha_SystemImpl.unlockMouse = function() {
	if(document.exitPointerLock) {
		document.exitPointerLock();
	} else if(document.mozExitPointerLock) {
		document.mozExitPointerLock();
	} else if(document.webkitExitPointerLock) {
		document.webkitExitPointerLock();
	}
};
kha_SystemImpl.canLockMouse = function() {
	return 'pointerLockElement' in document ||
		'mozPointerLockElement' in document ||
		'webkitPointerLockElement' in document;
};
kha_SystemImpl.isMouseLocked = function() {
	return document.pointerLockElement === kha_Sys.khanvas ||
			document.mozPointerLockElement === kha_Sys.khanvas ||
			document.webkitPointerLockElement === kha_Sys.khanvas;
};
kha_SystemImpl.notifyOfMouseLockChange = function(func,error) {
	window.document.addEventListener("pointerlockchange",func,false);
	window.document.addEventListener("mozpointerlockchange",func,false);
	window.document.addEventListener("webkitpointerlockchange",func,false);
	window.document.addEventListener("pointerlockerror",error,false);
	window.document.addEventListener("mozpointerlockerror",error,false);
	window.document.addEventListener("webkitpointerlockerror",error,false);
};
kha_SystemImpl.removeFromMouseLockChange = function(func,error) {
	window.document.removeEventListener("pointerlockchange",func,false);
	window.document.removeEventListener("mozpointerlockchange",func,false);
	window.document.removeEventListener("webkitpointerlockchange",func,false);
	window.document.removeEventListener("pointerlockerror",error,false);
	window.document.removeEventListener("mozpointerlockerror",error,false);
	window.document.removeEventListener("webkitpointerlockerror",error,false);
};
kha_SystemImpl.unload = function(_) {
};
kha_SystemImpl.setMouseXY = function(event) {
	var rect = kha_SystemImpl.khanvas.getBoundingClientRect();
	var borderWidth = kha_SystemImpl.khanvas.clientLeft;
	var borderHeight = kha_SystemImpl.khanvas.clientTop;
	kha_SystemImpl.mouseX = (event.clientX - rect.left - borderWidth) * kha_SystemImpl.khanvas.width / (rect.width - 2 * borderWidth) | 0;
	kha_SystemImpl.mouseY = (event.clientY - rect.top - borderHeight) * kha_SystemImpl.khanvas.height / (rect.height - 2 * borderHeight) | 0;
};
kha_SystemImpl.unlockSoundOnIOS = function() {
	if(!kha_SystemImpl.mobile || kha_SystemImpl.iosSoundEnabled) {
		return;
	}
	var buffer = kha_js_MobileWebAudio._context.createBuffer(1,1,22050);
	var source = kha_js_MobileWebAudio._context.createBufferSource();
	source.buffer = buffer;
	source.connect(kha_js_MobileWebAudio._context.destination);
	if(source.noteOn) {
		source.noteOn(0);
	}
	kha_SystemImpl.iosSoundEnabled = true;
};
kha_SystemImpl.mouseLeave = function() {
	kha_SystemImpl.mouse.sendLeaveEvent(0);
};
kha_SystemImpl.mouseWheel = function(event) {
	kha_SystemImpl.insideInputEvent = true;
	kha_SystemImpl.unlockSoundOnIOS();
	event.preventDefault();
	if(event.deltaMode == 0) {
		if(event.deltaY < 0) {
			kha_SystemImpl.mouse.sendWheelEvent(0,-1);
		} else if(event.deltaY > 0) {
			kha_SystemImpl.mouse.sendWheelEvent(0,1);
		}
		kha_SystemImpl.insideInputEvent = false;
		return false;
	}
	if(event.deltaMode == 1) {
		kha_SystemImpl.minimumScroll = Math.min(kha_SystemImpl.minimumScroll,Math.abs(event.deltaY)) | 0;
		kha_SystemImpl.mouse.sendWheelEvent(0,event.deltaY / kha_SystemImpl.minimumScroll | 0);
		kha_SystemImpl.insideInputEvent = false;
		return false;
	}
	kha_SystemImpl.insideInputEvent = false;
	return false;
};
kha_SystemImpl.mouseDown = function(event) {
	kha_SystemImpl.insideInputEvent = true;
	kha_SystemImpl.unlockSoundOnIOS();
	kha_SystemImpl.setMouseXY(event);
	if(event.which == 1) {
		if(event.ctrlKey) {
			kha_SystemImpl.leftMouseCtrlDown = true;
			kha_SystemImpl.mouse.sendDownEvent(0,1,kha_SystemImpl.mouseX,kha_SystemImpl.mouseY);
		} else {
			kha_SystemImpl.leftMouseCtrlDown = false;
			kha_SystemImpl.mouse.sendDownEvent(0,0,kha_SystemImpl.mouseX,kha_SystemImpl.mouseY);
		}
		if(($_=kha_SystemImpl.khanvas,$bind($_,$_.setCapture)) != null) {
			kha_SystemImpl.khanvas.setCapture();
		} else {
			kha_SystemImpl.khanvas.ownerDocument.addEventListener("mousemove",kha_SystemImpl.documentMouseMove,true);
		}
		kha_SystemImpl.khanvas.ownerDocument.addEventListener("mouseup",kha_SystemImpl.mouseLeftUp);
	} else if(event.which == 2) {
		kha_SystemImpl.mouse.sendDownEvent(0,2,kha_SystemImpl.mouseX,kha_SystemImpl.mouseY);
		kha_SystemImpl.khanvas.ownerDocument.addEventListener("mouseup",kha_SystemImpl.mouseMiddleUp);
	} else if(event.which == 3) {
		kha_SystemImpl.mouse.sendDownEvent(0,1,kha_SystemImpl.mouseX,kha_SystemImpl.mouseY);
		kha_SystemImpl.khanvas.ownerDocument.addEventListener("mouseup",kha_SystemImpl.mouseRightUp);
	}
	kha_SystemImpl.insideInputEvent = false;
};
kha_SystemImpl.mouseLeftUp = function(event) {
	kha_SystemImpl.unlockSoundOnIOS();
	if(event.which != 1) {
		return;
	}
	kha_SystemImpl.insideInputEvent = true;
	kha_SystemImpl.khanvas.ownerDocument.removeEventListener("mouseup",kha_SystemImpl.mouseLeftUp);
	if(($_=kha_SystemImpl.khanvas,$bind($_,$_.releaseCapture)) != null) {
		kha_SystemImpl.khanvas.ownerDocument.releaseCapture();
	} else {
		kha_SystemImpl.khanvas.ownerDocument.removeEventListener("mousemove",kha_SystemImpl.documentMouseMove,true);
	}
	if(kha_SystemImpl.leftMouseCtrlDown) {
		kha_SystemImpl.mouse.sendUpEvent(0,1,kha_SystemImpl.mouseX,kha_SystemImpl.mouseY);
	} else {
		kha_SystemImpl.mouse.sendUpEvent(0,0,kha_SystemImpl.mouseX,kha_SystemImpl.mouseY);
	}
	kha_SystemImpl.leftMouseCtrlDown = false;
	kha_SystemImpl.insideInputEvent = false;
};
kha_SystemImpl.mouseMiddleUp = function(event) {
	kha_SystemImpl.unlockSoundOnIOS();
	if(event.which != 2) {
		return;
	}
	kha_SystemImpl.insideInputEvent = true;
	kha_SystemImpl.khanvas.ownerDocument.removeEventListener("mouseup",kha_SystemImpl.mouseMiddleUp);
	kha_SystemImpl.mouse.sendUpEvent(0,2,kha_SystemImpl.mouseX,kha_SystemImpl.mouseY);
	kha_SystemImpl.insideInputEvent = false;
};
kha_SystemImpl.mouseRightUp = function(event) {
	kha_SystemImpl.unlockSoundOnIOS();
	if(event.which != 3) {
		return;
	}
	kha_SystemImpl.insideInputEvent = true;
	kha_SystemImpl.khanvas.ownerDocument.removeEventListener("mouseup",kha_SystemImpl.mouseRightUp);
	kha_SystemImpl.mouse.sendUpEvent(0,1,kha_SystemImpl.mouseX,kha_SystemImpl.mouseY);
	kha_SystemImpl.insideInputEvent = false;
};
kha_SystemImpl.documentMouseMove = function(event) {
	event.stopPropagation();
	kha_SystemImpl.mouseMove(event);
};
kha_SystemImpl.mouseMove = function(event) {
	kha_SystemImpl.insideInputEvent = true;
	kha_SystemImpl.unlockSoundOnIOS();
	var lastMouseX = kha_SystemImpl.mouseX;
	var lastMouseY = kha_SystemImpl.mouseY;
	kha_SystemImpl.setMouseXY(event);
	var movementX = event.movementX;
	var movementY = event.movementY;
	if(event.movementX == null) {
		if(event.mozMovementX != null) {
			movementX = event.mozMovementX;
		} else if(event.webkitMovementX != null) {
			movementX = event.webkitMovementX;
		} else {
			movementX = kha_SystemImpl.mouseX - lastMouseX;
		}
		if(event.mozMovementY != null) {
			movementY = event.mozMovementY;
		} else if(event.webkitMovementY != null) {
			movementY = event.webkitMovementY;
		} else {
			movementY = kha_SystemImpl.mouseY - lastMouseY;
		}
	}
	if(kha_SystemImpl.firefox) {
		movementX = movementX * window.devicePixelRatio | 0;
		movementY = movementY * window.devicePixelRatio | 0;
	}
	kha_SystemImpl.mouse.sendMoveEvent(0,kha_SystemImpl.mouseX,kha_SystemImpl.mouseY,movementX,movementY);
	kha_SystemImpl.insideInputEvent = false;
};
kha_SystemImpl.setTouchXY = function(touch) {
	var rect = kha_SystemImpl.khanvas.getBoundingClientRect();
	var borderWidth = kha_SystemImpl.khanvas.clientLeft;
	var borderHeight = kha_SystemImpl.khanvas.clientTop;
	kha_SystemImpl.touchX = (touch.clientX - rect.left - borderWidth) * kha_SystemImpl.khanvas.width / (rect.width - 2 * borderWidth) | 0;
	kha_SystemImpl.touchY = (touch.clientY - rect.top - borderHeight) * kha_SystemImpl.khanvas.height / (rect.height - 2 * borderHeight) | 0;
};
kha_SystemImpl.touchDown = function(event) {
	kha_SystemImpl.insideInputEvent = true;
	kha_SystemImpl.unlockSoundOnIOS();
	event.stopPropagation();
	event.preventDefault();
	var _g = 0;
	var _g1 = event.changedTouches;
	while(_g < _g1.length) {
		var touch = _g1[_g];
		++_g;
		kha_SystemImpl.setTouchXY(touch);
		kha_SystemImpl.mouse.sendDownEvent(0,0,kha_SystemImpl.touchX,kha_SystemImpl.touchY);
		kha_SystemImpl.surface.sendTouchStartEvent(touch.identifier,kha_SystemImpl.touchX,kha_SystemImpl.touchY);
	}
	kha_SystemImpl.insideInputEvent = false;
};
kha_SystemImpl.touchUp = function(event) {
	kha_SystemImpl.insideInputEvent = true;
	kha_SystemImpl.unlockSoundOnIOS();
	var _g = 0;
	var _g1 = event.changedTouches;
	while(_g < _g1.length) {
		var touch = _g1[_g];
		++_g;
		kha_SystemImpl.setTouchXY(touch);
		kha_SystemImpl.mouse.sendUpEvent(0,0,kha_SystemImpl.touchX,kha_SystemImpl.touchY);
		kha_SystemImpl.surface.sendTouchEndEvent(touch.identifier,kha_SystemImpl.touchX,kha_SystemImpl.touchY);
	}
	kha_SystemImpl.insideInputEvent = false;
};
kha_SystemImpl.touchMove = function(event) {
	kha_SystemImpl.insideInputEvent = true;
	kha_SystemImpl.unlockSoundOnIOS();
	var index = 0;
	var _g = 0;
	var _g1 = event.changedTouches;
	while(_g < _g1.length) {
		var touch = _g1[_g];
		++_g;
		kha_SystemImpl.setTouchXY(touch);
		if(index == 0) {
			var movementX = kha_SystemImpl.touchX - kha_SystemImpl.lastFirstTouchX;
			var movementY = kha_SystemImpl.touchY - kha_SystemImpl.lastFirstTouchY;
			kha_SystemImpl.lastFirstTouchX = kha_SystemImpl.touchX;
			kha_SystemImpl.lastFirstTouchY = kha_SystemImpl.touchY;
			kha_SystemImpl.mouse.sendMoveEvent(0,kha_SystemImpl.touchX,kha_SystemImpl.touchY,movementX,movementY);
		}
		kha_SystemImpl.surface.sendMoveEvent(touch.identifier,kha_SystemImpl.touchX,kha_SystemImpl.touchY);
		++index;
	}
	kha_SystemImpl.insideInputEvent = false;
};
kha_SystemImpl.onBlur = function() {
	kha_System.background();
};
kha_SystemImpl.onFocus = function() {
	kha_System.foreground();
};
kha_SystemImpl.keycodeToChar = function(key,keycode,shift) {
	if(key != null) {
		if(key.length == 1) {
			return key;
		}
		switch(key) {
		case "Add":
			return "+";
		case "Divide":
			return "/";
		case "Multiply":
			return "*";
		case "Subtract":
			return "-";
		}
	}
	switch(keycode) {
	case 48:
		if(shift) {
			return "=";
		} else {
			return "0";
		}
		break;
	case 49:
		if(shift) {
			return "!";
		} else {
			return "1";
		}
		break;
	case 50:
		if(shift) {
			return "\"";
		} else {
			return "2";
		}
		break;
	case 51:
		if(shift) {
			return "§";
		} else {
			return "3";
		}
		break;
	case 52:
		if(shift) {
			return "$";
		} else {
			return "4";
		}
		break;
	case 53:
		if(shift) {
			return "%";
		} else {
			return "5";
		}
		break;
	case 54:
		if(shift) {
			return "&";
		} else {
			return "6";
		}
		break;
	case 55:
		if(shift) {
			return "/";
		} else {
			return "7";
		}
		break;
	case 56:
		if(shift) {
			return "(";
		} else {
			return "8";
		}
		break;
	case 57:
		if(shift) {
			return ")";
		} else {
			return "9";
		}
		break;
	case 106:
		return "*";
	case 107:
		return "+";
	case 109:
		return "-";
	case 111:
		return "/";
	case 187:
		if(shift) {
			return "*";
		} else {
			return "+";
		}
		break;
	case 188:
		if(shift) {
			return ";";
		} else {
			return ",";
		}
		break;
	case 189:
		if(shift) {
			return "_";
		} else {
			return "-";
		}
		break;
	case 190:
		if(shift) {
			return ":";
		} else {
			return ".";
		}
		break;
	case 191:
		if(shift) {
			return "'";
		} else {
			return "#";
		}
		break;
	case 212:
		if(shift) {
			return "`";
		} else {
			return "´";
		}
		break;
	case 219:
		if(shift) {
			return "?";
		} else {
			return "ß";
		}
		break;
	case 226:
		if(shift) {
			return ">";
		} else {
			return "<";
		}
		break;
	}
	if(keycode >= 96 && keycode <= 105) {
		return String.fromCharCode(-48 + keycode);
	}
	if(keycode >= 65 && keycode <= 90) {
		if(shift) {
			return String.fromCharCode(keycode);
		} else {
			return String.fromCharCode(keycode - 65 + 97);
		}
	}
	return String.fromCharCode(keycode);
};
kha_SystemImpl.keyDown = function(event) {
	event.stopPropagation();
	if(kha_SystemImpl.pressedKeys[event.keyCode]) {
		event.preventDefault();
		return;
	}
	kha_SystemImpl.pressedKeys[event.keyCode] = true;
	kha_SystemImpl.keyboard.sendDownEvent(event.keyCode);
};
kha_SystemImpl.keyUp = function(event) {
	event.preventDefault();
	event.stopPropagation();
	kha_SystemImpl.pressedKeys[event.keyCode] = false;
	kha_SystemImpl.keyboard.sendUpEvent(event.keyCode);
};
kha_SystemImpl.keyPress = function(event) {
	event.stopPropagation();
	kha_SystemImpl.keyboard.sendPressEvent(String.fromCharCode(event.which));
};
kha_SystemImpl.canSwitchFullscreen = function() {
	return 'fullscreenElement ' in document ||
		'mozFullScreenElement' in document ||
		'webkitFullscreenElement' in document ||
		'msFullscreenElement' in document
		;
};
kha_SystemImpl.isFullscreen = function() {
	return document.fullscreenElement === this.khanvas ||
			document.mozFullScreenElement === this.khanvas ||
			document.webkitFullscreenElement === this.khanvas ||
			document.msFullscreenElement === this.khanvas ;
};
kha_SystemImpl.requestFullscreen = function() {
	if(($_=kha_SystemImpl.khanvas,$bind($_,$_.requestFullscreen))) {
		kha_SystemImpl.khanvas.requestFullscreen();
	} else if(kha_SystemImpl.khanvas.msRequestFullscreen) {
		kha_SystemImpl.khanvas.msRequestFullscreen();
	} else if(kha_SystemImpl.khanvas.mozRequestFullScreen) {
		kha_SystemImpl.khanvas.mozRequestFullScreen();
	} else if(kha_SystemImpl.khanvas.webkitRequestFullscreen) {
		kha_SystemImpl.khanvas.webkitRequestFullscreen();
	}
};
kha_SystemImpl.exitFullscreen = function() {
	if(document.exitFullscreen) {
		document.exitFullscreen();
	} else if(document.msExitFullscreen) {
		document.msExitFullscreen();
	} else if(document.mozCancelFullScreen) {
		document.mozCancelFullScreen();
	} else if(document.webkitExitFullscreen) {
		document.webkitExitFullscreen();
	}
};
kha_SystemImpl.notifyOfFullscreenChange = function(func,error) {
	window.document.addEventListener("fullscreenchange",func,false);
	window.document.addEventListener("mozfullscreenchange",func,false);
	window.document.addEventListener("webkitfullscreenchange",func,false);
	window.document.addEventListener("MSFullscreenChange",func,false);
	window.document.addEventListener("fullscreenerror",error,false);
	window.document.addEventListener("mozfullscreenerror",error,false);
	window.document.addEventListener("webkitfullscreenerror",error,false);
	window.document.addEventListener("MSFullscreenError",error,false);
};
kha_SystemImpl.removeFromFullscreenChange = function(func,error) {
	window.document.removeEventListener("fullscreenchange",func,false);
	window.document.removeEventListener("mozfullscreenchange",func,false);
	window.document.removeEventListener("webkitfullscreenchange",func,false);
	window.document.removeEventListener("MSFullscreenChange",func,false);
	window.document.removeEventListener("fullscreenerror",error,false);
	window.document.removeEventListener("mozfullscreenerror",error,false);
	window.document.removeEventListener("webkitfullscreenerror",error,false);
	window.document.removeEventListener("MSFullscreenError",error,false);
};
kha_SystemImpl.changeResolution = function(width,height) {
};
kha_SystemImpl.setKeepScreenOn = function(on) {
};
kha_SystemImpl.loadUrl = function(url) {
	window.open(url,"_blank");
};
kha_SystemImpl.getGamepadId = function(index) {
	var sysGamepads = kha_SystemImpl.getGamepads();
	if(sysGamepads != null && sysGamepads[index]) {
		return sysGamepads[index].id;
	}
	return "unkown";
};
kha_SystemImpl.getGamepads = function() {
	if(kha_SystemImpl.chrome && kha_vr_VrInterface.instance.IsVrEnabled()) {
		return null;
	}
	if(navigator.getGamepads) {
		return window.navigator.getGamepads();
	} else {
		return null;
	}
};
var kha_Video = function() {
};
$hxClasses["kha.Video"] = kha_Video;
kha_Video.__name__ = true;
kha_Video.__interfaces__ = [kha_Resource];
kha_Video.prototype = {
	width: function() {
		return 100;
	}
	,height: function() {
		return 100;
	}
	,play: function(loop) {
		if(loop == null) {
			loop = false;
		}
	}
	,pause: function() {
	}
	,stop: function() {
	}
	,getLength: function() {
		return 0;
	}
	,getCurrentPos: function() {
		return 0;
	}
	,get_position: function() {
		return 0;
	}
	,set_position: function(value) {
		return 0;
	}
	,getVolume: function() {
		return 1;
	}
	,setVolume: function(volume) {
	}
	,isFinished: function() {
		return this.getCurrentPos() >= this.getLength();
	}
	,unload: function() {
	}
	,__class__: kha_Video
};
var kha_WebGLImage = function(width,height,format,renderTarget,depthStencilFormat) {
	this.pixels = null;
	this.depthTexture = null;
	this.texture = null;
	this.renderBuffer = null;
	this.frameBuffer = null;
	this.myWidth = width;
	this.myHeight = height;
	this.format = format;
	this.renderTarget = renderTarget;
	this.image = null;
	this.video = null;
	this.depthStencilFormat = depthStencilFormat;
	kha_WebGLImage.init();
	if(renderTarget) {
		this.createTexture();
	}
};
$hxClasses["kha.WebGLImage"] = kha_WebGLImage;
kha_WebGLImage.__name__ = true;
kha_WebGLImage.init = function() {
	if(kha_WebGLImage.context == null) {
		var canvas = window.document.createElement("canvas");
		if(canvas != null) {
			kha_WebGLImage.context = canvas.getContext("2d");
			canvas.width = 2048;
			canvas.height = 2048;
			kha_WebGLImage.context.globalCompositeOperation = "copy";
		}
	}
};
kha_WebGLImage.upperPowerOfTwo = function(v) {
	--v;
	v |= v >>> 1;
	v |= v >>> 2;
	v |= v >>> 4;
	v |= v >>> 8;
	v |= v >>> 16;
	return ++v;
};
kha_WebGLImage.formatByteSize = function(format) {
	switch(format[1]) {
	case 0:
		return 4;
	case 1:
		return 1;
	case 2:
		return 16;
	case 3:
		return 2;
	case 4:
		return 8;
	case 5:
		return 4;
	case 6:
		return 2;
	}
};
kha_WebGLImage.__super__ = kha_Image;
kha_WebGLImage.prototype = $extend(kha_Image.prototype,{
	image: null
	,video: null
	,data: null
	,myWidth: null
	,myHeight: null
	,format: null
	,renderTarget: null
	,frameBuffer: null
	,renderBuffer: null
	,texture: null
	,depthTexture: null
	,graphics1: null
	,graphics2: null
	,graphics4: null
	,depthStencilFormat: null
	,get_g1: function() {
		if(this.graphics1 == null) {
			this.graphics1 = new kha_graphics2_Graphics1(this);
		}
		return this.graphics1;
	}
	,get_g2: function() {
		if(this.graphics2 == null) {
			this.graphics2 = new kha_js_graphics4_Graphics2(this);
		}
		return this.graphics2;
	}
	,get_g4: function() {
		if(this.graphics4 == null) {
			this.graphics4 = new kha_js_graphics4_Graphics(this);
		}
		return this.graphics4;
	}
	,get_width: function() {
		return this.myWidth;
	}
	,get_height: function() {
		return this.myHeight;
	}
	,get_realWidth: function() {
		return this.myWidth;
	}
	,get_realHeight: function() {
		return this.myHeight;
	}
	,isOpaque: function(x,y) {
		if(this.data == null) {
			if(kha_WebGLImage.context == null) {
				return true;
			} else {
				this.createImageData();
			}
		}
		return this.data.data[y * (this.image.width | 0) * 4 + x * 4 + 3] != 0;
	}
	,at: function(x,y) {
		if(this.data == null) {
			if(kha_WebGLImage.context == null) {
				return -16777216;
			} else {
				this.createImageData();
			}
		}
		var r = this.data.data[y * (this.image.width | 0) * 4 + x * 4];
		var g = this.data.data[y * (this.image.width | 0) * 4 + x * 4 + 1];
		var b = this.data.data[y * (this.image.width | 0) * 4 + x * 4 + 2];
		var a = this.data.data[y * (this.image.width | 0) * 4 + x * 4 + 3];
		return kha__$Color_Color_$Impl_$._new(a << 24 | r << 16 | g << 8 | b);
	}
	,createImageData: function() {
		if(js_Boot.__instanceof(this.image,Uint8Array)) {
			this.data = new ImageData(new Uint8ClampedArray(this.image.buffer),this.get_width(),this.get_height());
		} else {
			kha_WebGLImage.context.strokeStyle = "rgba(0,0,0,0)";
			kha_WebGLImage.context.fillStyle = "rgba(0,0,0,0)";
			kha_WebGLImage.context.fillRect(0,0,this.image.width,this.image.height);
			kha_WebGLImage.context.drawImage(this.image,0,0,this.image.width,this.image.height,0,0,this.image.width,this.image.height);
			this.data = kha_WebGLImage.context.getImageData(0,0,this.image.width,this.image.height);
		}
	}
	,createTexture: function() {
		if(kha_SystemImpl.gl == null) {
			return;
		}
		this.texture = kha_SystemImpl.gl.createTexture();
		kha_SystemImpl.gl.bindTexture(3553,this.texture);
		kha_SystemImpl.gl.texParameteri(3553,10240,9729);
		kha_SystemImpl.gl.texParameteri(3553,10241,9729);
		kha_SystemImpl.gl.texParameteri(3553,10242,33071);
		kha_SystemImpl.gl.texParameteri(3553,10243,33071);
		if(this.renderTarget) {
			this.frameBuffer = kha_SystemImpl.gl.createFramebuffer();
			kha_SystemImpl.gl.bindFramebuffer(36160,this.frameBuffer);
			var _g = this.format;
			switch(_g[1]) {
			case 0:
				kha_SystemImpl.gl.texImage2D(3553,0,6408,this.get_realWidth(),this.get_realHeight(),0,6408,5121,null);
				break;
			case 2:
				kha_SystemImpl.gl.texImage2D(3553,0,kha_SystemImpl.gl2 ? 34836 : 6408,this.get_realWidth(),this.get_realHeight(),0,6408,5126,null);
				break;
			case 3:
				kha_SystemImpl.gl.texImage2D(3553,0,kha_SystemImpl.gl2 ? 33189 : 6402,this.get_realWidth(),this.get_realHeight(),0,6402,5123,null);
				break;
			case 4:
				kha_SystemImpl.gl.texImage2D(3553,0,kha_SystemImpl.gl2 ? 34842 : 6408,this.get_realWidth(),this.get_realHeight(),0,6408,kha_SystemImpl.halfFloat.HALF_FLOAT_OES,null);
				break;
			case 5:
				kha_SystemImpl.gl.texImage2D(3553,0,kha_SystemImpl.gl2 ? 33326 : 6406,this.get_realWidth(),this.get_realHeight(),0,kha_SystemImpl.gl2 ? 6403 : 6406,5126,null);
				break;
			case 6:
				kha_SystemImpl.gl.texImage2D(3553,0,kha_SystemImpl.gl2 ? 33325 : 6406,this.get_realWidth(),this.get_realHeight(),0,kha_SystemImpl.gl2 ? 6403 : 6406,kha_SystemImpl.halfFloat.HALF_FLOAT_OES,null);
				break;
			default:
				kha_SystemImpl.gl.texImage2D(3553,0,6408,this.get_realWidth(),this.get_realHeight(),0,6408,5121,null);
			}
			if(this.format == kha_graphics4_TextureFormat.DEPTH16) {
				kha_SystemImpl.gl.texParameteri(3553,10240,9728);
				kha_SystemImpl.gl.texParameteri(3553,10241,9728);
				kha_SystemImpl.gl.framebufferTexture2D(36160,36096,3553,this.texture,0);
				if(navigator.appVersion.indexOf("Win") == -1) {
					var colortex = kha_SystemImpl.gl.createTexture();
					kha_SystemImpl.gl.bindTexture(3553,colortex);
					kha_SystemImpl.gl.texImage2D(3553,0,6408,this.get_realWidth(),this.get_realHeight(),0,6408,5121,null);
					kha_SystemImpl.gl.framebufferTexture2D(36160,36064,3553,colortex,0);
					kha_SystemImpl.gl.bindTexture(3553,this.texture);
				}
			} else {
				kha_SystemImpl.gl.framebufferTexture2D(36160,36064,3553,this.texture,0);
			}
			this.initDepthStencilBuffer(this.depthStencilFormat);
			if(kha_SystemImpl.gl.checkFramebufferStatus(36160) != 36053) {
				haxe_Log.trace("WebGL error: Framebuffer incomplete",{ fileName : "WebGLImage.hx", lineNumber : 206, className : "kha.WebGLImage", methodName : "createTexture"});
			}
			kha_SystemImpl.gl.bindRenderbuffer(36161,null);
			kha_SystemImpl.gl.bindFramebuffer(36160,null);
		} else if(this.video != null) {
			kha_SystemImpl.gl.texImage2D(3553,0,6408,6408,5121,this.video);
		} else {
			var _g1 = this.format;
			switch(_g1[1]) {
			case 0:
				if(js_Boot.__instanceof(this.image,Uint8Array)) {
					kha_SystemImpl.gl.texImage2D(3553,0,6408,this.myWidth,this.myHeight,0,6408,5121,this.image);
				} else {
					kha_SystemImpl.gl.texImage2D(3553,0,6408,6408,5121,this.image);
				}
				break;
			case 2:
				kha_SystemImpl.gl.texImage2D(3553,0,kha_SystemImpl.gl2 ? 34836 : 6408,this.myWidth,this.myHeight,0,6408,5126,this.image);
				break;
			case 4:
				kha_SystemImpl.gl.texImage2D(3553,0,kha_SystemImpl.gl2 ? 34842 : 6408,this.myWidth,this.myHeight,0,6408,kha_SystemImpl.halfFloat.HALF_FLOAT_OES,this.image);
				break;
			case 5:
				kha_SystemImpl.gl.texImage2D(3553,0,kha_SystemImpl.gl2 ? 33326 : 6406,this.myWidth,this.myHeight,0,kha_SystemImpl.gl2 ? 6403 : 6406,5126,this.image);
				break;
			case 6:
				kha_SystemImpl.gl.texImage2D(3553,0,kha_SystemImpl.gl2 ? 33325 : 6406,this.myWidth,this.myHeight,0,kha_SystemImpl.gl2 ? 6403 : 6406,kha_SystemImpl.halfFloat.HALF_FLOAT_OES,this.image);
				break;
			default:
				kha_SystemImpl.gl.texImage2D(3553,0,6408,6408,5121,this.image);
			}
		}
		kha_SystemImpl.gl.bindTexture(3553,null);
	}
	,initDepthStencilBuffer: function(depthStencilFormat) {
		switch(depthStencilFormat) {
		case 0:
			break;
		case 1:case 5:
			if(kha_SystemImpl.depthTexture == null) {
				this.renderBuffer = kha_SystemImpl.gl.createRenderbuffer();
				kha_SystemImpl.gl.bindRenderbuffer(36161,this.renderBuffer);
				kha_SystemImpl.gl.renderbufferStorage(36161,33189,this.get_realWidth(),this.get_realHeight());
				kha_SystemImpl.gl.framebufferRenderbuffer(36160,36096,36161,this.renderBuffer);
			} else {
				this.depthTexture = kha_SystemImpl.gl.createTexture();
				kha_SystemImpl.gl.bindTexture(3553,this.depthTexture);
				if(depthStencilFormat == 1) {
					kha_SystemImpl.gl.texImage2D(3553,0,kha_SystemImpl.gl2 ? 33190 : 6402,this.get_realWidth(),this.get_realHeight(),0,6402,5125,null);
				} else {
					kha_SystemImpl.gl.texImage2D(3553,0,kha_SystemImpl.gl2 ? 33189 : 6402,this.get_realWidth(),this.get_realHeight(),0,6402,5123,null);
				}
				kha_SystemImpl.gl.texParameteri(3553,10240,9728);
				kha_SystemImpl.gl.texParameteri(3553,10241,9728);
				kha_SystemImpl.gl.texParameteri(3553,10242,33071);
				kha_SystemImpl.gl.texParameteri(3553,10243,33071);
				kha_SystemImpl.gl.bindFramebuffer(36160,this.frameBuffer);
				kha_SystemImpl.gl.framebufferTexture2D(36160,36096,3553,this.depthTexture,0);
			}
			break;
		case 2:case 3:case 4:
			if(kha_SystemImpl.depthTexture == null) {
				this.renderBuffer = kha_SystemImpl.gl.createRenderbuffer();
				kha_SystemImpl.gl.bindRenderbuffer(36161,this.renderBuffer);
				kha_SystemImpl.gl.renderbufferStorage(36161,34041,this.get_realWidth(),this.get_realHeight());
				kha_SystemImpl.gl.framebufferRenderbuffer(36160,33306,36161,this.renderBuffer);
			} else {
				this.depthTexture = kha_SystemImpl.gl.createTexture();
				kha_SystemImpl.gl.bindTexture(3553,this.depthTexture);
				kha_SystemImpl.gl.texImage2D(3553,0,kha_SystemImpl.gl2 ? 35056 : 34041,this.get_realWidth(),this.get_realHeight(),0,34041,kha_SystemImpl.depthTexture.UNSIGNED_INT_24_8_WEBGL,null);
				kha_SystemImpl.gl.texParameteri(3553,10240,9728);
				kha_SystemImpl.gl.texParameteri(3553,10241,9728);
				kha_SystemImpl.gl.texParameteri(3553,10242,33071);
				kha_SystemImpl.gl.texParameteri(3553,10243,33071);
				kha_SystemImpl.gl.bindFramebuffer(36160,this.frameBuffer);
				kha_SystemImpl.gl.framebufferTexture2D(36160,33306,3553,this.depthTexture,0);
			}
			break;
		}
	}
	,set: function(stage) {
		kha_SystemImpl.gl.activeTexture(33984 + stage);
		kha_SystemImpl.gl.bindTexture(3553,this.texture);
		if(this.video != null) {
			kha_SystemImpl.gl.texImage2D(3553,0,6408,6408,5121,this.video);
		}
	}
	,setDepth: function(stage) {
		kha_SystemImpl.gl.activeTexture(33984 + stage);
		kha_SystemImpl.gl.bindTexture(3553,this.depthTexture);
	}
	,setDepthStencilFrom: function(image) {
		kha_SystemImpl.gl.bindFramebuffer(36160,this.frameBuffer);
		kha_SystemImpl.gl.framebufferTexture2D(36160,36096,3553,(js_Boot.__cast(image , kha_WebGLImage)).depthTexture,0);
	}
	,bytesToArray: function(bytes) {
		var _g = this.format;
		switch(_g[1]) {
		case 0:case 1:
			return new Uint8Array(bytes.b.bufferValue);
		case 2:case 4:case 5:case 6:
			return new Float32Array(bytes.b.bufferValue);
		default:
			return new Uint8Array(bytes.b.bufferValue);
		}
	}
	,bytes: null
	,lock: function(level) {
		if(level == null) {
			level = 0;
		}
		this.bytes = new haxe_io_Bytes(new ArrayBuffer(kha_WebGLImage.formatByteSize(this.format) * this.get_width() * this.get_height()));
		return this.bytes;
	}
	,unlock: function() {
		if(kha_SystemImpl.gl != null) {
			this.texture = kha_SystemImpl.gl.createTexture();
			kha_SystemImpl.gl.bindTexture(3553,this.texture);
			kha_SystemImpl.gl.texParameteri(3553,10240,9729);
			kha_SystemImpl.gl.texParameteri(3553,10241,9729);
			kha_SystemImpl.gl.texParameteri(3553,10242,33071);
			kha_SystemImpl.gl.texParameteri(3553,10243,33071);
			var _g = this.format;
			switch(_g[1]) {
			case 0:
				kha_SystemImpl.gl.texImage2D(3553,0,6408,this.get_width(),this.get_height(),0,6408,5121,this.bytesToArray(this.bytes));
				break;
			case 1:
				kha_SystemImpl.gl.texImage2D(3553,0,6409,this.get_width(),this.get_height(),0,6409,5121,this.bytesToArray(this.bytes));
				if(kha_SystemImpl.gl.getError() == 1282) {
					var rgbaBytes = new haxe_io_Bytes(new ArrayBuffer(this.get_width() * this.get_height() * 4));
					var _g1 = 0;
					var _g2 = this.get_height();
					while(_g1 < _g2) {
						var y = _g1++;
						var _g3 = 0;
						var _g21 = this.get_width();
						while(_g3 < _g21) {
							var x = _g3++;
							var _this = this.bytes;
							var pos = y * this.get_width() + x;
							var value = _this.b[pos];
							var pos1 = y * this.get_width() * 4 + x * 4;
							rgbaBytes.b[pos1] = value & 255;
							var pos2 = y * this.get_width() * 4 + x * 4 + 1;
							rgbaBytes.b[pos2] = value & 255;
							var pos3 = y * this.get_width() * 4 + x * 4 + 2;
							rgbaBytes.b[pos3] = value & 255;
							var pos4 = y * this.get_width() * 4 + x * 4 + 3;
							rgbaBytes.b[pos4] = 255;
						}
					}
					kha_SystemImpl.gl.texImage2D(3553,0,6408,this.get_width(),this.get_height(),0,6408,5121,this.bytesToArray(rgbaBytes));
				}
				break;
			case 2:
				kha_SystemImpl.gl.texImage2D(3553,0,kha_SystemImpl.gl2 ? 34836 : 6408,this.get_width(),this.get_height(),0,6408,5126,this.bytesToArray(this.bytes));
				break;
			case 4:
				kha_SystemImpl.gl.texImage2D(3553,0,kha_SystemImpl.gl2 ? 34842 : 6408,this.get_width(),this.get_height(),0,6408,kha_SystemImpl.halfFloat.HALF_FLOAT_OES,this.bytesToArray(this.bytes));
				break;
			case 5:
				kha_SystemImpl.gl.texImage2D(3553,0,kha_SystemImpl.gl2 ? 33326 : 6406,this.get_width(),this.get_height(),0,kha_SystemImpl.gl2 ? 6403 : 6406,5126,this.bytesToArray(this.bytes));
				break;
			case 6:
				kha_SystemImpl.gl.texImage2D(3553,0,kha_SystemImpl.gl2 ? 33325 : 6406,this.get_width(),this.get_height(),0,kha_SystemImpl.gl2 ? 6403 : 6406,kha_SystemImpl.halfFloat.HALF_FLOAT_OES,this.bytesToArray(this.bytes));
				break;
			default:
				kha_SystemImpl.gl.texImage2D(3553,0,6408,this.get_width(),this.get_height(),0,6408,5121,this.bytesToArray(this.bytes));
			}
			kha_SystemImpl.gl.bindTexture(3553,null);
			this.bytes = null;
		}
	}
	,pixels: null
	,getPixels: function() {
		if(this.frameBuffer == null) {
			return null;
		}
		if(this.pixels == null) {
			this.pixels = new Uint8Array(kha_WebGLImage.formatByteSize(this.format) * this.get_width() * this.get_height());
		}
		kha_SystemImpl.gl.bindFramebuffer(36160,this.frameBuffer);
		kha_SystemImpl.gl.readPixels(0,0,this.myWidth,this.myHeight,6408,5121,this.pixels);
		return haxe_io_Bytes.ofData(this.pixels.buffer);
	}
	,unload: function() {
		if(this.texture != null) {
			kha_SystemImpl.gl.deleteTexture(this.texture);
		}
		if(this.depthTexture != null) {
			kha_SystemImpl.gl.deleteTexture(this.depthTexture);
		}
		if(this.frameBuffer != null) {
			kha_SystemImpl.gl.deleteFramebuffer(this.frameBuffer);
		}
		if(this.renderBuffer != null) {
			kha_SystemImpl.gl.deleteRenderbuffer(this.renderBuffer);
		}
	}
	,generateMipmaps: function(levels) {
		kha_SystemImpl.gl.bindTexture(3553,this.texture);
		kha_SystemImpl.gl.generateMipmap(3553);
	}
	,setMipmaps: function(mipmaps) {
		kha_SystemImpl.gl.bindTexture(3553,this.texture);
		if(this.format == kha_graphics4_TextureFormat.RGBA128) {
			var _g1 = 0;
			var _g = mipmaps.length;
			while(_g1 < _g) {
				var i = _g1++;
				kha_SystemImpl.gl.texImage2D(3553,i + 1,kha_SystemImpl.gl2 ? 34836 : 6408,mipmaps[i].get_width(),mipmaps[i].get_height(),0,6408,5126,(js_Boot.__cast(mipmaps[i] , kha_WebGLImage)).image);
			}
		} else if(this.format == kha_graphics4_TextureFormat.RGBA64) {
			var _g11 = 0;
			var _g2 = mipmaps.length;
			while(_g11 < _g2) {
				var i1 = _g11++;
				kha_SystemImpl.gl.texImage2D(3553,i1 + 1,kha_SystemImpl.gl2 ? 34842 : 6408,mipmaps[i1].get_width(),mipmaps[i1].get_height(),0,6408,kha_SystemImpl.halfFloat.HALF_FLOAT_OES,(js_Boot.__cast(mipmaps[i1] , kha_WebGLImage)).image);
			}
		} else {
			var _g12 = 0;
			var _g3 = mipmaps.length;
			while(_g12 < _g3) {
				var i2 = _g12++;
				kha_SystemImpl.gl.texImage2D(3553,i2 + 1,6408,6408,5121,(js_Boot.__cast(mipmaps[i2] , kha_WebGLImage)).image);
			}
		}
	}
	,__class__: kha_WebGLImage
});
var kha_WindowMode = $hxClasses["kha.WindowMode"] = { __ename__ : true, __constructs__ : ["Window","BorderlessWindow","Fullscreen"] };
kha_WindowMode.Window = ["Window",0];
kha_WindowMode.Window.toString = $estr;
kha_WindowMode.Window.__enum__ = kha_WindowMode;
kha_WindowMode.BorderlessWindow = ["BorderlessWindow",1];
kha_WindowMode.BorderlessWindow.toString = $estr;
kha_WindowMode.BorderlessWindow.__enum__ = kha_WindowMode;
kha_WindowMode.Fullscreen = ["Fullscreen",2];
kha_WindowMode.Fullscreen.toString = $estr;
kha_WindowMode.Fullscreen.__enum__ = kha_WindowMode;
var kha_Position = $hxClasses["kha.Position"] = { __ename__ : true, __constructs__ : ["Center","Fixed"] };
kha_Position.Center = ["Center",0];
kha_Position.Center.toString = $estr;
kha_Position.Center.__enum__ = kha_Position;
kha_Position.Fixed = function(v) { var $x = ["Fixed",1,v]; $x.__enum__ = kha_Position; $x.toString = $estr; return $x; };
var kha_TargetDisplay = $hxClasses["kha.TargetDisplay"] = { __ename__ : true, __constructs__ : ["Primary","ById"] };
kha_TargetDisplay.Primary = ["Primary",0];
kha_TargetDisplay.Primary.toString = $estr;
kha_TargetDisplay.Primary.__enum__ = kha_TargetDisplay;
kha_TargetDisplay.ById = function(id) { var $x = ["ById",1,id]; $x.__enum__ = kha_TargetDisplay; $x.toString = $estr; return $x; };
var kha_RendererOptions = function(textureFormat,depthStencilFormat,samplesPerPixel) {
	this.textureFormat = textureFormat;
	this.depthStencilFormat = depthStencilFormat;
	this.samplesPerPixel = samplesPerPixel;
};
$hxClasses["kha.RendererOptions"] = kha_RendererOptions;
kha_RendererOptions.__name__ = true;
kha_RendererOptions.prototype = {
	textureFormat: null
	,depthStencilFormat: null
	,samplesPerPixel: null
	,__class__: kha_RendererOptions
};
var kha_WindowedModeOptions = function(minimizable,maximizable,resizable) {
	this.minimizable = minimizable;
	this.maximizable = maximizable;
	this.resizable = resizable;
};
$hxClasses["kha.WindowedModeOptions"] = kha_WindowedModeOptions;
kha_WindowedModeOptions.__name__ = true;
kha_WindowedModeOptions.prototype = {
	minimizable: null
	,maximizable: null
	,resizable: null
	,__class__: kha_WindowedModeOptions
};
var kha_WindowOptions = function(width,height,mode,title,x,y,targetDisplay,rendererOptions,windowedModeOptions) {
	this.width = width;
	this.height = height;
	this.mode = mode;
	this.title = title;
	this.x = x;
	this.y = y;
	this.targetDisplay = targetDisplay;
	this.rendererOptions = rendererOptions;
	this.windowedModeOptions = windowedModeOptions;
};
$hxClasses["kha.WindowOptions"] = kha_WindowOptions;
kha_WindowOptions.__name__ = true;
kha_WindowOptions.prototype = {
	width: null
	,height: null
	,mode: null
	,title: null
	,x: null
	,y: null
	,targetDisplay: null
	,rendererOptions: null
	,windowedModeOptions: null
	,__class__: kha_WindowOptions
};
var kha_arrays__$Float32Array_Float32Array_$Impl_$ = {};
$hxClasses["kha.arrays._Float32Array.Float32Array_Impl_"] = kha_arrays__$Float32Array_Float32Array_$Impl_$;
kha_arrays__$Float32Array_Float32Array_$Impl_$.__name__ = true;
kha_arrays__$Float32Array_Float32Array_$Impl_$._new = function(elements) {
	var this1 = new Float32Array(elements);
	return this1;
};
kha_arrays__$Float32Array_Float32Array_$Impl_$.get_length = function(this1) {
	return this1.length;
};
kha_arrays__$Float32Array_Float32Array_$Impl_$.set = function(this1,index,value) {
	return this1[index] = value;
};
kha_arrays__$Float32Array_Float32Array_$Impl_$.get = function(this1,index) {
	return this1[index];
};
kha_arrays__$Float32Array_Float32Array_$Impl_$.data = function(this1) {
	return this1;
};
kha_arrays__$Float32Array_Float32Array_$Impl_$.arrayRead = function(this1,index) {
	return this1[index];
};
kha_arrays__$Float32Array_Float32Array_$Impl_$.arrayWrite = function(this1,index,value) {
	return this1[index] = value;
};
kha_arrays__$Float32Array_Float32Array_$Impl_$.subarray = function(this1,start,end) {
	return this1.subarray(start,end);
};
var kha_arrays__$Uint32Array_Uint32Array_$Impl_$ = {};
$hxClasses["kha.arrays._Uint32Array.Uint32Array_Impl_"] = kha_arrays__$Uint32Array_Uint32Array_$Impl_$;
kha_arrays__$Uint32Array_Uint32Array_$Impl_$.__name__ = true;
kha_arrays__$Uint32Array_Uint32Array_$Impl_$._new = function(elements) {
	var this1 = new Uint32Array(elements);
	return this1;
};
kha_arrays__$Uint32Array_Uint32Array_$Impl_$.get_length = function(this1) {
	return this1.length;
};
kha_arrays__$Uint32Array_Uint32Array_$Impl_$.set = function(this1,index,value) {
	return this1[index] = value;
};
kha_arrays__$Uint32Array_Uint32Array_$Impl_$.get = function(this1,index) {
	return this1[index];
};
kha_arrays__$Uint32Array_Uint32Array_$Impl_$.data = function(this1) {
	return this1;
};
kha_arrays__$Uint32Array_Uint32Array_$Impl_$.arrayRead = function(this1,index) {
	return this1[index];
};
kha_arrays__$Uint32Array_Uint32Array_$Impl_$.arrayWrite = function(this1,index,value) {
	return this1[index] = value;
};
kha_arrays__$Uint32Array_Uint32Array_$Impl_$.subarray = function(this1,start,end) {
	return this1.subarray(start,end);
};
var kha_audio1_AudioChannel = function() { };
$hxClasses["kha.audio1.AudioChannel"] = kha_audio1_AudioChannel;
kha_audio1_AudioChannel.__name__ = true;
kha_audio1_AudioChannel.prototype = {
	play: null
	,pause: null
	,stop: null
	,length: null
	,get_length: null
	,position: null
	,get_position: null
	,get_volume: null
	,set_volume: null
	,finished: null
	,get_finished: null
	,__class__: kha_audio1_AudioChannel
};
var kha_audio2_Audio = function() { };
$hxClasses["kha.audio2.Audio"] = kha_audio2_Audio;
kha_audio2_Audio.__name__ = true;
kha_audio2_Audio.initContext = function() {
	try {
		kha_audio2_Audio._context = new AudioContext();
		return;
	} catch( e ) {
	}
	try {
		this._context = new webkitAudioContext();
		return;
	} catch( e1 ) {
	}
};
kha_audio2_Audio._init = function() {
	kha_audio2_Audio.initContext();
	if(kha_audio2_Audio._context == null) {
		return false;
	}
	var bufferSize = 2048;
	kha_audio2_Audio.buffer = new kha_audio2_Buffer(bufferSize * 4,2,kha_audio2_Audio._context.sampleRate | 0);
	kha_audio2_Audio.processingNode = kha_audio2_Audio._context.createScriptProcessor(bufferSize,0,2);
	kha_audio2_Audio.processingNode.onaudioprocess = function(e) {
		var output1 = e.outputBuffer.getChannelData(0);
		var output2 = e.outputBuffer.getChannelData(1);
		if(kha_audio2_Audio.audioCallback != null) {
			kha_audio2_Audio.audioCallback(e.outputBuffer.length * 2,kha_audio2_Audio.buffer);
			var _g1 = 0;
			var _g = e.outputBuffer.length;
			while(_g1 < _g) {
				var i = _g1++;
				output1[i] = kha_audio2_Audio.buffer.data[kha_audio2_Audio.buffer.readLocation];
				kha_audio2_Audio.buffer.readLocation += 1;
				output2[i] = kha_audio2_Audio.buffer.data[kha_audio2_Audio.buffer.readLocation];
				kha_audio2_Audio.buffer.readLocation += 1;
				if(kha_audio2_Audio.buffer.readLocation >= kha_audio2_Audio.buffer.size) {
					kha_audio2_Audio.buffer.readLocation = 0;
				}
			}
		} else {
			var _g11 = 0;
			var _g2 = e.outputBuffer.length;
			while(_g11 < _g2) {
				var i1 = _g11++;
				output1[i1] = 0;
				output2[i1] = 0;
			}
		}
	};
	kha_audio2_Audio.processingNode.connect(kha_audio2_Audio._context.destination);
	return true;
};
kha_audio2_Audio.stream = function(sound,loop) {
	if(loop == null) {
		loop = false;
	}
	var element = window.document.createElement("audio");
	var blob = new Blob([sound.compressedData.b.bufferValue],{ type : "audio/mp4"});
	element.src = URL.createObjectURL(blob);
	element.loop = loop;
	var channel = new kha_js_AEAudioChannel(element);
	channel.play();
	return channel;
};
var kha_audio2_Audio1 = function() { };
$hxClasses["kha.audio2.Audio1"] = kha_audio2_Audio1;
kha_audio2_Audio1.__name__ = true;
kha_audio2_Audio1._init = function() {
	var this1 = new Array(16);
	kha_audio2_Audio1.soundChannels = this1;
	var this2 = new Array(16);
	kha_audio2_Audio1.streamChannels = this2;
	var this3 = new Array(16);
	kha_audio2_Audio1.internalSoundChannels = this3;
	var this4 = new Array(16);
	kha_audio2_Audio1.internalStreamChannels = this4;
	var this5 = new Array(512);
	kha_audio2_Audio1.sampleCache1 = this5;
	var this6 = new Array(512);
	kha_audio2_Audio1.sampleCache2 = this6;
	kha_audio2_Audio.audioCallback = kha_audio2_Audio1.mix;
};
kha_audio2_Audio1.max = function(a,b) {
	if(a > b) {
		return a;
	} else {
		return b;
	}
};
kha_audio2_Audio1.min = function(a,b) {
	if(a < b) {
		return a;
	} else {
		return b;
	}
};
kha_audio2_Audio1.mix = function(samples,buffer) {
	if(kha_audio2_Audio1.sampleCache1.length < samples) {
		var this1 = new Array(samples);
		kha_audio2_Audio1.sampleCache1 = this1;
		var this2 = new Array(samples);
		kha_audio2_Audio1.sampleCache2 = this2;
	}
	var _g1 = 0;
	var _g = samples;
	while(_g1 < _g) {
		var i = _g1++;
		kha_audio2_Audio1.sampleCache2[i] = 0;
	}
	var _g2 = 0;
	while(_g2 < 16) {
		var i1 = _g2++;
		kha_audio2_Audio1.internalSoundChannels[i1] = kha_audio2_Audio1.soundChannels[i1];
	}
	var _g3 = 0;
	while(_g3 < 16) {
		var i2 = _g3++;
		kha_audio2_Audio1.internalStreamChannels[i2] = kha_audio2_Audio1.streamChannels[i2];
	}
	var _g4 = 0;
	var _g11 = kha_audio2_Audio1.internalSoundChannels;
	while(_g4 < _g11.length) {
		var channel = _g11[_g4];
		++_g4;
		if(channel == null || channel.get_finished()) {
			continue;
		}
		channel.nextSamples(kha_audio2_Audio1.sampleCache1,samples,buffer.samplesPerSecond);
		var _g31 = 0;
		var _g21 = samples;
		while(_g31 < _g21) {
			var i3 = _g31++;
			var _g41 = i3;
			var _g5 = kha_audio2_Audio1.sampleCache2;
			var val = kha_audio2_Audio1.sampleCache1[i3] * channel.get_volume();
			_g5[_g41] = _g5[_g41] + val;
		}
	}
	var _g6 = 0;
	var _g12 = kha_audio2_Audio1.internalStreamChannels;
	while(_g6 < _g12.length) {
		var channel1 = _g12[_g6];
		++_g6;
		if(channel1 == null || channel1.get_finished()) {
			continue;
		}
		channel1.nextSamples(kha_audio2_Audio1.sampleCache1,samples,buffer.samplesPerSecond);
		var _g32 = 0;
		var _g22 = samples;
		while(_g32 < _g22) {
			var i4 = _g32++;
			var _g42 = i4;
			var _g51 = kha_audio2_Audio1.sampleCache2;
			var val1 = kha_audio2_Audio1.sampleCache1[i4] * channel1.get_volume();
			_g51[_g42] = _g51[_g42] + val1;
		}
	}
	var _g13 = 0;
	var _g7 = samples;
	while(_g13 < _g7) {
		var i5 = _g13++;
		var a = kha_audio2_Audio1.sampleCache2[i5];
		var a1 = a < 1.0 ? a : 1.0;
		buffer.data[buffer.writeLocation] = a1 > -1.0 ? a1 : -1.0;
		buffer.writeLocation += 1;
		if(buffer.writeLocation >= buffer.size) {
			buffer.writeLocation = 0;
		}
	}
};
kha_audio2_Audio1.play = function(sound,loop) {
	if(loop == null) {
		loop = false;
	}
	var channel = null;
	var _g = 0;
	while(_g < 16) {
		var i = _g++;
		if(kha_audio2_Audio1.soundChannels[i] == null || kha_audio2_Audio1.soundChannels[i].get_finished()) {
			channel = new kha_audio2_AudioChannel(loop);
			channel.data = sound.uncompressedData;
			kha_audio2_Audio1.soundChannels[i] = channel;
			break;
		}
	}
	return channel;
};
kha_audio2_Audio1._playAgain = function(channel) {
	var _g = 0;
	while(_g < 16) {
		var i = _g++;
		if(kha_audio2_Audio1.soundChannels[i] == null || kha_audio2_Audio1.soundChannels[i].get_finished() || kha_audio2_Audio1.soundChannels[i] == channel) {
			kha_audio2_Audio1.soundChannels[i] = channel;
			break;
		}
	}
};
kha_audio2_Audio1.stream = function(sound,loop) {
	if(loop == null) {
		loop = false;
	}
	var hardwareChannel = kha_audio2_Audio.stream(sound,loop);
	if(hardwareChannel != null) {
		return hardwareChannel;
	}
	var channel = null;
	var _g = 0;
	while(_g < 16) {
		var i = _g++;
		if(kha_audio2_Audio1.streamChannels[i] == null || kha_audio2_Audio1.streamChannels[i].get_finished()) {
			channel = new kha_audio2_StreamChannel(sound.compressedData,loop);
			kha_audio2_Audio1.streamChannels[i] = channel;
			break;
		}
	}
	return channel;
};
var kha_audio2_AudioChannel = function(looping) {
	this.paused = false;
	this.looping = looping;
	this.myVolume = 1;
	this.myPosition = 0;
};
$hxClasses["kha.audio2.AudioChannel"] = kha_audio2_AudioChannel;
kha_audio2_AudioChannel.__name__ = true;
kha_audio2_AudioChannel.__interfaces__ = [kha_audio1_AudioChannel];
kha_audio2_AudioChannel.prototype = {
	data: null
	,myVolume: null
	,myPosition: null
	,paused: null
	,looping: null
	,nextSamples: function(samples,length,sampleRate) {
		if(this.paused) {
			var _g1 = 0;
			var _g = length;
			while(_g1 < _g) {
				var i = _g1++;
				samples[i] = 0;
			}
			return;
		}
		var w_ptr = 0;
		var chk_ptr = 0;
		while(w_ptr < length) {
			var addressable_data = this.data.length - this.myPosition;
			var next_chunk = addressable_data < length ? addressable_data : length;
			while(chk_ptr < next_chunk) {
				samples[w_ptr] = this.data[this.myPosition];
				++this.myPosition;
				++chk_ptr;
				++w_ptr;
			}
			if(!this.looping) {
				break;
			} else {
				chk_ptr = 0;
				if(this.myPosition >= this.data.length) {
					this.myPosition = 0;
				}
			}
		}
		while(w_ptr < length) {
			samples[w_ptr] = 0;
			++w_ptr;
		}
	}
	,play: function() {
		this.paused = false;
		if(this.get_finished()) {
			this.myPosition = 0;
			kha_audio2_Audio1._playAgain(this);
		}
	}
	,pause: function() {
		this.paused = true;
	}
	,stop: function() {
		this.myPosition = this.data.length;
	}
	,length: null
	,get_length: function() {
		return this.data.length / 44100 / 2;
	}
	,position: null
	,get_position: function() {
		return this.myPosition / 44100 / 2;
	}
	,get_volume: function() {
		return this.myVolume;
	}
	,set_volume: function(value) {
		return this.myVolume = value;
	}
	,finished: null
	,get_finished: function() {
		return this.myPosition >= this.data.length;
	}
	,__class__: kha_audio2_AudioChannel
};
var kha_audio2_Buffer = function(size,channels,samplesPerSecond) {
	this.size = size;
	var this1 = new Array(size);
	this.data = this1;
	this.channels = channels;
	this.samplesPerSecond = samplesPerSecond;
	this.readLocation = 0;
	this.writeLocation = 0;
};
$hxClasses["kha.audio2.Buffer"] = kha_audio2_Buffer;
kha_audio2_Buffer.__name__ = true;
kha_audio2_Buffer.prototype = {
	channels: null
	,samplesPerSecond: null
	,data: null
	,size: null
	,readLocation: null
	,writeLocation: null
	,__class__: kha_audio2_Buffer
};
var kha_audio2_StreamChannel = function(data,loop) {
	this.paused = false;
	this.atend = false;
	this.myVolume = 1;
	this.loop = loop;
	this.reader = kha_audio2_ogg_vorbis_Reader.openFromBytes(data);
};
$hxClasses["kha.audio2.StreamChannel"] = kha_audio2_StreamChannel;
kha_audio2_StreamChannel.__name__ = true;
kha_audio2_StreamChannel.__interfaces__ = [kha_audio1_AudioChannel];
kha_audio2_StreamChannel.prototype = {
	reader: null
	,atend: null
	,loop: null
	,myVolume: null
	,paused: null
	,nextSamples: function(samples,length,sampleRate) {
		if(this.paused) {
			var _g1 = 0;
			var _g = length;
			while(_g1 < _g) {
				var i = _g1++;
				samples[i] = 0;
			}
			return;
		}
		var count = this.reader.read(samples,length / 2 | 0,2,sampleRate,true) * 2;
		if(count < length) {
			if(this.loop) {
				this.reader.set_currentMillisecond(0);
			} else {
				this.atend = true;
			}
			var _g11 = count;
			var _g2 = length;
			while(_g11 < _g2) {
				var i1 = _g11++;
				samples[i1] = 0;
			}
		}
	}
	,play: function() {
		this.paused = false;
	}
	,pause: function() {
		this.paused = true;
	}
	,stop: function() {
		this.atend = true;
	}
	,length: null
	,get_length: function() {
		return this.reader.get_totalMillisecond() / 1000.0;
	}
	,position: null
	,get_position: function() {
		return this.reader.get_currentMillisecond() / 1000.0;
	}
	,get_volume: function() {
		return this.myVolume;
	}
	,set_volume: function(value) {
		return this.myVolume = value;
	}
	,finished: null
	,get_finished: function() {
		return this.atend;
	}
	,__class__: kha_audio2_StreamChannel
};
var kha_audio2_ogg_tools_Crc32 = function() { };
$hxClasses["kha.audio2.ogg.tools.Crc32"] = kha_audio2_ogg_tools_Crc32;
kha_audio2_ogg_tools_Crc32.__name__ = true;
kha_audio2_ogg_tools_Crc32.init = function() {
	if(kha_audio2_ogg_tools_Crc32.table != null) {
		return;
	}
	var this1 = new Array(256);
	kha_audio2_ogg_tools_Crc32.table = this1;
	var _g = 0;
	while(_g < 256) {
		var i = _g++;
		var s = i << 24;
		var _g1 = 0;
		while(_g1 < 8) {
			var j = _g1++;
			s = s << 1 ^ (_$UInt_UInt_$Impl_$.gte(s,1 << 31) ? 79764919 : 0);
		}
		kha_audio2_ogg_tools_Crc32.table[i] = s;
	}
};
kha_audio2_ogg_tools_Crc32.update = function(crc,$byte) {
	return crc << 8 ^ kha_audio2_ogg_tools_Crc32.table[$byte ^ crc >>> 24];
};
var kha_audio2_ogg_tools_MathTools = function() { };
$hxClasses["kha.audio2.ogg.tools.MathTools"] = kha_audio2_ogg_tools_MathTools;
kha_audio2_ogg_tools_MathTools.__name__ = true;
kha_audio2_ogg_tools_MathTools.ilog = function(n) {
	var log2_4 = [0,1,2,2,3,3,3,3,4,4,4,4,4,4,4,4];
	if(n < 16384) {
		if(n < 16) {
			return log2_4[n];
		} else if(n < 512) {
			return 5 + log2_4[n >> 5];
		} else {
			return 10 + log2_4[n >> 10];
		}
	} else if(n < 16777216) {
		if(n < 524288) {
			return 15 + log2_4[n >> 15];
		} else {
			return 20 + log2_4[n >> 20];
		}
	} else if(n < 536870912) {
		return 25 + log2_4[n >> 25];
	} else if(n < -2147483648) {
		return 30 + log2_4[n >> 30];
	} else {
		return 0;
	}
};
var kha_audio2_ogg_tools_Mdct = function() { };
$hxClasses["kha.audio2.ogg.tools.Mdct"] = kha_audio2_ogg_tools_Mdct;
kha_audio2_ogg_tools_Mdct.__name__ = true;
kha_audio2_ogg_tools_Mdct.inverseTransform = function(buffer,n,a,b,c,bitReverse) {
	var n2 = n >> 1;
	var n4 = n >> 2;
	var n8 = n >> 3;
	var this1 = new Array(n2);
	var buf2 = this1;
	var dOffset = n2 - 2;
	var aaOffset = 0;
	var eOffset = 0;
	var eStopOffset = n2;
	while(eOffset != eStopOffset) {
		buf2[dOffset + 1] = buffer[eOffset] * a[aaOffset] - buffer[eOffset + 2] * a[aaOffset + 1];
		buf2[dOffset] = buffer[eOffset] * a[aaOffset + 1] + buffer[eOffset + 2] * a[aaOffset];
		dOffset -= 2;
		aaOffset += 2;
		eOffset += 4;
	}
	eOffset = n2 - 3;
	while(dOffset >= 0) {
		buf2[dOffset + 1] = -buffer[eOffset + 2] * a[aaOffset] - -buffer[eOffset] * a[aaOffset + 1];
		buf2[dOffset] = -buffer[eOffset + 2] * a[aaOffset + 1] + -buffer[eOffset] * a[aaOffset];
		dOffset -= 2;
		aaOffset += 2;
		eOffset -= 4;
	}
	var u = buffer;
	var v = buf2;
	var aaOffset1 = n2 - 8;
	var eOffset0 = n4;
	var eOffset1 = 0;
	var dOffset0 = n4;
	var dOffset1 = 0;
	while(aaOffset1 >= 0) {
		var v41_21 = v[eOffset0 + 1] - v[eOffset1 + 1];
		var v40_20 = v[eOffset0] - v[eOffset1];
		u[dOffset0 + 1] = v[eOffset0 + 1] + v[eOffset1 + 1];
		u[dOffset0] = v[eOffset0] + v[eOffset1];
		u[dOffset1 + 1] = v41_21 * a[aaOffset1 + 4] - v40_20 * a[aaOffset1 + 5];
		u[dOffset1] = v40_20 * a[aaOffset1 + 4] + v41_21 * a[aaOffset1 + 5];
		v41_21 = v[eOffset0 + 3] - v[eOffset1 + 3];
		v40_20 = v[eOffset0 + 2] - v[eOffset1 + 2];
		u[dOffset0 + 3] = v[eOffset0 + 3] + v[eOffset1 + 3];
		u[dOffset0 + 2] = v[eOffset0 + 2] + v[eOffset1 + 2];
		u[dOffset1 + 3] = v41_21 * a[aaOffset1] - v40_20 * a[aaOffset1 + 1];
		u[dOffset1 + 2] = v40_20 * a[aaOffset1] + v41_21 * a[aaOffset1 + 1];
		aaOffset1 -= 8;
		dOffset0 += 4;
		dOffset1 += 4;
		eOffset0 += 4;
		eOffset1 += 4;
	}
	var log2_4 = [0,1,2,2,3,3,3,3,4,4,4,4,4,4,4,4];
	var ld = (n < 16384 ? n < 16 ? log2_4[n] : n < 512 ? 5 + log2_4[n >> 5] : 10 + log2_4[n >> 10] : n < 16777216 ? n < 524288 ? 15 + log2_4[n >> 15] : 20 + log2_4[n >> 20] : n < 536870912 ? 25 + log2_4[n >> 25] : n < -2147483648 ? 30 + log2_4[n >> 30] : 0) - 1;
	var i_off = n2 - 1 - n4 * 0;
	var eeOffset0 = i_off;
	var eeOffset2 = i_off + -(n >> 3);
	var aOffset = 0;
	var i = (n >> 4 >> 2) + 1;
	while(--i > 0) {
		var k00_20 = u[eeOffset0] - u[eeOffset2];
		var k01_21 = u[eeOffset0 + -1] - u[eeOffset2 + -1];
		var _g = eeOffset0;
		var _g1 = u;
		_g1[_g] = _g1[_g] + u[eeOffset2];
		var _g2 = eeOffset0 + -1;
		var _g11 = u;
		_g11[_g2] = _g11[_g2] + u[eeOffset2 + -1];
		u[eeOffset2] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
		u[eeOffset2 + -1] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
		aOffset += 8;
		k00_20 = u[eeOffset0 + -2] - u[eeOffset2 + -2];
		k01_21 = u[eeOffset0 + -3] - u[eeOffset2 + -3];
		var _g3 = eeOffset0 + -2;
		var _g12 = u;
		_g12[_g3] = _g12[_g3] + u[eeOffset2 + -2];
		var _g4 = eeOffset0 + -3;
		var _g13 = u;
		_g13[_g4] = _g13[_g4] + u[eeOffset2 + -3];
		u[eeOffset2 + -2] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
		u[eeOffset2 + -3] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
		aOffset += 8;
		k00_20 = u[eeOffset0 + -4] - u[eeOffset2 + -4];
		k01_21 = u[eeOffset0 + -5] - u[eeOffset2 + -5];
		var _g5 = eeOffset0 + -4;
		var _g14 = u;
		_g14[_g5] = _g14[_g5] + u[eeOffset2 + -4];
		var _g6 = eeOffset0 + -5;
		var _g15 = u;
		_g15[_g6] = _g15[_g6] + u[eeOffset2 + -5];
		u[eeOffset2 + -4] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
		u[eeOffset2 + -5] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
		aOffset += 8;
		k00_20 = u[eeOffset0 + -6] - u[eeOffset2 + -6];
		k01_21 = u[eeOffset0 + -7] - u[eeOffset2 + -7];
		var _g7 = eeOffset0 + -6;
		var _g16 = u;
		_g16[_g7] = _g16[_g7] + u[eeOffset2 + -6];
		var _g8 = eeOffset0 + -7;
		var _g17 = u;
		_g17[_g8] = _g17[_g8] + u[eeOffset2 + -7];
		u[eeOffset2 + -6] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
		u[eeOffset2 + -7] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
		aOffset += 8;
		eeOffset0 -= 8;
		eeOffset2 -= 8;
	}
	var i_off1 = n2 - 1 - n4;
	var eeOffset01 = i_off1;
	var eeOffset21 = i_off1 + -(n >> 3);
	var aOffset1 = 0;
	var i1 = (n >> 4 >> 2) + 1;
	while(--i1 > 0) {
		var k00_201 = u[eeOffset01] - u[eeOffset21];
		var k01_211 = u[eeOffset01 + -1] - u[eeOffset21 + -1];
		var _g9 = eeOffset01;
		var _g18 = u;
		_g18[_g9] = _g18[_g9] + u[eeOffset21];
		var _g10 = eeOffset01 + -1;
		var _g19 = u;
		_g19[_g10] = _g19[_g10] + u[eeOffset21 + -1];
		u[eeOffset21] = k00_201 * a[aOffset1] - k01_211 * a[aOffset1 + 1];
		u[eeOffset21 + -1] = k01_211 * a[aOffset1] + k00_201 * a[aOffset1 + 1];
		aOffset1 += 8;
		k00_201 = u[eeOffset01 + -2] - u[eeOffset21 + -2];
		k01_211 = u[eeOffset01 + -3] - u[eeOffset21 + -3];
		var _g20 = eeOffset01 + -2;
		var _g110 = u;
		_g110[_g20] = _g110[_g20] + u[eeOffset21 + -2];
		var _g21 = eeOffset01 + -3;
		var _g111 = u;
		_g111[_g21] = _g111[_g21] + u[eeOffset21 + -3];
		u[eeOffset21 + -2] = k00_201 * a[aOffset1] - k01_211 * a[aOffset1 + 1];
		u[eeOffset21 + -3] = k01_211 * a[aOffset1] + k00_201 * a[aOffset1 + 1];
		aOffset1 += 8;
		k00_201 = u[eeOffset01 + -4] - u[eeOffset21 + -4];
		k01_211 = u[eeOffset01 + -5] - u[eeOffset21 + -5];
		var _g22 = eeOffset01 + -4;
		var _g112 = u;
		_g112[_g22] = _g112[_g22] + u[eeOffset21 + -4];
		var _g23 = eeOffset01 + -5;
		var _g113 = u;
		_g113[_g23] = _g113[_g23] + u[eeOffset21 + -5];
		u[eeOffset21 + -4] = k00_201 * a[aOffset1] - k01_211 * a[aOffset1 + 1];
		u[eeOffset21 + -5] = k01_211 * a[aOffset1] + k00_201 * a[aOffset1 + 1];
		aOffset1 += 8;
		k00_201 = u[eeOffset01 + -6] - u[eeOffset21 + -6];
		k01_211 = u[eeOffset01 + -7] - u[eeOffset21 + -7];
		var _g24 = eeOffset01 + -6;
		var _g114 = u;
		_g114[_g24] = _g114[_g24] + u[eeOffset21 + -6];
		var _g25 = eeOffset01 + -7;
		var _g115 = u;
		_g115[_g25] = _g115[_g25] + u[eeOffset21 + -7];
		u[eeOffset21 + -6] = k00_201 * a[aOffset1] - k01_211 * a[aOffset1 + 1];
		u[eeOffset21 + -7] = k01_211 * a[aOffset1] + k00_201 * a[aOffset1 + 1];
		aOffset1 += 8;
		eeOffset01 -= 8;
		eeOffset21 -= 8;
	}
	var d0 = n2 - 1 - n8 * 0;
	var aOffset2 = 0;
	var eOffset01 = d0;
	var eOffset2 = d0 + -(n >> 4);
	var i2 = (n >> 5 >> 2) + 1;
	while(--i2 > 0) {
		var k00_202 = u[eOffset01] - u[eOffset2];
		var k01_212 = u[eOffset01 + -1] - u[eOffset2 + -1];
		var _g26 = eOffset01;
		var _g116 = u;
		_g116[_g26] = _g116[_g26] + u[eOffset2];
		var _g27 = eOffset01 + -1;
		var _g117 = u;
		_g117[_g27] = _g117[_g27] + u[eOffset2 + -1];
		u[eOffset2] = k00_202 * a[aOffset2] - k01_212 * a[aOffset2 + 1];
		u[eOffset2 + -1] = k01_212 * a[aOffset2] + k00_202 * a[aOffset2 + 1];
		aOffset2 += 16;
		k00_202 = u[eOffset01 + -2] - u[eOffset2 + -2];
		k01_212 = u[eOffset01 + -3] - u[eOffset2 + -3];
		var _g28 = eOffset01 + -2;
		var _g118 = u;
		_g118[_g28] = _g118[_g28] + u[eOffset2 + -2];
		var _g29 = eOffset01 + -3;
		var _g119 = u;
		_g119[_g29] = _g119[_g29] + u[eOffset2 + -3];
		u[eOffset2 + -2] = k00_202 * a[aOffset2] - k01_212 * a[aOffset2 + 1];
		u[eOffset2 + -3] = k01_212 * a[aOffset2] + k00_202 * a[aOffset2 + 1];
		aOffset2 += 16;
		k00_202 = u[eOffset01 + -4] - u[eOffset2 + -4];
		k01_212 = u[eOffset01 + -5] - u[eOffset2 + -5];
		var _g30 = eOffset01 + -4;
		var _g120 = u;
		_g120[_g30] = _g120[_g30] + u[eOffset2 + -4];
		var _g31 = eOffset01 + -5;
		var _g121 = u;
		_g121[_g31] = _g121[_g31] + u[eOffset2 + -5];
		u[eOffset2 + -4] = k00_202 * a[aOffset2] - k01_212 * a[aOffset2 + 1];
		u[eOffset2 + -5] = k01_212 * a[aOffset2] + k00_202 * a[aOffset2 + 1];
		aOffset2 += 16;
		k00_202 = u[eOffset01 + -6] - u[eOffset2 + -6];
		k01_212 = u[eOffset01 + -7] - u[eOffset2 + -7];
		var _g32 = eOffset01 + -6;
		var _g122 = u;
		_g122[_g32] = _g122[_g32] + u[eOffset2 + -6];
		var _g33 = eOffset01 + -7;
		var _g123 = u;
		_g123[_g33] = _g123[_g33] + u[eOffset2 + -7];
		u[eOffset2 + -6] = k00_202 * a[aOffset2] - k01_212 * a[aOffset2 + 1];
		u[eOffset2 + -7] = k01_212 * a[aOffset2] + k00_202 * a[aOffset2 + 1];
		eOffset01 -= 8;
		eOffset2 -= 8;
		aOffset2 += 16;
	}
	var d01 = n2 - 1 - n8;
	var aOffset3 = 0;
	var eOffset02 = d01;
	var eOffset21 = d01 + -(n >> 4);
	var i3 = (n >> 5 >> 2) + 1;
	while(--i3 > 0) {
		var k00_203 = u[eOffset02] - u[eOffset21];
		var k01_213 = u[eOffset02 + -1] - u[eOffset21 + -1];
		var _g34 = eOffset02;
		var _g124 = u;
		_g124[_g34] = _g124[_g34] + u[eOffset21];
		var _g35 = eOffset02 + -1;
		var _g125 = u;
		_g125[_g35] = _g125[_g35] + u[eOffset21 + -1];
		u[eOffset21] = k00_203 * a[aOffset3] - k01_213 * a[aOffset3 + 1];
		u[eOffset21 + -1] = k01_213 * a[aOffset3] + k00_203 * a[aOffset3 + 1];
		aOffset3 += 16;
		k00_203 = u[eOffset02 + -2] - u[eOffset21 + -2];
		k01_213 = u[eOffset02 + -3] - u[eOffset21 + -3];
		var _g36 = eOffset02 + -2;
		var _g126 = u;
		_g126[_g36] = _g126[_g36] + u[eOffset21 + -2];
		var _g37 = eOffset02 + -3;
		var _g127 = u;
		_g127[_g37] = _g127[_g37] + u[eOffset21 + -3];
		u[eOffset21 + -2] = k00_203 * a[aOffset3] - k01_213 * a[aOffset3 + 1];
		u[eOffset21 + -3] = k01_213 * a[aOffset3] + k00_203 * a[aOffset3 + 1];
		aOffset3 += 16;
		k00_203 = u[eOffset02 + -4] - u[eOffset21 + -4];
		k01_213 = u[eOffset02 + -5] - u[eOffset21 + -5];
		var _g38 = eOffset02 + -4;
		var _g128 = u;
		_g128[_g38] = _g128[_g38] + u[eOffset21 + -4];
		var _g39 = eOffset02 + -5;
		var _g129 = u;
		_g129[_g39] = _g129[_g39] + u[eOffset21 + -5];
		u[eOffset21 + -4] = k00_203 * a[aOffset3] - k01_213 * a[aOffset3 + 1];
		u[eOffset21 + -5] = k01_213 * a[aOffset3] + k00_203 * a[aOffset3 + 1];
		aOffset3 += 16;
		k00_203 = u[eOffset02 + -6] - u[eOffset21 + -6];
		k01_213 = u[eOffset02 + -7] - u[eOffset21 + -7];
		var _g40 = eOffset02 + -6;
		var _g130 = u;
		_g130[_g40] = _g130[_g40] + u[eOffset21 + -6];
		var _g41 = eOffset02 + -7;
		var _g131 = u;
		_g131[_g41] = _g131[_g41] + u[eOffset21 + -7];
		u[eOffset21 + -6] = k00_203 * a[aOffset3] - k01_213 * a[aOffset3 + 1];
		u[eOffset21 + -7] = k01_213 * a[aOffset3] + k00_203 * a[aOffset3 + 1];
		eOffset02 -= 8;
		eOffset21 -= 8;
		aOffset3 += 16;
	}
	var d02 = n2 - 1 - n8 * 2;
	var aOffset4 = 0;
	var eOffset03 = d02;
	var eOffset22 = d02 + -(n >> 4);
	var i4 = (n >> 5 >> 2) + 1;
	while(--i4 > 0) {
		var k00_204 = u[eOffset03] - u[eOffset22];
		var k01_214 = u[eOffset03 + -1] - u[eOffset22 + -1];
		var _g42 = eOffset03;
		var _g132 = u;
		_g132[_g42] = _g132[_g42] + u[eOffset22];
		var _g43 = eOffset03 + -1;
		var _g133 = u;
		_g133[_g43] = _g133[_g43] + u[eOffset22 + -1];
		u[eOffset22] = k00_204 * a[aOffset4] - k01_214 * a[aOffset4 + 1];
		u[eOffset22 + -1] = k01_214 * a[aOffset4] + k00_204 * a[aOffset4 + 1];
		aOffset4 += 16;
		k00_204 = u[eOffset03 + -2] - u[eOffset22 + -2];
		k01_214 = u[eOffset03 + -3] - u[eOffset22 + -3];
		var _g44 = eOffset03 + -2;
		var _g134 = u;
		_g134[_g44] = _g134[_g44] + u[eOffset22 + -2];
		var _g45 = eOffset03 + -3;
		var _g135 = u;
		_g135[_g45] = _g135[_g45] + u[eOffset22 + -3];
		u[eOffset22 + -2] = k00_204 * a[aOffset4] - k01_214 * a[aOffset4 + 1];
		u[eOffset22 + -3] = k01_214 * a[aOffset4] + k00_204 * a[aOffset4 + 1];
		aOffset4 += 16;
		k00_204 = u[eOffset03 + -4] - u[eOffset22 + -4];
		k01_214 = u[eOffset03 + -5] - u[eOffset22 + -5];
		var _g46 = eOffset03 + -4;
		var _g136 = u;
		_g136[_g46] = _g136[_g46] + u[eOffset22 + -4];
		var _g47 = eOffset03 + -5;
		var _g137 = u;
		_g137[_g47] = _g137[_g47] + u[eOffset22 + -5];
		u[eOffset22 + -4] = k00_204 * a[aOffset4] - k01_214 * a[aOffset4 + 1];
		u[eOffset22 + -5] = k01_214 * a[aOffset4] + k00_204 * a[aOffset4 + 1];
		aOffset4 += 16;
		k00_204 = u[eOffset03 + -6] - u[eOffset22 + -6];
		k01_214 = u[eOffset03 + -7] - u[eOffset22 + -7];
		var _g48 = eOffset03 + -6;
		var _g138 = u;
		_g138[_g48] = _g138[_g48] + u[eOffset22 + -6];
		var _g49 = eOffset03 + -7;
		var _g139 = u;
		_g139[_g49] = _g139[_g49] + u[eOffset22 + -7];
		u[eOffset22 + -6] = k00_204 * a[aOffset4] - k01_214 * a[aOffset4 + 1];
		u[eOffset22 + -7] = k01_214 * a[aOffset4] + k00_204 * a[aOffset4 + 1];
		eOffset03 -= 8;
		eOffset22 -= 8;
		aOffset4 += 16;
	}
	var d03 = n2 - 1 - n8 * 3;
	var aOffset5 = 0;
	var eOffset04 = d03;
	var eOffset23 = d03 + -(n >> 4);
	var i5 = (n >> 5 >> 2) + 1;
	while(--i5 > 0) {
		var k00_205 = u[eOffset04] - u[eOffset23];
		var k01_215 = u[eOffset04 + -1] - u[eOffset23 + -1];
		var _g50 = eOffset04;
		var _g140 = u;
		_g140[_g50] = _g140[_g50] + u[eOffset23];
		var _g51 = eOffset04 + -1;
		var _g141 = u;
		_g141[_g51] = _g141[_g51] + u[eOffset23 + -1];
		u[eOffset23] = k00_205 * a[aOffset5] - k01_215 * a[aOffset5 + 1];
		u[eOffset23 + -1] = k01_215 * a[aOffset5] + k00_205 * a[aOffset5 + 1];
		aOffset5 += 16;
		k00_205 = u[eOffset04 + -2] - u[eOffset23 + -2];
		k01_215 = u[eOffset04 + -3] - u[eOffset23 + -3];
		var _g52 = eOffset04 + -2;
		var _g142 = u;
		_g142[_g52] = _g142[_g52] + u[eOffset23 + -2];
		var _g53 = eOffset04 + -3;
		var _g143 = u;
		_g143[_g53] = _g143[_g53] + u[eOffset23 + -3];
		u[eOffset23 + -2] = k00_205 * a[aOffset5] - k01_215 * a[aOffset5 + 1];
		u[eOffset23 + -3] = k01_215 * a[aOffset5] + k00_205 * a[aOffset5 + 1];
		aOffset5 += 16;
		k00_205 = u[eOffset04 + -4] - u[eOffset23 + -4];
		k01_215 = u[eOffset04 + -5] - u[eOffset23 + -5];
		var _g54 = eOffset04 + -4;
		var _g144 = u;
		_g144[_g54] = _g144[_g54] + u[eOffset23 + -4];
		var _g55 = eOffset04 + -5;
		var _g145 = u;
		_g145[_g55] = _g145[_g55] + u[eOffset23 + -5];
		u[eOffset23 + -4] = k00_205 * a[aOffset5] - k01_215 * a[aOffset5 + 1];
		u[eOffset23 + -5] = k01_215 * a[aOffset5] + k00_205 * a[aOffset5 + 1];
		aOffset5 += 16;
		k00_205 = u[eOffset04 + -6] - u[eOffset23 + -6];
		k01_215 = u[eOffset04 + -7] - u[eOffset23 + -7];
		var _g56 = eOffset04 + -6;
		var _g146 = u;
		_g146[_g56] = _g146[_g56] + u[eOffset23 + -6];
		var _g57 = eOffset04 + -7;
		var _g147 = u;
		_g147[_g57] = _g147[_g57] + u[eOffset23 + -7];
		u[eOffset23 + -6] = k00_205 * a[aOffset5] - k01_215 * a[aOffset5 + 1];
		u[eOffset23 + -7] = k01_215 * a[aOffset5] + k00_205 * a[aOffset5 + 1];
		eOffset04 -= 8;
		eOffset23 -= 8;
		aOffset5 += 16;
	}
	var _g148 = 2;
	var _g58 = ld - 3 >> 1;
	while(_g148 < _g58) {
		var l = _g148++;
		var k0 = n >> l + 2;
		var k0_2 = k0 >> 1;
		var lim = 1 << l + 1;
		var _g310 = 0;
		var _g210 = lim;
		while(_g310 < _g210) {
			var i6 = _g310++;
			var d04 = n2 - 1 - k0 * i6;
			var k1 = 1 << l + 3;
			var aOffset6 = 0;
			var eOffset05 = d04;
			var eOffset24 = d04 + -k0_2;
			var i7 = (n >> l + 4 >> 2) + 1;
			while(--i7 > 0) {
				var k00_206 = u[eOffset05] - u[eOffset24];
				var k01_216 = u[eOffset05 + -1] - u[eOffset24 + -1];
				var _g59 = eOffset05;
				var _g149 = u;
				_g149[_g59] = _g149[_g59] + u[eOffset24];
				var _g60 = eOffset05 + -1;
				var _g150 = u;
				_g150[_g60] = _g150[_g60] + u[eOffset24 + -1];
				u[eOffset24] = k00_206 * a[aOffset6] - k01_216 * a[aOffset6 + 1];
				u[eOffset24 + -1] = k01_216 * a[aOffset6] + k00_206 * a[aOffset6 + 1];
				aOffset6 += k1;
				k00_206 = u[eOffset05 + -2] - u[eOffset24 + -2];
				k01_216 = u[eOffset05 + -3] - u[eOffset24 + -3];
				var _g61 = eOffset05 + -2;
				var _g151 = u;
				_g151[_g61] = _g151[_g61] + u[eOffset24 + -2];
				var _g62 = eOffset05 + -3;
				var _g152 = u;
				_g152[_g62] = _g152[_g62] + u[eOffset24 + -3];
				u[eOffset24 + -2] = k00_206 * a[aOffset6] - k01_216 * a[aOffset6 + 1];
				u[eOffset24 + -3] = k01_216 * a[aOffset6] + k00_206 * a[aOffset6 + 1];
				aOffset6 += k1;
				k00_206 = u[eOffset05 + -4] - u[eOffset24 + -4];
				k01_216 = u[eOffset05 + -5] - u[eOffset24 + -5];
				var _g63 = eOffset05 + -4;
				var _g153 = u;
				_g153[_g63] = _g153[_g63] + u[eOffset24 + -4];
				var _g64 = eOffset05 + -5;
				var _g154 = u;
				_g154[_g64] = _g154[_g64] + u[eOffset24 + -5];
				u[eOffset24 + -4] = k00_206 * a[aOffset6] - k01_216 * a[aOffset6 + 1];
				u[eOffset24 + -5] = k01_216 * a[aOffset6] + k00_206 * a[aOffset6 + 1];
				aOffset6 += k1;
				k00_206 = u[eOffset05 + -6] - u[eOffset24 + -6];
				k01_216 = u[eOffset05 + -7] - u[eOffset24 + -7];
				var _g65 = eOffset05 + -6;
				var _g155 = u;
				_g155[_g65] = _g155[_g65] + u[eOffset24 + -6];
				var _g66 = eOffset05 + -7;
				var _g156 = u;
				_g156[_g66] = _g156[_g66] + u[eOffset24 + -7];
				u[eOffset24 + -6] = k00_206 * a[aOffset6] - k01_216 * a[aOffset6 + 1];
				u[eOffset24 + -7] = k01_216 * a[aOffset6] + k00_206 * a[aOffset6 + 1];
				eOffset05 -= 8;
				eOffset24 -= 8;
				aOffset6 += k1;
			}
		}
	}
	var _g157 = ld - 3 >> 1;
	var _g67 = ld - 6;
	while(_g157 < _g67) {
		var l1 = _g157++;
		var k01 = n >> l1 + 2;
		var k11 = 1 << l1 + 3;
		var k0_21 = k01 >> 1;
		var rlim = n >> l1 + 6;
		var lim1 = 1 << l1 + 1;
		var aOffset7 = 0;
		var i_off2 = n2 - 1;
		var r = rlim + 1;
		while(--r > 0) {
			var A0 = a[aOffset7];
			var A1 = a[aOffset7 + 1];
			var A2 = a[aOffset7 + k11];
			var A3 = a[aOffset7 + k11 + 1];
			var A4 = a[aOffset7 + k11 * 2];
			var A5 = a[aOffset7 + k11 * 2 + 1];
			var A6 = a[aOffset7 + k11 * 3];
			var A7 = a[aOffset7 + k11 * 3 + 1];
			var eeOffset02 = i_off2;
			var eeOffset22 = i_off2 + -k0_21;
			var i8 = lim1 + 1;
			while(--i8 > 0) {
				var k00 = u[eeOffset02] - u[eeOffset22];
				var k111 = u[eeOffset02 + -1] - u[eeOffset22 + -1];
				u[eeOffset02] = u[eeOffset02] + u[eeOffset22];
				u[eeOffset02 + -1] = u[eeOffset02 + -1] + u[eeOffset22 + -1];
				u[eeOffset22] = k00 * A0 - k111 * A1;
				u[eeOffset22 + -1] = k111 * A0 + k00 * A1;
				k00 = u[eeOffset02 + -2] - u[eeOffset22 + -2];
				k111 = u[eeOffset02 + -3] - u[eeOffset22 + -3];
				u[eeOffset02 + -2] = u[eeOffset02 + -2] + u[eeOffset22 + -2];
				u[eeOffset02 + -3] = u[eeOffset02 + -3] + u[eeOffset22 + -3];
				u[eeOffset22 + -2] = k00 * A2 - k111 * A3;
				u[eeOffset22 + -3] = k111 * A2 + k00 * A3;
				k00 = u[eeOffset02 + -4] - u[eeOffset22 + -4];
				k111 = u[eeOffset02 + -5] - u[eeOffset22 + -5];
				u[eeOffset02 + -4] = u[eeOffset02 + -4] + u[eeOffset22 + -4];
				u[eeOffset02 + -5] = u[eeOffset02 + -5] + u[eeOffset22 + -5];
				u[eeOffset22 + -4] = k00 * A4 - k111 * A5;
				u[eeOffset22 + -5] = k111 * A4 + k00 * A5;
				k00 = u[eeOffset02 + -6] - u[eeOffset22 + -6];
				k111 = u[eeOffset02 + -7] - u[eeOffset22 + -7];
				u[eeOffset02 + -6] = u[eeOffset02 + -6] + u[eeOffset22 + -6];
				u[eeOffset02 + -7] = u[eeOffset02 + -7] + u[eeOffset22 + -7];
				u[eeOffset22 + -6] = k00 * A6 - k111 * A7;
				u[eeOffset22 + -7] = k111 * A6 + k00 * A7;
				eeOffset02 -= k01;
				eeOffset22 -= k01;
			}
			aOffset7 += k11 * 4;
			i_off2 -= 8;
		}
	}
	var i_off3 = n2 - 1;
	var A21 = a[n >> 3];
	var zOffset = i_off3;
	var baseOffset = i_off3 - 16 * (n >> 5);
	while(zOffset > baseOffset) {
		var t0 = u[zOffset];
		var t1 = u[zOffset + -8];
		u[zOffset + -8] = t0 - t1;
		u[zOffset] = t0 + t1;
		t0 = u[zOffset + -1];
		t1 = u[zOffset + -9];
		u[zOffset + -9] = t0 - t1;
		u[zOffset + -1] = t0 + t1;
		t0 = u[zOffset + -2];
		t1 = u[zOffset + -10];
		var k001 = t0 - t1;
		u[zOffset + -2] = t0 + t1;
		t0 = u[zOffset + -3];
		t1 = u[zOffset + -11];
		var k112 = t0 - t1;
		u[zOffset + -3] = t0 + t1;
		u[zOffset + -10] = (k001 + k112) * A21;
		u[zOffset + -11] = (k112 - k001) * A21;
		t0 = u[zOffset + -4];
		t1 = u[zOffset + -12];
		k001 = t1 - t0;
		u[zOffset + -4] = t0 + t1;
		t0 = u[zOffset + -5];
		t1 = u[zOffset + -13];
		k112 = t0 - t1;
		u[zOffset + -5] = t0 + t1;
		u[zOffset + -12] = k112;
		u[zOffset + -13] = k001;
		t0 = u[zOffset + -6];
		t1 = u[zOffset + -14];
		k001 = t1 - t0;
		u[zOffset + -6] = t0 + t1;
		t0 = u[zOffset + -7];
		t1 = u[zOffset + -15];
		k112 = t0 - t1;
		u[zOffset + -7] = t0 + t1;
		u[zOffset + -14] = (k001 + k112) * A21;
		u[zOffset + -15] = (k001 - k112) * A21;
		var t01 = u[zOffset];
		var t11 = u[zOffset + -4];
		var k002 = t01 - t11;
		var y0 = t01 + t11;
		t01 = u[zOffset + -2];
		t11 = u[zOffset + -6];
		var y2 = t01 + t11;
		var k22 = t01 - t11;
		u[zOffset] = y0 + y2;
		u[zOffset + -2] = y0 - y2;
		var k33 = u[zOffset + -3] - u[zOffset + -7];
		u[zOffset + -4] = k002 + k33;
		u[zOffset + -6] = k002 - k33;
		t01 = u[zOffset + -1];
		t11 = u[zOffset + -5];
		var k113 = t01 - t11;
		var y1 = t01 + t11;
		var y3 = u[zOffset + -3] + u[zOffset + -7];
		u[zOffset + -1] = y1 + y3;
		u[zOffset + -3] = y1 - y3;
		u[zOffset + -5] = k113 - k22;
		u[zOffset + -7] = k113 + k22;
		var zOffset1 = zOffset - 8;
		var t02 = u[zOffset1];
		var t12 = u[zOffset1 + -4];
		var k003 = t02 - t12;
		var y01 = t02 + t12;
		t02 = u[zOffset1 + -2];
		t12 = u[zOffset1 + -6];
		var y21 = t02 + t12;
		var k221 = t02 - t12;
		u[zOffset1] = y01 + y21;
		u[zOffset1 + -2] = y01 - y21;
		var k331 = u[zOffset1 + -3] - u[zOffset1 + -7];
		u[zOffset1 + -4] = k003 + k331;
		u[zOffset1 + -6] = k003 - k331;
		t02 = u[zOffset1 + -1];
		t12 = u[zOffset1 + -5];
		var k114 = t02 - t12;
		var y11 = t02 + t12;
		var y31 = u[zOffset1 + -3] + u[zOffset1 + -7];
		u[zOffset1 + -1] = y11 + y31;
		u[zOffset1 + -3] = y11 - y31;
		u[zOffset1 + -5] = k114 - k221;
		u[zOffset1 + -7] = k114 + k221;
		zOffset -= 16;
	}
	var brOffset = 0;
	var dOffset01 = n4 - 4;
	var dOffset11 = n2 - 4;
	while(dOffset01 >= 0) {
		var k4 = bitReverse[brOffset];
		v[dOffset11 + 3] = u[k4];
		v[dOffset11 + 2] = u[k4 + 1];
		v[dOffset01 + 3] = u[k4 + 2];
		v[dOffset01 + 2] = u[k4 + 3];
		k4 = bitReverse[brOffset + 1];
		v[dOffset11 + 1] = u[k4];
		v[dOffset11] = u[k4 + 1];
		v[dOffset01 + 1] = u[k4 + 2];
		v[dOffset01] = u[k4 + 3];
		dOffset01 -= 4;
		dOffset11 -= 4;
		brOffset += 2;
	}
	var cOffset = 0;
	var dOffset2 = 0;
	var eOffset3 = n2 - 4;
	while(dOffset2 < eOffset3) {
		var a02 = v[dOffset2] - v[eOffset3 + 2];
		var a11 = v[dOffset2 + 1] + v[eOffset3 + 3];
		var b0 = c[cOffset + 1] * a02 + c[cOffset] * a11;
		var b1 = c[cOffset + 1] * a11 - c[cOffset] * a02;
		var b2 = v[dOffset2] + v[eOffset3 + 2];
		var b3 = v[dOffset2 + 1] - v[eOffset3 + 3];
		v[dOffset2] = b2 + b0;
		v[dOffset2 + 1] = b3 + b1;
		v[eOffset3 + 2] = b2 - b0;
		v[eOffset3 + 3] = b1 - b3;
		a02 = v[dOffset2 + 2] - v[eOffset3];
		a11 = v[dOffset2 + 3] + v[eOffset3 + 1];
		b0 = c[cOffset + 3] * a02 + c[cOffset + 2] * a11;
		b1 = c[cOffset + 3] * a11 - c[cOffset + 2] * a02;
		b2 = v[dOffset2 + 2] + v[eOffset3];
		b3 = v[dOffset2 + 3] - v[eOffset3 + 1];
		v[dOffset2 + 2] = b2 + b0;
		v[dOffset2 + 3] = b3 + b1;
		v[eOffset3] = b2 - b0;
		v[eOffset3 + 1] = b1 - b3;
		cOffset += 4;
		dOffset2 += 4;
		eOffset3 -= 4;
	}
	var bOffset = n2 - 8;
	var eOffset4 = n2 - 8;
	var dOffset02 = 0;
	var dOffset12 = n2 - 4;
	var dOffset21 = n2;
	var dOffset3 = n - 4;
	while(eOffset4 >= 0) {
		var p3 = buf2[eOffset4 + 6] * b[bOffset + 7] - buf2[eOffset4 + 7] * b[bOffset + 6];
		var p2 = -buf2[eOffset4 + 6] * b[bOffset + 6] - buf2[eOffset4 + 7] * b[bOffset + 7];
		buffer[dOffset02] = p3;
		buffer[dOffset12 + 3] = -p3;
		buffer[dOffset21] = p2;
		buffer[dOffset3 + 3] = p2;
		var p1 = buf2[eOffset4 + 4] * b[bOffset + 5] - buf2[eOffset4 + 5] * b[bOffset + 4];
		var p0 = -buf2[eOffset4 + 4] * b[bOffset + 4] - buf2[eOffset4 + 5] * b[bOffset + 5];
		buffer[dOffset02 + 1] = p1;
		buffer[dOffset12 + 2] = -p1;
		buffer[dOffset21 + 1] = p0;
		buffer[dOffset3 + 2] = p0;
		p3 = buf2[eOffset4 + 2] * b[bOffset + 3] - buf2[eOffset4 + 3] * b[bOffset + 2];
		p2 = -buf2[eOffset4 + 2] * b[bOffset + 2] - buf2[eOffset4 + 3] * b[bOffset + 3];
		buffer[dOffset02 + 2] = p3;
		buffer[dOffset12 + 1] = -p3;
		buffer[dOffset21 + 2] = p2;
		buffer[dOffset3 + 1] = p2;
		p1 = buf2[eOffset4] * b[bOffset + 1] - buf2[eOffset4 + 1] * b[bOffset];
		p0 = -buf2[eOffset4] * b[bOffset] - buf2[eOffset4 + 1] * b[bOffset + 1];
		buffer[dOffset02 + 3] = p1;
		buffer[dOffset12] = -p1;
		buffer[dOffset21 + 3] = p0;
		buffer[dOffset3] = p0;
		bOffset -= 8;
		eOffset4 -= 8;
		dOffset02 += 4;
		dOffset21 += 4;
		dOffset12 -= 4;
		dOffset3 -= 4;
	}
};
kha_audio2_ogg_tools_Mdct.step3Iter0Loop = function(n,e,i_off,k_off,a) {
	var eeOffset0 = i_off;
	var eeOffset2 = i_off + k_off;
	var aOffset = 0;
	var i = (n >> 2) + 1;
	while(--i > 0) {
		var k00_20 = e[eeOffset0] - e[eeOffset2];
		var k01_21 = e[eeOffset0 + -1] - e[eeOffset2 + -1];
		var _g = eeOffset0;
		var _g1 = e;
		_g1[_g] = _g1[_g] + e[eeOffset2];
		var _g2 = eeOffset0 + -1;
		var _g11 = e;
		_g11[_g2] = _g11[_g2] + e[eeOffset2 + -1];
		e[eeOffset2] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
		e[eeOffset2 + -1] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
		aOffset += 8;
		k00_20 = e[eeOffset0 + -2] - e[eeOffset2 + -2];
		k01_21 = e[eeOffset0 + -3] - e[eeOffset2 + -3];
		var _g3 = eeOffset0 + -2;
		var _g12 = e;
		_g12[_g3] = _g12[_g3] + e[eeOffset2 + -2];
		var _g4 = eeOffset0 + -3;
		var _g13 = e;
		_g13[_g4] = _g13[_g4] + e[eeOffset2 + -3];
		e[eeOffset2 + -2] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
		e[eeOffset2 + -3] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
		aOffset += 8;
		k00_20 = e[eeOffset0 + -4] - e[eeOffset2 + -4];
		k01_21 = e[eeOffset0 + -5] - e[eeOffset2 + -5];
		var _g5 = eeOffset0 + -4;
		var _g14 = e;
		_g14[_g5] = _g14[_g5] + e[eeOffset2 + -4];
		var _g6 = eeOffset0 + -5;
		var _g15 = e;
		_g15[_g6] = _g15[_g6] + e[eeOffset2 + -5];
		e[eeOffset2 + -4] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
		e[eeOffset2 + -5] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
		aOffset += 8;
		k00_20 = e[eeOffset0 + -6] - e[eeOffset2 + -6];
		k01_21 = e[eeOffset0 + -7] - e[eeOffset2 + -7];
		var _g7 = eeOffset0 + -6;
		var _g16 = e;
		_g16[_g7] = _g16[_g7] + e[eeOffset2 + -6];
		var _g8 = eeOffset0 + -7;
		var _g17 = e;
		_g17[_g8] = _g17[_g8] + e[eeOffset2 + -7];
		e[eeOffset2 + -6] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
		e[eeOffset2 + -7] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
		aOffset += 8;
		eeOffset0 -= 8;
		eeOffset2 -= 8;
	}
};
kha_audio2_ogg_tools_Mdct.step3InnerRLoop = function(lim,e,d0,k_off,a,k1) {
	var aOffset = 0;
	var eOffset0 = d0;
	var eOffset2 = d0 + k_off;
	var i = (lim >> 2) + 1;
	while(--i > 0) {
		var k00_20 = e[eOffset0] - e[eOffset2];
		var k01_21 = e[eOffset0 + -1] - e[eOffset2 + -1];
		var _g = eOffset0;
		var _g1 = e;
		_g1[_g] = _g1[_g] + e[eOffset2];
		var _g2 = eOffset0 + -1;
		var _g11 = e;
		_g11[_g2] = _g11[_g2] + e[eOffset2 + -1];
		e[eOffset2] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
		e[eOffset2 + -1] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
		aOffset += k1;
		k00_20 = e[eOffset0 + -2] - e[eOffset2 + -2];
		k01_21 = e[eOffset0 + -3] - e[eOffset2 + -3];
		var _g3 = eOffset0 + -2;
		var _g12 = e;
		_g12[_g3] = _g12[_g3] + e[eOffset2 + -2];
		var _g4 = eOffset0 + -3;
		var _g13 = e;
		_g13[_g4] = _g13[_g4] + e[eOffset2 + -3];
		e[eOffset2 + -2] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
		e[eOffset2 + -3] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
		aOffset += k1;
		k00_20 = e[eOffset0 + -4] - e[eOffset2 + -4];
		k01_21 = e[eOffset0 + -5] - e[eOffset2 + -5];
		var _g5 = eOffset0 + -4;
		var _g14 = e;
		_g14[_g5] = _g14[_g5] + e[eOffset2 + -4];
		var _g6 = eOffset0 + -5;
		var _g15 = e;
		_g15[_g6] = _g15[_g6] + e[eOffset2 + -5];
		e[eOffset2 + -4] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
		e[eOffset2 + -5] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
		aOffset += k1;
		k00_20 = e[eOffset0 + -6] - e[eOffset2 + -6];
		k01_21 = e[eOffset0 + -7] - e[eOffset2 + -7];
		var _g7 = eOffset0 + -6;
		var _g16 = e;
		_g16[_g7] = _g16[_g7] + e[eOffset2 + -6];
		var _g8 = eOffset0 + -7;
		var _g17 = e;
		_g17[_g8] = _g17[_g8] + e[eOffset2 + -7];
		e[eOffset2 + -6] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
		e[eOffset2 + -7] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
		eOffset0 -= 8;
		eOffset2 -= 8;
		aOffset += k1;
	}
};
kha_audio2_ogg_tools_Mdct.step3InnerSLoop = function(n,e,i_off,k_off,a,aOffset0,aOffset1,k0) {
	var A0 = a[aOffset0];
	var A1 = a[aOffset0 + 1];
	var A2 = a[aOffset0 + aOffset1];
	var A3 = a[aOffset0 + aOffset1 + 1];
	var A4 = a[aOffset0 + aOffset1 * 2];
	var A5 = a[aOffset0 + aOffset1 * 2 + 1];
	var A6 = a[aOffset0 + aOffset1 * 3];
	var A7 = a[aOffset0 + aOffset1 * 3 + 1];
	var eeOffset0 = i_off;
	var eeOffset2 = i_off + k_off;
	var i = n + 1;
	while(--i > 0) {
		var k00 = e[eeOffset0] - e[eeOffset2];
		var k11 = e[eeOffset0 + -1] - e[eeOffset2 + -1];
		e[eeOffset0] = e[eeOffset0] + e[eeOffset2];
		e[eeOffset0 + -1] = e[eeOffset0 + -1] + e[eeOffset2 + -1];
		e[eeOffset2] = k00 * A0 - k11 * A1;
		e[eeOffset2 + -1] = k11 * A0 + k00 * A1;
		k00 = e[eeOffset0 + -2] - e[eeOffset2 + -2];
		k11 = e[eeOffset0 + -3] - e[eeOffset2 + -3];
		e[eeOffset0 + -2] = e[eeOffset0 + -2] + e[eeOffset2 + -2];
		e[eeOffset0 + -3] = e[eeOffset0 + -3] + e[eeOffset2 + -3];
		e[eeOffset2 + -2] = k00 * A2 - k11 * A3;
		e[eeOffset2 + -3] = k11 * A2 + k00 * A3;
		k00 = e[eeOffset0 + -4] - e[eeOffset2 + -4];
		k11 = e[eeOffset0 + -5] - e[eeOffset2 + -5];
		e[eeOffset0 + -4] = e[eeOffset0 + -4] + e[eeOffset2 + -4];
		e[eeOffset0 + -5] = e[eeOffset0 + -5] + e[eeOffset2 + -5];
		e[eeOffset2 + -4] = k00 * A4 - k11 * A5;
		e[eeOffset2 + -5] = k11 * A4 + k00 * A5;
		k00 = e[eeOffset0 + -6] - e[eeOffset2 + -6];
		k11 = e[eeOffset0 + -7] - e[eeOffset2 + -7];
		e[eeOffset0 + -6] = e[eeOffset0 + -6] + e[eeOffset2 + -6];
		e[eeOffset0 + -7] = e[eeOffset0 + -7] + e[eeOffset2 + -7];
		e[eeOffset2 + -6] = k00 * A6 - k11 * A7;
		e[eeOffset2 + -7] = k11 * A6 + k00 * A7;
		eeOffset0 -= k0;
		eeOffset2 -= k0;
	}
};
kha_audio2_ogg_tools_Mdct.iter54 = function(e,zOffset) {
	var t0 = e[zOffset];
	var t1 = e[zOffset + -4];
	var k00 = t0 - t1;
	var y0 = t0 + t1;
	t0 = e[zOffset + -2];
	t1 = e[zOffset + -6];
	var y2 = t0 + t1;
	var k22 = t0 - t1;
	e[zOffset] = y0 + y2;
	e[zOffset + -2] = y0 - y2;
	var k33 = e[zOffset + -3] - e[zOffset + -7];
	e[zOffset + -4] = k00 + k33;
	e[zOffset + -6] = k00 - k33;
	t0 = e[zOffset + -1];
	t1 = e[zOffset + -5];
	var k11 = t0 - t1;
	var y1 = t0 + t1;
	var y3 = e[zOffset + -3] + e[zOffset + -7];
	e[zOffset + -1] = y1 + y3;
	e[zOffset + -3] = y1 - y3;
	e[zOffset + -5] = k11 - k22;
	e[zOffset + -7] = k11 + k22;
};
kha_audio2_ogg_tools_Mdct.step3InnerSLoopLd654 = function(n,e,i_off,a,baseN) {
	var A2 = a[baseN >> 3];
	var zOffset = i_off;
	var baseOffset = i_off - 16 * n;
	while(zOffset > baseOffset) {
		var t0 = e[zOffset];
		var t1 = e[zOffset + -8];
		e[zOffset + -8] = t0 - t1;
		e[zOffset] = t0 + t1;
		t0 = e[zOffset + -1];
		t1 = e[zOffset + -9];
		e[zOffset + -9] = t0 - t1;
		e[zOffset + -1] = t0 + t1;
		t0 = e[zOffset + -2];
		t1 = e[zOffset + -10];
		var k00 = t0 - t1;
		e[zOffset + -2] = t0 + t1;
		t0 = e[zOffset + -3];
		t1 = e[zOffset + -11];
		var k11 = t0 - t1;
		e[zOffset + -3] = t0 + t1;
		e[zOffset + -10] = (k00 + k11) * A2;
		e[zOffset + -11] = (k11 - k00) * A2;
		t0 = e[zOffset + -4];
		t1 = e[zOffset + -12];
		k00 = t1 - t0;
		e[zOffset + -4] = t0 + t1;
		t0 = e[zOffset + -5];
		t1 = e[zOffset + -13];
		k11 = t0 - t1;
		e[zOffset + -5] = t0 + t1;
		e[zOffset + -12] = k11;
		e[zOffset + -13] = k00;
		t0 = e[zOffset + -6];
		t1 = e[zOffset + -14];
		k00 = t1 - t0;
		e[zOffset + -6] = t0 + t1;
		t0 = e[zOffset + -7];
		t1 = e[zOffset + -15];
		k11 = t0 - t1;
		e[zOffset + -7] = t0 + t1;
		e[zOffset + -14] = (k00 + k11) * A2;
		e[zOffset + -15] = (k00 - k11) * A2;
		var t01 = e[zOffset];
		var t11 = e[zOffset + -4];
		var k001 = t01 - t11;
		var y0 = t01 + t11;
		t01 = e[zOffset + -2];
		t11 = e[zOffset + -6];
		var y2 = t01 + t11;
		var k22 = t01 - t11;
		e[zOffset] = y0 + y2;
		e[zOffset + -2] = y0 - y2;
		var k33 = e[zOffset + -3] - e[zOffset + -7];
		e[zOffset + -4] = k001 + k33;
		e[zOffset + -6] = k001 - k33;
		t01 = e[zOffset + -1];
		t11 = e[zOffset + -5];
		var k111 = t01 - t11;
		var y1 = t01 + t11;
		var y3 = e[zOffset + -3] + e[zOffset + -7];
		e[zOffset + -1] = y1 + y3;
		e[zOffset + -3] = y1 - y3;
		e[zOffset + -5] = k111 - k22;
		e[zOffset + -7] = k111 + k22;
		var zOffset1 = zOffset - 8;
		var t02 = e[zOffset1];
		var t12 = e[zOffset1 + -4];
		var k002 = t02 - t12;
		var y01 = t02 + t12;
		t02 = e[zOffset1 + -2];
		t12 = e[zOffset1 + -6];
		var y21 = t02 + t12;
		var k221 = t02 - t12;
		e[zOffset1] = y01 + y21;
		e[zOffset1 + -2] = y01 - y21;
		var k331 = e[zOffset1 + -3] - e[zOffset1 + -7];
		e[zOffset1 + -4] = k002 + k331;
		e[zOffset1 + -6] = k002 - k331;
		t02 = e[zOffset1 + -1];
		t12 = e[zOffset1 + -5];
		var k112 = t02 - t12;
		var y11 = t02 + t12;
		var y31 = e[zOffset1 + -3] + e[zOffset1 + -7];
		e[zOffset1 + -1] = y11 + y31;
		e[zOffset1 + -3] = y11 - y31;
		e[zOffset1 + -5] = k112 - k221;
		e[zOffset1 + -7] = k112 + k221;
		zOffset -= 16;
	}
};
var kha_audio2_ogg_vorbis_Reader = function(input,seekFunc,inputLength) {
	this.seekFunc = seekFunc;
	this.inputLength = inputLength;
	this.decoder = kha_audio2_ogg_vorbis_VorbisDecoder.start(input);
	this.decoder.setupSampleNumber(seekFunc,inputLength);
	this.loopStart = this.get_header().comment.get_loopStart();
	this.loopLength = this.get_header().comment.get_loopLength();
};
$hxClasses["kha.audio2.ogg.vorbis.Reader"] = kha_audio2_ogg_vorbis_Reader;
kha_audio2_ogg_vorbis_Reader.__name__ = true;
kha_audio2_ogg_vorbis_Reader.openFromBytes = function(bytes) {
	var input = new haxe_io_BytesInput(bytes);
	var a1 = input;
	return new kha_audio2_ogg_vorbis_Reader(input,function(a2) {
		kha_audio2_ogg_vorbis_Reader.seekBytes(a1,a2);
	},bytes.length);
};
kha_audio2_ogg_vorbis_Reader.seekBytes = function(bytes,pos) {
	bytes.set_position(pos);
};
kha_audio2_ogg_vorbis_Reader.readAll = function(bytes,output,useFloat) {
	if(useFloat == null) {
		useFloat = false;
	}
	var input = new haxe_io_BytesInput(bytes);
	var decoder = kha_audio2_ogg_vorbis_VorbisDecoder.start(input);
	var a1 = input;
	decoder.setupSampleNumber(function(a2) {
		kha_audio2_ogg_vorbis_Reader.seekBytes(a1,a2);
	},bytes.length);
	var header = decoder.header;
	var count = 0;
	var bufferSize = 4096;
	var length = bufferSize * header.channel;
	var this1 = new Array(length);
	var buffer = this1;
	while(true) {
		var n = decoder.read(buffer,bufferSize,header.channel,header.sampleRate,useFloat);
		var _g1 = 0;
		var _g = n * header.channel;
		while(_g1 < _g) {
			var i = _g1++;
			output.writeFloat(buffer[i]);
		}
		if(n == 0) {
			break;
		}
		count += n;
	}
	return decoder.header;
};
kha_audio2_ogg_vorbis_Reader.prototype = {
	decoder: null
	,get_header: function() {
		return this.decoder.header;
	}
	,get_totalSample: function() {
		return this.decoder.totalSample;
	}
	,get_totalMillisecond: function() {
		var samples = this.decoder.totalSample;
		var b = this.get_header().sampleRate;
		return _$UInt_UInt_$Impl_$.toFloat(samples) / _$UInt_UInt_$Impl_$.toFloat(b) * 1000;
	}
	,get_currentSample: function() {
		return this.decoder.currentSample;
	}
	,set_currentSample: function(value) {
		this.decoder.seek(this.seekFunc,this.inputLength,value);
		return this.decoder.currentSample;
	}
	,get_currentMillisecond: function() {
		var samples = this.get_currentSample();
		var b = this.get_header().sampleRate;
		return _$UInt_UInt_$Impl_$.toFloat(samples) / _$UInt_UInt_$Impl_$.toFloat(b) * 1000;
	}
	,set_currentMillisecond: function(value) {
		var _g = value / 1000;
		var _g1 = this.get_header().sampleRate;
		this.set_currentSample(Math.floor(_$UInt_UInt_$Impl_$.toFloat(_g1) * _g));
		return this.get_currentMillisecond();
	}
	,loopStart: null
	,loopLength: null
	,seekFunc: null
	,inputLength: null
	,read: function(output,samples,channels,sampleRate,useFloat) {
		if(useFloat == null) {
			useFloat = false;
		}
		this.decoder.ensurePosition(this.seekFunc);
		if(samples == null) {
			samples = this.decoder.totalSample;
		}
		if(channels == null) {
			channels = this.get_header().channel;
		}
		if(sampleRate == null) {
			sampleRate = this.get_header().sampleRate;
		}
		return this.decoder.read(output,samples,channels,sampleRate,useFloat);
	}
	,clone: function() {
		var reader = Type.createEmptyInstance(kha_audio2_ogg_vorbis_Reader);
		reader.seekFunc = this.seekFunc;
		reader.inputLength = this.inputLength;
		reader.decoder = this.decoder.clone(this.seekFunc);
		reader.loopStart = this.loopStart;
		reader.loopLength = this.loopLength;
		return reader;
	}
	,sampleToMillisecond: function(samples) {
		var b = this.get_header().sampleRate;
		return _$UInt_UInt_$Impl_$.toFloat(samples) / _$UInt_UInt_$Impl_$.toFloat(b) * 1000;
	}
	,millisecondToSample: function(millseconds) {
		var _g = millseconds / 1000;
		var _g1 = this.get_header().sampleRate;
		return Math.floor(_$UInt_UInt_$Impl_$.toFloat(_g1) * _g);
	}
	,__class__: kha_audio2_ogg_vorbis_Reader
};
var kha_audio2_ogg_vorbis_VorbisDecodeState = function(input) {
	this.nextSeg = 0;
	this.firstDecode = false;
	this.bytesInSeg = 0;
	this.validBits = 0;
	this.input = input;
	this.inputPosition = 0;
	this.page = new kha_audio2_ogg_vorbis_data_Page();
	kha_audio2_ogg_tools_Crc32.init();
};
$hxClasses["kha.audio2.ogg.vorbis.VorbisDecodeState"] = kha_audio2_ogg_vorbis_VorbisDecodeState;
kha_audio2_ogg_vorbis_VorbisDecodeState.__name__ = true;
kha_audio2_ogg_vorbis_VorbisDecodeState.prototype = {
	page: null
	,eof: null
	,pFirst: null
	,pLast: null
	,validBits: null
	,inputPosition: null
	,input: null
	,discardSamplesDeferred: null
	,segments: null
	,bytesInSeg: null
	,channelBuffers: null
	,channelBufferStart: null
	,channelBufferEnd: null
	,currentSample: null
	,previousWindow: null
	,previousLength: null
	,finalY: null
	,firstDecode: null
	,nextSeg: null
	,acc: null
	,lastSeg: null
	,lastSegWhich: null
	,endSegWithKnownLoc: null
	,knownLocForPacket: null
	,error: null
	,currentLoc: null
	,currentLocValid: null
	,firstAudioPageOffset: null
	,setup: function(loc0,loc1) {
		this.inputPosition += 1;
		var segmentCount = this.input.readByte();
		this.inputPosition += segmentCount;
		var this1 = new Array(segmentCount);
		var vec = this1;
		var _g1 = 0;
		var _g = segmentCount;
		while(_g1 < _g) {
			var i = _g1++;
			vec[i] = this.input.readByte();
		}
		this.segments = vec;
		this.endSegWithKnownLoc = -2;
		if(loc0 != -1 || loc1 != -1) {
			var i1 = segmentCount - 1;
			while(i1 >= 0) {
				if(this.segments[i1] < 255) {
					break;
				}
				if(i1 >= 0) {
					this.endSegWithKnownLoc = i1;
					this.knownLocForPacket = loc0;
				}
				--i1;
			}
		}
		if(this.firstDecode) {
			var i2 = 0;
			var len = 0;
			var p = new kha_audio2_ogg_vorbis_data_ProbedPage();
			var _g11 = 0;
			var _g2 = segmentCount;
			while(_g11 < _g2) {
				var i3 = _g11++;
				len += this.segments[i3];
			}
			len += 27 + segmentCount;
			p.pageStart = this.firstAudioPageOffset;
			p.pageEnd = p.pageStart + len;
			p.firstDecodedSample = 0;
			p.lastDecodedSample = loc0;
			this.pFirst = p;
		}
		this.nextSeg = 0;
	}
	,clone: function(seekFunc) {
		var state = Type.createEmptyInstance(kha_audio2_ogg_vorbis_VorbisDecodeState);
		seekFunc(this.inputPosition);
		state.input = this.input;
		state.eof = this.eof;
		state.validBits = this.validBits;
		state.discardSamplesDeferred = this.discardSamplesDeferred;
		state.firstDecode = this.firstDecode;
		state.nextSeg = this.nextSeg;
		state.bytesInSeg = this.bytesInSeg;
		state.acc = state.acc;
		state.lastSeg = this.lastSeg;
		state.lastSegWhich = this.lastSegWhich;
		state.currentLoc = this.currentLoc;
		state.currentLocValid = this.currentLocValid;
		state.inputPosition = this.inputPosition;
		state.firstAudioPageOffset = this.firstAudioPageOffset;
		state.error = this.error;
		state.segments = this.segments;
		state.pFirst = this.pFirst;
		state.pLast = this.pLast;
		state.page = this.page.clone();
		return state;
	}
	,next: function() {
		if(this.lastSeg) {
			return 0;
		}
		if(this.nextSeg == -1) {
			this.lastSegWhich = this.segments.length - 1;
			try {
				this.page.start(this);
			} catch( e ) {
				if (e instanceof js__$Boot_HaxeError) e = e.val;
				if( js_Boot.__instanceof(e,kha_audio2_ogg_vorbis_data_ReaderError) ) {
					this.lastSeg = true;
					this.error = e;
					return 0;
				} else throw(e);
			}
			if((this.page.flag & 1) == 0) {
				throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.CONTINUED_PACKET_FLAG_INVALID,null,{ fileName : "VorbisDecodeState.hx", lineNumber : 171, className : "kha.audio2.ogg.vorbis.VorbisDecodeState", methodName : "next"}));
			}
		}
		var len = this.segments[this.nextSeg++];
		if(len < 255) {
			this.lastSeg = true;
			this.lastSegWhich = this.nextSeg - 1;
		}
		if(this.nextSeg >= this.segments.length) {
			this.nextSeg = -1;
		}
		var b = this.bytesInSeg == 0;
		this.bytesInSeg = len;
		return len;
	}
	,startPacket: function() {
		while(this.nextSeg == -1) {
			this.page.start(this);
			if((this.page.flag & 1) != 0) {
				throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.MISSING_CAPTURE_PATTERN,null,{ fileName : "VorbisDecodeState.hx", lineNumber : 193, className : "kha.audio2.ogg.vorbis.VorbisDecodeState", methodName : "startPacket"}));
			}
		}
		this.lastSeg = false;
		this.validBits = 0;
		this.bytesInSeg = 0;
	}
	,maybeStartPacket: function() {
		if(this.nextSeg == -1) {
			var eof = false;
			var x;
			try {
				this.inputPosition += 1;
				x = this.input.readByte();
			} catch( e ) {
				if (e instanceof js__$Boot_HaxeError) e = e.val;
				if( js_Boot.__instanceof(e,haxe_io_Eof) ) {
					eof = true;
					x = 0;
				} else throw(e);
			}
			if(eof) {
				return false;
			}
			var tmp;
			var tmp1;
			var tmp2;
			if(x == 79) {
				this.inputPosition += 1;
				tmp2 = this.input.readByte() != 103;
			} else {
				tmp2 = true;
			}
			if(!tmp2) {
				this.inputPosition += 1;
				tmp1 = this.input.readByte() != 103;
			} else {
				tmp1 = true;
			}
			if(!tmp1) {
				this.inputPosition += 1;
				tmp = this.input.readByte() != 83;
			} else {
				tmp = true;
			}
			if(tmp) {
				throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.MISSING_CAPTURE_PATTERN,null,{ fileName : "VorbisDecodeState.hx", lineNumber : 218, className : "kha.audio2.ogg.vorbis.VorbisDecodeState", methodName : "maybeStartPacket"}));
			}
			this.page.startWithoutCapturePattern(this);
		}
		this.startPacket();
		return true;
	}
	,readBits: function(n) {
		if(this.validBits < 0) {
			return 0;
		} else if(this.validBits < n) {
			if(n > 24) {
				return this.readBits(24) + (this.readBits(n - 24) << 24);
			} else {
				if(this.validBits == 0) {
					this.acc = 0;
				}
				while(true) {
					if(this.bytesInSeg == 0 && (this.lastSeg || this.next() == 0)) {
						this.validBits = -1;
						break;
					} else {
						this.bytesInSeg--;
						this.inputPosition += 1;
						this.acc = this.acc + (this.input.readByte() << this.validBits);
						this.validBits += 8;
					}
					if(!(this.validBits < n)) {
						break;
					}
				}
				if(this.validBits < 0) {
					return 0;
				} else {
					var z = this.acc & (1 << n) - 1;
					this.acc = this.acc >>> n;
					this.validBits -= n;
					return z;
				}
			}
		} else {
			var z1 = this.acc & (1 << n) - 1;
			this.acc = this.acc >>> n;
			this.validBits -= n;
			return z1;
		}
	}
	,readPacketRaw: function() {
		if(this.bytesInSeg == 0 && (this.lastSeg || this.next() == 0)) {
			return -1;
		} else {
			this.bytesInSeg--;
			this.inputPosition += 1;
			return this.input.readByte();
		}
	}
	,readPacket: function() {
		var x;
		if(this.bytesInSeg == 0 && (this.lastSeg || this.next() == 0)) {
			x = -1;
		} else {
			this.bytesInSeg--;
			this.inputPosition += 1;
			x = this.input.readByte();
		}
		this.validBits = 0;
		return x;
	}
	,flushPacket: function() {
		while(this.bytesInSeg != 0 || !this.lastSeg && this.next() != 0) {
			this.bytesInSeg--;
			this.inputPosition += 1;
			this.input.readByte();
		}
	}
	,vorbisValidate: function() {
		var header = new haxe_io_Bytes(new ArrayBuffer(6));
		var _g = 0;
		while(_g < 6) {
			var i = _g++;
			var x;
			if(this.bytesInSeg == 0 && (this.lastSeg || this.next() == 0)) {
				x = -1;
			} else {
				this.bytesInSeg--;
				this.inputPosition += 1;
				x = this.input.readByte();
			}
			this.validBits = 0;
			header.b[i] = x & 255;
		}
		if(header.toString() != "vorbis") {
			throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,"vorbis header",{ fileName : "VorbisDecodeState.hx", lineNumber : 300, className : "kha.audio2.ogg.vorbis.VorbisDecodeState", methodName : "vorbisValidate"}));
		}
	}
	,firstPageValidate: function() {
		if(this.segments.length != 1) {
			throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_FIRST_PAGE,"segmentCount",{ fileName : "VorbisDecodeState.hx", lineNumber : 307, className : "kha.audio2.ogg.vorbis.VorbisDecodeState", methodName : "firstPageValidate"}));
		}
		if(this.segments[0] != 30) {
			throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_FIRST_PAGE,"decodeState head",{ fileName : "VorbisDecodeState.hx", lineNumber : 310, className : "kha.audio2.ogg.vorbis.VorbisDecodeState", methodName : "firstPageValidate"}));
		}
	}
	,startFirstDecode: function() {
		this.firstAudioPageOffset = this.inputPosition;
		this.firstDecode = true;
	}
	,capturePattern: function() {
		var tmp;
		var tmp1;
		var tmp2;
		this.inputPosition += 1;
		if(this.input.readByte() == 79) {
			this.inputPosition += 1;
			tmp2 = this.input.readByte() != 103;
		} else {
			tmp2 = true;
		}
		if(!tmp2) {
			this.inputPosition += 1;
			tmp1 = this.input.readByte() != 103;
		} else {
			tmp1 = true;
		}
		if(!tmp1) {
			this.inputPosition += 1;
			tmp = this.input.readByte() != 83;
		} else {
			tmp = true;
		}
		if(tmp) {
			throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.MISSING_CAPTURE_PATTERN,null,{ fileName : "VorbisDecodeState.hx", lineNumber : 323, className : "kha.audio2.ogg.vorbis.VorbisDecodeState", methodName : "capturePattern"}));
		}
	}
	,skip: function(len) {
		this.inputPosition += len;
		var this1 = new Array(len);
		var vec = this1;
		var _g1 = 0;
		var _g = len;
		while(_g1 < _g) {
			var i = _g1++;
			vec[i] = this.input.readByte();
		}
	}
	,prepHuffman: function() {
		if(this.validBits <= 24) {
			if(this.validBits == 0) {
				this.acc = 0;
			}
			while(true) {
				if(this.bytesInSeg == 0 && (this.lastSeg || this.next() == 0)) {
					return;
				} else {
					this.bytesInSeg--;
					this.inputPosition += 1;
					this.acc = this.acc + (this.input.readByte() << this.validBits);
					this.validBits += 8;
				}
				if(!(this.validBits <= 24)) {
					break;
				}
			}
		}
	}
	,decode: function(c) {
		if(this.validBits < 10) {
			this.prepHuffman();
		}
		var i = c.fastHuffman[this.acc & 1023];
		var val;
		if(i >= 0) {
			var l = c.codewordLengths[i];
			this.acc = this.acc >>> l;
			this.validBits -= l;
			if(this.validBits < 0) {
				this.validBits = 0;
				val = -1;
			} else {
				val = i;
			}
		} else {
			val = this.decodeScalarRaw(c);
		}
		if(c.sparse) {
			val = c.sortedValues[val];
		}
		return val;
	}
	,decodeRaw: function(c) {
		if(this.validBits < 10) {
			this.prepHuffman();
		}
		var i = c.fastHuffman[this.acc & 1023];
		if(i >= 0) {
			var l = c.codewordLengths[i];
			this.acc = this.acc >>> l;
			this.validBits -= l;
			if(this.validBits < 0) {
				this.validBits = 0;
				return -1;
			} else {
				return i;
			}
		} else {
			return this.decodeScalarRaw(c);
		}
	}
	,isLastByte: function() {
		if(this.bytesInSeg == 0) {
			return this.lastSeg;
		} else {
			return false;
		}
	}
	,finishDecodePacket: function(previousLength,n,r) {
		var left = r.left.start;
		var currentLocValid = false;
		var n2 = n >> 1;
		if(this.firstDecode) {
			this.currentLoc = -n2;
			this.discardSamplesDeferred = n - r.right.end;
			currentLocValid = true;
			this.firstDecode = false;
		} else if(this.discardSamplesDeferred != 0) {
			r.left.start += this.discardSamplesDeferred;
			left = r.left.start;
			this.discardSamplesDeferred = 0;
		} else {
			var tmp = previousLength == 0 && currentLocValid;
		}
		if(this.lastSegWhich == this.endSegWithKnownLoc) {
			if(currentLocValid && (this.page.flag & 4) != 0) {
				var currentEnd = this.knownLocForPacket - (n - r.right.end);
				if(currentEnd < this.currentLoc + r.right.end) {
					var len = currentEnd < this.currentLoc ? 0 : currentEnd - this.currentLoc;
					len += r.left.start;
					this.currentLoc += len;
					return { len : len, left : left, right : r.right.start};
				}
			}
			this.currentLoc = this.knownLocForPacket - (n2 - r.left.start);
			currentLocValid = true;
		}
		if(currentLocValid) {
			this.currentLoc += r.right.start - r.left.start;
		}
		return { len : r.right.end, left : left, right : r.right.start};
	}
	,readInt32: function() {
		this.inputPosition += 4;
		return this.input.readInt32();
	}
	,readByte: function() {
		this.inputPosition += 1;
		return this.input.readByte();
	}
	,read: function(n) {
		this.inputPosition += n;
		var this1 = new Array(n);
		var vec = this1;
		var _g1 = 0;
		var _g = n;
		while(_g1 < _g) {
			var i = _g1++;
			vec[i] = this.input.readByte();
		}
		return vec;
	}
	,readBytes: function(n) {
		this.inputPosition += n;
		return this.input.read(n);
	}
	,readString: function(n) {
		this.inputPosition += n;
		return this.input.readString(n);
	}
	,getSampleNumber: function(seekFunc,inputLength) {
		var restoreOffset = this.inputPosition;
		var previousSafe = _$UInt_UInt_$Impl_$.gte(inputLength,65536) && _$UInt_UInt_$Impl_$.gte(inputLength - 65536,this.firstAudioPageOffset) ? inputLength - 65536 : this.firstAudioPageOffset;
		seekFunc(this.inputPosition = previousSafe);
		var end = 0;
		var last = false;
		var _g = this.findPage(seekFunc,inputLength);
		switch(_g[1]) {
		case 0:
			var l = _g[3];
			var e = _g[2];
			end = e;
			last = l;
			break;
		case 1:
			throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.CANT_FIND_LAST_PAGE,null,{ fileName : "VorbisDecodeState.hx", lineNumber : 518, className : "kha.audio2.ogg.vorbis.VorbisDecodeState", methodName : "getSampleNumber"}));
			break;
		}
		var lastPageLoc = this.inputPosition;
		try {
			while(!last) {
				seekFunc(this.inputPosition = end);
				var _g1 = this.findPage(seekFunc,inputLength);
				switch(_g1[1]) {
				case 0:
					var l1 = _g1[3];
					var e1 = _g1[2];
					end = e1;
					last = l1;
					break;
				case 1:
					throw "__break__";
					break;
				}
				previousSafe = lastPageLoc + 1;
				lastPageLoc = this.inputPosition;
			}
		} catch( e ) { if( e != "__break__" ) throw e; }
		seekFunc(this.inputPosition = lastPageLoc);
		this.inputPosition += 6;
		var this1 = new Array(6);
		var vec = this1;
		var _g11 = 0;
		var _g2 = 6;
		while(_g11 < _g2) {
			var i = _g11++;
			vec[i] = this.input.readByte();
		}
		var vorbisHeader = vec;
		this.inputPosition += 4;
		var lo = this.input.readInt32();
		this.inputPosition += 4;
		var hi = this.input.readInt32();
		if(lo == -1 && hi == -1 || hi > 0) {
			throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.CANT_FIND_LAST_PAGE,null,{ fileName : "VorbisDecodeState.hx", lineNumber : 552, className : "kha.audio2.ogg.vorbis.VorbisDecodeState", methodName : "getSampleNumber"}));
		}
		this.pLast = new kha_audio2_ogg_vorbis_data_ProbedPage();
		this.pLast.pageStart = lastPageLoc;
		this.pLast.pageEnd = end;
		this.pLast.lastDecodedSample = lo;
		this.pLast.firstDecodedSample = null;
		this.pLast.afterPreviousPageStart = previousSafe;
		seekFunc(this.inputPosition = restoreOffset);
		return lo;
	}
	,forcePageResync: function() {
		this.nextSeg = -1;
	}
	,setInputOffset: function(seekFunc,n) {
		seekFunc(this.inputPosition = n);
	}
	,findPage: function(seekFunc,inputLength) {
		try {
			while(true) {
				this.inputPosition += 1;
				var n = this.input.readByte();
				if(n == 79) {
					var retryLoc = this.inputPosition;
					if(retryLoc - 25 > inputLength) {
						return kha_audio2_ogg_vorbis__$VorbisDecodeState_FindPageResult.NotFound;
					}
					var tmp;
					var tmp1;
					this.inputPosition += 1;
					if(this.input.readByte() == 103) {
						this.inputPosition += 1;
						tmp1 = this.input.readByte() != 103;
					} else {
						tmp1 = true;
					}
					if(!tmp1) {
						this.inputPosition += 1;
						tmp = this.input.readByte() != 83;
					} else {
						tmp = true;
					}
					if(tmp) {
						continue;
					}
					var this1 = new Array(27);
					var header = this1;
					header[0] = 79;
					header[1] = 103;
					header[2] = 103;
					header[3] = 83;
					var _g = 4;
					while(_g < 27) {
						var i = _g++;
						this.inputPosition += 1;
						header[i] = this.input.readByte();
					}
					if(header[4] != 0) {
						seekFunc(this.inputPosition = retryLoc);
						continue;
					}
					var goal = header[22] + (header[23] << 8) + (header[24] << 16) + (header[25] << 24);
					var _g1 = 22;
					while(_g1 < 26) {
						var i1 = _g1++;
						header[i1] = 0;
					}
					var crc = 0;
					var _g2 = 0;
					while(_g2 < 27) {
						var i2 = _g2++;
						crc = crc << 8 ^ kha_audio2_ogg_tools_Crc32.table[header[i2] ^ crc >>> 24];
					}
					var len = 0;
					try {
						var _g11 = 0;
						var _g3 = header[26];
						while(_g11 < _g3) {
							var i3 = _g11++;
							this.inputPosition += 1;
							var s = this.input.readByte();
							crc = crc << 8 ^ kha_audio2_ogg_tools_Crc32.table[s ^ crc >>> 24];
							len += s;
						}
						var _g12 = 0;
						var _g4 = len;
						while(_g12 < _g4) {
							var i4 = _g12++;
							this.inputPosition += 1;
							var $byte = this.input.readByte();
							crc = crc << 8 ^ kha_audio2_ogg_tools_Crc32.table[$byte ^ crc >>> 24];
						}
					} catch( e ) {
						if (e instanceof js__$Boot_HaxeError) e = e.val;
						if( js_Boot.__instanceof(e,haxe_io_Eof) ) {
							return kha_audio2_ogg_vorbis__$VorbisDecodeState_FindPageResult.NotFound;
						} else throw(e);
					}
					if(crc == goal) {
						var end = this.inputPosition;
						seekFunc(this.inputPosition = retryLoc - 1);
						return kha_audio2_ogg_vorbis__$VorbisDecodeState_FindPageResult.Found(end,(header[5] & 4) != 0);
					}
				}
			}
		} catch( e1 ) {
			if (e1 instanceof js__$Boot_HaxeError) e1 = e1.val;
			if( js_Boot.__instanceof(e1,haxe_io_Eof) ) {
				return kha_audio2_ogg_vorbis__$VorbisDecodeState_FindPageResult.NotFound;
			} else throw(e1);
		}
	}
	,analyzePage: function(seekFunc,h) {
		var z = new kha_audio2_ogg_vorbis_data_ProbedPage();
		var this1 = new Array(255);
		var packetType = this1;
		z.pageStart = this.inputPosition;
		this.inputPosition += 27;
		var this2 = new Array(27);
		var vec = this2;
		var _g1 = 0;
		var _g = 27;
		while(_g1 < _g) {
			var i = _g1++;
			vec[i] = this.input.readByte();
		}
		var pageHeader = vec;
		var n = pageHeader[26];
		this.inputPosition += n;
		var this3 = new Array(n);
		var vec1 = this3;
		var _g11 = 0;
		var _g2 = n;
		while(_g11 < _g2) {
			var i1 = _g11++;
			vec1[i1] = this.input.readByte();
		}
		var lacing = vec1;
		var len = 0;
		var _g12 = 0;
		var _g3 = pageHeader[26];
		while(_g12 < _g3) {
			var i2 = _g12++;
			len += lacing[i2];
		}
		z.pageEnd = z.pageStart + 27 + pageHeader[26] + len;
		z.lastDecodedSample = pageHeader[6] + (pageHeader[7] << 8) + (pageHeader[8] << 16) + (pageHeader[9] << 16);
		if((pageHeader[5] & 4) != 0) {
			z.firstDecodedSample = null;
			seekFunc(this.inputPosition = z.pageStart);
			return z;
		}
		var numPacket = 0;
		var packetStart = (pageHeader[5] & 1) == 0;
		var modeCount = h.modes.length;
		var _g13 = 0;
		var _g4 = pageHeader[26];
		while(_g13 < _g4) {
			var i3 = _g13++;
			if(packetStart) {
				if(lacing[i3] == 0) {
					seekFunc(this.inputPosition = z.pageStart);
					return null;
				}
				this.inputPosition += 1;
				var n1 = this.input.readByte();
				if((n1 & 1) != 0) {
					seekFunc(this.inputPosition = z.pageStart);
					return null;
				}
				n1 >>= 1;
				var n2 = modeCount - 1;
				var log2_4 = [0,1,2,2,3,3,3,3,4,4,4,4,4,4,4,4];
				var b = n2 < 16384 ? n2 < 16 ? log2_4[n2] : n2 < 512 ? 5 + log2_4[n2 >> 5] : 10 + log2_4[n2 >> 10] : n2 < 16777216 ? n2 < 524288 ? 15 + log2_4[n2 >> 15] : 20 + log2_4[n2 >> 20] : n2 < 536870912 ? 25 + log2_4[n2 >> 25] : n2 < -2147483648 ? 30 + log2_4[n2 >> 30] : 0;
				n1 &= (1 << b) - 1;
				if(n1 >= modeCount) {
					seekFunc(this.inputPosition = z.pageStart);
					return null;
				}
				packetType[numPacket++] = h.modes[n1].blockflag;
				var len1 = lacing[i3] - 1;
				this.inputPosition += len1;
				var this4 = new Array(len1);
				var vec2 = this4;
				var _g14 = 0;
				var _g5 = len1;
				while(_g14 < _g5) {
					var i4 = _g14++;
					vec2[i4] = this.input.readByte();
				}
			} else {
				var len2 = lacing[i3];
				this.inputPosition += len2;
				var this5 = new Array(len2);
				var vec3 = this5;
				var _g15 = 0;
				var _g6 = len2;
				while(_g15 < _g6) {
					var i5 = _g15++;
					vec3[i5] = this.input.readByte();
				}
			}
			packetStart = lacing[i3] < 255;
		}
		var samples = 0;
		if(numPacket > 1) {
			samples += packetType[numPacket - 1] ? h.blocksize1 : h.blocksize0;
		}
		var i6 = numPacket - 2;
		while(i6 >= 1) {
			--i6;
			if(packetType[i6]) {
				if(packetType[i6 + 1]) {
					samples += h.blocksize1 >> 1;
				} else {
					samples += (h.blocksize1 - h.blocksize0 >> 2) + (h.blocksize0 >> 1);
				}
			} else {
				samples += h.blocksize0 >> 1;
			}
			--i6;
		}
		z.firstDecodedSample = z.lastDecodedSample - samples;
		seekFunc(this.inputPosition = z.pageStart);
		return z;
	}
	,decodeScalarRaw: function(c) {
		this.prepHuffman();
		var b = c.sortedCodewords != null || c.codewords != null;
		var codewordLengths = c.codewordLengths;
		var codewords = c.codewords;
		var sortedCodewords = c.sortedCodewords;
		if(c.entries > 8 ? sortedCodewords != null : codewords != null) {
			var n = this.acc;
			n = (n & -1431655766) >>> 1 | (n & 1431655765) << 1;
			n = (n & -858993460) >>> 2 | (n & 858993459) << 2;
			n = (n & -252645136) >>> 4 | (n & 252645135) << 4;
			n = (n & -16711936) >>> 8 | (n & 16711935) << 8;
			var code = n >>> 16 | n << 16;
			var x = 0;
			var n1 = c.sortedEntries;
			while(n1 > 1) {
				var m = x + (n1 >> 1);
				if(_$UInt_UInt_$Impl_$.gte(code,sortedCodewords[m])) {
					x = m;
					n1 -= n1 >> 1;
				} else {
					n1 >>= 1;
				}
			}
			if(!c.sparse) {
				x = c.sortedValues[x];
			}
			var len = codewordLengths[x];
			if(this.validBits >= len) {
				this.acc = this.acc >>> len;
				this.validBits -= len;
				return x;
			}
			this.validBits = 0;
			return -1;
		}
		var b1 = !c.sparse;
		var _g1 = 0;
		var _g = c.entries;
		while(_g1 < _g) {
			var i = _g1++;
			var cl = codewordLengths[i];
			if(cl == 255) {
				continue;
			}
			if(codewords[i] == (this.acc & (1 << cl) - 1)) {
				if(this.validBits >= cl) {
					this.acc = this.acc >>> cl;
					this.validBits -= cl;
					return i;
				}
				this.validBits = 0;
				return -1;
			}
		}
		this.error = new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_STREAM,null,{ fileName : "VorbisDecodeState.hx", lineNumber : 846, className : "kha.audio2.ogg.vorbis.VorbisDecodeState", methodName : "decodeScalarRaw"});
		this.validBits = 0;
		return -1;
	}
	,__class__: kha_audio2_ogg_vorbis_VorbisDecodeState
};
var kha_audio2_ogg_vorbis__$VorbisDecodeState_FindPageResult = $hxClasses["kha.audio2.ogg.vorbis._VorbisDecodeState.FindPageResult"] = { __ename__ : true, __constructs__ : ["Found","NotFound"] };
kha_audio2_ogg_vorbis__$VorbisDecodeState_FindPageResult.Found = function(end,last) { var $x = ["Found",0,end,last]; $x.__enum__ = kha_audio2_ogg_vorbis__$VorbisDecodeState_FindPageResult; $x.toString = $estr; return $x; };
kha_audio2_ogg_vorbis__$VorbisDecodeState_FindPageResult.NotFound = ["NotFound",1];
kha_audio2_ogg_vorbis__$VorbisDecodeState_FindPageResult.NotFound.toString = $estr;
kha_audio2_ogg_vorbis__$VorbisDecodeState_FindPageResult.NotFound.__enum__ = kha_audio2_ogg_vorbis__$VorbisDecodeState_FindPageResult;
var kha_audio2_ogg_vorbis_VorbisDecoder = function(header,decodeState) {
	this.header = header;
	this.decodeState = decodeState;
	this.totalSample = null;
	this.currentSample = 0;
	this.previousLength = 0;
	var length = header.channel;
	var this1 = new Array(length);
	this.channelBuffers = this1;
	var length1 = header.channel;
	var this2 = new Array(length1);
	this.previousWindow = this2;
	var length2 = header.channel;
	var this3 = new Array(length2);
	this.finalY = this3;
	var _g1 = 0;
	var _g = header.channel;
	while(_g1 < _g) {
		var i = _g1++;
		var this4 = this.channelBuffers;
		var len = header.blocksize1;
		var this5 = new Array(len);
		var vec = this5;
		this4[i] = vec;
		var this6 = this.previousWindow;
		var len1 = header.blocksize1 / 2 | 0;
		var this7 = new Array(len1);
		var vec1 = this7;
		this6[i] = vec1;
		this.finalY[i] = [];
	}
	var this8 = new Array(2);
	this.a = this8;
	var this9 = new Array(2);
	this.b = this9;
	var this10 = new Array(2);
	this.c = this10;
	var this11 = new Array(2);
	this.window = this11;
	var this12 = new Array(2);
	this.bitReverseData = this12;
	this.initBlocksize(0,header.blocksize0);
	this.initBlocksize(1,header.blocksize1);
};
$hxClasses["kha.audio2.ogg.vorbis.VorbisDecoder"] = kha_audio2_ogg_vorbis_VorbisDecoder;
kha_audio2_ogg_vorbis_VorbisDecoder.__name__ = true;
kha_audio2_ogg_vorbis_VorbisDecoder.start = function(input) {
	var decodeState = new kha_audio2_ogg_vorbis_VorbisDecodeState(input);
	var header = kha_audio2_ogg_vorbis_data_Header.read(decodeState);
	var decoder = new kha_audio2_ogg_vorbis_VorbisDecoder(header,decodeState);
	decodeState.startFirstDecode();
	decoder.pumpFirstFrame();
	return decoder;
};
kha_audio2_ogg_vorbis_VorbisDecoder.prototype = {
	previousWindow: null
	,previousLength: null
	,finalY: null
	,a: null
	,b: null
	,c: null
	,window: null
	,bitReverseData: null
	,channelBuffers: null
	,channelBufferStart: null
	,channelBufferEnd: null
	,header: null
	,currentSample: null
	,totalSample: null
	,decodeState: null
	,read: function(output,samples,channels,sampleRate,useFloat) {
		var b = this.header.sampleRate;
		if((_$UInt_UInt_$Impl_$.toFloat(sampleRate) % _$UInt_UInt_$Impl_$.toFloat(b) | 0) != 0) {
			throw new js__$Boot_HaxeError("Unsupported sampleRate : can't convert " + Std.string(_$UInt_UInt_$Impl_$.toFloat(this.header.sampleRate)) + " to " + sampleRate);
		}
		if(channels % this.header.channel != 0) {
			throw new js__$Boot_HaxeError("Unsupported channels : can't convert " + this.header.channel + " to " + channels);
		}
		var b1 = this.header.sampleRate;
		var sampleRepeat = _$UInt_UInt_$Impl_$.toFloat(sampleRate) / _$UInt_UInt_$Impl_$.toFloat(b1) | 0;
		var channelRepeat = channels / this.header.channel | 0;
		var n = 0;
		var len = Math.floor(samples / sampleRepeat);
		if(this.totalSample != null && len > this.totalSample - this.currentSample) {
			len = this.totalSample - this.currentSample;
		}
		var index = 0;
		while(n < len) {
			var k = this.channelBufferEnd - this.channelBufferStart;
			if(k >= len - n) {
				k = len - n;
			}
			var _g1 = this.channelBufferStart;
			var _g = this.channelBufferStart + k;
			while(_g1 < _g) {
				var j = _g1++;
				var _g3 = 0;
				var _g2 = sampleRepeat;
				while(_g3 < _g2) {
					var sr = _g3++;
					var _g5 = 0;
					var _g4 = this.header.channel;
					while(_g5 < _g4) {
						var i = _g5++;
						var _g7 = 0;
						var _g6 = channelRepeat;
						while(_g7 < _g6) {
							var cr = _g7++;
							var value = this.channelBuffers[i][j];
							if(value > 1) {
								value = 1;
							} else if(value < -1) {
								value = -1;
							}
							if(useFloat) {
								output[index] = value;
								++index;
							}
						}
					}
				}
			}
			n += k;
			this.channelBufferStart += k;
			if(n == len || this.getFrameFloat() == 0) {
				break;
			}
		}
		var _g11 = n;
		var _g8 = len;
		while(_g11 < _g8) {
			var j1 = _g11++;
			var _g31 = 0;
			var _g21 = sampleRepeat;
			while(_g31 < _g21) {
				var sr1 = _g31++;
				var _g51 = 0;
				var _g41 = this.header.channel;
				while(_g51 < _g41) {
					var i1 = _g51++;
					var _g71 = 0;
					var _g61 = channelRepeat;
					while(_g71 < _g61) {
						var cr1 = _g71++;
						if(useFloat) {
							output[index] = 0;
							++index;
						}
					}
				}
			}
		}
		this.currentSample += len;
		return len * sampleRepeat;
	}
	,skipSamples: function(len) {
		var n = 0;
		if(this.totalSample != null && len > this.totalSample - this.currentSample) {
			len = this.totalSample - this.currentSample;
		}
		while(n < len) {
			var k = this.channelBufferEnd - this.channelBufferStart;
			if(k >= len - n) {
				k = len - n;
			}
			n += k;
			this.channelBufferStart += k;
			if(n == len || this.getFrameFloat() == 0) {
				break;
			}
		}
		this.currentSample += len;
		return len;
	}
	,setupSampleNumber: function(seekFunc,inputLength) {
		if(this.totalSample == null) {
			this.totalSample = this.decodeState.getSampleNumber(seekFunc,inputLength);
		}
	}
	,seek: function(seekFunc,inputLength,sampleNumber) {
		if(this.currentSample == sampleNumber) {
			return;
		}
		if(this.totalSample == null) {
			this.setupSampleNumber(seekFunc,inputLength);
			if(this.totalSample == 0) {
				throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.CANT_FIND_LAST_PAGE,null,{ fileName : "VorbisDecoder.hx", lineNumber : 187, className : "kha.audio2.ogg.vorbis.VorbisDecoder", methodName : "seek"}));
			}
		}
		if(sampleNumber < 0) {
			sampleNumber = 0;
		}
		var p0 = this.decodeState.pFirst;
		var p1 = this.decodeState.pLast;
		if(sampleNumber >= p1.lastDecodedSample) {
			sampleNumber = p1.lastDecodedSample - 1;
		}
		if(sampleNumber < p0.lastDecodedSample) {
			this.seekFrameFromPage(seekFunc,p0.pageStart,0,sampleNumber);
		} else {
			var attempts = 0;
			while(p0.pageEnd < p1.pageStart) {
				var startOffset = p0.pageEnd;
				var endOffset = p1.afterPreviousPageStart;
				var startSample = p0.lastDecodedSample;
				var endSample = p1.lastDecodedSample;
				if(startSample == null || endSample == null) {
					throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.SEEK_FAILED,null,{ fileName : "VorbisDecoder.hx", lineNumber : 219, className : "kha.audio2.ogg.vorbis.VorbisDecoder", methodName : "seek"}));
				}
				if(_$UInt_UInt_$Impl_$.gt(endOffset,startOffset + 4000)) {
					endOffset = endOffset - 4000;
				}
				var probe = startOffset + Math.floor(_$UInt_UInt_$Impl_$.toFloat(endOffset - startOffset) / _$UInt_UInt_$Impl_$.toFloat(endSample - startSample) * (sampleNumber - startSample));
				if(attempts >= 4) {
					var probe2 = startOffset + (endOffset - startOffset >>> 1);
					if(attempts >= 8) {
						probe = probe2;
					} else if(_$UInt_UInt_$Impl_$.gt(probe2,probe)) {
						probe = probe + (probe2 - probe >>> 1);
					} else {
						probe = probe2 + (probe - probe2 >>> 1);
					}
				}
				++attempts;
				seekFunc(this.decodeState.inputPosition = probe);
				var _g = this.decodeState.findPage(seekFunc,inputLength);
				switch(_g[1]) {
				case 0:
					break;
				case 1:
					throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.SEEK_FAILED,null,{ fileName : "VorbisDecoder.hx", lineNumber : 249, className : "kha.audio2.ogg.vorbis.VorbisDecoder", methodName : "seek"}));
					break;
				}
				var q = this.decodeState.analyzePage(seekFunc,this.header);
				if(q == null) {
					throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.SEEK_FAILED,null,{ fileName : "VorbisDecoder.hx", lineNumber : 255, className : "kha.audio2.ogg.vorbis.VorbisDecoder", methodName : "seek"}));
				}
				q.afterPreviousPageStart = probe;
				if(q.pageStart == p1.pageStart) {
					p1 = q;
					continue;
				}
				if(sampleNumber < q.lastDecodedSample) {
					p1 = q;
				} else {
					p0 = q;
				}
			}
			if(p0.lastDecodedSample <= sampleNumber && sampleNumber < p1.lastDecodedSample) {
				this.seekFrameFromPage(seekFunc,p1.pageStart,p0.lastDecodedSample,sampleNumber);
			} else {
				throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.SEEK_FAILED,null,{ fileName : "VorbisDecoder.hx", lineNumber : 275, className : "kha.audio2.ogg.vorbis.VorbisDecoder", methodName : "seek"}));
			}
		}
	}
	,seekFrameFromPage: function(seekFunc,pageStart,firstSample,targetSample) {
		var frame = 0;
		var frameStart = firstSample;
		seekFunc(this.decodeState.inputPosition = pageStart);
		this.decodeState.nextSeg = -1;
		var leftEnd = 0;
		var leftStart = 0;
		var prevState = null;
		var lastState = null;
		while(true) {
			prevState = lastState;
			lastState = this.decodeState.clone(seekFunc);
			var initialResult = this.decodeInitial();
			if(initialResult == null) {
				lastState = prevState;
				break;
			}
			leftStart = initialResult.left.start;
			leftEnd = initialResult.left.end;
			var start = frame == 0 ? leftEnd : leftStart;
			if(targetSample < frameStart + initialResult.right.start - start) {
				break;
			}
			var _this = this.decodeState;
			while(_this.bytesInSeg != 0 || !_this.lastSeg && _this.next() != 0) {
				_this.bytesInSeg--;
				_this.inputPosition += 1;
				_this.input.readByte();
			}
			frameStart += initialResult.right.start - start;
			++frame;
		}
		this.decodeState = lastState;
		seekFunc(this.decodeState.inputPosition);
		this.previousLength = 0;
		this.pumpFirstFrame();
		this.currentSample = frameStart;
		this.skipSamples(targetSample - frameStart);
	}
	,clone: function(seekFunc) {
		var decoder = Type.createEmptyInstance(kha_audio2_ogg_vorbis_VorbisDecoder);
		decoder.currentSample = this.currentSample;
		decoder.totalSample = this.totalSample;
		decoder.previousLength = this.previousLength;
		decoder.channelBufferStart = this.channelBufferStart;
		decoder.channelBufferEnd = this.channelBufferEnd;
		decoder.a = this.a;
		decoder.b = this.b;
		decoder.c = this.c;
		decoder.window = this.window;
		decoder.bitReverseData = this.bitReverseData;
		decoder.header = this.header;
		decoder.decodeState = this.decodeState.clone(seekFunc);
		var length = this.header.channel;
		var this1 = new Array(length);
		decoder.channelBuffers = this1;
		var length1 = this.header.channel;
		var this2 = new Array(length1);
		decoder.previousWindow = this2;
		var length2 = this.header.channel;
		var this3 = new Array(length2);
		decoder.finalY = this3;
		var _g1 = 0;
		var _g = this.header.channel;
		while(_g1 < _g) {
			var i = _g1++;
			decoder.channelBuffers[i] = kha_audio2_ogg_vorbis_VorbisTools.copyVector(this.channelBuffers[i]);
			decoder.previousWindow[i] = kha_audio2_ogg_vorbis_VorbisTools.copyVector(this.previousWindow[i]);
			decoder.finalY[i] = Lambda.array(this.finalY[i]);
		}
		return decoder;
	}
	,ensurePosition: function(seekFunc) {
		seekFunc(this.decodeState.inputPosition);
	}
	,getFrameFloat: function() {
		var result = this.decodePacket();
		if(result == null) {
			this.channelBufferStart = this.channelBufferEnd = 0;
			return 0;
		}
		var len = this.finishFrame(result);
		this.channelBufferStart = result.left;
		this.channelBufferEnd = result.left + len;
		return len;
	}
	,pumpFirstFrame: function() {
		this.finishFrame(this.decodePacket());
	}
	,finishFrame: function(r) {
		var len = r.len;
		var right = r.right;
		var left = r.left;
		if(this.previousLength != 0) {
			var n = this.previousLength;
			var w = this.getWindow(n);
			var _g1 = 0;
			var _g = this.header.channel;
			while(_g1 < _g) {
				var i = _g1++;
				var cb = this.channelBuffers[i];
				var pw = this.previousWindow[i];
				var _g3 = 0;
				var _g2 = n;
				while(_g3 < _g2) {
					var j = _g3++;
					cb[left + j] = cb[left + j] * w[j] + pw[j] * w[n - 1 - j];
				}
			}
		}
		var prev = this.previousLength;
		this.previousLength = len - right;
		var _g11 = 0;
		var _g4 = this.header.channel;
		while(_g11 < _g4) {
			var i1 = _g11++;
			var pw1 = this.previousWindow[i1];
			var cb1 = this.channelBuffers[i1];
			var _g31 = 0;
			var _g21 = len - right;
			while(_g31 < _g21) {
				var j1 = _g31++;
				pw1[j1] = cb1[right + j1];
			}
		}
		if(prev == 0) {
			return 0;
		}
		if(len < right) {
			right = len;
		}
		return right - left;
	}
	,getWindow: function(len) {
		len <<= 1;
		if(len == this.header.blocksize0) {
			return this.window[0];
		} else if(len == this.header.blocksize1) {
			return this.window[1];
		} else {
			return null;
		}
	}
	,initBlocksize: function(bs,n) {
		var n2 = n >> 1;
		var n4 = n >> 2;
		var n8 = n >> 3;
		var this1 = this.a;
		var this2 = new Array(n2);
		this1[bs] = this2;
		var this3 = this.b;
		var this4 = new Array(n2);
		this3[bs] = this4;
		var this5 = this.c;
		var this6 = new Array(n4);
		this5[bs] = this6;
		var this7 = this.window;
		var this8 = new Array(n2);
		this7[bs] = this8;
		var this9 = this.bitReverseData;
		var this10 = new Array(n8);
		this9[bs] = this10;
		kha_audio2_ogg_vorbis_VorbisTools.computeTwiddleFactors(n,this.a[bs],this.b[bs],this.c[bs]);
		kha_audio2_ogg_vorbis_VorbisTools.computeWindow(n,this.window[bs]);
		kha_audio2_ogg_vorbis_VorbisTools.computeBitReverse(n,this.bitReverseData[bs]);
	}
	,inverseMdct: function(buffer,n,blocktype) {
		var bt = blocktype ? 1 : 0;
		var a = this.a[bt];
		var b = this.b[bt];
		var c = this.c[bt];
		var bitReverse = this.bitReverseData[bt];
		var n2 = n >> 1;
		var n4 = n >> 2;
		var n8 = n >> 3;
		var this1 = new Array(n2);
		var buf2 = this1;
		var dOffset = n2 - 2;
		var aaOffset = 0;
		var eOffset = 0;
		var eStopOffset = n2;
		while(eOffset != eStopOffset) {
			buf2[dOffset + 1] = buffer[eOffset] * a[aaOffset] - buffer[eOffset + 2] * a[aaOffset + 1];
			buf2[dOffset] = buffer[eOffset] * a[aaOffset + 1] + buffer[eOffset + 2] * a[aaOffset];
			dOffset -= 2;
			aaOffset += 2;
			eOffset += 4;
		}
		eOffset = n2 - 3;
		while(dOffset >= 0) {
			buf2[dOffset + 1] = -buffer[eOffset + 2] * a[aaOffset] - -buffer[eOffset] * a[aaOffset + 1];
			buf2[dOffset] = -buffer[eOffset + 2] * a[aaOffset + 1] + -buffer[eOffset] * a[aaOffset];
			dOffset -= 2;
			aaOffset += 2;
			eOffset -= 4;
		}
		var u = buffer;
		var v = buf2;
		var aaOffset1 = n2 - 8;
		var eOffset0 = n4;
		var eOffset1 = 0;
		var dOffset0 = n4;
		var dOffset1 = 0;
		while(aaOffset1 >= 0) {
			var v41_21 = v[eOffset0 + 1] - v[eOffset1 + 1];
			var v40_20 = v[eOffset0] - v[eOffset1];
			u[dOffset0 + 1] = v[eOffset0 + 1] + v[eOffset1 + 1];
			u[dOffset0] = v[eOffset0] + v[eOffset1];
			u[dOffset1 + 1] = v41_21 * a[aaOffset1 + 4] - v40_20 * a[aaOffset1 + 5];
			u[dOffset1] = v40_20 * a[aaOffset1 + 4] + v41_21 * a[aaOffset1 + 5];
			v41_21 = v[eOffset0 + 3] - v[eOffset1 + 3];
			v40_20 = v[eOffset0 + 2] - v[eOffset1 + 2];
			u[dOffset0 + 3] = v[eOffset0 + 3] + v[eOffset1 + 3];
			u[dOffset0 + 2] = v[eOffset0 + 2] + v[eOffset1 + 2];
			u[dOffset1 + 3] = v41_21 * a[aaOffset1] - v40_20 * a[aaOffset1 + 1];
			u[dOffset1 + 2] = v40_20 * a[aaOffset1] + v41_21 * a[aaOffset1 + 1];
			aaOffset1 -= 8;
			dOffset0 += 4;
			dOffset1 += 4;
			eOffset0 += 4;
			eOffset1 += 4;
		}
		var log2_4 = [0,1,2,2,3,3,3,3,4,4,4,4,4,4,4,4];
		var ld = (n < 16384 ? n < 16 ? log2_4[n] : n < 512 ? 5 + log2_4[n >> 5] : 10 + log2_4[n >> 10] : n < 16777216 ? n < 524288 ? 15 + log2_4[n >> 15] : 20 + log2_4[n >> 20] : n < 536870912 ? 25 + log2_4[n >> 25] : n < -2147483648 ? 30 + log2_4[n >> 30] : 0) - 1;
		var i_off = n2 - 1 - n4 * 0;
		var eeOffset0 = i_off;
		var eeOffset2 = i_off + -(n >> 3);
		var aOffset = 0;
		var i = (n >> 4 >> 2) + 1;
		while(--i > 0) {
			var k00_20 = u[eeOffset0] - u[eeOffset2];
			var k01_21 = u[eeOffset0 + -1] - u[eeOffset2 + -1];
			var _g = eeOffset0;
			var _g1 = u;
			_g1[_g] = _g1[_g] + u[eeOffset2];
			var _g2 = eeOffset0 + -1;
			var _g11 = u;
			_g11[_g2] = _g11[_g2] + u[eeOffset2 + -1];
			u[eeOffset2] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
			u[eeOffset2 + -1] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
			aOffset += 8;
			k00_20 = u[eeOffset0 + -2] - u[eeOffset2 + -2];
			k01_21 = u[eeOffset0 + -3] - u[eeOffset2 + -3];
			var _g3 = eeOffset0 + -2;
			var _g12 = u;
			_g12[_g3] = _g12[_g3] + u[eeOffset2 + -2];
			var _g4 = eeOffset0 + -3;
			var _g13 = u;
			_g13[_g4] = _g13[_g4] + u[eeOffset2 + -3];
			u[eeOffset2 + -2] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
			u[eeOffset2 + -3] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
			aOffset += 8;
			k00_20 = u[eeOffset0 + -4] - u[eeOffset2 + -4];
			k01_21 = u[eeOffset0 + -5] - u[eeOffset2 + -5];
			var _g5 = eeOffset0 + -4;
			var _g14 = u;
			_g14[_g5] = _g14[_g5] + u[eeOffset2 + -4];
			var _g6 = eeOffset0 + -5;
			var _g15 = u;
			_g15[_g6] = _g15[_g6] + u[eeOffset2 + -5];
			u[eeOffset2 + -4] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
			u[eeOffset2 + -5] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
			aOffset += 8;
			k00_20 = u[eeOffset0 + -6] - u[eeOffset2 + -6];
			k01_21 = u[eeOffset0 + -7] - u[eeOffset2 + -7];
			var _g7 = eeOffset0 + -6;
			var _g16 = u;
			_g16[_g7] = _g16[_g7] + u[eeOffset2 + -6];
			var _g8 = eeOffset0 + -7;
			var _g17 = u;
			_g17[_g8] = _g17[_g8] + u[eeOffset2 + -7];
			u[eeOffset2 + -6] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
			u[eeOffset2 + -7] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
			aOffset += 8;
			eeOffset0 -= 8;
			eeOffset2 -= 8;
		}
		var i_off1 = n2 - 1 - n4;
		var eeOffset01 = i_off1;
		var eeOffset21 = i_off1 + -(n >> 3);
		var aOffset1 = 0;
		var i1 = (n >> 4 >> 2) + 1;
		while(--i1 > 0) {
			var k00_201 = u[eeOffset01] - u[eeOffset21];
			var k01_211 = u[eeOffset01 + -1] - u[eeOffset21 + -1];
			var _g9 = eeOffset01;
			var _g18 = u;
			_g18[_g9] = _g18[_g9] + u[eeOffset21];
			var _g10 = eeOffset01 + -1;
			var _g19 = u;
			_g19[_g10] = _g19[_g10] + u[eeOffset21 + -1];
			u[eeOffset21] = k00_201 * a[aOffset1] - k01_211 * a[aOffset1 + 1];
			u[eeOffset21 + -1] = k01_211 * a[aOffset1] + k00_201 * a[aOffset1 + 1];
			aOffset1 += 8;
			k00_201 = u[eeOffset01 + -2] - u[eeOffset21 + -2];
			k01_211 = u[eeOffset01 + -3] - u[eeOffset21 + -3];
			var _g20 = eeOffset01 + -2;
			var _g110 = u;
			_g110[_g20] = _g110[_g20] + u[eeOffset21 + -2];
			var _g21 = eeOffset01 + -3;
			var _g111 = u;
			_g111[_g21] = _g111[_g21] + u[eeOffset21 + -3];
			u[eeOffset21 + -2] = k00_201 * a[aOffset1] - k01_211 * a[aOffset1 + 1];
			u[eeOffset21 + -3] = k01_211 * a[aOffset1] + k00_201 * a[aOffset1 + 1];
			aOffset1 += 8;
			k00_201 = u[eeOffset01 + -4] - u[eeOffset21 + -4];
			k01_211 = u[eeOffset01 + -5] - u[eeOffset21 + -5];
			var _g22 = eeOffset01 + -4;
			var _g112 = u;
			_g112[_g22] = _g112[_g22] + u[eeOffset21 + -4];
			var _g23 = eeOffset01 + -5;
			var _g113 = u;
			_g113[_g23] = _g113[_g23] + u[eeOffset21 + -5];
			u[eeOffset21 + -4] = k00_201 * a[aOffset1] - k01_211 * a[aOffset1 + 1];
			u[eeOffset21 + -5] = k01_211 * a[aOffset1] + k00_201 * a[aOffset1 + 1];
			aOffset1 += 8;
			k00_201 = u[eeOffset01 + -6] - u[eeOffset21 + -6];
			k01_211 = u[eeOffset01 + -7] - u[eeOffset21 + -7];
			var _g24 = eeOffset01 + -6;
			var _g114 = u;
			_g114[_g24] = _g114[_g24] + u[eeOffset21 + -6];
			var _g25 = eeOffset01 + -7;
			var _g115 = u;
			_g115[_g25] = _g115[_g25] + u[eeOffset21 + -7];
			u[eeOffset21 + -6] = k00_201 * a[aOffset1] - k01_211 * a[aOffset1 + 1];
			u[eeOffset21 + -7] = k01_211 * a[aOffset1] + k00_201 * a[aOffset1 + 1];
			aOffset1 += 8;
			eeOffset01 -= 8;
			eeOffset21 -= 8;
		}
		var d0 = n2 - 1 - n8 * 0;
		var aOffset2 = 0;
		var eOffset01 = d0;
		var eOffset2 = d0 + -(n >> 4);
		var i2 = (n >> 5 >> 2) + 1;
		while(--i2 > 0) {
			var k00_202 = u[eOffset01] - u[eOffset2];
			var k01_212 = u[eOffset01 + -1] - u[eOffset2 + -1];
			var _g26 = eOffset01;
			var _g116 = u;
			_g116[_g26] = _g116[_g26] + u[eOffset2];
			var _g27 = eOffset01 + -1;
			var _g117 = u;
			_g117[_g27] = _g117[_g27] + u[eOffset2 + -1];
			u[eOffset2] = k00_202 * a[aOffset2] - k01_212 * a[aOffset2 + 1];
			u[eOffset2 + -1] = k01_212 * a[aOffset2] + k00_202 * a[aOffset2 + 1];
			aOffset2 += 16;
			k00_202 = u[eOffset01 + -2] - u[eOffset2 + -2];
			k01_212 = u[eOffset01 + -3] - u[eOffset2 + -3];
			var _g28 = eOffset01 + -2;
			var _g118 = u;
			_g118[_g28] = _g118[_g28] + u[eOffset2 + -2];
			var _g29 = eOffset01 + -3;
			var _g119 = u;
			_g119[_g29] = _g119[_g29] + u[eOffset2 + -3];
			u[eOffset2 + -2] = k00_202 * a[aOffset2] - k01_212 * a[aOffset2 + 1];
			u[eOffset2 + -3] = k01_212 * a[aOffset2] + k00_202 * a[aOffset2 + 1];
			aOffset2 += 16;
			k00_202 = u[eOffset01 + -4] - u[eOffset2 + -4];
			k01_212 = u[eOffset01 + -5] - u[eOffset2 + -5];
			var _g30 = eOffset01 + -4;
			var _g120 = u;
			_g120[_g30] = _g120[_g30] + u[eOffset2 + -4];
			var _g31 = eOffset01 + -5;
			var _g121 = u;
			_g121[_g31] = _g121[_g31] + u[eOffset2 + -5];
			u[eOffset2 + -4] = k00_202 * a[aOffset2] - k01_212 * a[aOffset2 + 1];
			u[eOffset2 + -5] = k01_212 * a[aOffset2] + k00_202 * a[aOffset2 + 1];
			aOffset2 += 16;
			k00_202 = u[eOffset01 + -6] - u[eOffset2 + -6];
			k01_212 = u[eOffset01 + -7] - u[eOffset2 + -7];
			var _g32 = eOffset01 + -6;
			var _g122 = u;
			_g122[_g32] = _g122[_g32] + u[eOffset2 + -6];
			var _g33 = eOffset01 + -7;
			var _g123 = u;
			_g123[_g33] = _g123[_g33] + u[eOffset2 + -7];
			u[eOffset2 + -6] = k00_202 * a[aOffset2] - k01_212 * a[aOffset2 + 1];
			u[eOffset2 + -7] = k01_212 * a[aOffset2] + k00_202 * a[aOffset2 + 1];
			eOffset01 -= 8;
			eOffset2 -= 8;
			aOffset2 += 16;
		}
		var d01 = n2 - 1 - n8;
		var aOffset3 = 0;
		var eOffset02 = d01;
		var eOffset21 = d01 + -(n >> 4);
		var i3 = (n >> 5 >> 2) + 1;
		while(--i3 > 0) {
			var k00_203 = u[eOffset02] - u[eOffset21];
			var k01_213 = u[eOffset02 + -1] - u[eOffset21 + -1];
			var _g34 = eOffset02;
			var _g124 = u;
			_g124[_g34] = _g124[_g34] + u[eOffset21];
			var _g35 = eOffset02 + -1;
			var _g125 = u;
			_g125[_g35] = _g125[_g35] + u[eOffset21 + -1];
			u[eOffset21] = k00_203 * a[aOffset3] - k01_213 * a[aOffset3 + 1];
			u[eOffset21 + -1] = k01_213 * a[aOffset3] + k00_203 * a[aOffset3 + 1];
			aOffset3 += 16;
			k00_203 = u[eOffset02 + -2] - u[eOffset21 + -2];
			k01_213 = u[eOffset02 + -3] - u[eOffset21 + -3];
			var _g36 = eOffset02 + -2;
			var _g126 = u;
			_g126[_g36] = _g126[_g36] + u[eOffset21 + -2];
			var _g37 = eOffset02 + -3;
			var _g127 = u;
			_g127[_g37] = _g127[_g37] + u[eOffset21 + -3];
			u[eOffset21 + -2] = k00_203 * a[aOffset3] - k01_213 * a[aOffset3 + 1];
			u[eOffset21 + -3] = k01_213 * a[aOffset3] + k00_203 * a[aOffset3 + 1];
			aOffset3 += 16;
			k00_203 = u[eOffset02 + -4] - u[eOffset21 + -4];
			k01_213 = u[eOffset02 + -5] - u[eOffset21 + -5];
			var _g38 = eOffset02 + -4;
			var _g128 = u;
			_g128[_g38] = _g128[_g38] + u[eOffset21 + -4];
			var _g39 = eOffset02 + -5;
			var _g129 = u;
			_g129[_g39] = _g129[_g39] + u[eOffset21 + -5];
			u[eOffset21 + -4] = k00_203 * a[aOffset3] - k01_213 * a[aOffset3 + 1];
			u[eOffset21 + -5] = k01_213 * a[aOffset3] + k00_203 * a[aOffset3 + 1];
			aOffset3 += 16;
			k00_203 = u[eOffset02 + -6] - u[eOffset21 + -6];
			k01_213 = u[eOffset02 + -7] - u[eOffset21 + -7];
			var _g40 = eOffset02 + -6;
			var _g130 = u;
			_g130[_g40] = _g130[_g40] + u[eOffset21 + -6];
			var _g41 = eOffset02 + -7;
			var _g131 = u;
			_g131[_g41] = _g131[_g41] + u[eOffset21 + -7];
			u[eOffset21 + -6] = k00_203 * a[aOffset3] - k01_213 * a[aOffset3 + 1];
			u[eOffset21 + -7] = k01_213 * a[aOffset3] + k00_203 * a[aOffset3 + 1];
			eOffset02 -= 8;
			eOffset21 -= 8;
			aOffset3 += 16;
		}
		var d02 = n2 - 1 - n8 * 2;
		var aOffset4 = 0;
		var eOffset03 = d02;
		var eOffset22 = d02 + -(n >> 4);
		var i4 = (n >> 5 >> 2) + 1;
		while(--i4 > 0) {
			var k00_204 = u[eOffset03] - u[eOffset22];
			var k01_214 = u[eOffset03 + -1] - u[eOffset22 + -1];
			var _g42 = eOffset03;
			var _g132 = u;
			_g132[_g42] = _g132[_g42] + u[eOffset22];
			var _g43 = eOffset03 + -1;
			var _g133 = u;
			_g133[_g43] = _g133[_g43] + u[eOffset22 + -1];
			u[eOffset22] = k00_204 * a[aOffset4] - k01_214 * a[aOffset4 + 1];
			u[eOffset22 + -1] = k01_214 * a[aOffset4] + k00_204 * a[aOffset4 + 1];
			aOffset4 += 16;
			k00_204 = u[eOffset03 + -2] - u[eOffset22 + -2];
			k01_214 = u[eOffset03 + -3] - u[eOffset22 + -3];
			var _g44 = eOffset03 + -2;
			var _g134 = u;
			_g134[_g44] = _g134[_g44] + u[eOffset22 + -2];
			var _g45 = eOffset03 + -3;
			var _g135 = u;
			_g135[_g45] = _g135[_g45] + u[eOffset22 + -3];
			u[eOffset22 + -2] = k00_204 * a[aOffset4] - k01_214 * a[aOffset4 + 1];
			u[eOffset22 + -3] = k01_214 * a[aOffset4] + k00_204 * a[aOffset4 + 1];
			aOffset4 += 16;
			k00_204 = u[eOffset03 + -4] - u[eOffset22 + -4];
			k01_214 = u[eOffset03 + -5] - u[eOffset22 + -5];
			var _g46 = eOffset03 + -4;
			var _g136 = u;
			_g136[_g46] = _g136[_g46] + u[eOffset22 + -4];
			var _g47 = eOffset03 + -5;
			var _g137 = u;
			_g137[_g47] = _g137[_g47] + u[eOffset22 + -5];
			u[eOffset22 + -4] = k00_204 * a[aOffset4] - k01_214 * a[aOffset4 + 1];
			u[eOffset22 + -5] = k01_214 * a[aOffset4] + k00_204 * a[aOffset4 + 1];
			aOffset4 += 16;
			k00_204 = u[eOffset03 + -6] - u[eOffset22 + -6];
			k01_214 = u[eOffset03 + -7] - u[eOffset22 + -7];
			var _g48 = eOffset03 + -6;
			var _g138 = u;
			_g138[_g48] = _g138[_g48] + u[eOffset22 + -6];
			var _g49 = eOffset03 + -7;
			var _g139 = u;
			_g139[_g49] = _g139[_g49] + u[eOffset22 + -7];
			u[eOffset22 + -6] = k00_204 * a[aOffset4] - k01_214 * a[aOffset4 + 1];
			u[eOffset22 + -7] = k01_214 * a[aOffset4] + k00_204 * a[aOffset4 + 1];
			eOffset03 -= 8;
			eOffset22 -= 8;
			aOffset4 += 16;
		}
		var d03 = n2 - 1 - n8 * 3;
		var aOffset5 = 0;
		var eOffset04 = d03;
		var eOffset23 = d03 + -(n >> 4);
		var i5 = (n >> 5 >> 2) + 1;
		while(--i5 > 0) {
			var k00_205 = u[eOffset04] - u[eOffset23];
			var k01_215 = u[eOffset04 + -1] - u[eOffset23 + -1];
			var _g50 = eOffset04;
			var _g140 = u;
			_g140[_g50] = _g140[_g50] + u[eOffset23];
			var _g51 = eOffset04 + -1;
			var _g141 = u;
			_g141[_g51] = _g141[_g51] + u[eOffset23 + -1];
			u[eOffset23] = k00_205 * a[aOffset5] - k01_215 * a[aOffset5 + 1];
			u[eOffset23 + -1] = k01_215 * a[aOffset5] + k00_205 * a[aOffset5 + 1];
			aOffset5 += 16;
			k00_205 = u[eOffset04 + -2] - u[eOffset23 + -2];
			k01_215 = u[eOffset04 + -3] - u[eOffset23 + -3];
			var _g52 = eOffset04 + -2;
			var _g142 = u;
			_g142[_g52] = _g142[_g52] + u[eOffset23 + -2];
			var _g53 = eOffset04 + -3;
			var _g143 = u;
			_g143[_g53] = _g143[_g53] + u[eOffset23 + -3];
			u[eOffset23 + -2] = k00_205 * a[aOffset5] - k01_215 * a[aOffset5 + 1];
			u[eOffset23 + -3] = k01_215 * a[aOffset5] + k00_205 * a[aOffset5 + 1];
			aOffset5 += 16;
			k00_205 = u[eOffset04 + -4] - u[eOffset23 + -4];
			k01_215 = u[eOffset04 + -5] - u[eOffset23 + -5];
			var _g54 = eOffset04 + -4;
			var _g144 = u;
			_g144[_g54] = _g144[_g54] + u[eOffset23 + -4];
			var _g55 = eOffset04 + -5;
			var _g145 = u;
			_g145[_g55] = _g145[_g55] + u[eOffset23 + -5];
			u[eOffset23 + -4] = k00_205 * a[aOffset5] - k01_215 * a[aOffset5 + 1];
			u[eOffset23 + -5] = k01_215 * a[aOffset5] + k00_205 * a[aOffset5 + 1];
			aOffset5 += 16;
			k00_205 = u[eOffset04 + -6] - u[eOffset23 + -6];
			k01_215 = u[eOffset04 + -7] - u[eOffset23 + -7];
			var _g56 = eOffset04 + -6;
			var _g146 = u;
			_g146[_g56] = _g146[_g56] + u[eOffset23 + -6];
			var _g57 = eOffset04 + -7;
			var _g147 = u;
			_g147[_g57] = _g147[_g57] + u[eOffset23 + -7];
			u[eOffset23 + -6] = k00_205 * a[aOffset5] - k01_215 * a[aOffset5 + 1];
			u[eOffset23 + -7] = k01_215 * a[aOffset5] + k00_205 * a[aOffset5 + 1];
			eOffset04 -= 8;
			eOffset23 -= 8;
			aOffset5 += 16;
		}
		var _g148 = 2;
		var _g58 = ld - 3 >> 1;
		while(_g148 < _g58) {
			var l = _g148++;
			var k0 = n >> l + 2;
			var k0_2 = k0 >> 1;
			var lim = 1 << l + 1;
			var _g310 = 0;
			var _g210 = lim;
			while(_g310 < _g210) {
				var i6 = _g310++;
				var d04 = n2 - 1 - k0 * i6;
				var k1 = 1 << l + 3;
				var aOffset6 = 0;
				var eOffset05 = d04;
				var eOffset24 = d04 + -k0_2;
				var i7 = (n >> l + 4 >> 2) + 1;
				while(--i7 > 0) {
					var k00_206 = u[eOffset05] - u[eOffset24];
					var k01_216 = u[eOffset05 + -1] - u[eOffset24 + -1];
					var _g59 = eOffset05;
					var _g149 = u;
					_g149[_g59] = _g149[_g59] + u[eOffset24];
					var _g60 = eOffset05 + -1;
					var _g150 = u;
					_g150[_g60] = _g150[_g60] + u[eOffset24 + -1];
					u[eOffset24] = k00_206 * a[aOffset6] - k01_216 * a[aOffset6 + 1];
					u[eOffset24 + -1] = k01_216 * a[aOffset6] + k00_206 * a[aOffset6 + 1];
					aOffset6 += k1;
					k00_206 = u[eOffset05 + -2] - u[eOffset24 + -2];
					k01_216 = u[eOffset05 + -3] - u[eOffset24 + -3];
					var _g61 = eOffset05 + -2;
					var _g151 = u;
					_g151[_g61] = _g151[_g61] + u[eOffset24 + -2];
					var _g62 = eOffset05 + -3;
					var _g152 = u;
					_g152[_g62] = _g152[_g62] + u[eOffset24 + -3];
					u[eOffset24 + -2] = k00_206 * a[aOffset6] - k01_216 * a[aOffset6 + 1];
					u[eOffset24 + -3] = k01_216 * a[aOffset6] + k00_206 * a[aOffset6 + 1];
					aOffset6 += k1;
					k00_206 = u[eOffset05 + -4] - u[eOffset24 + -4];
					k01_216 = u[eOffset05 + -5] - u[eOffset24 + -5];
					var _g63 = eOffset05 + -4;
					var _g153 = u;
					_g153[_g63] = _g153[_g63] + u[eOffset24 + -4];
					var _g64 = eOffset05 + -5;
					var _g154 = u;
					_g154[_g64] = _g154[_g64] + u[eOffset24 + -5];
					u[eOffset24 + -4] = k00_206 * a[aOffset6] - k01_216 * a[aOffset6 + 1];
					u[eOffset24 + -5] = k01_216 * a[aOffset6] + k00_206 * a[aOffset6 + 1];
					aOffset6 += k1;
					k00_206 = u[eOffset05 + -6] - u[eOffset24 + -6];
					k01_216 = u[eOffset05 + -7] - u[eOffset24 + -7];
					var _g65 = eOffset05 + -6;
					var _g155 = u;
					_g155[_g65] = _g155[_g65] + u[eOffset24 + -6];
					var _g66 = eOffset05 + -7;
					var _g156 = u;
					_g156[_g66] = _g156[_g66] + u[eOffset24 + -7];
					u[eOffset24 + -6] = k00_206 * a[aOffset6] - k01_216 * a[aOffset6 + 1];
					u[eOffset24 + -7] = k01_216 * a[aOffset6] + k00_206 * a[aOffset6 + 1];
					eOffset05 -= 8;
					eOffset24 -= 8;
					aOffset6 += k1;
				}
			}
		}
		var _g157 = ld - 3 >> 1;
		var _g67 = ld - 6;
		while(_g157 < _g67) {
			var l1 = _g157++;
			var k01 = n >> l1 + 2;
			var k11 = 1 << l1 + 3;
			var k0_21 = k01 >> 1;
			var rlim = n >> l1 + 6;
			var lim1 = 1 << l1 + 1;
			var aOffset7 = 0;
			var i_off2 = n2 - 1;
			var r = rlim + 1;
			while(--r > 0) {
				var A0 = a[aOffset7];
				var A1 = a[aOffset7 + 1];
				var A2 = a[aOffset7 + k11];
				var A3 = a[aOffset7 + k11 + 1];
				var A4 = a[aOffset7 + k11 * 2];
				var A5 = a[aOffset7 + k11 * 2 + 1];
				var A6 = a[aOffset7 + k11 * 3];
				var A7 = a[aOffset7 + k11 * 3 + 1];
				var eeOffset02 = i_off2;
				var eeOffset22 = i_off2 + -k0_21;
				var i8 = lim1 + 1;
				while(--i8 > 0) {
					var k00 = u[eeOffset02] - u[eeOffset22];
					var k111 = u[eeOffset02 + -1] - u[eeOffset22 + -1];
					u[eeOffset02] = u[eeOffset02] + u[eeOffset22];
					u[eeOffset02 + -1] = u[eeOffset02 + -1] + u[eeOffset22 + -1];
					u[eeOffset22] = k00 * A0 - k111 * A1;
					u[eeOffset22 + -1] = k111 * A0 + k00 * A1;
					k00 = u[eeOffset02 + -2] - u[eeOffset22 + -2];
					k111 = u[eeOffset02 + -3] - u[eeOffset22 + -3];
					u[eeOffset02 + -2] = u[eeOffset02 + -2] + u[eeOffset22 + -2];
					u[eeOffset02 + -3] = u[eeOffset02 + -3] + u[eeOffset22 + -3];
					u[eeOffset22 + -2] = k00 * A2 - k111 * A3;
					u[eeOffset22 + -3] = k111 * A2 + k00 * A3;
					k00 = u[eeOffset02 + -4] - u[eeOffset22 + -4];
					k111 = u[eeOffset02 + -5] - u[eeOffset22 + -5];
					u[eeOffset02 + -4] = u[eeOffset02 + -4] + u[eeOffset22 + -4];
					u[eeOffset02 + -5] = u[eeOffset02 + -5] + u[eeOffset22 + -5];
					u[eeOffset22 + -4] = k00 * A4 - k111 * A5;
					u[eeOffset22 + -5] = k111 * A4 + k00 * A5;
					k00 = u[eeOffset02 + -6] - u[eeOffset22 + -6];
					k111 = u[eeOffset02 + -7] - u[eeOffset22 + -7];
					u[eeOffset02 + -6] = u[eeOffset02 + -6] + u[eeOffset22 + -6];
					u[eeOffset02 + -7] = u[eeOffset02 + -7] + u[eeOffset22 + -7];
					u[eeOffset22 + -6] = k00 * A6 - k111 * A7;
					u[eeOffset22 + -7] = k111 * A6 + k00 * A7;
					eeOffset02 -= k01;
					eeOffset22 -= k01;
				}
				aOffset7 += k11 * 4;
				i_off2 -= 8;
			}
		}
		var i_off3 = n2 - 1;
		var A21 = a[n >> 3];
		var zOffset = i_off3;
		var baseOffset = i_off3 - 16 * (n >> 5);
		while(zOffset > baseOffset) {
			var t0 = u[zOffset];
			var t1 = u[zOffset + -8];
			u[zOffset + -8] = t0 - t1;
			u[zOffset] = t0 + t1;
			t0 = u[zOffset + -1];
			t1 = u[zOffset + -9];
			u[zOffset + -9] = t0 - t1;
			u[zOffset + -1] = t0 + t1;
			t0 = u[zOffset + -2];
			t1 = u[zOffset + -10];
			var k001 = t0 - t1;
			u[zOffset + -2] = t0 + t1;
			t0 = u[zOffset + -3];
			t1 = u[zOffset + -11];
			var k112 = t0 - t1;
			u[zOffset + -3] = t0 + t1;
			u[zOffset + -10] = (k001 + k112) * A21;
			u[zOffset + -11] = (k112 - k001) * A21;
			t0 = u[zOffset + -4];
			t1 = u[zOffset + -12];
			k001 = t1 - t0;
			u[zOffset + -4] = t0 + t1;
			t0 = u[zOffset + -5];
			t1 = u[zOffset + -13];
			k112 = t0 - t1;
			u[zOffset + -5] = t0 + t1;
			u[zOffset + -12] = k112;
			u[zOffset + -13] = k001;
			t0 = u[zOffset + -6];
			t1 = u[zOffset + -14];
			k001 = t1 - t0;
			u[zOffset + -6] = t0 + t1;
			t0 = u[zOffset + -7];
			t1 = u[zOffset + -15];
			k112 = t0 - t1;
			u[zOffset + -7] = t0 + t1;
			u[zOffset + -14] = (k001 + k112) * A21;
			u[zOffset + -15] = (k001 - k112) * A21;
			var t01 = u[zOffset];
			var t11 = u[zOffset + -4];
			var k002 = t01 - t11;
			var y0 = t01 + t11;
			t01 = u[zOffset + -2];
			t11 = u[zOffset + -6];
			var y2 = t01 + t11;
			var k22 = t01 - t11;
			u[zOffset] = y0 + y2;
			u[zOffset + -2] = y0 - y2;
			var k33 = u[zOffset + -3] - u[zOffset + -7];
			u[zOffset + -4] = k002 + k33;
			u[zOffset + -6] = k002 - k33;
			t01 = u[zOffset + -1];
			t11 = u[zOffset + -5];
			var k113 = t01 - t11;
			var y1 = t01 + t11;
			var y3 = u[zOffset + -3] + u[zOffset + -7];
			u[zOffset + -1] = y1 + y3;
			u[zOffset + -3] = y1 - y3;
			u[zOffset + -5] = k113 - k22;
			u[zOffset + -7] = k113 + k22;
			var zOffset1 = zOffset - 8;
			var t02 = u[zOffset1];
			var t12 = u[zOffset1 + -4];
			var k003 = t02 - t12;
			var y01 = t02 + t12;
			t02 = u[zOffset1 + -2];
			t12 = u[zOffset1 + -6];
			var y21 = t02 + t12;
			var k221 = t02 - t12;
			u[zOffset1] = y01 + y21;
			u[zOffset1 + -2] = y01 - y21;
			var k331 = u[zOffset1 + -3] - u[zOffset1 + -7];
			u[zOffset1 + -4] = k003 + k331;
			u[zOffset1 + -6] = k003 - k331;
			t02 = u[zOffset1 + -1];
			t12 = u[zOffset1 + -5];
			var k114 = t02 - t12;
			var y11 = t02 + t12;
			var y31 = u[zOffset1 + -3] + u[zOffset1 + -7];
			u[zOffset1 + -1] = y11 + y31;
			u[zOffset1 + -3] = y11 - y31;
			u[zOffset1 + -5] = k114 - k221;
			u[zOffset1 + -7] = k114 + k221;
			zOffset -= 16;
		}
		var brOffset = 0;
		var dOffset01 = n4 - 4;
		var dOffset11 = n2 - 4;
		while(dOffset01 >= 0) {
			var k4 = bitReverse[brOffset];
			v[dOffset11 + 3] = u[k4];
			v[dOffset11 + 2] = u[k4 + 1];
			v[dOffset01 + 3] = u[k4 + 2];
			v[dOffset01 + 2] = u[k4 + 3];
			k4 = bitReverse[brOffset + 1];
			v[dOffset11 + 1] = u[k4];
			v[dOffset11] = u[k4 + 1];
			v[dOffset01 + 1] = u[k4 + 2];
			v[dOffset01] = u[k4 + 3];
			dOffset01 -= 4;
			dOffset11 -= 4;
			brOffset += 2;
		}
		var cOffset = 0;
		var dOffset2 = 0;
		var eOffset3 = n2 - 4;
		while(dOffset2 < eOffset3) {
			var a02 = v[dOffset2] - v[eOffset3 + 2];
			var a11 = v[dOffset2 + 1] + v[eOffset3 + 3];
			var b0 = c[cOffset + 1] * a02 + c[cOffset] * a11;
			var b1 = c[cOffset + 1] * a11 - c[cOffset] * a02;
			var b2 = v[dOffset2] + v[eOffset3 + 2];
			var b3 = v[dOffset2 + 1] - v[eOffset3 + 3];
			v[dOffset2] = b2 + b0;
			v[dOffset2 + 1] = b3 + b1;
			v[eOffset3 + 2] = b2 - b0;
			v[eOffset3 + 3] = b1 - b3;
			a02 = v[dOffset2 + 2] - v[eOffset3];
			a11 = v[dOffset2 + 3] + v[eOffset3 + 1];
			b0 = c[cOffset + 3] * a02 + c[cOffset + 2] * a11;
			b1 = c[cOffset + 3] * a11 - c[cOffset + 2] * a02;
			b2 = v[dOffset2 + 2] + v[eOffset3];
			b3 = v[dOffset2 + 3] - v[eOffset3 + 1];
			v[dOffset2 + 2] = b2 + b0;
			v[dOffset2 + 3] = b3 + b1;
			v[eOffset3] = b2 - b0;
			v[eOffset3 + 1] = b1 - b3;
			cOffset += 4;
			dOffset2 += 4;
			eOffset3 -= 4;
		}
		var bOffset = n2 - 8;
		var eOffset4 = n2 - 8;
		var dOffset02 = 0;
		var dOffset12 = n2 - 4;
		var dOffset21 = n2;
		var dOffset3 = n - 4;
		while(eOffset4 >= 0) {
			var p3 = buf2[eOffset4 + 6] * b[bOffset + 7] - buf2[eOffset4 + 7] * b[bOffset + 6];
			var p2 = -buf2[eOffset4 + 6] * b[bOffset + 6] - buf2[eOffset4 + 7] * b[bOffset + 7];
			buffer[dOffset02] = p3;
			buffer[dOffset12 + 3] = -p3;
			buffer[dOffset21] = p2;
			buffer[dOffset3 + 3] = p2;
			var p1 = buf2[eOffset4 + 4] * b[bOffset + 5] - buf2[eOffset4 + 5] * b[bOffset + 4];
			var p0 = -buf2[eOffset4 + 4] * b[bOffset + 4] - buf2[eOffset4 + 5] * b[bOffset + 5];
			buffer[dOffset02 + 1] = p1;
			buffer[dOffset12 + 2] = -p1;
			buffer[dOffset21 + 1] = p0;
			buffer[dOffset3 + 2] = p0;
			p3 = buf2[eOffset4 + 2] * b[bOffset + 3] - buf2[eOffset4 + 3] * b[bOffset + 2];
			p2 = -buf2[eOffset4 + 2] * b[bOffset + 2] - buf2[eOffset4 + 3] * b[bOffset + 3];
			buffer[dOffset02 + 2] = p3;
			buffer[dOffset12 + 1] = -p3;
			buffer[dOffset21 + 2] = p2;
			buffer[dOffset3 + 1] = p2;
			p1 = buf2[eOffset4] * b[bOffset + 1] - buf2[eOffset4 + 1] * b[bOffset];
			p0 = -buf2[eOffset4] * b[bOffset] - buf2[eOffset4 + 1] * b[bOffset + 1];
			buffer[dOffset02 + 3] = p1;
			buffer[dOffset12] = -p1;
			buffer[dOffset21 + 3] = p0;
			buffer[dOffset3] = p0;
			bOffset -= 8;
			eOffset4 -= 8;
			dOffset02 += 4;
			dOffset21 += 4;
			dOffset12 -= 4;
			dOffset3 -= 4;
		}
	}
	,decodePacket: function() {
		var result = this.decodeInitial();
		if(result == null) {
			return null;
		}
		var rest = this.decodePacketRest(result);
		return rest;
	}
	,decodeInitial: function() {
		this.channelBufferStart = this.channelBufferEnd = 0;
		while(true) {
			if(!this.decodeState.maybeStartPacket()) {
				return null;
			}
			var _this = this.decodeState;
			var tmp;
			if(_this.validBits < 0) {
				tmp = 0;
			} else if(_this.validBits < 1) {
				if(_this.validBits == 0) {
					_this.acc = 0;
				}
				while(true) {
					if(_this.bytesInSeg == 0 && (_this.lastSeg || _this.next() == 0)) {
						_this.validBits = -1;
						break;
					} else {
						_this.bytesInSeg--;
						_this.inputPosition += 1;
						_this.acc = _this.acc + (_this.input.readByte() << _this.validBits);
						_this.validBits += 8;
					}
					if(!(_this.validBits < 1)) {
						break;
					}
				}
				if(_this.validBits < 0) {
					tmp = 0;
				} else {
					var z = _this.acc & 1;
					_this.acc = _this.acc >>> 1;
					_this.validBits -= 1;
					tmp = z;
				}
			} else {
				var z1 = _this.acc & 1;
				_this.acc = _this.acc >>> 1;
				_this.validBits -= 1;
				tmp = z1;
			}
			if(tmp != 0) {
				while(true) {
					var _this1 = this.decodeState;
					var x;
					if(_this1.bytesInSeg == 0 && (_this1.lastSeg || _this1.next() == 0)) {
						x = -1;
					} else {
						_this1.bytesInSeg--;
						_this1.inputPosition += 1;
						x = _this1.input.readByte();
					}
					_this1.validBits = 0;
					if(!(-1 != x)) {
						break;
					}
				}
				continue;
			}
			break;
		}
		var _this2 = this.decodeState;
		var n = this.header.modes.length - 1;
		var log2_4 = [0,1,2,2,3,3,3,3,4,4,4,4,4,4,4,4];
		var n1 = n < 16384 ? n < 16 ? log2_4[n] : n < 512 ? 5 + log2_4[n >> 5] : 10 + log2_4[n >> 10] : n < 16777216 ? n < 524288 ? 15 + log2_4[n >> 15] : 20 + log2_4[n >> 20] : n < 536870912 ? 25 + log2_4[n >> 25] : n < -2147483648 ? 30 + log2_4[n >> 30] : 0;
		var i;
		if(_this2.validBits < 0) {
			i = 0;
		} else if(_this2.validBits < n1) {
			if(n1 > 24) {
				i = _this2.readBits(24) + (_this2.readBits(n1 - 24) << 24);
			} else {
				if(_this2.validBits == 0) {
					_this2.acc = 0;
				}
				while(true) {
					if(_this2.bytesInSeg == 0 && (_this2.lastSeg || _this2.next() == 0)) {
						_this2.validBits = -1;
						break;
					} else {
						_this2.bytesInSeg--;
						_this2.inputPosition += 1;
						_this2.acc = _this2.acc + (_this2.input.readByte() << _this2.validBits);
						_this2.validBits += 8;
					}
					if(!(_this2.validBits < n1)) {
						break;
					}
				}
				if(_this2.validBits < 0) {
					i = 0;
				} else {
					var z2 = _this2.acc & (1 << n1) - 1;
					_this2.acc = _this2.acc >>> n1;
					_this2.validBits -= n1;
					i = z2;
				}
			}
		} else {
			var z3 = _this2.acc & (1 << n1) - 1;
			_this2.acc = _this2.acc >>> n1;
			_this2.validBits -= n1;
			i = z3;
		}
		if(i == -1 || i >= this.header.modes.length) {
			throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.SEEK_FAILED,null,{ fileName : "VorbisDecoder.hx", lineNumber : 519, className : "kha.audio2.ogg.vorbis.VorbisDecoder", methodName : "decodeInitial"}));
		}
		var m = this.header.modes[i];
		var n2;
		var prev;
		var next;
		if(m.blockflag) {
			n2 = this.header.blocksize1;
			var _this3 = this.decodeState;
			if(_this3.validBits < 0) {
				prev = 0;
			} else if(_this3.validBits < 1) {
				if(_this3.validBits == 0) {
					_this3.acc = 0;
				}
				while(true) {
					if(_this3.bytesInSeg == 0 && (_this3.lastSeg || _this3.next() == 0)) {
						_this3.validBits = -1;
						break;
					} else {
						_this3.bytesInSeg--;
						_this3.inputPosition += 1;
						_this3.acc = _this3.acc + (_this3.input.readByte() << _this3.validBits);
						_this3.validBits += 8;
					}
					if(!(_this3.validBits < 1)) {
						break;
					}
				}
				if(_this3.validBits < 0) {
					prev = 0;
				} else {
					var z4 = _this3.acc & 1;
					_this3.acc = _this3.acc >>> 1;
					_this3.validBits -= 1;
					prev = z4;
				}
			} else {
				var z5 = _this3.acc & 1;
				_this3.acc = _this3.acc >>> 1;
				_this3.validBits -= 1;
				prev = z5;
			}
			var _this4 = this.decodeState;
			if(_this4.validBits < 0) {
				next = 0;
			} else if(_this4.validBits < 1) {
				if(_this4.validBits == 0) {
					_this4.acc = 0;
				}
				while(true) {
					if(_this4.bytesInSeg == 0 && (_this4.lastSeg || _this4.next() == 0)) {
						_this4.validBits = -1;
						break;
					} else {
						_this4.bytesInSeg--;
						_this4.inputPosition += 1;
						_this4.acc = _this4.acc + (_this4.input.readByte() << _this4.validBits);
						_this4.validBits += 8;
					}
					if(!(_this4.validBits < 1)) {
						break;
					}
				}
				if(_this4.validBits < 0) {
					next = 0;
				} else {
					var z6 = _this4.acc & 1;
					_this4.acc = _this4.acc >>> 1;
					_this4.validBits -= 1;
					next = z6;
				}
			} else {
				var z7 = _this4.acc & 1;
				_this4.acc = _this4.acc >>> 1;
				_this4.validBits -= 1;
				next = z7;
			}
		} else {
			next = 0;
			prev = next;
			n2 = this.header.blocksize0;
		}
		var windowCenter = n2 >> 1;
		return { mode : i, left : m.blockflag && prev == 0 ? { start : n2 - this.header.blocksize0 >> 2, end : n2 + this.header.blocksize0 >> 2} : { start : 0, end : windowCenter}, right : m.blockflag && next == 0 ? { start : n2 * 3 - this.header.blocksize0 >> 2, end : n2 * 3 + this.header.blocksize0 >> 2} : { start : windowCenter, end : n2}};
	}
	,decodePacketRest: function(r) {
		var len = 0;
		var m = this.header.modes[r.mode];
		var this1 = new Array(256);
		var zeroChannel = this1;
		var this2 = new Array(256);
		var reallyZeroChannel = this2;
		var n = m.blockflag ? this.header.blocksize1 : this.header.blocksize0;
		var map = this.header.mapping[m.mapping];
		var n2 = n >> 1;
		var rangeList = [256,128,86,64];
		var codebooks = this.header.codebooks;
		var _g1 = 0;
		var _g = this.header.channel;
		while(_g1 < _g) {
			var i = _g1++;
			var s = map.chan[i].mux;
			zeroChannel[i] = false;
			var floor = this.header.floorConfig[map.submapFloor[s]];
			if(floor.type == 0) {
				throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_STREAM,null,{ fileName : "VorbisDecoder.hx", lineNumber : 581, className : "kha.audio2.ogg.vorbis.VorbisDecoder", methodName : "decodePacketRest"}));
			} else {
				var g = floor.floor1;
				var _this = this.decodeState;
				var tmp;
				if(_this.validBits < 0) {
					tmp = 0;
				} else if(_this.validBits < 1) {
					if(_this.validBits == 0) {
						_this.acc = 0;
					}
					while(true) {
						if(_this.bytesInSeg == 0 && (_this.lastSeg || _this.next() == 0)) {
							_this.validBits = -1;
							break;
						} else {
							_this.bytesInSeg--;
							_this.inputPosition += 1;
							_this.acc = _this.acc + (_this.input.readByte() << _this.validBits);
							_this.validBits += 8;
						}
						if(!(_this.validBits < 1)) {
							break;
						}
					}
					if(_this.validBits < 0) {
						tmp = 0;
					} else {
						var z = _this.acc & 1;
						_this.acc = _this.acc >>> 1;
						_this.validBits -= 1;
						tmp = z;
					}
				} else {
					var z1 = _this.acc & 1;
					_this.acc = _this.acc >>> 1;
					_this.validBits -= 1;
					tmp = z1;
				}
				if(tmp != 0) {
					var fy = [];
					var this3 = new Array(256);
					var step2Flag = this3;
					var range = rangeList[g.floor1Multiplier - 1];
					var offset = 2;
					fy = this.finalY[i];
					var _this1 = this.decodeState;
					var log2_4 = [0,1,2,2,3,3,3,3,4,4,4,4,4,4,4,4];
					var n1 = (range < 16384 ? range < 16 ? log2_4[range] : range < 512 ? 5 + log2_4[range >> 5] : 10 + log2_4[range >> 10] : range < 16777216 ? range < 524288 ? 15 + log2_4[range >> 15] : 20 + log2_4[range >> 20] : range < 536870912 ? 25 + log2_4[range >> 25] : range < -2147483648 ? 30 + log2_4[range >> 30] : 0) - 1;
					var tmp1;
					if(_this1.validBits < 0) {
						tmp1 = 0;
					} else if(_this1.validBits < n1) {
						if(n1 > 24) {
							tmp1 = _this1.readBits(24) + (_this1.readBits(n1 - 24) << 24);
						} else {
							if(_this1.validBits == 0) {
								_this1.acc = 0;
							}
							while(true) {
								if(_this1.bytesInSeg == 0 && (_this1.lastSeg || _this1.next() == 0)) {
									_this1.validBits = -1;
									break;
								} else {
									_this1.bytesInSeg--;
									_this1.inputPosition += 1;
									_this1.acc = _this1.acc + (_this1.input.readByte() << _this1.validBits);
									_this1.validBits += 8;
								}
								if(!(_this1.validBits < n1)) {
									break;
								}
							}
							if(_this1.validBits < 0) {
								tmp1 = 0;
							} else {
								var z2 = _this1.acc & (1 << n1) - 1;
								_this1.acc = _this1.acc >>> n1;
								_this1.validBits -= n1;
								tmp1 = z2;
							}
						}
					} else {
						var z3 = _this1.acc & (1 << n1) - 1;
						_this1.acc = _this1.acc >>> n1;
						_this1.validBits -= n1;
						tmp1 = z3;
					}
					fy[0] = tmp1;
					var _this2 = this.decodeState;
					var log2_41 = [0,1,2,2,3,3,3,3,4,4,4,4,4,4,4,4];
					var n3 = (range < 16384 ? range < 16 ? log2_41[range] : range < 512 ? 5 + log2_41[range >> 5] : 10 + log2_41[range >> 10] : range < 16777216 ? range < 524288 ? 15 + log2_41[range >> 15] : 20 + log2_41[range >> 20] : range < 536870912 ? 25 + log2_41[range >> 25] : range < -2147483648 ? 30 + log2_41[range >> 30] : 0) - 1;
					var tmp2;
					if(_this2.validBits < 0) {
						tmp2 = 0;
					} else if(_this2.validBits < n3) {
						if(n3 > 24) {
							tmp2 = _this2.readBits(24) + (_this2.readBits(n3 - 24) << 24);
						} else {
							if(_this2.validBits == 0) {
								_this2.acc = 0;
							}
							while(true) {
								if(_this2.bytesInSeg == 0 && (_this2.lastSeg || _this2.next() == 0)) {
									_this2.validBits = -1;
									break;
								} else {
									_this2.bytesInSeg--;
									_this2.inputPosition += 1;
									_this2.acc = _this2.acc + (_this2.input.readByte() << _this2.validBits);
									_this2.validBits += 8;
								}
								if(!(_this2.validBits < n3)) {
									break;
								}
							}
							if(_this2.validBits < 0) {
								tmp2 = 0;
							} else {
								var z4 = _this2.acc & (1 << n3) - 1;
								_this2.acc = _this2.acc >>> n3;
								_this2.validBits -= n3;
								tmp2 = z4;
							}
						}
					} else {
						var z5 = _this2.acc & (1 << n3) - 1;
						_this2.acc = _this2.acc >>> n3;
						_this2.validBits -= n3;
						tmp2 = z5;
					}
					fy[1] = tmp2;
					var _g3 = 0;
					var _g2 = g.partitions;
					while(_g3 < _g2) {
						var j = _g3++;
						var pclass = g.partitionClassList[j];
						var cdim = g.classDimensions[pclass];
						var cbits = g.classSubclasses[pclass];
						var csub = (1 << cbits) - 1;
						var cval = 0;
						if(cbits != 0) {
							var c = codebooks[g.classMasterbooks[pclass]];
							var _this3 = this.decodeState;
							if(_this3.validBits < 10) {
								_this3.prepHuffman();
							}
							var i1 = c.fastHuffman[_this3.acc & 1023];
							var val;
							if(i1 >= 0) {
								var l = c.codewordLengths[i1];
								_this3.acc = _this3.acc >>> l;
								_this3.validBits -= l;
								if(_this3.validBits < 0) {
									_this3.validBits = 0;
									val = -1;
								} else {
									val = i1;
								}
							} else {
								val = _this3.decodeScalarRaw(c);
							}
							if(c.sparse) {
								val = c.sortedValues[val];
							}
							cval = val;
						}
						var books = g.subclassBooks[pclass];
						var _g5 = 0;
						var _g4 = cdim;
						while(_g5 < _g4) {
							var k = _g5++;
							var book = books[cval & csub];
							cval >>= cbits;
							var tmp3 = offset++;
							var tmp4;
							if(book >= 0) {
								var _this4 = this.decodeState;
								var c1 = codebooks[book];
								if(_this4.validBits < 10) {
									_this4.prepHuffman();
								}
								var i2 = c1.fastHuffman[_this4.acc & 1023];
								var val1;
								if(i2 >= 0) {
									var l1 = c1.codewordLengths[i2];
									_this4.acc = _this4.acc >>> l1;
									_this4.validBits -= l1;
									if(_this4.validBits < 0) {
										_this4.validBits = 0;
										val1 = -1;
									} else {
										val1 = i2;
									}
								} else {
									val1 = _this4.decodeScalarRaw(c1);
								}
								if(c1.sparse) {
									val1 = c1.sortedValues[val1];
								}
								tmp4 = val1;
							} else {
								tmp4 = 0;
							}
							fy[tmp3] = tmp4;
						}
					}
					if(this.decodeState.validBits == -1) {
						zeroChannel[i] = true;
						continue;
					}
					step2Flag[0] = step2Flag[1] = true;
					var naighbors = g.neighbors;
					var xlist = g.xlist;
					var _g31 = 2;
					var _g21 = g.values;
					while(_g31 < _g21) {
						var j1 = _g31++;
						var low = naighbors[j1][0];
						var high = naighbors[j1][1];
						var x0 = xlist[low];
						var y0 = fy[low];
						var dy = fy[high] - y0;
						var adx = xlist[high] - x0;
						var err = Math.abs(dy) * (xlist[j1] - x0);
						var off = err / adx | 0;
						var lowroom = dy < 0 ? y0 - off : y0 + off;
						var val2 = fy[j1];
						var highroom = range - lowroom;
						var room = highroom < lowroom ? highroom * 2 : lowroom * 2;
						if(val2 != 0) {
							step2Flag[low] = step2Flag[high] = true;
							step2Flag[j1] = true;
							if(val2 >= room) {
								if(highroom > lowroom) {
									fy[j1] = val2 - lowroom + lowroom;
								} else {
									fy[j1] = lowroom - val2 + highroom - 1;
								}
							} else if((val2 & 1) != 0) {
								fy[j1] = lowroom - (val2 + 1 >> 1);
							} else {
								fy[j1] = lowroom + (val2 >> 1);
							}
						} else {
							step2Flag[j1] = false;
							fy[j1] = lowroom;
						}
					}
					var _g32 = 0;
					var _g22 = g.values;
					while(_g32 < _g22) {
						var j2 = _g32++;
						if(!step2Flag[j2]) {
							fy[j2] = -1;
						}
					}
				} else {
					zeroChannel[i] = true;
				}
			}
		}
		var _g11 = 0;
		var _g6 = this.header.channel;
		while(_g11 < _g6) {
			var i3 = _g11++;
			reallyZeroChannel[i3] = zeroChannel[i3];
		}
		var _g12 = 0;
		var _g7 = map.couplingSteps;
		while(_g12 < _g7) {
			var i4 = _g12++;
			if(!zeroChannel[map.chan[i4].magnitude] || !zeroChannel[map.chan[i4].angle]) {
				zeroChannel[map.chan[i4].magnitude] = zeroChannel[map.chan[i4].angle] = false;
			}
		}
		var _g13 = 0;
		var _g8 = map.submaps;
		while(_g13 < _g8) {
			var i5 = _g13++;
			var length = this.header.channel;
			var this4 = new Array(length);
			var residueBuffers = this4;
			var this5 = new Array(256);
			var doNotDecode = this5;
			var ch = 0;
			var _g33 = 0;
			var _g23 = this.header.channel;
			while(_g33 < _g23) {
				var j3 = _g33++;
				if(map.chan[j3].mux == i5) {
					if(zeroChannel[j3]) {
						doNotDecode[ch] = true;
						residueBuffers[ch] = null;
					} else {
						doNotDecode[ch] = false;
						residueBuffers[ch] = this.channelBuffers[j3];
					}
					++ch;
				}
			}
			var r1 = map.submapResidue[i5];
			var residue = this.header.residueConfig[r1];
			residue.decode(this.decodeState,this.header,residueBuffers,ch,n2,doNotDecode,this.channelBuffers);
		}
		var i6 = map.couplingSteps;
		var n21 = n >> 1;
		while(--i6 >= 0) {
			var m1 = this.channelBuffers[map.chan[i6].magnitude];
			var a = this.channelBuffers[map.chan[i6].angle];
			var _g14 = 0;
			var _g9 = n21;
			while(_g14 < _g9) {
				var j4 = _g14++;
				var a2;
				var m2;
				if(m1[j4] > 0) {
					if(a[j4] > 0) {
						m2 = m1[j4];
						a2 = m1[j4] - a[j4];
					} else {
						a2 = m1[j4];
						m2 = m1[j4] + a[j4];
					}
				} else if(a[j4] > 0) {
					m2 = m1[j4];
					a2 = m1[j4] + a[j4];
				} else {
					a2 = m1[j4];
					m2 = m1[j4] - a[j4];
				}
				m1[j4] = m2;
				a[j4] = a2;
			}
		}
		var _g15 = 0;
		var _g10 = this.header.channel;
		while(_g15 < _g10) {
			var i7 = _g15++;
			if(reallyZeroChannel[i7]) {
				var _g34 = 0;
				var _g24 = n21;
				while(_g34 < _g24) {
					var j5 = _g34++;
					this.channelBuffers[i7][j5] = 0;
				}
			} else {
				map.doFloor(this.header.floorConfig,i7,n,this.channelBuffers[i7],this.finalY[i7],null);
			}
		}
		var _g16 = 0;
		var _g17 = this.header.channel;
		while(_g16 < _g17) {
			var i8 = _g16++;
			this.inverseMdct(this.channelBuffers[i8],n,m.blockflag);
		}
		var _this5 = this.decodeState;
		while(_this5.bytesInSeg != 0 || !_this5.lastSeg && _this5.next() != 0) {
			_this5.bytesInSeg--;
			_this5.inputPosition += 1;
			_this5.input.readByte();
		}
		return this.decodeState.finishDecodePacket(this.previousLength,n,r);
	}
	,__class__: kha_audio2_ogg_vorbis_VorbisDecoder
};
var kha_audio2_ogg_vorbis_VorbisTools = function() { };
$hxClasses["kha.audio2.ogg.vorbis.VorbisTools"] = kha_audio2_ogg_vorbis_VorbisTools;
kha_audio2_ogg_vorbis_VorbisTools.__name__ = true;
kha_audio2_ogg_vorbis_VorbisTools.assert = function(b,p) {
};
kha_audio2_ogg_vorbis_VorbisTools.neighbors = function(x,n) {
	var low = -1;
	var high = 65536;
	var plow = 0;
	var phigh = 0;
	var _g1 = 0;
	var _g = n;
	while(_g1 < _g) {
		var i = _g1++;
		if(x[i] > low && x[i] < x[n]) {
			plow = i;
			low = x[i];
		}
		if(x[i] < high && x[i] > x[n]) {
			phigh = i;
			high = x[i];
		}
	}
	return { low : plow, high : phigh};
};
kha_audio2_ogg_vorbis_VorbisTools.floatUnpack = function(x) {
	var mantissa = _$UInt_UInt_$Impl_$.toFloat(x & 2097151);
	var sign = x & -2147483648;
	var exp = (x & 2145386496) >>> 21;
	var res = sign != 0 ? -mantissa : mantissa;
	return res * Math.pow(2,exp - 788);
};
kha_audio2_ogg_vorbis_VorbisTools.bitReverse = function(n) {
	n = (n & -1431655766) >>> 1 | (n & 1431655765) << 1;
	n = (n & -858993460) >>> 2 | (n & 858993459) << 2;
	n = (n & -252645136) >>> 4 | (n & 252645135) << 4;
	n = (n & -16711936) >>> 8 | (n & 16711935) << 8;
	return n >>> 16 | n << 16;
};
kha_audio2_ogg_vorbis_VorbisTools.pointCompare = function(a,b) {
	if(a.x < b.x) {
		return -1;
	} else if(a.x > b.x) {
		return 1;
	} else {
		return 0;
	}
};
kha_audio2_ogg_vorbis_VorbisTools.uintAsc = function(a,b) {
	if(_$UInt_UInt_$Impl_$.gt(b,a)) {
		return -1;
	} else if(a == b) {
		return 0;
	} else {
		return 1;
	}
};
kha_audio2_ogg_vorbis_VorbisTools.lookup1Values = function(entries,dim) {
	var r = Math.exp(Math.log(entries) / dim) | 0;
	if((Math.pow(r + 1,dim) | 0) <= entries) {
		++r;
	}
	var b = Math.pow(r + 1,dim) > entries;
	var b1 = (Math.pow(r,dim) | 0) <= entries;
	return r;
};
kha_audio2_ogg_vorbis_VorbisTools.computeWindow = function(n,window) {
	var n2 = n >> 1;
	var _g1 = 0;
	var _g = n2;
	while(_g1 < _g) {
		var i = _g1++;
		window[i] = Math.sin(1.5707963267948966 * kha_audio2_ogg_vorbis_VorbisTools.square(Math.sin((i + 0.5) / n2 * 0.5 * 3.14159265358979323846264)));
	}
};
kha_audio2_ogg_vorbis_VorbisTools.square = function(f) {
	return f * f;
};
kha_audio2_ogg_vorbis_VorbisTools.computeBitReverse = function(n,rev) {
	var log2_4 = [0,1,2,2,3,3,3,3,4,4,4,4,4,4,4,4];
	var ld = (n < 16384 ? n < 16 ? log2_4[n] : n < 512 ? 5 + log2_4[n >> 5] : 10 + log2_4[n >> 10] : n < 16777216 ? n < 524288 ? 15 + log2_4[n >> 15] : 20 + log2_4[n >> 20] : n < 536870912 ? 25 + log2_4[n >> 25] : n < -2147483648 ? 30 + log2_4[n >> 30] : 0) - 1;
	var n8 = n >> 3;
	var _g1 = 0;
	var _g = n8;
	while(_g1 < _g) {
		var i = _g1++;
		var n1 = i;
		n1 = (n1 & -1431655766) >>> 1 | (n1 & 1431655765) << 1;
		n1 = (n1 & -858993460) >>> 2 | (n1 & 858993459) << 2;
		n1 = (n1 & -252645136) >>> 4 | (n1 & 252645135) << 4;
		n1 = (n1 & -16711936) >>> 8 | (n1 & 16711935) << 8;
		rev[i] = (n1 >>> 16 | n1 << 16) >>> 32 - ld + 3 << 2;
	}
};
kha_audio2_ogg_vorbis_VorbisTools.computeTwiddleFactors = function(n,af,bf,cf) {
	var n4 = n >> 2;
	var n8 = n >> 3;
	var k2 = 0;
	var _g1 = 0;
	var _g = n4;
	while(_g1 < _g) {
		var k = _g1++;
		af[k2] = Math.cos(4 * k * 3.14159265358979323846264 / n);
		af[k2 + 1] = -Math.sin(4 * k * 3.14159265358979323846264 / n);
		bf[k2] = Math.cos((k2 + 1) * 3.14159265358979323846264 / n / 2) * 0.5;
		bf[k2 + 1] = Math.sin((k2 + 1) * 3.14159265358979323846264 / n / 2) * 0.5;
		k2 += 2;
	}
	var k21 = 0;
	var _g11 = 0;
	var _g2 = n8;
	while(_g11 < _g2) {
		var k1 = _g11++;
		cf[k21] = Math.cos(2 * (k21 + 1) * 3.14159265358979323846264 / n);
		cf[k21 + 1] = -Math.sin(2 * (k21 + 1) * 3.14159265358979323846264 / n);
		k21 += 2;
	}
};
kha_audio2_ogg_vorbis_VorbisTools.drawLine = function(output,x0,y0,x1,y1,n) {
	if(kha_audio2_ogg_vorbis_VorbisTools.integerDivideTable == null) {
		var this1 = new Array(32);
		kha_audio2_ogg_vorbis_VorbisTools.integerDivideTable = this1;
		var _g = 0;
		while(_g < 32) {
			var i = _g++;
			var this2 = kha_audio2_ogg_vorbis_VorbisTools.integerDivideTable;
			var this3 = new Array(64);
			this2[i] = this3;
			var _g1 = 1;
			while(_g1 < 64) {
				var j = _g1++;
				kha_audio2_ogg_vorbis_VorbisTools.integerDivideTable[i][j] = i / j | 0;
			}
		}
	}
	var dy = y1 - y0;
	var adx = x1 - x0;
	var ady = dy < 0 ? -dy : dy;
	var base;
	var x = x0;
	var y = y0;
	var err = 0;
	var sy;
	if(adx < 64 && ady < 32) {
		if(dy < 0) {
			base = -kha_audio2_ogg_vorbis_VorbisTools.integerDivideTable[ady][adx];
			sy = base - 1;
		} else {
			base = kha_audio2_ogg_vorbis_VorbisTools.integerDivideTable[ady][adx];
			sy = base + 1;
		}
	} else {
		base = dy / adx | 0;
		if(dy < 0) {
			sy = base - 1;
		} else {
			sy = base + 1;
		}
	}
	ady -= (base < 0 ? -base : base) * adx;
	if(x1 > n) {
		x1 = n;
	}
	var _g2 = x;
	var _g11 = output;
	_g11[_g2] = _g11[_g2] * kha_audio2_ogg_vorbis_VorbisTools.INVERSE_DB_TABLE[y];
	var _g12 = x + 1;
	var _g3 = x1;
	while(_g12 < _g3) {
		var i1 = _g12++;
		err += ady;
		if(err >= adx) {
			err -= adx;
			y += sy;
		} else {
			y += base;
		}
		var _g21 = i1;
		var _g31 = output;
		_g31[_g21] = _g31[_g21] * kha_audio2_ogg_vorbis_VorbisTools.INVERSE_DB_TABLE[y];
	}
};
kha_audio2_ogg_vorbis_VorbisTools.predictPoint = function(x,x0,x1,y0,y1) {
	var dy = y1 - y0;
	var adx = x1 - x0;
	var err = Math.abs(dy) * (x - x0);
	var off = err / adx | 0;
	if(dy < 0) {
		return y0 - off;
	} else {
		return y0 + off;
	}
};
kha_audio2_ogg_vorbis_VorbisTools.emptyFloatVector = function(len) {
	var this1 = new Array(len);
	var vec = this1;
	return vec;
};
kha_audio2_ogg_vorbis_VorbisTools.copyVector = function(source) {
	var length = source.length;
	var this1 = new Array(length);
	var dest = this1;
	var _g1 = 0;
	var _g = source.length;
	while(_g1 < _g) {
		var i = _g1++;
		dest[i] = source[i];
	}
	return dest;
};
var kha_audio2_ogg_vorbis_data_Codebook = function() {
};
$hxClasses["kha.audio2.ogg.vorbis.data.Codebook"] = kha_audio2_ogg_vorbis_data_Codebook;
kha_audio2_ogg_vorbis_data_Codebook.__name__ = true;
kha_audio2_ogg_vorbis_data_Codebook.read = function(decodeState) {
	var c = new kha_audio2_ogg_vorbis_data_Codebook();
	var tmp;
	var tmp1;
	var tmp2;
	if(decodeState.validBits < 0) {
		tmp2 = 0;
	} else if(decodeState.validBits < 8) {
		if(decodeState.validBits == 0) {
			decodeState.acc = 0;
		}
		while(true) {
			if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
				decodeState.validBits = -1;
				break;
			} else {
				decodeState.bytesInSeg--;
				decodeState.inputPosition += 1;
				decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
				decodeState.validBits += 8;
			}
			if(!(decodeState.validBits < 8)) {
				break;
			}
		}
		if(decodeState.validBits < 0) {
			tmp2 = 0;
		} else {
			var z = decodeState.acc & 255;
			decodeState.acc = decodeState.acc >>> 8;
			decodeState.validBits -= 8;
			tmp2 = z;
		}
	} else {
		var z1 = decodeState.acc & 255;
		decodeState.acc = decodeState.acc >>> 8;
		decodeState.validBits -= 8;
		tmp2 = z1;
	}
	if(tmp2 == 66) {
		var tmp3;
		if(decodeState.validBits < 0) {
			tmp3 = 0;
		} else if(decodeState.validBits < 8) {
			if(decodeState.validBits == 0) {
				decodeState.acc = 0;
			}
			while(true) {
				if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
					decodeState.validBits = -1;
					break;
				} else {
					decodeState.bytesInSeg--;
					decodeState.inputPosition += 1;
					decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
					decodeState.validBits += 8;
				}
				if(!(decodeState.validBits < 8)) {
					break;
				}
			}
			if(decodeState.validBits < 0) {
				tmp3 = 0;
			} else {
				var z2 = decodeState.acc & 255;
				decodeState.acc = decodeState.acc >>> 8;
				decodeState.validBits -= 8;
				tmp3 = z2;
			}
		} else {
			var z3 = decodeState.acc & 255;
			decodeState.acc = decodeState.acc >>> 8;
			decodeState.validBits -= 8;
			tmp3 = z3;
		}
		tmp1 = tmp3 != 67;
	} else {
		tmp1 = true;
	}
	if(!tmp1) {
		var tmp4;
		if(decodeState.validBits < 0) {
			tmp4 = 0;
		} else if(decodeState.validBits < 8) {
			if(decodeState.validBits == 0) {
				decodeState.acc = 0;
			}
			while(true) {
				if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
					decodeState.validBits = -1;
					break;
				} else {
					decodeState.bytesInSeg--;
					decodeState.inputPosition += 1;
					decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
					decodeState.validBits += 8;
				}
				if(!(decodeState.validBits < 8)) {
					break;
				}
			}
			if(decodeState.validBits < 0) {
				tmp4 = 0;
			} else {
				var z4 = decodeState.acc & 255;
				decodeState.acc = decodeState.acc >>> 8;
				decodeState.validBits -= 8;
				tmp4 = z4;
			}
		} else {
			var z5 = decodeState.acc & 255;
			decodeState.acc = decodeState.acc >>> 8;
			decodeState.validBits -= 8;
			tmp4 = z5;
		}
		tmp = tmp4 != 86;
	} else {
		tmp = true;
	}
	if(tmp) {
		throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "Codebook.hx", lineNumber : 40, className : "kha.audio2.ogg.vorbis.data.Codebook", methodName : "read"}));
	}
	var x;
	if(decodeState.validBits < 0) {
		x = 0;
	} else if(decodeState.validBits < 8) {
		if(decodeState.validBits == 0) {
			decodeState.acc = 0;
		}
		while(true) {
			if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
				decodeState.validBits = -1;
				break;
			} else {
				decodeState.bytesInSeg--;
				decodeState.inputPosition += 1;
				decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
				decodeState.validBits += 8;
			}
			if(!(decodeState.validBits < 8)) {
				break;
			}
		}
		if(decodeState.validBits < 0) {
			x = 0;
		} else {
			var z6 = decodeState.acc & 255;
			decodeState.acc = decodeState.acc >>> 8;
			decodeState.validBits -= 8;
			x = z6;
		}
	} else {
		var z7 = decodeState.acc & 255;
		decodeState.acc = decodeState.acc >>> 8;
		decodeState.validBits -= 8;
		x = z7;
	}
	var tmp5;
	if(decodeState.validBits < 0) {
		tmp5 = 0;
	} else if(decodeState.validBits < 8) {
		if(decodeState.validBits == 0) {
			decodeState.acc = 0;
		}
		while(true) {
			if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
				decodeState.validBits = -1;
				break;
			} else {
				decodeState.bytesInSeg--;
				decodeState.inputPosition += 1;
				decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
				decodeState.validBits += 8;
			}
			if(!(decodeState.validBits < 8)) {
				break;
			}
		}
		if(decodeState.validBits < 0) {
			tmp5 = 0;
		} else {
			var z8 = decodeState.acc & 255;
			decodeState.acc = decodeState.acc >>> 8;
			decodeState.validBits -= 8;
			tmp5 = z8;
		}
	} else {
		var z9 = decodeState.acc & 255;
		decodeState.acc = decodeState.acc >>> 8;
		decodeState.validBits -= 8;
		tmp5 = z9;
	}
	c.dimensions = (tmp5 << 8) + x;
	var x1;
	if(decodeState.validBits < 0) {
		x1 = 0;
	} else if(decodeState.validBits < 8) {
		if(decodeState.validBits == 0) {
			decodeState.acc = 0;
		}
		while(true) {
			if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
				decodeState.validBits = -1;
				break;
			} else {
				decodeState.bytesInSeg--;
				decodeState.inputPosition += 1;
				decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
				decodeState.validBits += 8;
			}
			if(!(decodeState.validBits < 8)) {
				break;
			}
		}
		if(decodeState.validBits < 0) {
			x1 = 0;
		} else {
			var z10 = decodeState.acc & 255;
			decodeState.acc = decodeState.acc >>> 8;
			decodeState.validBits -= 8;
			x1 = z10;
		}
	} else {
		var z11 = decodeState.acc & 255;
		decodeState.acc = decodeState.acc >>> 8;
		decodeState.validBits -= 8;
		x1 = z11;
	}
	var y;
	if(decodeState.validBits < 0) {
		y = 0;
	} else if(decodeState.validBits < 8) {
		if(decodeState.validBits == 0) {
			decodeState.acc = 0;
		}
		while(true) {
			if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
				decodeState.validBits = -1;
				break;
			} else {
				decodeState.bytesInSeg--;
				decodeState.inputPosition += 1;
				decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
				decodeState.validBits += 8;
			}
			if(!(decodeState.validBits < 8)) {
				break;
			}
		}
		if(decodeState.validBits < 0) {
			y = 0;
		} else {
			var z12 = decodeState.acc & 255;
			decodeState.acc = decodeState.acc >>> 8;
			decodeState.validBits -= 8;
			y = z12;
		}
	} else {
		var z13 = decodeState.acc & 255;
		decodeState.acc = decodeState.acc >>> 8;
		decodeState.validBits -= 8;
		y = z13;
	}
	var tmp6;
	if(decodeState.validBits < 0) {
		tmp6 = 0;
	} else if(decodeState.validBits < 8) {
		if(decodeState.validBits == 0) {
			decodeState.acc = 0;
		}
		while(true) {
			if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
				decodeState.validBits = -1;
				break;
			} else {
				decodeState.bytesInSeg--;
				decodeState.inputPosition += 1;
				decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
				decodeState.validBits += 8;
			}
			if(!(decodeState.validBits < 8)) {
				break;
			}
		}
		if(decodeState.validBits < 0) {
			tmp6 = 0;
		} else {
			var z14 = decodeState.acc & 255;
			decodeState.acc = decodeState.acc >>> 8;
			decodeState.validBits -= 8;
			tmp6 = z14;
		}
	} else {
		var z15 = decodeState.acc & 255;
		decodeState.acc = decodeState.acc >>> 8;
		decodeState.validBits -= 8;
		tmp6 = z15;
	}
	c.entries = (tmp6 << 16) + (y << 8) + x1;
	var ordered;
	if(decodeState.validBits < 0) {
		ordered = 0;
	} else if(decodeState.validBits < 1) {
		if(decodeState.validBits == 0) {
			decodeState.acc = 0;
		}
		while(true) {
			if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
				decodeState.validBits = -1;
				break;
			} else {
				decodeState.bytesInSeg--;
				decodeState.inputPosition += 1;
				decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
				decodeState.validBits += 8;
			}
			if(!(decodeState.validBits < 1)) {
				break;
			}
		}
		if(decodeState.validBits < 0) {
			ordered = 0;
		} else {
			var z16 = decodeState.acc & 1;
			decodeState.acc = decodeState.acc >>> 1;
			decodeState.validBits -= 1;
			ordered = z16;
		}
	} else {
		var z17 = decodeState.acc & 1;
		decodeState.acc = decodeState.acc >>> 1;
		decodeState.validBits -= 1;
		ordered = z17;
	}
	var tmp7;
	if(ordered != 0) {
		tmp7 = false;
	} else {
		var tmp8;
		if(decodeState.validBits < 0) {
			tmp8 = 0;
		} else if(decodeState.validBits < 1) {
			if(decodeState.validBits == 0) {
				decodeState.acc = 0;
			}
			while(true) {
				if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
					decodeState.validBits = -1;
					break;
				} else {
					decodeState.bytesInSeg--;
					decodeState.inputPosition += 1;
					decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
					decodeState.validBits += 8;
				}
				if(!(decodeState.validBits < 1)) {
					break;
				}
			}
			if(decodeState.validBits < 0) {
				tmp8 = 0;
			} else {
				var z18 = decodeState.acc & 1;
				decodeState.acc = decodeState.acc >>> 1;
				decodeState.validBits -= 1;
				tmp8 = z18;
			}
		} else {
			var z19 = decodeState.acc & 1;
			decodeState.acc = decodeState.acc >>> 1;
			decodeState.validBits -= 1;
			tmp8 = z19;
		}
		tmp7 = tmp8 != 0;
	}
	c.sparse = tmp7;
	var length = c.entries;
	var this1 = new Array(length);
	var lengths = this1;
	if(!c.sparse) {
		c.codewordLengths = lengths;
	}
	var total = 0;
	if(ordered != 0) {
		var currentEntry = 0;
		var currentLength;
		if(decodeState.validBits < 0) {
			currentLength = 0;
		} else if(decodeState.validBits < 5) {
			if(decodeState.validBits == 0) {
				decodeState.acc = 0;
			}
			while(true) {
				if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
					decodeState.validBits = -1;
					break;
				} else {
					decodeState.bytesInSeg--;
					decodeState.inputPosition += 1;
					decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
					decodeState.validBits += 8;
				}
				if(!(decodeState.validBits < 5)) {
					break;
				}
			}
			if(decodeState.validBits < 0) {
				currentLength = 0;
			} else {
				var z20 = decodeState.acc & 31;
				decodeState.acc = decodeState.acc >>> 5;
				decodeState.validBits -= 5;
				currentLength = z20;
			}
		} else {
			var z21 = decodeState.acc & 31;
			decodeState.acc = decodeState.acc >>> 5;
			decodeState.validBits -= 5;
			currentLength = z21;
		}
		var currentLength1 = currentLength + 1;
		while(currentEntry < c.entries) {
			var limit = c.entries - currentEntry;
			var log2_4 = [0,1,2,2,3,3,3,3,4,4,4,4,4,4,4,4];
			var n = limit < 16384 ? limit < 16 ? log2_4[limit] : limit < 512 ? 5 + log2_4[limit >> 5] : 10 + log2_4[limit >> 10] : limit < 16777216 ? limit < 524288 ? 15 + log2_4[limit >> 15] : 20 + log2_4[limit >> 20] : limit < 536870912 ? 25 + log2_4[limit >> 25] : limit < -2147483648 ? 30 + log2_4[limit >> 30] : 0;
			var n1;
			if(decodeState.validBits < 0) {
				n1 = 0;
			} else if(decodeState.validBits < n) {
				if(n > 24) {
					n1 = decodeState.readBits(24) + (decodeState.readBits(n - 24) << 24);
				} else {
					if(decodeState.validBits == 0) {
						decodeState.acc = 0;
					}
					while(true) {
						if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
							decodeState.validBits = -1;
							break;
						} else {
							decodeState.bytesInSeg--;
							decodeState.inputPosition += 1;
							decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
							decodeState.validBits += 8;
						}
						if(!(decodeState.validBits < n)) {
							break;
						}
					}
					if(decodeState.validBits < 0) {
						n1 = 0;
					} else {
						var z22 = decodeState.acc & (1 << n) - 1;
						decodeState.acc = decodeState.acc >>> n;
						decodeState.validBits -= n;
						n1 = z22;
					}
				}
			} else {
				var z23 = decodeState.acc & (1 << n) - 1;
				decodeState.acc = decodeState.acc >>> n;
				decodeState.validBits -= n;
				n1 = z23;
			}
			if(currentEntry + n1 > c.entries) {
				throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,"codebook entrys",{ fileName : "Codebook.hx", lineNumber : 67, className : "kha.audio2.ogg.vorbis.data.Codebook", methodName : "read"}));
			}
			var _g1 = 0;
			var _g = n1;
			while(_g1 < _g) {
				var i = _g1++;
				lengths[currentEntry + i] = currentLength1;
			}
			currentEntry += n1;
			++currentLength1;
		}
	} else {
		var _g11 = 0;
		var _g2 = c.entries;
		while(_g11 < _g2) {
			var j = _g11++;
			var present;
			if(c.sparse) {
				if(decodeState.validBits < 0) {
					present = 0;
				} else if(decodeState.validBits < 1) {
					if(decodeState.validBits == 0) {
						decodeState.acc = 0;
					}
					while(true) {
						if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
							decodeState.validBits = -1;
							break;
						} else {
							decodeState.bytesInSeg--;
							decodeState.inputPosition += 1;
							decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
							decodeState.validBits += 8;
						}
						if(!(decodeState.validBits < 1)) {
							break;
						}
					}
					if(decodeState.validBits < 0) {
						present = 0;
					} else {
						var z24 = decodeState.acc & 1;
						decodeState.acc = decodeState.acc >>> 1;
						decodeState.validBits -= 1;
						present = z24;
					}
				} else {
					var z25 = decodeState.acc & 1;
					decodeState.acc = decodeState.acc >>> 1;
					decodeState.validBits -= 1;
					present = z25;
				}
			} else {
				present = 1;
			}
			if(present != 0) {
				var val;
				if(decodeState.validBits < 0) {
					val = 0;
				} else if(decodeState.validBits < 5) {
					if(decodeState.validBits == 0) {
						decodeState.acc = 0;
					}
					while(true) {
						if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
							decodeState.validBits = -1;
							break;
						} else {
							decodeState.bytesInSeg--;
							decodeState.inputPosition += 1;
							decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
							decodeState.validBits += 8;
						}
						if(!(decodeState.validBits < 5)) {
							break;
						}
					}
					if(decodeState.validBits < 0) {
						val = 0;
					} else {
						var z26 = decodeState.acc & 31;
						decodeState.acc = decodeState.acc >>> 5;
						decodeState.validBits -= 5;
						val = z26;
					}
				} else {
					var z27 = decodeState.acc & 31;
					decodeState.acc = decodeState.acc >>> 5;
					decodeState.validBits -= 5;
					val = z27;
				}
				lengths[j] = val + 1;
				++total;
			} else {
				lengths[j] = 255;
			}
		}
	}
	if(c.sparse && total >= c.entries >> 2) {
		c.codewordLengths = lengths;
		c.sparse = false;
	}
	var tmp9;
	if(c.sparse) {
		tmp9 = total;
	} else {
		var sortedCount = 0;
		var _g12 = 0;
		var _g3 = c.entries;
		while(_g12 < _g3) {
			var j1 = _g12++;
			var l = lengths[j1];
			if(l > 10 && l != 255) {
				++sortedCount;
			}
		}
		tmp9 = sortedCount;
	}
	c.sortedEntries = tmp9;
	var values = null;
	if(!c.sparse) {
		var length1 = c.entries;
		var this2 = new Array(length1);
		c.codewords = this2;
	} else {
		if(c.sortedEntries != 0) {
			var length2 = c.sortedEntries;
			var this3 = new Array(length2);
			c.codewordLengths = this3;
			var length3 = c.entries;
			var this4 = new Array(length3);
			c.codewords = this4;
			var length4 = c.entries;
			var this5 = new Array(length4);
			values = this5;
		}
		var size = c.entries + 64 * c.sortedEntries;
	}
	if(!c.computeCodewords(lengths,c.entries,values)) {
		throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,"compute codewords",{ fileName : "Codebook.hx", lineNumber : 120, className : "kha.audio2.ogg.vorbis.data.Codebook", methodName : "read"}));
	}
	if(c.sortedEntries != 0) {
		c.sortedCodewords = [];
		var length5 = c.sortedEntries;
		var this6 = new Array(length5);
		c.sortedValues = this6;
		c.computeSortedHuffman(lengths,values);
	}
	if(c.sparse) {
		values = null;
		c.codewords = null;
		lengths = null;
	}
	c.computeAcceleratedHuffman();
	var tmp10;
	if(decodeState.validBits < 0) {
		tmp10 = 0;
	} else if(decodeState.validBits < 4) {
		if(decodeState.validBits == 0) {
			decodeState.acc = 0;
		}
		while(true) {
			if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
				decodeState.validBits = -1;
				break;
			} else {
				decodeState.bytesInSeg--;
				decodeState.inputPosition += 1;
				decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
				decodeState.validBits += 8;
			}
			if(!(decodeState.validBits < 4)) {
				break;
			}
		}
		if(decodeState.validBits < 0) {
			tmp10 = 0;
		} else {
			var z28 = decodeState.acc & 15;
			decodeState.acc = decodeState.acc >>> 4;
			decodeState.validBits -= 4;
			tmp10 = z28;
		}
	} else {
		var z29 = decodeState.acc & 15;
		decodeState.acc = decodeState.acc >>> 4;
		decodeState.validBits -= 4;
		tmp10 = z29;
	}
	c.lookupType = tmp10;
	if(c.lookupType > 2) {
		throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,"codebook lookup type",{ fileName : "Codebook.hx", lineNumber : 143, className : "kha.audio2.ogg.vorbis.data.Codebook", methodName : "read"}));
	}
	if(c.lookupType > 0) {
		var x2;
		if(decodeState.validBits < 0) {
			x2 = 0;
		} else if(decodeState.validBits < 32) {
			x2 = decodeState.readBits(24) + (decodeState.readBits(8) << 24);
		} else {
			var z30 = decodeState.acc & 0;
			decodeState.acc = decodeState.acc >>> 32;
			decodeState.validBits -= 32;
			x2 = z30;
		}
		var mantissa = _$UInt_UInt_$Impl_$.toFloat(x2 & 2097151);
		var sign = x2 & -2147483648;
		var exp = (x2 & 2145386496) >>> 21;
		var res = sign != 0 ? -mantissa : mantissa;
		c.minimumValue = res * Math.pow(2,exp - 788);
		var x3;
		if(decodeState.validBits < 0) {
			x3 = 0;
		} else if(decodeState.validBits < 32) {
			x3 = decodeState.readBits(24) + (decodeState.readBits(8) << 24);
		} else {
			var z31 = decodeState.acc & 0;
			decodeState.acc = decodeState.acc >>> 32;
			decodeState.validBits -= 32;
			x3 = z31;
		}
		var mantissa1 = _$UInt_UInt_$Impl_$.toFloat(x3 & 2097151);
		var sign1 = x3 & -2147483648;
		var exp1 = (x3 & 2145386496) >>> 21;
		var res1 = sign1 != 0 ? -mantissa1 : mantissa1;
		c.deltaValue = res1 * Math.pow(2,exp1 - 788);
		var tmp11;
		if(decodeState.validBits < 0) {
			tmp11 = 0;
		} else if(decodeState.validBits < 4) {
			if(decodeState.validBits == 0) {
				decodeState.acc = 0;
			}
			while(true) {
				if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
					decodeState.validBits = -1;
					break;
				} else {
					decodeState.bytesInSeg--;
					decodeState.inputPosition += 1;
					decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
					decodeState.validBits += 8;
				}
				if(!(decodeState.validBits < 4)) {
					break;
				}
			}
			if(decodeState.validBits < 0) {
				tmp11 = 0;
			} else {
				var z32 = decodeState.acc & 15;
				decodeState.acc = decodeState.acc >>> 4;
				decodeState.validBits -= 4;
				tmp11 = z32;
			}
		} else {
			var z33 = decodeState.acc & 15;
			decodeState.acc = decodeState.acc >>> 4;
			decodeState.validBits -= 4;
			tmp11 = z33;
		}
		c.valueBits = tmp11 + 1;
		var tmp12;
		if(decodeState.validBits < 0) {
			tmp12 = 0;
		} else if(decodeState.validBits < 1) {
			if(decodeState.validBits == 0) {
				decodeState.acc = 0;
			}
			while(true) {
				if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
					decodeState.validBits = -1;
					break;
				} else {
					decodeState.bytesInSeg--;
					decodeState.inputPosition += 1;
					decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
					decodeState.validBits += 8;
				}
				if(!(decodeState.validBits < 1)) {
					break;
				}
			}
			if(decodeState.validBits < 0) {
				tmp12 = 0;
			} else {
				var z34 = decodeState.acc & 1;
				decodeState.acc = decodeState.acc >>> 1;
				decodeState.validBits -= 1;
				tmp12 = z34;
			}
		} else {
			var z35 = decodeState.acc & 1;
			decodeState.acc = decodeState.acc >>> 1;
			decodeState.validBits -= 1;
			tmp12 = z35;
		}
		c.sequenceP = tmp12 != 0;
		if(c.lookupType == 1) {
			c.lookupValues = kha_audio2_ogg_vorbis_VorbisTools.lookup1Values(c.entries,c.dimensions);
		} else {
			c.lookupValues = c.entries * c.dimensions;
		}
		var length6 = c.lookupValues;
		var this7 = new Array(length6);
		var mults = this7;
		var _g13 = 0;
		var _g4 = c.lookupValues;
		while(_g13 < _g4) {
			var j2 = _g13++;
			var n2 = c.valueBits;
			var q;
			if(decodeState.validBits < 0) {
				q = 0;
			} else if(decodeState.validBits < n2) {
				if(n2 > 24) {
					q = decodeState.readBits(24) + (decodeState.readBits(n2 - 24) << 24);
				} else {
					if(decodeState.validBits == 0) {
						decodeState.acc = 0;
					}
					while(true) {
						if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
							decodeState.validBits = -1;
							break;
						} else {
							decodeState.bytesInSeg--;
							decodeState.inputPosition += 1;
							decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
							decodeState.validBits += 8;
						}
						if(!(decodeState.validBits < n2)) {
							break;
						}
					}
					if(decodeState.validBits < 0) {
						q = 0;
					} else {
						var z36 = decodeState.acc & (1 << n2) - 1;
						decodeState.acc = decodeState.acc >>> n2;
						decodeState.validBits -= n2;
						q = z36;
					}
				}
			} else {
				var z37 = decodeState.acc & (1 << n2) - 1;
				decodeState.acc = decodeState.acc >>> n2;
				decodeState.validBits -= n2;
				q = z37;
			}
			if(q == -1) {
				throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,"fail lookup",{ fileName : "Codebook.hx", lineNumber : 161, className : "kha.audio2.ogg.vorbis.data.Codebook", methodName : "read"}));
			}
			mults[j2] = q;
		}
		var length7 = c.lookupValues;
		var this8 = new Array(length7);
		c.multiplicands = this8;
		var _g14 = 0;
		var _g5 = c.lookupValues;
		while(_g14 < _g5) {
			var j3 = _g14++;
			c.multiplicands[j3] = mults[j3] * c.deltaValue + c.minimumValue;
		}
		if(c.lookupType == 2 && c.sequenceP) {
			var _g15 = 1;
			var _g6 = c.lookupValues;
			while(_g15 < _g6) {
				var j4 = _g15++;
				c.multiplicands[j4] = c.multiplicands[j4 - 1];
			}
			c.sequenceP = false;
		}
	}
	return c;
};
kha_audio2_ogg_vorbis_data_Codebook.prototype = {
	dimensions: null
	,entries: null
	,codewordLengths: null
	,minimumValue: null
	,deltaValue: null
	,valueBits: null
	,lookupType: null
	,sequenceP: null
	,sparse: null
	,lookupValues: null
	,multiplicands: null
	,codewords: null
	,fastHuffman: null
	,sortedCodewords: null
	,sortedValues: null
	,sortedEntries: null
	,addEntry: function(huffCode,symbol,count,len,values) {
		if(!this.sparse) {
			this.codewords[symbol] = huffCode;
		} else {
			this.codewords[count] = huffCode;
			this.codewordLengths[count] = len;
			values[count] = symbol;
		}
	}
	,includeInSort: function(len) {
		if(this.sparse) {
			return true;
		} else if(len == 255) {
			return false;
		} else if(len > 10) {
			return true;
		} else {
			return false;
		}
	}
	,computeCodewords: function(len,n,values) {
		var this1 = new Array(32);
		var available = this1;
		var _g = 0;
		while(_g < 32) {
			var x = _g++;
			available[x] = 0;
		}
		var k = 0;
		while(k < n) {
			if(len[k] < 255) {
				break;
			}
			++k;
		}
		if(k == n) {
			var b = this.sortedEntries == 0;
			return true;
		}
		var m = 0;
		var count = m++;
		if(!this.sparse) {
			this.codewords[k] = 0;
		} else {
			this.codewords[count] = 0;
			this.codewordLengths[count] = len[k];
			values[count] = k;
		}
		var i = 0;
		while(++i <= len[k]) available[i] = 1 << 32 - i;
		i = k;
		while(++i < n) {
			var z = len[i];
			if(z == 255) {
				continue;
			}
			while(z > 0 && available[z] == 0) --z;
			if(z == 0) {
				return false;
			}
			var res = available[z];
			available[z] = 0;
			var n1 = res;
			n1 = (n1 & -1431655766) >>> 1 | (n1 & 1431655765) << 1;
			n1 = (n1 & -858993460) >>> 2 | (n1 & 858993459) << 2;
			n1 = (n1 & -252645136) >>> 4 | (n1 & 252645135) << 4;
			n1 = (n1 & -16711936) >>> 8 | (n1 & 16711935) << 8;
			var huffCode = n1 >>> 16 | n1 << 16;
			var count1 = m++;
			if(!this.sparse) {
				this.codewords[i] = huffCode;
			} else {
				this.codewords[count1] = huffCode;
				this.codewordLengths[count1] = len[i];
				values[count1] = i;
			}
			if(z != len[i]) {
				var y = len[i];
				while(y > z) {
					available[y] = res + (1 << 32 - y);
					--y;
				}
			}
		}
		return true;
	}
	,computeSortedHuffman: function(lengths,values) {
		if(!this.sparse) {
			var k = 0;
			var _g1 = 0;
			var _g = this.entries;
			while(_g1 < _g) {
				var i = _g1++;
				var len = lengths[i];
				if(this.sparse ? true : len == 255 ? false : len > 10) {
					var n = this.codewords[i];
					n = (n & -1431655766) >>> 1 | (n & 1431655765) << 1;
					n = (n & -858993460) >>> 2 | (n & 858993459) << 2;
					n = (n & -252645136) >>> 4 | (n & 252645135) << 4;
					n = (n & -16711936) >>> 8 | (n & 16711935) << 8;
					this.sortedCodewords[k++] = n >>> 16 | n << 16;
				}
			}
			var b = k == this.sortedEntries;
		} else {
			var _g11 = 0;
			var _g2 = this.sortedEntries;
			while(_g11 < _g2) {
				var i1 = _g11++;
				var n1 = this.codewords[i1];
				n1 = (n1 & -1431655766) >>> 1 | (n1 & 1431655765) << 1;
				n1 = (n1 & -858993460) >>> 2 | (n1 & 858993459) << 2;
				n1 = (n1 & -252645136) >>> 4 | (n1 & 252645135) << 4;
				n1 = (n1 & -16711936) >>> 8 | (n1 & 16711935) << 8;
				this.sortedCodewords[i1] = n1 >>> 16 | n1 << 16;
			}
		}
		this.sortedCodewords[this.sortedEntries] = -1;
		this.sortedCodewords.sort(kha_audio2_ogg_vorbis_VorbisTools.uintAsc);
		var len1 = this.sparse ? this.sortedEntries : this.entries;
		var _g12 = 0;
		var _g3 = len1;
		while(_g12 < _g3) {
			var i2 = _g12++;
			var huffLen = this.sparse ? lengths[values[i2]] : lengths[i2];
			if(this.sparse ? true : huffLen == 255 ? false : huffLen > 10) {
				var n2 = this.codewords[i2];
				n2 = (n2 & -1431655766) >>> 1 | (n2 & 1431655765) << 1;
				n2 = (n2 & -858993460) >>> 2 | (n2 & 858993459) << 2;
				n2 = (n2 & -252645136) >>> 4 | (n2 & 252645135) << 4;
				n2 = (n2 & -16711936) >>> 8 | (n2 & 16711935) << 8;
				var code = n2 >>> 16 | n2 << 16;
				var x = 0;
				var n3 = this.sortedEntries;
				while(n3 > 1) {
					var m = x + (n3 >> 1);
					if(_$UInt_UInt_$Impl_$.gte(code,this.sortedCodewords[m])) {
						x = m;
						n3 -= n3 >> 1;
					} else {
						n3 >>= 1;
					}
				}
				if(this.sparse) {
					this.sortedValues[x] = values[i2];
					this.codewordLengths[x] = huffLen;
				} else {
					this.sortedValues[x] = i2;
				}
			}
		}
	}
	,computeAcceleratedHuffman: function() {
		var this1 = new Array(1024);
		this.fastHuffman = this1;
		this.fastHuffman[0] = -1;
		var _g1 = 0;
		var _g = 1024;
		while(_g1 < _g) {
			var i = _g1++;
			this.fastHuffman[i] = -1;
		}
		var len = this.sparse ? this.sortedEntries : this.entries;
		var _g11 = 0;
		var _g2 = len;
		while(_g11 < _g2) {
			var i1 = _g11++;
			if(this.codewordLengths[i1] <= 10) {
				var z;
				if(this.sparse) {
					var n = this.sortedCodewords[i1];
					n = (n & -1431655766) >>> 1 | (n & 1431655765) << 1;
					n = (n & -858993460) >>> 2 | (n & 858993459) << 2;
					n = (n & -252645136) >>> 4 | (n & 252645135) << 4;
					n = (n & -16711936) >>> 8 | (n & 16711935) << 8;
					z = n >>> 16 | n << 16;
				} else {
					z = this.codewords[i1];
				}
				while(z < 1024) {
					this.fastHuffman[z] = i1;
					z += 1 << this.codewordLengths[i1];
				}
			}
		}
	}
	,codebookDecode: function(decodeState,output,offset,len) {
		if(decodeState.validBits < 10) {
			decodeState.prepHuffman();
		}
		var i = this.fastHuffman[decodeState.acc & 1023];
		var val;
		if(i >= 0) {
			var l = this.codewordLengths[i];
			decodeState.acc = decodeState.acc >>> l;
			decodeState.validBits -= l;
			if(decodeState.validBits < 0) {
				decodeState.validBits = 0;
				val = -1;
			} else {
				val = i;
			}
		} else {
			val = decodeState.decodeScalarRaw(this);
		}
		if(this.sparse) {
			val = this.sortedValues[val];
		}
		var z = val;
		var lookupValues = this.lookupValues;
		var sequenceP = this.sequenceP;
		var multiplicands = this.multiplicands;
		var minimumValue = this.minimumValue;
		if(z < 0) {
			return false;
		}
		if(len > this.dimensions) {
			len = this.dimensions;
		}
		if(this.lookupType == 1) {
			var div = 1;
			var last = 0.0;
			var _g1 = 0;
			var _g = len;
			while(_g1 < _g) {
				var i1 = _g1++;
				var off = _$UInt_UInt_$Impl_$.toFloat(z / div | 0) % _$UInt_UInt_$Impl_$.toFloat(lookupValues) | 0;
				var val1 = multiplicands[off] + last;
				var _g2 = offset + i1;
				var _g3 = output;
				_g3[_g2] = _g3[_g2] + val1;
				if(sequenceP) {
					last = val1 + minimumValue;
				}
				div = div * lookupValues;
			}
			return true;
		}
		z *= this.dimensions;
		if(sequenceP) {
			var last1 = 0.0;
			var _g11 = 0;
			var _g4 = len;
			while(_g11 < _g4) {
				var i2 = _g11++;
				var val2 = multiplicands[z + i2] + last1;
				var _g21 = offset + i2;
				var _g31 = output;
				_g31[_g21] = _g31[_g21] + val2;
				last1 = val2 + minimumValue;
			}
		} else {
			var last2 = 0.0;
			var _g12 = 0;
			var _g5 = len;
			while(_g12 < _g5) {
				var i3 = _g12++;
				var _g22 = offset + i3;
				var _g32 = output;
				_g32[_g22] = _g32[_g22] + (multiplicands[z + i3] + last2);
			}
		}
		return true;
	}
	,codebookDecodeStep: function(decodeState,output,offset,len,step) {
		if(decodeState.validBits < 10) {
			decodeState.prepHuffman();
		}
		var i = this.fastHuffman[decodeState.acc & 1023];
		var val;
		if(i >= 0) {
			var l = this.codewordLengths[i];
			decodeState.acc = decodeState.acc >>> l;
			decodeState.validBits -= l;
			if(decodeState.validBits < 0) {
				decodeState.validBits = 0;
				val = -1;
			} else {
				val = i;
			}
		} else {
			val = decodeState.decodeScalarRaw(this);
		}
		if(this.sparse) {
			val = this.sortedValues[val];
		}
		var z = val;
		var last = 0.0;
		if(z < 0) {
			return false;
		}
		if(len > this.dimensions) {
			len = this.dimensions;
		}
		var lookupValues = this.lookupValues;
		var sequenceP = this.sequenceP;
		var multiplicands = this.multiplicands;
		if(this.lookupType == 1) {
			var div = 1;
			var _g1 = 0;
			var _g = len;
			while(_g1 < _g) {
				var i1 = _g1++;
				var off = _$UInt_UInt_$Impl_$.toFloat(z / div | 0) % _$UInt_UInt_$Impl_$.toFloat(lookupValues) | 0;
				var val1 = multiplicands[off] + last;
				var _g2 = offset + i1 * step;
				var _g3 = output;
				_g3[_g2] = _g3[_g2] + val1;
				if(sequenceP) {
					last = val1;
				}
				div = div * lookupValues;
			}
			return true;
		}
		z *= this.dimensions;
		var _g11 = 0;
		var _g4 = len;
		while(_g11 < _g4) {
			var i2 = _g11++;
			var val2 = multiplicands[z + i2] + last;
			var _g21 = offset + i2 * step;
			var _g31 = output;
			_g31[_g21] = _g31[_g21] + val2;
			if(sequenceP) {
				last = val2;
			}
		}
		return true;
	}
	,decodeStart: function(decodeState) {
		if(decodeState.validBits < 10) {
			decodeState.prepHuffman();
		}
		var i = this.fastHuffman[decodeState.acc & 1023];
		var val;
		if(i >= 0) {
			var l = this.codewordLengths[i];
			decodeState.acc = decodeState.acc >>> l;
			decodeState.validBits -= l;
			if(decodeState.validBits < 0) {
				decodeState.validBits = 0;
				val = -1;
			} else {
				val = i;
			}
		} else {
			val = decodeState.decodeScalarRaw(this);
		}
		if(this.sparse) {
			val = this.sortedValues[val];
		}
		return val;
	}
	,decodeDeinterleaveRepeat: function(decodeState,residueBuffers,ch,cInter,pInter,len,totalDecode) {
		var effective = this.dimensions;
		if(this.lookupType == 0) {
			throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_STREAM,null,{ fileName : "Codebook.hx", lineNumber : 488, className : "kha.audio2.ogg.vorbis.data.Codebook", methodName : "decodeDeinterleaveRepeat"}));
		}
		var multiplicands = this.multiplicands;
		var sequenceP = this.sequenceP;
		var lookupValues = this.lookupValues;
		while(totalDecode > 0) {
			var last = 0.0;
			if(decodeState.validBits < 10) {
				decodeState.prepHuffman();
			}
			var i = this.fastHuffman[decodeState.acc & 1023];
			var val;
			if(i >= 0) {
				var l = this.codewordLengths[i];
				decodeState.acc = decodeState.acc >>> l;
				decodeState.validBits -= l;
				if(decodeState.validBits < 0) {
					decodeState.validBits = 0;
					val = -1;
				} else {
					val = i;
				}
			} else {
				val = decodeState.decodeScalarRaw(this);
			}
			if(this.sparse) {
				val = this.sortedValues[val];
			}
			var z = val;
			if(z < 0) {
				if(decodeState.bytesInSeg == 0 && decodeState.lastSeg) {
					return null;
				}
				throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_STREAM,null,{ fileName : "Codebook.hx", lineNumber : 503, className : "kha.audio2.ogg.vorbis.data.Codebook", methodName : "decodeDeinterleaveRepeat"}));
			}
			if(cInter + pInter * ch + effective > len * ch) {
				effective = len * ch - (pInter * ch - cInter);
			}
			if(this.lookupType == 1) {
				var div = 1;
				if(sequenceP) {
					var _g1 = 0;
					var _g = effective;
					while(_g1 < _g) {
						var i1 = _g1++;
						var off = _$UInt_UInt_$Impl_$.toFloat(z / div | 0) % _$UInt_UInt_$Impl_$.toFloat(lookupValues) | 0;
						var val1 = multiplicands[off] + last;
						var _g2 = pInter;
						var _g3 = residueBuffers[cInter];
						_g3[_g2] = _g3[_g2] + val1;
						if(++cInter == ch) {
							cInter = 0;
							++pInter;
						}
						last = val1;
						div = div * lookupValues;
					}
				} else {
					var _g11 = 0;
					var _g4 = effective;
					while(_g11 < _g4) {
						var i2 = _g11++;
						var off1 = _$UInt_UInt_$Impl_$.toFloat(z / div | 0) % _$UInt_UInt_$Impl_$.toFloat(lookupValues) | 0;
						var val2 = multiplicands[off1] + last;
						var _g21 = pInter;
						var _g31 = residueBuffers[cInter];
						_g31[_g21] = _g31[_g21] + val2;
						if(++cInter == ch) {
							cInter = 0;
							++pInter;
						}
						div = div * lookupValues;
					}
				}
			} else {
				z *= this.dimensions;
				if(sequenceP) {
					var _g12 = 0;
					var _g5 = effective;
					while(_g12 < _g5) {
						var i3 = _g12++;
						var val3 = multiplicands[z + i3] + last;
						var _g22 = pInter;
						var _g32 = residueBuffers[cInter];
						_g32[_g22] = _g32[_g22] + val3;
						if(++cInter == ch) {
							cInter = 0;
							++pInter;
						}
						last = val3;
					}
				} else {
					var _g13 = 0;
					var _g6 = effective;
					while(_g13 < _g6) {
						var i4 = _g13++;
						var val4 = multiplicands[z + i4] + last;
						var _g23 = pInter;
						var _g33 = residueBuffers[cInter];
						_g33[_g23] = _g33[_g23] + val4;
						if(++cInter == ch) {
							cInter = 0;
							++pInter;
						}
					}
				}
			}
			totalDecode -= effective;
		}
		return { cInter : cInter, pInter : pInter};
	}
	,residueDecode: function(decodeState,target,offset,n,rtype) {
		if(rtype == 0) {
			var step = n / this.dimensions | 0;
			var _g1 = 0;
			var _g = step;
			while(_g1 < _g) {
				var k = _g1++;
				if(!this.codebookDecodeStep(decodeState,target,offset + k,n - offset - k,step)) {
					return false;
				}
			}
		} else {
			var k1 = 0;
			while(k1 < n) {
				if(!this.codebookDecode(decodeState,target,offset,n - k1)) {
					return false;
				}
				k1 += this.dimensions;
				offset += this.dimensions;
			}
		}
		return true;
	}
	,__class__: kha_audio2_ogg_vorbis_data_Codebook
};
var kha_audio2_ogg_vorbis_data_Comment = function() {
	this.data = new haxe_ds_StringMap();
};
$hxClasses["kha.audio2.ogg.vorbis.data.Comment"] = kha_audio2_ogg_vorbis_data_Comment;
kha_audio2_ogg_vorbis_data_Comment.__name__ = true;
kha_audio2_ogg_vorbis_data_Comment.prototype = {
	data: null
	,get_title: function() {
		return this.getString("title");
	}
	,get_loopStart: function() {
		return Std.parseInt(this.getString("loopstart"));
	}
	,get_loopLength: function() {
		return Std.parseInt(this.getString("looplength"));
	}
	,get_version: function() {
		return this.getString("version");
	}
	,get_album: function() {
		return this.getString("album");
	}
	,get_organization: function() {
		return this.getString("organization");
	}
	,get_tracknumber: function() {
		return this.getString("tracknumber");
	}
	,get_performer: function() {
		return this.getString("performer");
	}
	,get_copyright: function() {
		return this.getString("copyright");
	}
	,get_license: function() {
		return this.getString("license");
	}
	,get_artist: function() {
		return this.getString("artist");
	}
	,get_description: function() {
		return this.getString("description");
	}
	,get_genre: function() {
		return this.getString("genre");
	}
	,get_date: function() {
		return this.getString("date");
	}
	,get_location: function() {
		return this.getString("location");
	}
	,get_contact: function() {
		return this.getString("contact");
	}
	,get_isrc: function() {
		return this.getString("isrc");
	}
	,get_artists: function() {
		return this.getArray("artist");
	}
	,add: function(key,value) {
		key = key.toLowerCase();
		var _this = this.data;
		if(__map_reserved[key] != null ? _this.existsReserved(key) : _this.h.hasOwnProperty(key)) {
			var _this1 = this.data;
			(__map_reserved[key] != null ? _this1.getReserved(key) : _this1.h[key]).push(value);
		} else {
			var v = [value];
			var _this2 = this.data;
			if(__map_reserved[key] != null) {
				_this2.setReserved(key,v);
			} else {
				_this2.h[key] = v;
			}
		}
	}
	,getString: function(key) {
		key = key.toLowerCase();
		var _this = this.data;
		if(__map_reserved[key] != null ? _this.existsReserved(key) : _this.h.hasOwnProperty(key)) {
			var _this1 = this.data;
			return (__map_reserved[key] != null ? _this1.getReserved(key) : _this1.h[key])[0];
		} else {
			return null;
		}
	}
	,getArray: function(key) {
		key = key.toLowerCase();
		var _this = this.data;
		if(__map_reserved[key] != null ? _this.existsReserved(key) : _this.h.hasOwnProperty(key)) {
			var _this1 = this.data;
			if(__map_reserved[key] != null) {
				return _this1.getReserved(key);
			} else {
				return _this1.h[key];
			}
		} else {
			return null;
		}
	}
	,__class__: kha_audio2_ogg_vorbis_data_Comment
};
var kha_audio2_ogg_vorbis_data_Floor = function() {
};
$hxClasses["kha.audio2.ogg.vorbis.data.Floor"] = kha_audio2_ogg_vorbis_data_Floor;
kha_audio2_ogg_vorbis_data_Floor.__name__ = true;
kha_audio2_ogg_vorbis_data_Floor.read = function(decodeState,codebooks) {
	var floor = new kha_audio2_ogg_vorbis_data_Floor();
	var tmp;
	if(decodeState.validBits < 0) {
		tmp = 0;
	} else if(decodeState.validBits < 16) {
		if(decodeState.validBits == 0) {
			decodeState.acc = 0;
		}
		while(true) {
			if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
				decodeState.validBits = -1;
				break;
			} else {
				decodeState.bytesInSeg--;
				decodeState.inputPosition += 1;
				decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
				decodeState.validBits += 8;
			}
			if(!(decodeState.validBits < 16)) {
				break;
			}
		}
		if(decodeState.validBits < 0) {
			tmp = 0;
		} else {
			var z = decodeState.acc & 65535;
			decodeState.acc = decodeState.acc >>> 16;
			decodeState.validBits -= 16;
			tmp = z;
		}
	} else {
		var z1 = decodeState.acc & 65535;
		decodeState.acc = decodeState.acc >>> 16;
		decodeState.validBits -= 16;
		tmp = z1;
	}
	floor.type = tmp;
	if(floor.type > 1) {
		throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "Floor.hx", lineNumber : 28, className : "kha.audio2.ogg.vorbis.data.Floor", methodName : "read"}));
	}
	if(floor.type == 0) {
		var g = floor.floor0 = new kha_audio2_ogg_vorbis_data_Floor0();
		var tmp1;
		if(decodeState.validBits < 0) {
			tmp1 = 0;
		} else if(decodeState.validBits < 8) {
			if(decodeState.validBits == 0) {
				decodeState.acc = 0;
			}
			while(true) {
				if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
					decodeState.validBits = -1;
					break;
				} else {
					decodeState.bytesInSeg--;
					decodeState.inputPosition += 1;
					decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
					decodeState.validBits += 8;
				}
				if(!(decodeState.validBits < 8)) {
					break;
				}
			}
			if(decodeState.validBits < 0) {
				tmp1 = 0;
			} else {
				var z2 = decodeState.acc & 255;
				decodeState.acc = decodeState.acc >>> 8;
				decodeState.validBits -= 8;
				tmp1 = z2;
			}
		} else {
			var z3 = decodeState.acc & 255;
			decodeState.acc = decodeState.acc >>> 8;
			decodeState.validBits -= 8;
			tmp1 = z3;
		}
		g.order = tmp1;
		var tmp2;
		if(decodeState.validBits < 0) {
			tmp2 = 0;
		} else if(decodeState.validBits < 16) {
			if(decodeState.validBits == 0) {
				decodeState.acc = 0;
			}
			while(true) {
				if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
					decodeState.validBits = -1;
					break;
				} else {
					decodeState.bytesInSeg--;
					decodeState.inputPosition += 1;
					decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
					decodeState.validBits += 8;
				}
				if(!(decodeState.validBits < 16)) {
					break;
				}
			}
			if(decodeState.validBits < 0) {
				tmp2 = 0;
			} else {
				var z4 = decodeState.acc & 65535;
				decodeState.acc = decodeState.acc >>> 16;
				decodeState.validBits -= 16;
				tmp2 = z4;
			}
		} else {
			var z5 = decodeState.acc & 65535;
			decodeState.acc = decodeState.acc >>> 16;
			decodeState.validBits -= 16;
			tmp2 = z5;
		}
		g.rate = tmp2;
		var tmp3;
		if(decodeState.validBits < 0) {
			tmp3 = 0;
		} else if(decodeState.validBits < 16) {
			if(decodeState.validBits == 0) {
				decodeState.acc = 0;
			}
			while(true) {
				if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
					decodeState.validBits = -1;
					break;
				} else {
					decodeState.bytesInSeg--;
					decodeState.inputPosition += 1;
					decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
					decodeState.validBits += 8;
				}
				if(!(decodeState.validBits < 16)) {
					break;
				}
			}
			if(decodeState.validBits < 0) {
				tmp3 = 0;
			} else {
				var z6 = decodeState.acc & 65535;
				decodeState.acc = decodeState.acc >>> 16;
				decodeState.validBits -= 16;
				tmp3 = z6;
			}
		} else {
			var z7 = decodeState.acc & 65535;
			decodeState.acc = decodeState.acc >>> 16;
			decodeState.validBits -= 16;
			tmp3 = z7;
		}
		g.barkMapSize = tmp3;
		var tmp4;
		if(decodeState.validBits < 0) {
			tmp4 = 0;
		} else if(decodeState.validBits < 6) {
			if(decodeState.validBits == 0) {
				decodeState.acc = 0;
			}
			while(true) {
				if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
					decodeState.validBits = -1;
					break;
				} else {
					decodeState.bytesInSeg--;
					decodeState.inputPosition += 1;
					decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
					decodeState.validBits += 8;
				}
				if(!(decodeState.validBits < 6)) {
					break;
				}
			}
			if(decodeState.validBits < 0) {
				tmp4 = 0;
			} else {
				var z8 = decodeState.acc & 63;
				decodeState.acc = decodeState.acc >>> 6;
				decodeState.validBits -= 6;
				tmp4 = z8;
			}
		} else {
			var z9 = decodeState.acc & 63;
			decodeState.acc = decodeState.acc >>> 6;
			decodeState.validBits -= 6;
			tmp4 = z9;
		}
		g.amplitudeBits = tmp4;
		var tmp5;
		if(decodeState.validBits < 0) {
			tmp5 = 0;
		} else if(decodeState.validBits < 8) {
			if(decodeState.validBits == 0) {
				decodeState.acc = 0;
			}
			while(true) {
				if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
					decodeState.validBits = -1;
					break;
				} else {
					decodeState.bytesInSeg--;
					decodeState.inputPosition += 1;
					decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
					decodeState.validBits += 8;
				}
				if(!(decodeState.validBits < 8)) {
					break;
				}
			}
			if(decodeState.validBits < 0) {
				tmp5 = 0;
			} else {
				var z10 = decodeState.acc & 255;
				decodeState.acc = decodeState.acc >>> 8;
				decodeState.validBits -= 8;
				tmp5 = z10;
			}
		} else {
			var z11 = decodeState.acc & 255;
			decodeState.acc = decodeState.acc >>> 8;
			decodeState.validBits -= 8;
			tmp5 = z11;
		}
		g.amplitudeOffset = tmp5;
		var tmp6;
		if(decodeState.validBits < 0) {
			tmp6 = 0;
		} else if(decodeState.validBits < 4) {
			if(decodeState.validBits == 0) {
				decodeState.acc = 0;
			}
			while(true) {
				if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
					decodeState.validBits = -1;
					break;
				} else {
					decodeState.bytesInSeg--;
					decodeState.inputPosition += 1;
					decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
					decodeState.validBits += 8;
				}
				if(!(decodeState.validBits < 4)) {
					break;
				}
			}
			if(decodeState.validBits < 0) {
				tmp6 = 0;
			} else {
				var z12 = decodeState.acc & 15;
				decodeState.acc = decodeState.acc >>> 4;
				decodeState.validBits -= 4;
				tmp6 = z12;
			}
		} else {
			var z13 = decodeState.acc & 15;
			decodeState.acc = decodeState.acc >>> 4;
			decodeState.validBits -= 4;
			tmp6 = z13;
		}
		g.numberOfBooks = tmp6 + 1;
		var _g1 = 0;
		var _g = g.numberOfBooks;
		while(_g1 < _g) {
			var j = _g1++;
			var this1 = g.bookList;
			var val;
			if(decodeState.validBits < 0) {
				val = 0;
			} else if(decodeState.validBits < 8) {
				if(decodeState.validBits == 0) {
					decodeState.acc = 0;
				}
				while(true) {
					if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
						decodeState.validBits = -1;
						break;
					} else {
						decodeState.bytesInSeg--;
						decodeState.inputPosition += 1;
						decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
						decodeState.validBits += 8;
					}
					if(!(decodeState.validBits < 8)) {
						break;
					}
				}
				if(decodeState.validBits < 0) {
					val = 0;
				} else {
					var z14 = decodeState.acc & 255;
					decodeState.acc = decodeState.acc >>> 8;
					decodeState.validBits -= 8;
					val = z14;
				}
			} else {
				var z15 = decodeState.acc & 255;
				decodeState.acc = decodeState.acc >>> 8;
				decodeState.validBits -= 8;
				val = z15;
			}
			this1[j] = val;
		}
		throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.FEATURE_NOT_SUPPORTED,null,{ fileName : "Floor.hx", lineNumber : 41, className : "kha.audio2.ogg.vorbis.data.Floor", methodName : "read"}));
	} else {
		var p = [];
		var g1 = floor.floor1 = new kha_audio2_ogg_vorbis_data_Floor1();
		var maxClass = -1;
		var tmp7;
		if(decodeState.validBits < 0) {
			tmp7 = 0;
		} else if(decodeState.validBits < 5) {
			if(decodeState.validBits == 0) {
				decodeState.acc = 0;
			}
			while(true) {
				if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
					decodeState.validBits = -1;
					break;
				} else {
					decodeState.bytesInSeg--;
					decodeState.inputPosition += 1;
					decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
					decodeState.validBits += 8;
				}
				if(!(decodeState.validBits < 5)) {
					break;
				}
			}
			if(decodeState.validBits < 0) {
				tmp7 = 0;
			} else {
				var z16 = decodeState.acc & 31;
				decodeState.acc = decodeState.acc >>> 5;
				decodeState.validBits -= 5;
				tmp7 = z16;
			}
		} else {
			var z17 = decodeState.acc & 31;
			decodeState.acc = decodeState.acc >>> 5;
			decodeState.validBits -= 5;
			tmp7 = z17;
		}
		g1.partitions = tmp7;
		var length = g1.partitions;
		var this2 = new Array(length);
		g1.partitionClassList = this2;
		var _g11 = 0;
		var _g2 = g1.partitions;
		while(_g11 < _g2) {
			var j1 = _g11++;
			var this3 = g1.partitionClassList;
			var val1;
			if(decodeState.validBits < 0) {
				val1 = 0;
			} else if(decodeState.validBits < 4) {
				if(decodeState.validBits == 0) {
					decodeState.acc = 0;
				}
				while(true) {
					if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
						decodeState.validBits = -1;
						break;
					} else {
						decodeState.bytesInSeg--;
						decodeState.inputPosition += 1;
						decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
						decodeState.validBits += 8;
					}
					if(!(decodeState.validBits < 4)) {
						break;
					}
				}
				if(decodeState.validBits < 0) {
					val1 = 0;
				} else {
					var z18 = decodeState.acc & 15;
					decodeState.acc = decodeState.acc >>> 4;
					decodeState.validBits -= 4;
					val1 = z18;
				}
			} else {
				var z19 = decodeState.acc & 15;
				decodeState.acc = decodeState.acc >>> 4;
				decodeState.validBits -= 4;
				val1 = z19;
			}
			this3[j1] = val1;
			if(g1.partitionClassList[j1] > maxClass) {
				maxClass = g1.partitionClassList[j1];
			}
		}
		var this4 = new Array(maxClass + 1);
		g1.classDimensions = this4;
		var this5 = new Array(maxClass + 1);
		g1.classMasterbooks = this5;
		var this6 = new Array(maxClass + 1);
		g1.classSubclasses = this6;
		var this7 = new Array(maxClass + 1);
		g1.subclassBooks = this7;
		var _g12 = 0;
		var _g3 = maxClass + 1;
		while(_g12 < _g3) {
			var j2 = _g12++;
			var this8 = g1.classDimensions;
			var val2;
			if(decodeState.validBits < 0) {
				val2 = 0;
			} else if(decodeState.validBits < 3) {
				if(decodeState.validBits == 0) {
					decodeState.acc = 0;
				}
				while(true) {
					if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
						decodeState.validBits = -1;
						break;
					} else {
						decodeState.bytesInSeg--;
						decodeState.inputPosition += 1;
						decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
						decodeState.validBits += 8;
					}
					if(!(decodeState.validBits < 3)) {
						break;
					}
				}
				if(decodeState.validBits < 0) {
					val2 = 0;
				} else {
					var z20 = decodeState.acc & 7;
					decodeState.acc = decodeState.acc >>> 3;
					decodeState.validBits -= 3;
					val2 = z20;
				}
			} else {
				var z21 = decodeState.acc & 7;
				decodeState.acc = decodeState.acc >>> 3;
				decodeState.validBits -= 3;
				val2 = z21;
			}
			this8[j2] = val2 + 1;
			var this9 = g1.classSubclasses;
			var val3;
			if(decodeState.validBits < 0) {
				val3 = 0;
			} else if(decodeState.validBits < 2) {
				if(decodeState.validBits == 0) {
					decodeState.acc = 0;
				}
				while(true) {
					if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
						decodeState.validBits = -1;
						break;
					} else {
						decodeState.bytesInSeg--;
						decodeState.inputPosition += 1;
						decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
						decodeState.validBits += 8;
					}
					if(!(decodeState.validBits < 2)) {
						break;
					}
				}
				if(decodeState.validBits < 0) {
					val3 = 0;
				} else {
					var z22 = decodeState.acc & 3;
					decodeState.acc = decodeState.acc >>> 2;
					decodeState.validBits -= 2;
					val3 = z22;
				}
			} else {
				var z23 = decodeState.acc & 3;
				decodeState.acc = decodeState.acc >>> 2;
				decodeState.validBits -= 2;
				val3 = z23;
			}
			this9[j2] = val3;
			if(g1.classSubclasses[j2] != 0) {
				var this10 = g1.classMasterbooks;
				var val4;
				if(decodeState.validBits < 0) {
					val4 = 0;
				} else if(decodeState.validBits < 8) {
					if(decodeState.validBits == 0) {
						decodeState.acc = 0;
					}
					while(true) {
						if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
							decodeState.validBits = -1;
							break;
						} else {
							decodeState.bytesInSeg--;
							decodeState.inputPosition += 1;
							decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
							decodeState.validBits += 8;
						}
						if(!(decodeState.validBits < 8)) {
							break;
						}
					}
					if(decodeState.validBits < 0) {
						val4 = 0;
					} else {
						var z24 = decodeState.acc & 255;
						decodeState.acc = decodeState.acc >>> 8;
						decodeState.validBits -= 8;
						val4 = z24;
					}
				} else {
					var z25 = decodeState.acc & 255;
					decodeState.acc = decodeState.acc >>> 8;
					decodeState.validBits -= 8;
					val4 = z25;
				}
				this10[j2] = val4;
				if(g1.classMasterbooks[j2] >= codebooks.length) {
					throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "Floor.hx", lineNumber : 64, className : "kha.audio2.ogg.vorbis.data.Floor", methodName : "read"}));
				}
			}
			var kl = 1 << g1.classSubclasses[j2];
			var this11 = g1.subclassBooks;
			var this12 = new Array(kl);
			this11[j2] = this12;
			var _g31 = 0;
			var _g21 = kl;
			while(_g31 < _g21) {
				var k = _g31++;
				var this13 = g1.subclassBooks[j2];
				var val5;
				if(decodeState.validBits < 0) {
					val5 = 0;
				} else if(decodeState.validBits < 8) {
					if(decodeState.validBits == 0) {
						decodeState.acc = 0;
					}
					while(true) {
						if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
							decodeState.validBits = -1;
							break;
						} else {
							decodeState.bytesInSeg--;
							decodeState.inputPosition += 1;
							decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
							decodeState.validBits += 8;
						}
						if(!(decodeState.validBits < 8)) {
							break;
						}
					}
					if(decodeState.validBits < 0) {
						val5 = 0;
					} else {
						var z26 = decodeState.acc & 255;
						decodeState.acc = decodeState.acc >>> 8;
						decodeState.validBits -= 8;
						val5 = z26;
					}
				} else {
					var z27 = decodeState.acc & 255;
					decodeState.acc = decodeState.acc >>> 8;
					decodeState.validBits -= 8;
					val5 = z27;
				}
				this13[k] = val5 - 1;
				if(g1.subclassBooks[j2][k] >= codebooks.length) {
					throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "Floor.hx", lineNumber : 73, className : "kha.audio2.ogg.vorbis.data.Floor", methodName : "read"}));
				}
			}
		}
		var tmp8;
		if(decodeState.validBits < 0) {
			tmp8 = 0;
		} else if(decodeState.validBits < 2) {
			if(decodeState.validBits == 0) {
				decodeState.acc = 0;
			}
			while(true) {
				if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
					decodeState.validBits = -1;
					break;
				} else {
					decodeState.bytesInSeg--;
					decodeState.inputPosition += 1;
					decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
					decodeState.validBits += 8;
				}
				if(!(decodeState.validBits < 2)) {
					break;
				}
			}
			if(decodeState.validBits < 0) {
				tmp8 = 0;
			} else {
				var z28 = decodeState.acc & 3;
				decodeState.acc = decodeState.acc >>> 2;
				decodeState.validBits -= 2;
				tmp8 = z28;
			}
		} else {
			var z29 = decodeState.acc & 3;
			decodeState.acc = decodeState.acc >>> 2;
			decodeState.validBits -= 2;
			tmp8 = z29;
		}
		g1.floor1Multiplier = tmp8 + 1;
		var tmp9;
		if(decodeState.validBits < 0) {
			tmp9 = 0;
		} else if(decodeState.validBits < 4) {
			if(decodeState.validBits == 0) {
				decodeState.acc = 0;
			}
			while(true) {
				if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
					decodeState.validBits = -1;
					break;
				} else {
					decodeState.bytesInSeg--;
					decodeState.inputPosition += 1;
					decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
					decodeState.validBits += 8;
				}
				if(!(decodeState.validBits < 4)) {
					break;
				}
			}
			if(decodeState.validBits < 0) {
				tmp9 = 0;
			} else {
				var z30 = decodeState.acc & 15;
				decodeState.acc = decodeState.acc >>> 4;
				decodeState.validBits -= 4;
				tmp9 = z30;
			}
		} else {
			var z31 = decodeState.acc & 15;
			decodeState.acc = decodeState.acc >>> 4;
			decodeState.validBits -= 4;
			tmp9 = z31;
		}
		g1.rangebits = tmp9;
		var this14 = new Array(250);
		g1.xlist = this14;
		g1.xlist[0] = 0;
		g1.xlist[1] = 1 << g1.rangebits;
		g1.values = 2;
		var _g13 = 0;
		var _g4 = g1.partitions;
		while(_g13 < _g4) {
			var j3 = _g13++;
			var c = g1.partitionClassList[j3];
			var _g32 = 0;
			var _g22 = g1.classDimensions[c];
			while(_g32 < _g22) {
				var k1 = _g32++;
				var this15 = g1.xlist;
				var index = g1.values;
				var n = g1.rangebits;
				var val6;
				if(decodeState.validBits < 0) {
					val6 = 0;
				} else if(decodeState.validBits < n) {
					if(n > 24) {
						val6 = decodeState.readBits(24) + (decodeState.readBits(n - 24) << 24);
					} else {
						if(decodeState.validBits == 0) {
							decodeState.acc = 0;
						}
						while(true) {
							if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
								decodeState.validBits = -1;
								break;
							} else {
								decodeState.bytesInSeg--;
								decodeState.inputPosition += 1;
								decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
								decodeState.validBits += 8;
							}
							if(!(decodeState.validBits < n)) {
								break;
							}
						}
						if(decodeState.validBits < 0) {
							val6 = 0;
						} else {
							var z32 = decodeState.acc & (1 << n) - 1;
							decodeState.acc = decodeState.acc >>> n;
							decodeState.validBits -= n;
							val6 = z32;
						}
					}
				} else {
					var z33 = decodeState.acc & (1 << n) - 1;
					decodeState.acc = decodeState.acc >>> n;
					decodeState.validBits -= n;
					val6 = z33;
				}
				this15[index] = val6;
				g1.values++;
			}
		}
		var _g14 = 0;
		var _g5 = g1.values;
		while(_g14 < _g5) {
			var j4 = _g14++;
			p.push(new kha_audio2_ogg_vorbis_data_IntPoint());
			p[j4].x = g1.xlist[j4];
			p[j4].y = j4;
		}
		p.sort(kha_audio2_ogg_vorbis_VorbisTools.pointCompare);
		var length1 = g1.values;
		var this16 = new Array(length1);
		g1.sortedOrder = this16;
		var _g15 = 0;
		var _g6 = g1.values;
		while(_g15 < _g6) {
			var j5 = _g15++;
			g1.sortedOrder[j5] = p[j5].y;
		}
		var length2 = g1.values;
		var this17 = new Array(length2);
		g1.neighbors = this17;
		var _g16 = 2;
		var _g7 = g1.values;
		while(_g16 < _g7) {
			var j6 = _g16++;
			var ne_low;
			var ne_high;
			var x = g1.xlist;
			var low = -1;
			var high = 65536;
			var plow = 0;
			var phigh = 0;
			var _g17 = 0;
			var _g8 = j6;
			while(_g17 < _g8) {
				var i = _g17++;
				if(x[i] > low && x[i] < x[j6]) {
					plow = i;
					low = x[i];
				}
				if(x[i] < high && x[i] > x[j6]) {
					phigh = i;
					high = x[i];
				}
			}
			ne_low = plow;
			ne_high = phigh;
			var this18 = g1.neighbors;
			var length3 = g1.values;
			var this19 = new Array(length3);
			this18[j6] = this19;
			g1.neighbors[j6][0] = ne_low;
			g1.neighbors[j6][1] = ne_high;
		}
	}
	return floor;
};
kha_audio2_ogg_vorbis_data_Floor.prototype = {
	floor0: null
	,floor1: null
	,type: null
	,__class__: kha_audio2_ogg_vorbis_data_Floor
};
var kha_audio2_ogg_vorbis_data_Floor0 = function() {
};
$hxClasses["kha.audio2.ogg.vorbis.data.Floor0"] = kha_audio2_ogg_vorbis_data_Floor0;
kha_audio2_ogg_vorbis_data_Floor0.__name__ = true;
kha_audio2_ogg_vorbis_data_Floor0.prototype = {
	order: null
	,rate: null
	,barkMapSize: null
	,amplitudeBits: null
	,amplitudeOffset: null
	,numberOfBooks: null
	,bookList: null
	,__class__: kha_audio2_ogg_vorbis_data_Floor0
};
var kha_audio2_ogg_vorbis_data_Floor1 = function() {
};
$hxClasses["kha.audio2.ogg.vorbis.data.Floor1"] = kha_audio2_ogg_vorbis_data_Floor1;
kha_audio2_ogg_vorbis_data_Floor1.__name__ = true;
kha_audio2_ogg_vorbis_data_Floor1.prototype = {
	partitions: null
	,partitionClassList: null
	,classDimensions: null
	,classSubclasses: null
	,classMasterbooks: null
	,subclassBooks: null
	,xlist: null
	,sortedOrder: null
	,neighbors: null
	,floor1Multiplier: null
	,rangebits: null
	,values: null
	,__class__: kha_audio2_ogg_vorbis_data_Floor1
};
var kha_audio2_ogg_vorbis_data_Header = function() {
};
$hxClasses["kha.audio2.ogg.vorbis.data.Header"] = kha_audio2_ogg_vorbis_data_Header;
kha_audio2_ogg_vorbis_data_Header.__name__ = true;
kha_audio2_ogg_vorbis_data_Header.read = function(decodeState) {
	var page = decodeState.page;
	page.start(decodeState);
	if((page.flag & 2) == 0) {
		throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_FIRST_PAGE,"not firstPage",{ fileName : "Header.hx", lineNumber : 46, className : "kha.audio2.ogg.vorbis.data.Header", methodName : "read"}));
	}
	if((page.flag & 4) != 0) {
		throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_FIRST_PAGE,"lastPage",{ fileName : "Header.hx", lineNumber : 49, className : "kha.audio2.ogg.vorbis.data.Header", methodName : "read"}));
	}
	if((page.flag & 1) != 0) {
		throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_FIRST_PAGE,"continuedPacket",{ fileName : "Header.hx", lineNumber : 52, className : "kha.audio2.ogg.vorbis.data.Header", methodName : "read"}));
	}
	decodeState.firstPageValidate();
	decodeState.inputPosition += 1;
	if(decodeState.input.readByte() != 1) {
		throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_FIRST_PAGE,"decodeState head",{ fileName : "Header.hx", lineNumber : 57, className : "kha.audio2.ogg.vorbis.data.Header", methodName : "read"}));
	}
	var header = new haxe_io_Bytes(new ArrayBuffer(6));
	var _g = 0;
	while(_g < 6) {
		var i = _g++;
		var x;
		if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
			x = -1;
		} else {
			decodeState.bytesInSeg--;
			decodeState.inputPosition += 1;
			x = decodeState.input.readByte();
		}
		decodeState.validBits = 0;
		header.b[i] = x & 255;
	}
	if(header.toString() != "vorbis") {
		throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,"vorbis header",{ fileName : "VorbisDecodeState.hx", lineNumber : 300, className : "kha.audio2.ogg.vorbis.VorbisDecodeState", methodName : "vorbisValidate"}));
	}
	decodeState.inputPosition += 4;
	var version = decodeState.input.readInt32();
	if(version != 0) {
		throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_FIRST_PAGE,"vorbis version : " + version,{ fileName : "Header.hx", lineNumber : 66, className : "kha.audio2.ogg.vorbis.data.Header", methodName : "read"}));
	}
	var header1 = new kha_audio2_ogg_vorbis_data_Header();
	decodeState.inputPosition += 1;
	header1.channel = decodeState.input.readByte();
	if(header1.channel == 0) {
		throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_FIRST_PAGE,"no channel",{ fileName : "Header.hx", lineNumber : 73, className : "kha.audio2.ogg.vorbis.data.Header", methodName : "read"}));
	} else if(header1.channel > 16) {
		throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.TOO_MANY_CHANNELS,"too many channels",{ fileName : "Header.hx", lineNumber : 75, className : "kha.audio2.ogg.vorbis.data.Header", methodName : "read"}));
	}
	decodeState.inputPosition += 4;
	header1.sampleRate = decodeState.input.readInt32();
	if(header1.sampleRate == 0) {
		throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_FIRST_PAGE,"no sampling rate",{ fileName : "Header.hx", lineNumber : 80, className : "kha.audio2.ogg.vorbis.data.Header", methodName : "read"}));
	}
	decodeState.inputPosition += 4;
	header1.maximumBitRate = decodeState.input.readInt32();
	decodeState.inputPosition += 4;
	header1.nominalBitRate = decodeState.input.readInt32();
	decodeState.inputPosition += 4;
	header1.minimumBitRate = decodeState.input.readInt32();
	decodeState.inputPosition += 1;
	var x1 = decodeState.input.readByte();
	var log0 = x1 & 15;
	var log1 = x1 >> 4;
	header1.blocksize0 = 1 << log0;
	header1.blocksize1 = 1 << log1;
	if(log0 < 6 || log0 > 13) {
		throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "Header.hx", lineNumber : 93, className : "kha.audio2.ogg.vorbis.data.Header", methodName : "read"}));
	}
	if(log1 < 6 || log1 > 13) {
		throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "Header.hx", lineNumber : 96, className : "kha.audio2.ogg.vorbis.data.Header", methodName : "read"}));
	}
	if(log0 > log1) {
		throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "Header.hx", lineNumber : 99, className : "kha.audio2.ogg.vorbis.data.Header", methodName : "read"}));
	}
	decodeState.inputPosition += 1;
	var x2 = decodeState.input.readByte();
	if((x2 & 1) == 0) {
		throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_FIRST_PAGE,null,{ fileName : "Header.hx", lineNumber : 105, className : "kha.audio2.ogg.vorbis.data.Header", methodName : "read"}));
	}
	decodeState.page.start(decodeState);
	decodeState.startPacket();
	var len = 0;
	var output = new haxe_io_BytesOutput();
	while(true) {
		len = decodeState.next();
		if(!(len != 0)) {
			break;
		}
		decodeState.inputPosition += len;
		output.write(decodeState.input.read(len));
		decodeState.bytesInSeg = 0;
	}
	var packetInput = new haxe_io_BytesInput(output.getBytes());
	packetInput.readByte();
	packetInput.read(6);
	var vendorLength = packetInput.readInt32();
	header1.vendor = packetInput.readString(vendorLength);
	header1.comment = new kha_audio2_ogg_vorbis_data_Comment();
	var commentCount = packetInput.readInt32();
	var _g1 = 0;
	var _g2 = commentCount;
	while(_g1 < _g2) {
		var i1 = _g1++;
		var n = packetInput.readInt32();
		var str = packetInput.readString(n);
		var splitter = str.indexOf("=");
		if(splitter != -1) {
			header1.comment.add(str.substring(0,splitter),str.substring(splitter + 1));
		}
	}
	var x3 = packetInput.readByte();
	if((x3 & 1) == 0) {
		throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "Header.hx", lineNumber : 141, className : "kha.audio2.ogg.vorbis.data.Header", methodName : "read"}));
	}
	decodeState.startPacket();
	var x4;
	if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
		x4 = -1;
	} else {
		decodeState.bytesInSeg--;
		decodeState.inputPosition += 1;
		x4 = decodeState.input.readByte();
	}
	decodeState.validBits = 0;
	if(x4 != 5) {
		throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,"setup packet",{ fileName : "Header.hx", lineNumber : 149, className : "kha.audio2.ogg.vorbis.data.Header", methodName : "read"}));
	}
	var header2 = new haxe_io_Bytes(new ArrayBuffer(6));
	var _g3 = 0;
	while(_g3 < 6) {
		var i2 = _g3++;
		var x5;
		if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
			x5 = -1;
		} else {
			decodeState.bytesInSeg--;
			decodeState.inputPosition += 1;
			x5 = decodeState.input.readByte();
		}
		decodeState.validBits = 0;
		header2.b[i2] = x5 & 255;
	}
	if(header2.toString() != "vorbis") {
		throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,"vorbis header",{ fileName : "VorbisDecodeState.hx", lineNumber : 300, className : "kha.audio2.ogg.vorbis.VorbisDecodeState", methodName : "vorbisValidate"}));
	}
	var codebookCount;
	if(decodeState.validBits < 0) {
		codebookCount = 0;
	} else if(decodeState.validBits < 8) {
		if(decodeState.validBits == 0) {
			decodeState.acc = 0;
		}
		while(true) {
			if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
				decodeState.validBits = -1;
				break;
			} else {
				decodeState.bytesInSeg--;
				decodeState.inputPosition += 1;
				decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
				decodeState.validBits += 8;
			}
			if(!(decodeState.validBits < 8)) {
				break;
			}
		}
		if(decodeState.validBits < 0) {
			codebookCount = 0;
		} else {
			var z = decodeState.acc & 255;
			decodeState.acc = decodeState.acc >>> 8;
			decodeState.validBits -= 8;
			codebookCount = z;
		}
	} else {
		var z1 = decodeState.acc & 255;
		decodeState.acc = decodeState.acc >>> 8;
		decodeState.validBits -= 8;
		codebookCount = z1;
	}
	var codebookCount1 = codebookCount + 1;
	var this1 = new Array(codebookCount1);
	header1.codebooks = this1;
	var _g11 = 0;
	var _g4 = codebookCount1;
	while(_g11 < _g4) {
		var i3 = _g11++;
		header1.codebooks[i3] = kha_audio2_ogg_vorbis_data_Codebook.read(decodeState);
	}
	var x6;
	if(decodeState.validBits < 0) {
		x6 = 0;
	} else if(decodeState.validBits < 6) {
		if(decodeState.validBits == 0) {
			decodeState.acc = 0;
		}
		while(true) {
			if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
				decodeState.validBits = -1;
				break;
			} else {
				decodeState.bytesInSeg--;
				decodeState.inputPosition += 1;
				decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
				decodeState.validBits += 8;
			}
			if(!(decodeState.validBits < 6)) {
				break;
			}
		}
		if(decodeState.validBits < 0) {
			x6 = 0;
		} else {
			var z2 = decodeState.acc & 63;
			decodeState.acc = decodeState.acc >>> 6;
			decodeState.validBits -= 6;
			x6 = z2;
		}
	} else {
		var z3 = decodeState.acc & 63;
		decodeState.acc = decodeState.acc >>> 6;
		decodeState.validBits -= 6;
		x6 = z3;
	}
	x2 = x6 + 1;
	var _g12 = 0;
	var _g5 = x2;
	while(_g12 < _g5) {
		var i4 = _g12++;
		var tmp;
		if(decodeState.validBits < 0) {
			tmp = 0;
		} else if(decodeState.validBits < 16) {
			if(decodeState.validBits == 0) {
				decodeState.acc = 0;
			}
			while(true) {
				if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
					decodeState.validBits = -1;
					break;
				} else {
					decodeState.bytesInSeg--;
					decodeState.inputPosition += 1;
					decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
					decodeState.validBits += 8;
				}
				if(!(decodeState.validBits < 16)) {
					break;
				}
			}
			if(decodeState.validBits < 0) {
				tmp = 0;
			} else {
				var z4 = decodeState.acc & 65535;
				decodeState.acc = decodeState.acc >>> 16;
				decodeState.validBits -= 16;
				tmp = z4;
			}
		} else {
			var z5 = decodeState.acc & 65535;
			decodeState.acc = decodeState.acc >>> 16;
			decodeState.validBits -= 16;
			tmp = z5;
		}
		if(tmp != 0) {
			throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "Header.hx", lineNumber : 165, className : "kha.audio2.ogg.vorbis.data.Header", methodName : "read"}));
		}
	}
	var floorCount;
	if(decodeState.validBits < 0) {
		floorCount = 0;
	} else if(decodeState.validBits < 6) {
		if(decodeState.validBits == 0) {
			decodeState.acc = 0;
		}
		while(true) {
			if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
				decodeState.validBits = -1;
				break;
			} else {
				decodeState.bytesInSeg--;
				decodeState.inputPosition += 1;
				decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
				decodeState.validBits += 8;
			}
			if(!(decodeState.validBits < 6)) {
				break;
			}
		}
		if(decodeState.validBits < 0) {
			floorCount = 0;
		} else {
			var z6 = decodeState.acc & 63;
			decodeState.acc = decodeState.acc >>> 6;
			decodeState.validBits -= 6;
			floorCount = z6;
		}
	} else {
		var z7 = decodeState.acc & 63;
		decodeState.acc = decodeState.acc >>> 6;
		decodeState.validBits -= 6;
		floorCount = z7;
	}
	var floorCount1 = floorCount + 1;
	var this2 = new Array(floorCount1);
	header1.floorConfig = this2;
	var _g13 = 0;
	var _g6 = floorCount1;
	while(_g13 < _g6) {
		var i5 = _g13++;
		header1.floorConfig[i5] = kha_audio2_ogg_vorbis_data_Floor.read(decodeState,header1.codebooks);
	}
	var residueCount;
	if(decodeState.validBits < 0) {
		residueCount = 0;
	} else if(decodeState.validBits < 6) {
		if(decodeState.validBits == 0) {
			decodeState.acc = 0;
		}
		while(true) {
			if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
				decodeState.validBits = -1;
				break;
			} else {
				decodeState.bytesInSeg--;
				decodeState.inputPosition += 1;
				decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
				decodeState.validBits += 8;
			}
			if(!(decodeState.validBits < 6)) {
				break;
			}
		}
		if(decodeState.validBits < 0) {
			residueCount = 0;
		} else {
			var z8 = decodeState.acc & 63;
			decodeState.acc = decodeState.acc >>> 6;
			decodeState.validBits -= 6;
			residueCount = z8;
		}
	} else {
		var z9 = decodeState.acc & 63;
		decodeState.acc = decodeState.acc >>> 6;
		decodeState.validBits -= 6;
		residueCount = z9;
	}
	var residueCount1 = residueCount + 1;
	var this3 = new Array(residueCount1);
	header1.residueConfig = this3;
	var _g14 = 0;
	var _g7 = residueCount1;
	while(_g14 < _g7) {
		var i6 = _g14++;
		header1.residueConfig[i6] = kha_audio2_ogg_vorbis_data_Residue.read(decodeState,header1.codebooks);
	}
	var mappingCount;
	if(decodeState.validBits < 0) {
		mappingCount = 0;
	} else if(decodeState.validBits < 6) {
		if(decodeState.validBits == 0) {
			decodeState.acc = 0;
		}
		while(true) {
			if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
				decodeState.validBits = -1;
				break;
			} else {
				decodeState.bytesInSeg--;
				decodeState.inputPosition += 1;
				decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
				decodeState.validBits += 8;
			}
			if(!(decodeState.validBits < 6)) {
				break;
			}
		}
		if(decodeState.validBits < 0) {
			mappingCount = 0;
		} else {
			var z10 = decodeState.acc & 63;
			decodeState.acc = decodeState.acc >>> 6;
			decodeState.validBits -= 6;
			mappingCount = z10;
		}
	} else {
		var z11 = decodeState.acc & 63;
		decodeState.acc = decodeState.acc >>> 6;
		decodeState.validBits -= 6;
		mappingCount = z11;
	}
	var mappingCount1 = mappingCount + 1;
	var this4 = new Array(mappingCount1);
	header1.mapping = this4;
	var _g15 = 0;
	var _g8 = mappingCount1;
	while(_g15 < _g8) {
		var i7 = _g15++;
		var map = kha_audio2_ogg_vorbis_data_Mapping.read(decodeState,header1.channel);
		header1.mapping[i7] = map;
		var _g31 = 0;
		var _g21 = map.submaps;
		while(_g31 < _g21) {
			var j = _g31++;
			if(map.submapFloor[j] >= header1.floorConfig.length) {
				throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "Header.hx", lineNumber : 191, className : "kha.audio2.ogg.vorbis.data.Header", methodName : "read"}));
			}
			if(map.submapResidue[j] >= header1.residueConfig.length) {
				throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "Header.hx", lineNumber : 194, className : "kha.audio2.ogg.vorbis.data.Header", methodName : "read"}));
			}
		}
	}
	var modeCount;
	if(decodeState.validBits < 0) {
		modeCount = 0;
	} else if(decodeState.validBits < 6) {
		if(decodeState.validBits == 0) {
			decodeState.acc = 0;
		}
		while(true) {
			if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
				decodeState.validBits = -1;
				break;
			} else {
				decodeState.bytesInSeg--;
				decodeState.inputPosition += 1;
				decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
				decodeState.validBits += 8;
			}
			if(!(decodeState.validBits < 6)) {
				break;
			}
		}
		if(decodeState.validBits < 0) {
			modeCount = 0;
		} else {
			var z12 = decodeState.acc & 63;
			decodeState.acc = decodeState.acc >>> 6;
			decodeState.validBits -= 6;
			modeCount = z12;
		}
	} else {
		var z13 = decodeState.acc & 63;
		decodeState.acc = decodeState.acc >>> 6;
		decodeState.validBits -= 6;
		modeCount = z13;
	}
	var modeCount1 = modeCount + 1;
	var this5 = new Array(modeCount1);
	header1.modes = this5;
	var _g16 = 0;
	var _g9 = modeCount1;
	while(_g16 < _g9) {
		var i8 = _g16++;
		var mode = kha_audio2_ogg_vorbis_data_Mode.read(decodeState);
		header1.modes[i8] = mode;
		if(mode.mapping >= header1.mapping.length) {
			throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "Header.hx", lineNumber : 205, className : "kha.audio2.ogg.vorbis.data.Header", methodName : "read"}));
		}
	}
	while(decodeState.bytesInSeg != 0 || !decodeState.lastSeg && decodeState.next() != 0) {
		decodeState.bytesInSeg--;
		decodeState.inputPosition += 1;
		decodeState.input.readByte();
	}
	return header1;
};
kha_audio2_ogg_vorbis_data_Header.prototype = {
	maximumBitRate: null
	,nominalBitRate: null
	,minimumBitRate: null
	,sampleRate: null
	,channel: null
	,blocksize0: null
	,blocksize1: null
	,codebooks: null
	,floorConfig: null
	,residueConfig: null
	,mapping: null
	,modes: null
	,comment: null
	,vendor: null
	,__class__: kha_audio2_ogg_vorbis_data_Header
};
var kha_audio2_ogg_vorbis_data_IntPoint = function() {
};
$hxClasses["kha.audio2.ogg.vorbis.data.IntPoint"] = kha_audio2_ogg_vorbis_data_IntPoint;
kha_audio2_ogg_vorbis_data_IntPoint.__name__ = true;
kha_audio2_ogg_vorbis_data_IntPoint.prototype = {
	x: null
	,y: null
	,__class__: kha_audio2_ogg_vorbis_data_IntPoint
};
var kha_audio2_ogg_vorbis_data_Mapping = function() {
};
$hxClasses["kha.audio2.ogg.vorbis.data.Mapping"] = kha_audio2_ogg_vorbis_data_Mapping;
kha_audio2_ogg_vorbis_data_Mapping.__name__ = true;
kha_audio2_ogg_vorbis_data_Mapping.read = function(decodeState,channels) {
	var m = new kha_audio2_ogg_vorbis_data_Mapping();
	var mappingType;
	if(decodeState.validBits < 0) {
		mappingType = 0;
	} else if(decodeState.validBits < 16) {
		if(decodeState.validBits == 0) {
			decodeState.acc = 0;
		}
		while(true) {
			if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
				decodeState.validBits = -1;
				break;
			} else {
				decodeState.bytesInSeg--;
				decodeState.inputPosition += 1;
				decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
				decodeState.validBits += 8;
			}
			if(!(decodeState.validBits < 16)) {
				break;
			}
		}
		if(decodeState.validBits < 0) {
			mappingType = 0;
		} else {
			var z = decodeState.acc & 65535;
			decodeState.acc = decodeState.acc >>> 16;
			decodeState.validBits -= 16;
			mappingType = z;
		}
	} else {
		var z1 = decodeState.acc & 65535;
		decodeState.acc = decodeState.acc >>> 16;
		decodeState.validBits -= 16;
		mappingType = z1;
	}
	if(mappingType != 0) {
		throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,"mapping type " + mappingType,{ fileName : "Mapping.hx", lineNumber : 22, className : "kha.audio2.ogg.vorbis.data.Mapping", methodName : "read"}));
	}
	var this1 = new Array(channels);
	m.chan = this1;
	var _g1 = 0;
	var _g = channels;
	while(_g1 < _g) {
		var j = _g1++;
		m.chan[j] = new kha_audio2_ogg_vorbis_data_MappingChannel();
	}
	var tmp;
	if(decodeState.validBits < 0) {
		tmp = 0;
	} else if(decodeState.validBits < 1) {
		if(decodeState.validBits == 0) {
			decodeState.acc = 0;
		}
		while(true) {
			if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
				decodeState.validBits = -1;
				break;
			} else {
				decodeState.bytesInSeg--;
				decodeState.inputPosition += 1;
				decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
				decodeState.validBits += 8;
			}
			if(!(decodeState.validBits < 1)) {
				break;
			}
		}
		if(decodeState.validBits < 0) {
			tmp = 0;
		} else {
			var z2 = decodeState.acc & 1;
			decodeState.acc = decodeState.acc >>> 1;
			decodeState.validBits -= 1;
			tmp = z2;
		}
	} else {
		var z3 = decodeState.acc & 1;
		decodeState.acc = decodeState.acc >>> 1;
		decodeState.validBits -= 1;
		tmp = z3;
	}
	if(tmp != 0) {
		var tmp1;
		if(decodeState.validBits < 0) {
			tmp1 = 0;
		} else if(decodeState.validBits < 4) {
			if(decodeState.validBits == 0) {
				decodeState.acc = 0;
			}
			while(true) {
				if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
					decodeState.validBits = -1;
					break;
				} else {
					decodeState.bytesInSeg--;
					decodeState.inputPosition += 1;
					decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
					decodeState.validBits += 8;
				}
				if(!(decodeState.validBits < 4)) {
					break;
				}
			}
			if(decodeState.validBits < 0) {
				tmp1 = 0;
			} else {
				var z4 = decodeState.acc & 15;
				decodeState.acc = decodeState.acc >>> 4;
				decodeState.validBits -= 4;
				tmp1 = z4;
			}
		} else {
			var z5 = decodeState.acc & 15;
			decodeState.acc = decodeState.acc >>> 4;
			decodeState.validBits -= 4;
			tmp1 = z5;
		}
		m.submaps = tmp1 + 1;
	} else {
		m.submaps = 1;
	}
	var tmp2;
	if(decodeState.validBits < 0) {
		tmp2 = 0;
	} else if(decodeState.validBits < 1) {
		if(decodeState.validBits == 0) {
			decodeState.acc = 0;
		}
		while(true) {
			if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
				decodeState.validBits = -1;
				break;
			} else {
				decodeState.bytesInSeg--;
				decodeState.inputPosition += 1;
				decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
				decodeState.validBits += 8;
			}
			if(!(decodeState.validBits < 1)) {
				break;
			}
		}
		if(decodeState.validBits < 0) {
			tmp2 = 0;
		} else {
			var z6 = decodeState.acc & 1;
			decodeState.acc = decodeState.acc >>> 1;
			decodeState.validBits -= 1;
			tmp2 = z6;
		}
	} else {
		var z7 = decodeState.acc & 1;
		decodeState.acc = decodeState.acc >>> 1;
		decodeState.validBits -= 1;
		tmp2 = z7;
	}
	if(tmp2 != 0) {
		var tmp3;
		if(decodeState.validBits < 0) {
			tmp3 = 0;
		} else if(decodeState.validBits < 8) {
			if(decodeState.validBits == 0) {
				decodeState.acc = 0;
			}
			while(true) {
				if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
					decodeState.validBits = -1;
					break;
				} else {
					decodeState.bytesInSeg--;
					decodeState.inputPosition += 1;
					decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
					decodeState.validBits += 8;
				}
				if(!(decodeState.validBits < 8)) {
					break;
				}
			}
			if(decodeState.validBits < 0) {
				tmp3 = 0;
			} else {
				var z8 = decodeState.acc & 255;
				decodeState.acc = decodeState.acc >>> 8;
				decodeState.validBits -= 8;
				tmp3 = z8;
			}
		} else {
			var z9 = decodeState.acc & 255;
			decodeState.acc = decodeState.acc >>> 8;
			decodeState.validBits -= 8;
			tmp3 = z9;
		}
		m.couplingSteps = tmp3 + 1;
		var _g11 = 0;
		var _g2 = m.couplingSteps;
		while(_g11 < _g2) {
			var k = _g11++;
			var tmp4 = m.chan[k];
			var n = channels - 1;
			var log2_4 = [0,1,2,2,3,3,3,3,4,4,4,4,4,4,4,4];
			var n1 = n < 16384 ? n < 16 ? log2_4[n] : n < 512 ? 5 + log2_4[n >> 5] : 10 + log2_4[n >> 10] : n < 16777216 ? n < 524288 ? 15 + log2_4[n >> 15] : 20 + log2_4[n >> 20] : n < 536870912 ? 25 + log2_4[n >> 25] : n < -2147483648 ? 30 + log2_4[n >> 30] : 0;
			var tmp5;
			if(decodeState.validBits < 0) {
				tmp5 = 0;
			} else if(decodeState.validBits < n1) {
				if(n1 > 24) {
					tmp5 = decodeState.readBits(24) + (decodeState.readBits(n1 - 24) << 24);
				} else {
					if(decodeState.validBits == 0) {
						decodeState.acc = 0;
					}
					while(true) {
						if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
							decodeState.validBits = -1;
							break;
						} else {
							decodeState.bytesInSeg--;
							decodeState.inputPosition += 1;
							decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
							decodeState.validBits += 8;
						}
						if(!(decodeState.validBits < n1)) {
							break;
						}
					}
					if(decodeState.validBits < 0) {
						tmp5 = 0;
					} else {
						var z10 = decodeState.acc & (1 << n1) - 1;
						decodeState.acc = decodeState.acc >>> n1;
						decodeState.validBits -= n1;
						tmp5 = z10;
					}
				}
			} else {
				var z11 = decodeState.acc & (1 << n1) - 1;
				decodeState.acc = decodeState.acc >>> n1;
				decodeState.validBits -= n1;
				tmp5 = z11;
			}
			tmp4.magnitude = tmp5;
			var tmp6 = m.chan[k];
			var n2 = channels - 1;
			var log2_41 = [0,1,2,2,3,3,3,3,4,4,4,4,4,4,4,4];
			var n3 = n2 < 16384 ? n2 < 16 ? log2_41[n2] : n2 < 512 ? 5 + log2_41[n2 >> 5] : 10 + log2_41[n2 >> 10] : n2 < 16777216 ? n2 < 524288 ? 15 + log2_41[n2 >> 15] : 20 + log2_41[n2 >> 20] : n2 < 536870912 ? 25 + log2_41[n2 >> 25] : n2 < -2147483648 ? 30 + log2_41[n2 >> 30] : 0;
			var tmp7;
			if(decodeState.validBits < 0) {
				tmp7 = 0;
			} else if(decodeState.validBits < n3) {
				if(n3 > 24) {
					tmp7 = decodeState.readBits(24) + (decodeState.readBits(n3 - 24) << 24);
				} else {
					if(decodeState.validBits == 0) {
						decodeState.acc = 0;
					}
					while(true) {
						if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
							decodeState.validBits = -1;
							break;
						} else {
							decodeState.bytesInSeg--;
							decodeState.inputPosition += 1;
							decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
							decodeState.validBits += 8;
						}
						if(!(decodeState.validBits < n3)) {
							break;
						}
					}
					if(decodeState.validBits < 0) {
						tmp7 = 0;
					} else {
						var z12 = decodeState.acc & (1 << n3) - 1;
						decodeState.acc = decodeState.acc >>> n3;
						decodeState.validBits -= n3;
						tmp7 = z12;
					}
				}
			} else {
				var z13 = decodeState.acc & (1 << n3) - 1;
				decodeState.acc = decodeState.acc >>> n3;
				decodeState.validBits -= n3;
				tmp7 = z13;
			}
			tmp6.angle = tmp7;
			if(m.chan[k].magnitude >= channels) {
				throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "Mapping.hx", lineNumber : 46, className : "kha.audio2.ogg.vorbis.data.Mapping", methodName : "read"}));
			}
			if(m.chan[k].angle >= channels) {
				throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "Mapping.hx", lineNumber : 49, className : "kha.audio2.ogg.vorbis.data.Mapping", methodName : "read"}));
			}
			if(m.chan[k].magnitude == m.chan[k].angle) {
				throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "Mapping.hx", lineNumber : 52, className : "kha.audio2.ogg.vorbis.data.Mapping", methodName : "read"}));
			}
		}
	} else {
		m.couplingSteps = 0;
	}
	var tmp8;
	if(decodeState.validBits < 0) {
		tmp8 = 0;
	} else if(decodeState.validBits < 2) {
		if(decodeState.validBits == 0) {
			decodeState.acc = 0;
		}
		while(true) {
			if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
				decodeState.validBits = -1;
				break;
			} else {
				decodeState.bytesInSeg--;
				decodeState.inputPosition += 1;
				decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
				decodeState.validBits += 8;
			}
			if(!(decodeState.validBits < 2)) {
				break;
			}
		}
		if(decodeState.validBits < 0) {
			tmp8 = 0;
		} else {
			var z14 = decodeState.acc & 3;
			decodeState.acc = decodeState.acc >>> 2;
			decodeState.validBits -= 2;
			tmp8 = z14;
		}
	} else {
		var z15 = decodeState.acc & 3;
		decodeState.acc = decodeState.acc >>> 2;
		decodeState.validBits -= 2;
		tmp8 = z15;
	}
	if(tmp8 != 0) {
		throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "Mapping.hx", lineNumber : 61, className : "kha.audio2.ogg.vorbis.data.Mapping", methodName : "read"}));
	}
	if(m.submaps > 1) {
		var _g12 = 0;
		var _g3 = channels;
		while(_g12 < _g3) {
			var j1 = _g12++;
			var tmp9 = m.chan[j1];
			var tmp10;
			if(decodeState.validBits < 0) {
				tmp10 = 0;
			} else if(decodeState.validBits < 4) {
				if(decodeState.validBits == 0) {
					decodeState.acc = 0;
				}
				while(true) {
					if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
						decodeState.validBits = -1;
						break;
					} else {
						decodeState.bytesInSeg--;
						decodeState.inputPosition += 1;
						decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
						decodeState.validBits += 8;
					}
					if(!(decodeState.validBits < 4)) {
						break;
					}
				}
				if(decodeState.validBits < 0) {
					tmp10 = 0;
				} else {
					var z16 = decodeState.acc & 15;
					decodeState.acc = decodeState.acc >>> 4;
					decodeState.validBits -= 4;
					tmp10 = z16;
				}
			} else {
				var z17 = decodeState.acc & 15;
				decodeState.acc = decodeState.acc >>> 4;
				decodeState.validBits -= 4;
				tmp10 = z17;
			}
			tmp9.mux = tmp10;
			if(m.chan[j1].mux >= m.submaps) {
				throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "Mapping.hx", lineNumber : 67, className : "kha.audio2.ogg.vorbis.data.Mapping", methodName : "read"}));
			}
		}
	} else {
		var _g13 = 0;
		var _g4 = channels;
		while(_g13 < _g4) {
			var j2 = _g13++;
			m.chan[j2].mux = 0;
		}
	}
	var length = m.submaps;
	var this2 = new Array(length);
	m.submapFloor = this2;
	var length1 = m.submaps;
	var this3 = new Array(length1);
	m.submapResidue = this3;
	var _g14 = 0;
	var _g5 = m.submaps;
	while(_g14 < _g5) {
		var j3 = _g14++;
		if(decodeState.validBits >= 0) {
			if(decodeState.validBits < 8) {
				if(decodeState.validBits == 0) {
					decodeState.acc = 0;
				}
				while(true) {
					if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
						decodeState.validBits = -1;
						break;
					} else {
						decodeState.bytesInSeg--;
						decodeState.inputPosition += 1;
						decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
						decodeState.validBits += 8;
					}
					if(!(decodeState.validBits < 8)) {
						break;
					}
				}
				if(decodeState.validBits >= 0) {
					var z18 = decodeState.acc & 255;
					decodeState.acc = decodeState.acc >>> 8;
					decodeState.validBits -= 8;
				}
			} else {
				var z19 = decodeState.acc & 255;
				decodeState.acc = decodeState.acc >>> 8;
				decodeState.validBits -= 8;
			}
		}
		var this4 = m.submapFloor;
		var val;
		if(decodeState.validBits < 0) {
			val = 0;
		} else if(decodeState.validBits < 8) {
			if(decodeState.validBits == 0) {
				decodeState.acc = 0;
			}
			while(true) {
				if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
					decodeState.validBits = -1;
					break;
				} else {
					decodeState.bytesInSeg--;
					decodeState.inputPosition += 1;
					decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
					decodeState.validBits += 8;
				}
				if(!(decodeState.validBits < 8)) {
					break;
				}
			}
			if(decodeState.validBits < 0) {
				val = 0;
			} else {
				var z20 = decodeState.acc & 255;
				decodeState.acc = decodeState.acc >>> 8;
				decodeState.validBits -= 8;
				val = z20;
			}
		} else {
			var z21 = decodeState.acc & 255;
			decodeState.acc = decodeState.acc >>> 8;
			decodeState.validBits -= 8;
			val = z21;
		}
		this4[j3] = val;
		var this5 = m.submapResidue;
		var val1;
		if(decodeState.validBits < 0) {
			val1 = 0;
		} else if(decodeState.validBits < 8) {
			if(decodeState.validBits == 0) {
				decodeState.acc = 0;
			}
			while(true) {
				if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
					decodeState.validBits = -1;
					break;
				} else {
					decodeState.bytesInSeg--;
					decodeState.inputPosition += 1;
					decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
					decodeState.validBits += 8;
				}
				if(!(decodeState.validBits < 8)) {
					break;
				}
			}
			if(decodeState.validBits < 0) {
				val1 = 0;
			} else {
				var z22 = decodeState.acc & 255;
				decodeState.acc = decodeState.acc >>> 8;
				decodeState.validBits -= 8;
				val1 = z22;
			}
		} else {
			var z23 = decodeState.acc & 255;
			decodeState.acc = decodeState.acc >>> 8;
			decodeState.validBits -= 8;
			val1 = z23;
		}
		this5[j3] = val1;
	}
	return m;
};
kha_audio2_ogg_vorbis_data_Mapping.prototype = {
	couplingSteps: null
	,chan: null
	,submaps: null
	,submapFloor: null
	,submapResidue: null
	,doFloor: function(floors,i,n,target,finalY,step2Flag) {
		var n2 = n >> 1;
		var s = this.chan[i].mux;
		var floor;
		var floor1 = floors[this.submapFloor[s]];
		if(floor1.type == 0) {
			throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_STREAM,null,{ fileName : "Mapping.hx", lineNumber : 94, className : "kha.audio2.ogg.vorbis.data.Mapping", methodName : "doFloor"}));
		} else {
			var g = floor1.floor1;
			var lx = 0;
			var ly = finalY[0] * g.floor1Multiplier;
			var _g1 = 1;
			var _g = g.values;
			while(_g1 < _g) {
				var q = _g1++;
				var j = g.sortedOrder[q];
				if(finalY[j] >= 0) {
					var hy = finalY[j] * g.floor1Multiplier;
					var hx = g.xlist[j];
					kha_audio2_ogg_vorbis_VorbisTools.drawLine(target,lx,ly,hx,hy,n2);
					lx = hx;
					ly = hy;
				}
			}
			if(lx < n2) {
				var _g11 = lx;
				var _g2 = n2;
				while(_g11 < _g2) {
					var j1 = _g11++;
					var _g21 = j1;
					var _g3 = target;
					_g3[_g21] = _g3[_g21] * kha_audio2_ogg_vorbis_VorbisTools.INVERSE_DB_TABLE[ly];
				}
			}
		}
	}
	,__class__: kha_audio2_ogg_vorbis_data_Mapping
};
var kha_audio2_ogg_vorbis_data_MappingChannel = function() {
};
$hxClasses["kha.audio2.ogg.vorbis.data.MappingChannel"] = kha_audio2_ogg_vorbis_data_MappingChannel;
kha_audio2_ogg_vorbis_data_MappingChannel.__name__ = true;
kha_audio2_ogg_vorbis_data_MappingChannel.prototype = {
	magnitude: null
	,angle: null
	,mux: null
	,__class__: kha_audio2_ogg_vorbis_data_MappingChannel
};
var kha_audio2_ogg_vorbis_data_Mode = function() {
};
$hxClasses["kha.audio2.ogg.vorbis.data.Mode"] = kha_audio2_ogg_vorbis_data_Mode;
kha_audio2_ogg_vorbis_data_Mode.__name__ = true;
kha_audio2_ogg_vorbis_data_Mode.read = function(decodeState) {
	var m = new kha_audio2_ogg_vorbis_data_Mode();
	var tmp;
	if(decodeState.validBits < 0) {
		tmp = 0;
	} else if(decodeState.validBits < 1) {
		if(decodeState.validBits == 0) {
			decodeState.acc = 0;
		}
		while(true) {
			if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
				decodeState.validBits = -1;
				break;
			} else {
				decodeState.bytesInSeg--;
				decodeState.inputPosition += 1;
				decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
				decodeState.validBits += 8;
			}
			if(!(decodeState.validBits < 1)) {
				break;
			}
		}
		if(decodeState.validBits < 0) {
			tmp = 0;
		} else {
			var z = decodeState.acc & 1;
			decodeState.acc = decodeState.acc >>> 1;
			decodeState.validBits -= 1;
			tmp = z;
		}
	} else {
		var z1 = decodeState.acc & 1;
		decodeState.acc = decodeState.acc >>> 1;
		decodeState.validBits -= 1;
		tmp = z1;
	}
	m.blockflag = tmp != 0;
	var tmp1;
	if(decodeState.validBits < 0) {
		tmp1 = 0;
	} else if(decodeState.validBits < 16) {
		if(decodeState.validBits == 0) {
			decodeState.acc = 0;
		}
		while(true) {
			if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
				decodeState.validBits = -1;
				break;
			} else {
				decodeState.bytesInSeg--;
				decodeState.inputPosition += 1;
				decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
				decodeState.validBits += 8;
			}
			if(!(decodeState.validBits < 16)) {
				break;
			}
		}
		if(decodeState.validBits < 0) {
			tmp1 = 0;
		} else {
			var z2 = decodeState.acc & 65535;
			decodeState.acc = decodeState.acc >>> 16;
			decodeState.validBits -= 16;
			tmp1 = z2;
		}
	} else {
		var z3 = decodeState.acc & 65535;
		decodeState.acc = decodeState.acc >>> 16;
		decodeState.validBits -= 16;
		tmp1 = z3;
	}
	m.windowtype = tmp1;
	var tmp2;
	if(decodeState.validBits < 0) {
		tmp2 = 0;
	} else if(decodeState.validBits < 16) {
		if(decodeState.validBits == 0) {
			decodeState.acc = 0;
		}
		while(true) {
			if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
				decodeState.validBits = -1;
				break;
			} else {
				decodeState.bytesInSeg--;
				decodeState.inputPosition += 1;
				decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
				decodeState.validBits += 8;
			}
			if(!(decodeState.validBits < 16)) {
				break;
			}
		}
		if(decodeState.validBits < 0) {
			tmp2 = 0;
		} else {
			var z4 = decodeState.acc & 65535;
			decodeState.acc = decodeState.acc >>> 16;
			decodeState.validBits -= 16;
			tmp2 = z4;
		}
	} else {
		var z5 = decodeState.acc & 65535;
		decodeState.acc = decodeState.acc >>> 16;
		decodeState.validBits -= 16;
		tmp2 = z5;
	}
	m.transformtype = tmp2;
	var tmp3;
	if(decodeState.validBits < 0) {
		tmp3 = 0;
	} else if(decodeState.validBits < 8) {
		if(decodeState.validBits == 0) {
			decodeState.acc = 0;
		}
		while(true) {
			if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
				decodeState.validBits = -1;
				break;
			} else {
				decodeState.bytesInSeg--;
				decodeState.inputPosition += 1;
				decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
				decodeState.validBits += 8;
			}
			if(!(decodeState.validBits < 8)) {
				break;
			}
		}
		if(decodeState.validBits < 0) {
			tmp3 = 0;
		} else {
			var z6 = decodeState.acc & 255;
			decodeState.acc = decodeState.acc >>> 8;
			decodeState.validBits -= 8;
			tmp3 = z6;
		}
	} else {
		var z7 = decodeState.acc & 255;
		decodeState.acc = decodeState.acc >>> 8;
		decodeState.validBits -= 8;
		tmp3 = z7;
	}
	m.mapping = tmp3;
	if(m.windowtype != 0) {
		throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "Mode.hx", lineNumber : 22, className : "kha.audio2.ogg.vorbis.data.Mode", methodName : "read"}));
	}
	if(m.transformtype != 0) {
		throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "Mode.hx", lineNumber : 25, className : "kha.audio2.ogg.vorbis.data.Mode", methodName : "read"}));
	}
	return m;
};
kha_audio2_ogg_vorbis_data_Mode.prototype = {
	blockflag: null
	,mapping: null
	,windowtype: null
	,transformtype: null
	,__class__: kha_audio2_ogg_vorbis_data_Mode
};
var kha_audio2_ogg_vorbis_data_Page = function() {
};
$hxClasses["kha.audio2.ogg.vorbis.data.Page"] = kha_audio2_ogg_vorbis_data_Page;
kha_audio2_ogg_vorbis_data_Page.__name__ = true;
kha_audio2_ogg_vorbis_data_Page.prototype = {
	flag: null
	,clone: function() {
		var page = new kha_audio2_ogg_vorbis_data_Page();
		page.flag = this.flag;
		return page;
	}
	,start: function(decodeState) {
		var tmp;
		var tmp1;
		var tmp2;
		decodeState.inputPosition += 1;
		if(decodeState.input.readByte() == 79) {
			decodeState.inputPosition += 1;
			tmp2 = decodeState.input.readByte() != 103;
		} else {
			tmp2 = true;
		}
		if(!tmp2) {
			decodeState.inputPosition += 1;
			tmp1 = decodeState.input.readByte() != 103;
		} else {
			tmp1 = true;
		}
		if(!tmp1) {
			decodeState.inputPosition += 1;
			tmp = decodeState.input.readByte() != 83;
		} else {
			tmp = true;
		}
		if(tmp) {
			throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.MISSING_CAPTURE_PATTERN,null,{ fileName : "VorbisDecodeState.hx", lineNumber : 323, className : "kha.audio2.ogg.vorbis.VorbisDecodeState", methodName : "capturePattern"}));
		}
		this.startWithoutCapturePattern(decodeState);
	}
	,startWithoutCapturePattern: function(decodeState) {
		decodeState.inputPosition += 1;
		var version = decodeState.input.readByte();
		if(version != 0) {
			throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_STREAM_STRUCTURE_VERSION,"" + version,{ fileName : "Page.hx", lineNumber : 34, className : "kha.audio2.ogg.vorbis.data.Page", methodName : "startWithoutCapturePattern"}));
		}
		decodeState.inputPosition += 1;
		this.flag = decodeState.input.readByte();
		decodeState.inputPosition += 4;
		var loc0 = decodeState.input.readInt32();
		decodeState.inputPosition += 4;
		var loc1 = decodeState.input.readInt32();
		decodeState.inputPosition += 4;
		decodeState.input.readInt32();
		decodeState.inputPosition += 4;
		decodeState.input.readInt32();
		decodeState.inputPosition += 4;
		decodeState.input.readInt32();
		decodeState.setup(loc0,loc1);
	}
	,__class__: kha_audio2_ogg_vorbis_data_Page
};
var kha_audio2_ogg_vorbis_data_PageFlag = function() { };
$hxClasses["kha.audio2.ogg.vorbis.data.PageFlag"] = kha_audio2_ogg_vorbis_data_PageFlag;
kha_audio2_ogg_vorbis_data_PageFlag.__name__ = true;
var kha_audio2_ogg_vorbis_data_ProbedPage = function() {
};
$hxClasses["kha.audio2.ogg.vorbis.data.ProbedPage"] = kha_audio2_ogg_vorbis_data_ProbedPage;
kha_audio2_ogg_vorbis_data_ProbedPage.__name__ = true;
kha_audio2_ogg_vorbis_data_ProbedPage.prototype = {
	pageStart: null
	,pageEnd: null
	,afterPreviousPageStart: null
	,firstDecodedSample: null
	,lastDecodedSample: null
	,__class__: kha_audio2_ogg_vorbis_data_ProbedPage
};
var kha_audio2_ogg_vorbis_data_ReaderError = function(type,message,posInfos) {
	if(message == null) {
		message = "";
	}
	this.type = type;
	this.message = message;
	this.posInfos = posInfos;
};
$hxClasses["kha.audio2.ogg.vorbis.data.ReaderError"] = kha_audio2_ogg_vorbis_data_ReaderError;
kha_audio2_ogg_vorbis_data_ReaderError.__name__ = true;
kha_audio2_ogg_vorbis_data_ReaderError.prototype = {
	type: null
	,message: null
	,posInfos: null
	,__class__: kha_audio2_ogg_vorbis_data_ReaderError
};
var kha_audio2_ogg_vorbis_data_ReaderErrorType = $hxClasses["kha.audio2.ogg.vorbis.data.ReaderErrorType"] = { __ename__ : true, __constructs__ : ["NEED_MORE_DATA","INVALID_API_MIXING","OUTOFMEM","FEATURE_NOT_SUPPORTED","TOO_MANY_CHANNELS","FILE_OPEN_FAILURE","SEEK_WITHOUT_LENGTH","UNEXPECTED_EOF","SEEK_INVALID","INVALID_SETUP","INVALID_STREAM","MISSING_CAPTURE_PATTERN","INVALID_STREAM_STRUCTURE_VERSION","CONTINUED_PACKET_FLAG_INVALID","INCORRECT_STREAM_SERIAL_NUMBER","INVALID_FIRST_PAGE","BAD_PACKET_TYPE","CANT_FIND_LAST_PAGE","SEEK_FAILED","OTHER"] };
kha_audio2_ogg_vorbis_data_ReaderErrorType.NEED_MORE_DATA = ["NEED_MORE_DATA",0];
kha_audio2_ogg_vorbis_data_ReaderErrorType.NEED_MORE_DATA.toString = $estr;
kha_audio2_ogg_vorbis_data_ReaderErrorType.NEED_MORE_DATA.__enum__ = kha_audio2_ogg_vorbis_data_ReaderErrorType;
kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_API_MIXING = ["INVALID_API_MIXING",1];
kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_API_MIXING.toString = $estr;
kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_API_MIXING.__enum__ = kha_audio2_ogg_vorbis_data_ReaderErrorType;
kha_audio2_ogg_vorbis_data_ReaderErrorType.OUTOFMEM = ["OUTOFMEM",2];
kha_audio2_ogg_vorbis_data_ReaderErrorType.OUTOFMEM.toString = $estr;
kha_audio2_ogg_vorbis_data_ReaderErrorType.OUTOFMEM.__enum__ = kha_audio2_ogg_vorbis_data_ReaderErrorType;
kha_audio2_ogg_vorbis_data_ReaderErrorType.FEATURE_NOT_SUPPORTED = ["FEATURE_NOT_SUPPORTED",3];
kha_audio2_ogg_vorbis_data_ReaderErrorType.FEATURE_NOT_SUPPORTED.toString = $estr;
kha_audio2_ogg_vorbis_data_ReaderErrorType.FEATURE_NOT_SUPPORTED.__enum__ = kha_audio2_ogg_vorbis_data_ReaderErrorType;
kha_audio2_ogg_vorbis_data_ReaderErrorType.TOO_MANY_CHANNELS = ["TOO_MANY_CHANNELS",4];
kha_audio2_ogg_vorbis_data_ReaderErrorType.TOO_MANY_CHANNELS.toString = $estr;
kha_audio2_ogg_vorbis_data_ReaderErrorType.TOO_MANY_CHANNELS.__enum__ = kha_audio2_ogg_vorbis_data_ReaderErrorType;
kha_audio2_ogg_vorbis_data_ReaderErrorType.FILE_OPEN_FAILURE = ["FILE_OPEN_FAILURE",5];
kha_audio2_ogg_vorbis_data_ReaderErrorType.FILE_OPEN_FAILURE.toString = $estr;
kha_audio2_ogg_vorbis_data_ReaderErrorType.FILE_OPEN_FAILURE.__enum__ = kha_audio2_ogg_vorbis_data_ReaderErrorType;
kha_audio2_ogg_vorbis_data_ReaderErrorType.SEEK_WITHOUT_LENGTH = ["SEEK_WITHOUT_LENGTH",6];
kha_audio2_ogg_vorbis_data_ReaderErrorType.SEEK_WITHOUT_LENGTH.toString = $estr;
kha_audio2_ogg_vorbis_data_ReaderErrorType.SEEK_WITHOUT_LENGTH.__enum__ = kha_audio2_ogg_vorbis_data_ReaderErrorType;
kha_audio2_ogg_vorbis_data_ReaderErrorType.UNEXPECTED_EOF = ["UNEXPECTED_EOF",7];
kha_audio2_ogg_vorbis_data_ReaderErrorType.UNEXPECTED_EOF.toString = $estr;
kha_audio2_ogg_vorbis_data_ReaderErrorType.UNEXPECTED_EOF.__enum__ = kha_audio2_ogg_vorbis_data_ReaderErrorType;
kha_audio2_ogg_vorbis_data_ReaderErrorType.SEEK_INVALID = ["SEEK_INVALID",8];
kha_audio2_ogg_vorbis_data_ReaderErrorType.SEEK_INVALID.toString = $estr;
kha_audio2_ogg_vorbis_data_ReaderErrorType.SEEK_INVALID.__enum__ = kha_audio2_ogg_vorbis_data_ReaderErrorType;
kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP = ["INVALID_SETUP",9];
kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP.toString = $estr;
kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP.__enum__ = kha_audio2_ogg_vorbis_data_ReaderErrorType;
kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_STREAM = ["INVALID_STREAM",10];
kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_STREAM.toString = $estr;
kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_STREAM.__enum__ = kha_audio2_ogg_vorbis_data_ReaderErrorType;
kha_audio2_ogg_vorbis_data_ReaderErrorType.MISSING_CAPTURE_PATTERN = ["MISSING_CAPTURE_PATTERN",11];
kha_audio2_ogg_vorbis_data_ReaderErrorType.MISSING_CAPTURE_PATTERN.toString = $estr;
kha_audio2_ogg_vorbis_data_ReaderErrorType.MISSING_CAPTURE_PATTERN.__enum__ = kha_audio2_ogg_vorbis_data_ReaderErrorType;
kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_STREAM_STRUCTURE_VERSION = ["INVALID_STREAM_STRUCTURE_VERSION",12];
kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_STREAM_STRUCTURE_VERSION.toString = $estr;
kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_STREAM_STRUCTURE_VERSION.__enum__ = kha_audio2_ogg_vorbis_data_ReaderErrorType;
kha_audio2_ogg_vorbis_data_ReaderErrorType.CONTINUED_PACKET_FLAG_INVALID = ["CONTINUED_PACKET_FLAG_INVALID",13];
kha_audio2_ogg_vorbis_data_ReaderErrorType.CONTINUED_PACKET_FLAG_INVALID.toString = $estr;
kha_audio2_ogg_vorbis_data_ReaderErrorType.CONTINUED_PACKET_FLAG_INVALID.__enum__ = kha_audio2_ogg_vorbis_data_ReaderErrorType;
kha_audio2_ogg_vorbis_data_ReaderErrorType.INCORRECT_STREAM_SERIAL_NUMBER = ["INCORRECT_STREAM_SERIAL_NUMBER",14];
kha_audio2_ogg_vorbis_data_ReaderErrorType.INCORRECT_STREAM_SERIAL_NUMBER.toString = $estr;
kha_audio2_ogg_vorbis_data_ReaderErrorType.INCORRECT_STREAM_SERIAL_NUMBER.__enum__ = kha_audio2_ogg_vorbis_data_ReaderErrorType;
kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_FIRST_PAGE = ["INVALID_FIRST_PAGE",15];
kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_FIRST_PAGE.toString = $estr;
kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_FIRST_PAGE.__enum__ = kha_audio2_ogg_vorbis_data_ReaderErrorType;
kha_audio2_ogg_vorbis_data_ReaderErrorType.BAD_PACKET_TYPE = ["BAD_PACKET_TYPE",16];
kha_audio2_ogg_vorbis_data_ReaderErrorType.BAD_PACKET_TYPE.toString = $estr;
kha_audio2_ogg_vorbis_data_ReaderErrorType.BAD_PACKET_TYPE.__enum__ = kha_audio2_ogg_vorbis_data_ReaderErrorType;
kha_audio2_ogg_vorbis_data_ReaderErrorType.CANT_FIND_LAST_PAGE = ["CANT_FIND_LAST_PAGE",17];
kha_audio2_ogg_vorbis_data_ReaderErrorType.CANT_FIND_LAST_PAGE.toString = $estr;
kha_audio2_ogg_vorbis_data_ReaderErrorType.CANT_FIND_LAST_PAGE.__enum__ = kha_audio2_ogg_vorbis_data_ReaderErrorType;
kha_audio2_ogg_vorbis_data_ReaderErrorType.SEEK_FAILED = ["SEEK_FAILED",18];
kha_audio2_ogg_vorbis_data_ReaderErrorType.SEEK_FAILED.toString = $estr;
kha_audio2_ogg_vorbis_data_ReaderErrorType.SEEK_FAILED.__enum__ = kha_audio2_ogg_vorbis_data_ReaderErrorType;
kha_audio2_ogg_vorbis_data_ReaderErrorType.OTHER = ["OTHER",19];
kha_audio2_ogg_vorbis_data_ReaderErrorType.OTHER.toString = $estr;
kha_audio2_ogg_vorbis_data_ReaderErrorType.OTHER.__enum__ = kha_audio2_ogg_vorbis_data_ReaderErrorType;
var kha_audio2_ogg_vorbis_data_Residue = function() {
};
$hxClasses["kha.audio2.ogg.vorbis.data.Residue"] = kha_audio2_ogg_vorbis_data_Residue;
kha_audio2_ogg_vorbis_data_Residue.__name__ = true;
kha_audio2_ogg_vorbis_data_Residue.read = function(decodeState,codebooks) {
	var r = new kha_audio2_ogg_vorbis_data_Residue();
	var tmp;
	if(decodeState.validBits < 0) {
		tmp = 0;
	} else if(decodeState.validBits < 16) {
		if(decodeState.validBits == 0) {
			decodeState.acc = 0;
		}
		while(true) {
			if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
				decodeState.validBits = -1;
				break;
			} else {
				decodeState.bytesInSeg--;
				decodeState.inputPosition += 1;
				decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
				decodeState.validBits += 8;
			}
			if(!(decodeState.validBits < 16)) {
				break;
			}
		}
		if(decodeState.validBits < 0) {
			tmp = 0;
		} else {
			var z = decodeState.acc & 65535;
			decodeState.acc = decodeState.acc >>> 16;
			decodeState.validBits -= 16;
			tmp = z;
		}
	} else {
		var z1 = decodeState.acc & 65535;
		decodeState.acc = decodeState.acc >>> 16;
		decodeState.validBits -= 16;
		tmp = z1;
	}
	r.type = tmp;
	if(r.type > 2) {
		throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "Residue.hx", lineNumber : 29, className : "kha.audio2.ogg.vorbis.data.Residue", methodName : "read"}));
	}
	var this1 = new Array(64);
	var residueCascade = this1;
	var tmp1;
	if(decodeState.validBits < 0) {
		tmp1 = 0;
	} else if(decodeState.validBits < 24) {
		if(decodeState.validBits == 0) {
			decodeState.acc = 0;
		}
		while(true) {
			if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
				decodeState.validBits = -1;
				break;
			} else {
				decodeState.bytesInSeg--;
				decodeState.inputPosition += 1;
				decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
				decodeState.validBits += 8;
			}
			if(!(decodeState.validBits < 24)) {
				break;
			}
		}
		if(decodeState.validBits < 0) {
			tmp1 = 0;
		} else {
			var z2 = decodeState.acc & 16777215;
			decodeState.acc = decodeState.acc >>> 24;
			decodeState.validBits -= 24;
			tmp1 = z2;
		}
	} else {
		var z3 = decodeState.acc & 16777215;
		decodeState.acc = decodeState.acc >>> 24;
		decodeState.validBits -= 24;
		tmp1 = z3;
	}
	r.begin = tmp1;
	var tmp2;
	if(decodeState.validBits < 0) {
		tmp2 = 0;
	} else if(decodeState.validBits < 24) {
		if(decodeState.validBits == 0) {
			decodeState.acc = 0;
		}
		while(true) {
			if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
				decodeState.validBits = -1;
				break;
			} else {
				decodeState.bytesInSeg--;
				decodeState.inputPosition += 1;
				decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
				decodeState.validBits += 8;
			}
			if(!(decodeState.validBits < 24)) {
				break;
			}
		}
		if(decodeState.validBits < 0) {
			tmp2 = 0;
		} else {
			var z4 = decodeState.acc & 16777215;
			decodeState.acc = decodeState.acc >>> 24;
			decodeState.validBits -= 24;
			tmp2 = z4;
		}
	} else {
		var z5 = decodeState.acc & 16777215;
		decodeState.acc = decodeState.acc >>> 24;
		decodeState.validBits -= 24;
		tmp2 = z5;
	}
	r.end = tmp2;
	var tmp3;
	if(decodeState.validBits < 0) {
		tmp3 = 0;
	} else if(decodeState.validBits < 24) {
		if(decodeState.validBits == 0) {
			decodeState.acc = 0;
		}
		while(true) {
			if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
				decodeState.validBits = -1;
				break;
			} else {
				decodeState.bytesInSeg--;
				decodeState.inputPosition += 1;
				decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
				decodeState.validBits += 8;
			}
			if(!(decodeState.validBits < 24)) {
				break;
			}
		}
		if(decodeState.validBits < 0) {
			tmp3 = 0;
		} else {
			var z6 = decodeState.acc & 16777215;
			decodeState.acc = decodeState.acc >>> 24;
			decodeState.validBits -= 24;
			tmp3 = z6;
		}
	} else {
		var z7 = decodeState.acc & 16777215;
		decodeState.acc = decodeState.acc >>> 24;
		decodeState.validBits -= 24;
		tmp3 = z7;
	}
	r.partSize = tmp3 + 1;
	var classifications;
	if(decodeState.validBits < 0) {
		classifications = 0;
	} else if(decodeState.validBits < 6) {
		if(decodeState.validBits == 0) {
			decodeState.acc = 0;
		}
		while(true) {
			if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
				decodeState.validBits = -1;
				break;
			} else {
				decodeState.bytesInSeg--;
				decodeState.inputPosition += 1;
				decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
				decodeState.validBits += 8;
			}
			if(!(decodeState.validBits < 6)) {
				break;
			}
		}
		if(decodeState.validBits < 0) {
			classifications = 0;
		} else {
			var z8 = decodeState.acc & 63;
			decodeState.acc = decodeState.acc >>> 6;
			decodeState.validBits -= 6;
			classifications = z8;
		}
	} else {
		var z9 = decodeState.acc & 63;
		decodeState.acc = decodeState.acc >>> 6;
		decodeState.validBits -= 6;
		classifications = z9;
	}
	var classifications1 = r.classifications = classifications + 1;
	var tmp4;
	if(decodeState.validBits < 0) {
		tmp4 = 0;
	} else if(decodeState.validBits < 8) {
		if(decodeState.validBits == 0) {
			decodeState.acc = 0;
		}
		while(true) {
			if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
				decodeState.validBits = -1;
				break;
			} else {
				decodeState.bytesInSeg--;
				decodeState.inputPosition += 1;
				decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
				decodeState.validBits += 8;
			}
			if(!(decodeState.validBits < 8)) {
				break;
			}
		}
		if(decodeState.validBits < 0) {
			tmp4 = 0;
		} else {
			var z10 = decodeState.acc & 255;
			decodeState.acc = decodeState.acc >>> 8;
			decodeState.validBits -= 8;
			tmp4 = z10;
		}
	} else {
		var z11 = decodeState.acc & 255;
		decodeState.acc = decodeState.acc >>> 8;
		decodeState.validBits -= 8;
		tmp4 = z11;
	}
	r.classbook = tmp4;
	var _g1 = 0;
	var _g = r.classifications;
	while(_g1 < _g) {
		var j = _g1++;
		var highBits = 0;
		var lowBits;
		if(decodeState.validBits < 0) {
			lowBits = 0;
		} else if(decodeState.validBits < 3) {
			if(decodeState.validBits == 0) {
				decodeState.acc = 0;
			}
			while(true) {
				if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
					decodeState.validBits = -1;
					break;
				} else {
					decodeState.bytesInSeg--;
					decodeState.inputPosition += 1;
					decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
					decodeState.validBits += 8;
				}
				if(!(decodeState.validBits < 3)) {
					break;
				}
			}
			if(decodeState.validBits < 0) {
				lowBits = 0;
			} else {
				var z12 = decodeState.acc & 7;
				decodeState.acc = decodeState.acc >>> 3;
				decodeState.validBits -= 3;
				lowBits = z12;
			}
		} else {
			var z13 = decodeState.acc & 7;
			decodeState.acc = decodeState.acc >>> 3;
			decodeState.validBits -= 3;
			lowBits = z13;
		}
		var tmp5;
		if(decodeState.validBits < 0) {
			tmp5 = 0;
		} else if(decodeState.validBits < 1) {
			if(decodeState.validBits == 0) {
				decodeState.acc = 0;
			}
			while(true) {
				if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
					decodeState.validBits = -1;
					break;
				} else {
					decodeState.bytesInSeg--;
					decodeState.inputPosition += 1;
					decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
					decodeState.validBits += 8;
				}
				if(!(decodeState.validBits < 1)) {
					break;
				}
			}
			if(decodeState.validBits < 0) {
				tmp5 = 0;
			} else {
				var z14 = decodeState.acc & 1;
				decodeState.acc = decodeState.acc >>> 1;
				decodeState.validBits -= 1;
				tmp5 = z14;
			}
		} else {
			var z15 = decodeState.acc & 1;
			decodeState.acc = decodeState.acc >>> 1;
			decodeState.validBits -= 1;
			tmp5 = z15;
		}
		if(tmp5 != 0) {
			if(decodeState.validBits < 0) {
				highBits = 0;
			} else if(decodeState.validBits < 5) {
				if(decodeState.validBits == 0) {
					decodeState.acc = 0;
				}
				while(true) {
					if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
						decodeState.validBits = -1;
						break;
					} else {
						decodeState.bytesInSeg--;
						decodeState.inputPosition += 1;
						decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
						decodeState.validBits += 8;
					}
					if(!(decodeState.validBits < 5)) {
						break;
					}
				}
				if(decodeState.validBits < 0) {
					highBits = 0;
				} else {
					var z16 = decodeState.acc & 31;
					decodeState.acc = decodeState.acc >>> 5;
					decodeState.validBits -= 5;
					highBits = z16;
				}
			} else {
				var z17 = decodeState.acc & 31;
				decodeState.acc = decodeState.acc >>> 5;
				decodeState.validBits -= 5;
				highBits = z17;
			}
		}
		residueCascade[j] = highBits * 8 + lowBits;
	}
	var length = r.classifications;
	var this2 = new Array(length);
	r.residueBooks = this2;
	var _g11 = 0;
	var _g2 = r.classifications;
	while(_g11 < _g2) {
		var j1 = _g11++;
		var this3 = r.residueBooks;
		var this4 = new Array(8);
		this3[j1] = this4;
		var _g21 = 0;
		while(_g21 < 8) {
			var k = _g21++;
			if((residueCascade[j1] & 1 << k) != 0) {
				var this5 = r.residueBooks[j1];
				var val;
				if(decodeState.validBits < 0) {
					val = 0;
				} else if(decodeState.validBits < 8) {
					if(decodeState.validBits == 0) {
						decodeState.acc = 0;
					}
					while(true) {
						if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
							decodeState.validBits = -1;
							break;
						} else {
							decodeState.bytesInSeg--;
							decodeState.inputPosition += 1;
							decodeState.acc = decodeState.acc + (decodeState.input.readByte() << decodeState.validBits);
							decodeState.validBits += 8;
						}
						if(!(decodeState.validBits < 8)) {
							break;
						}
					}
					if(decodeState.validBits < 0) {
						val = 0;
					} else {
						var z18 = decodeState.acc & 255;
						decodeState.acc = decodeState.acc >>> 8;
						decodeState.validBits -= 8;
						val = z18;
					}
				} else {
					var z19 = decodeState.acc & 255;
					decodeState.acc = decodeState.acc >>> 8;
					decodeState.validBits -= 8;
					val = z19;
				}
				this5[k] = val;
				if(r.residueBooks[j1][k] >= codebooks.length) {
					throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "Residue.hx", lineNumber : 55, className : "kha.audio2.ogg.vorbis.data.Residue", methodName : "read"}));
				}
			} else {
				r.residueBooks[j1][k] = -1;
			}
		}
	}
	var el = codebooks[r.classbook].entries;
	var classwords = codebooks[r.classbook].dimensions;
	var this6 = new Array(el);
	r.classdata = this6;
	var _g12 = 0;
	var _g3 = el;
	while(_g12 < _g3) {
		var j2 = _g12++;
		var temp = j2;
		var k1 = classwords;
		var this7 = r.classdata;
		var this8 = new Array(classwords);
		var cd = this7[j2] = this8;
		while(--k1 >= 0) {
			cd[k1] = temp % classifications1;
			temp = temp / classifications1 | 0;
		}
	}
	return r;
};
kha_audio2_ogg_vorbis_data_Residue.prototype = {
	begin: null
	,end: null
	,partSize: null
	,classifications: null
	,classbook: null
	,classdata: null
	,residueBooks: null
	,type: null
	,decode: function(decodeState,header,residueBuffers,ch,n,doNotDecode,channelBuffers) {
		var codebooks = header.codebooks;
		var classwords = codebooks[this.classbook].dimensions;
		var nRead = this.end - this.begin;
		var partSize = this.partSize;
		var partRead = _$UInt_UInt_$Impl_$.toFloat(nRead) / _$UInt_UInt_$Impl_$.toFloat(partSize) | 0;
		var length = header.channel * partRead + 1;
		var this1 = new Array(length);
		var classifications = this1;
		var _g1 = 0;
		var _g = ch;
		while(_g1 < _g) {
			var i = _g1++;
			if(!doNotDecode[i]) {
				var buffer = residueBuffers[i];
				var _g3 = 0;
				var _g2 = buffer.length;
				while(_g3 < _g2) {
					var j = _g3++;
					buffer[j] = 0;
				}
			}
		}
		if(this.type == 2 && ch != 1) {
			var _g11 = 0;
			var _g4 = ch;
			while(_g11 < _g4) {
				var j1 = _g11++;
				if(!doNotDecode[j1]) {
					break;
				} else if(j1 == ch - 1) {
					return;
				}
			}
			var _g5 = 0;
			while(_g5 < 8) {
				var pass = _g5++;
				var pcount = 0;
				var classSet = 0;
				if(ch == 2) {
					while(pcount < partRead) {
						var z = this.begin + pcount * partSize;
						var cInter = z & 1;
						var pInter = z >>> 1;
						if(pass == 0) {
							var c = codebooks[this.classbook];
							if(decodeState.validBits < 10) {
								decodeState.prepHuffman();
							}
							var i1 = c.fastHuffman[decodeState.acc & 1023];
							var val;
							if(i1 >= 0) {
								var l = c.codewordLengths[i1];
								decodeState.acc = decodeState.acc >>> l;
								decodeState.validBits -= l;
								if(decodeState.validBits < 0) {
									decodeState.validBits = 0;
									val = -1;
								} else {
									val = i1;
								}
							} else {
								val = decodeState.decodeScalarRaw(c);
							}
							if(c.sparse) {
								val = c.sortedValues[val];
							}
							var q = val;
							if(q == -1) {
								return;
							}
							var i2 = classwords;
							while(--i2 >= 0) {
								classifications[i2 + pcount] = q % this.classifications;
								q = q / this.classifications | 0;
							}
						}
						var _g21 = 0;
						var _g12 = classwords;
						while(_g21 < _g12) {
							var i3 = _g21++;
							if(pcount >= partRead) {
								break;
							}
							var z1 = this.begin + pcount * partSize;
							var c1 = classifications[pcount];
							var b = this.residueBooks[c1][pass];
							if(b >= 0) {
								var book = codebooks[b];
								var result = book.decodeDeinterleaveRepeat(decodeState,residueBuffers,ch,cInter,pInter,n,partSize);
								if(result == null) {
									return;
								} else {
									cInter = result.cInter;
									pInter = result.pInter;
								}
							} else {
								z1 = z1 + partSize;
								cInter = z1 & 1;
								pInter = z1 >>> 1;
							}
							++pcount;
						}
					}
				} else if(ch == 1) {
					while(pcount < partRead) {
						var z2 = this.begin + pcount * partSize;
						var cInter1 = 0;
						var pInter1 = z2;
						if(pass == 0) {
							var c2 = codebooks[this.classbook];
							if(decodeState.validBits < 10) {
								decodeState.prepHuffman();
							}
							var i4 = c2.fastHuffman[decodeState.acc & 1023];
							var val1;
							if(i4 >= 0) {
								var l1 = c2.codewordLengths[i4];
								decodeState.acc = decodeState.acc >>> l1;
								decodeState.validBits -= l1;
								if(decodeState.validBits < 0) {
									decodeState.validBits = 0;
									val1 = -1;
								} else {
									val1 = i4;
								}
							} else {
								val1 = decodeState.decodeScalarRaw(c2);
							}
							if(c2.sparse) {
								val1 = c2.sortedValues[val1];
							}
							var q1 = val1;
							if(q1 == -1) {
								return;
							}
							var i5 = classwords;
							while(--i5 >= 0) {
								classifications[i5 + pcount] = q1 % this.classifications;
								q1 = q1 / this.classifications | 0;
							}
						}
						var _g22 = 0;
						var _g13 = classwords;
						while(_g22 < _g13) {
							var i6 = _g22++;
							if(pcount >= partRead) {
								break;
							}
							var z3 = this.begin + pcount * partSize;
							var b1 = this.residueBooks[classifications[pcount]][pass];
							if(b1 >= 0) {
								var book1 = codebooks[b1];
								var result1 = book1.decodeDeinterleaveRepeat(decodeState,residueBuffers,ch,cInter1,pInter1,n,partSize);
								if(result1 == null) {
									return;
								} else {
									cInter1 = result1.cInter;
									pInter1 = result1.pInter;
								}
							} else {
								z3 = z3 + partSize;
								cInter1 = 0;
								pInter1 = z3;
							}
							++pcount;
						}
					}
				} else {
					while(pcount < partRead) {
						var z4 = this.begin + pcount * partSize;
						var cInter2 = _$UInt_UInt_$Impl_$.toFloat(z4) % _$UInt_UInt_$Impl_$.toFloat(ch) | 0;
						var pInter2 = _$UInt_UInt_$Impl_$.toFloat(z4) / _$UInt_UInt_$Impl_$.toFloat(ch) | 0;
						if(pass == 0) {
							var c3 = codebooks[this.classbook];
							if(decodeState.validBits < 10) {
								decodeState.prepHuffman();
							}
							var i7 = c3.fastHuffman[decodeState.acc & 1023];
							var val2;
							if(i7 >= 0) {
								var l2 = c3.codewordLengths[i7];
								decodeState.acc = decodeState.acc >>> l2;
								decodeState.validBits -= l2;
								if(decodeState.validBits < 0) {
									decodeState.validBits = 0;
									val2 = -1;
								} else {
									val2 = i7;
								}
							} else {
								val2 = decodeState.decodeScalarRaw(c3);
							}
							if(c3.sparse) {
								val2 = c3.sortedValues[val2];
							}
							var q2 = val2;
							if(q2 == -1) {
								return;
							}
							var i8 = classwords;
							while(--i8 >= 0) {
								classifications[i8 + pcount] = q2 % this.classifications;
								q2 = q2 / this.classifications | 0;
							}
						}
						var _g23 = 0;
						var _g14 = classwords;
						while(_g23 < _g14) {
							var i9 = _g23++;
							if(pcount >= partRead) {
								break;
							}
							var z5 = this.begin + pcount * partSize;
							var b2 = this.residueBooks[classifications[pcount]][pass];
							if(b2 >= 0) {
								var book2 = codebooks[b2];
								var result2 = book2.decodeDeinterleaveRepeat(decodeState,residueBuffers,ch,cInter2,pInter2,n,partSize);
								if(result2 == null) {
									return;
								} else {
									cInter2 = result2.cInter;
									pInter2 = result2.pInter;
								}
							} else {
								z5 = z5 + partSize;
								cInter2 = _$UInt_UInt_$Impl_$.toFloat(z5) % _$UInt_UInt_$Impl_$.toFloat(ch) | 0;
								pInter2 = _$UInt_UInt_$Impl_$.toFloat(z5) / _$UInt_UInt_$Impl_$.toFloat(ch) | 0;
							}
							++pcount;
						}
					}
				}
			}
			return;
		}
		var _g6 = 0;
		while(_g6 < 8) {
			var pass1 = _g6++;
			var pcount1 = 0;
			var classSet1 = 0;
			while(pcount1 < partRead) {
				if(pass1 == 0) {
					var _g24 = 0;
					var _g15 = ch;
					while(_g24 < _g15) {
						var j2 = _g24++;
						if(!doNotDecode[j2]) {
							var c4 = codebooks[this.classbook];
							if(decodeState.validBits < 10) {
								decodeState.prepHuffman();
							}
							var i10 = c4.fastHuffman[decodeState.acc & 1023];
							var val3;
							if(i10 >= 0) {
								var l3 = c4.codewordLengths[i10];
								decodeState.acc = decodeState.acc >>> l3;
								decodeState.validBits -= l3;
								if(decodeState.validBits < 0) {
									decodeState.validBits = 0;
									val3 = -1;
								} else {
									val3 = i10;
								}
							} else {
								val3 = decodeState.decodeScalarRaw(c4);
							}
							if(c4.sparse) {
								val3 = c4.sortedValues[val3];
							}
							var temp = val3;
							if(temp == -1) {
								return;
							}
							var i11 = classwords;
							while(--i11 >= 0) {
								classifications[j2 * partRead + i11 + pcount1] = temp % this.classifications;
								temp = temp / this.classifications | 0;
							}
						}
					}
				}
				var _g25 = 0;
				var _g16 = classwords;
				while(_g25 < _g16) {
					var i12 = _g25++;
					if(pcount1 >= partRead) {
						break;
					}
					var _g41 = 0;
					var _g31 = ch;
					while(_g41 < _g31) {
						var j3 = _g41++;
						if(!doNotDecode[j3]) {
							var c5 = classifications[j3 * partRead + pcount1];
							var b3 = this.residueBooks[c5][pass1];
							if(b3 >= 0) {
								var target = residueBuffers[j3];
								var offset = this.begin + pcount1 * partSize;
								var n1 = partSize;
								var book3 = codebooks[b3];
								if(!book3.residueDecode(decodeState,target,offset,n1,this.type)) {
									return;
								}
							}
						}
					}
					++pcount1;
				}
			}
		}
	}
	,__class__: kha_audio2_ogg_vorbis_data_Residue
};
var kha_audio2_ogg_vorbis_data_Setting = function() { };
$hxClasses["kha.audio2.ogg.vorbis.data.Setting"] = kha_audio2_ogg_vorbis_data_Setting;
kha_audio2_ogg_vorbis_data_Setting.__name__ = true;
var kha_graphics1_Graphics = function() { };
$hxClasses["kha.graphics1.Graphics"] = kha_graphics1_Graphics;
kha_graphics1_Graphics.__name__ = true;
kha_graphics1_Graphics.prototype = {
	begin: null
	,end: null
	,setPixel: null
	,__class__: kha_graphics1_Graphics
};
var kha_graphics2_Graphics = function() {
	this.transformations = [];
	this.transformations.push(new kha_math_FastMatrix3(1,0,0,0,1,0,0,0,1));
	this.opacities = [];
	this.opacities.push(1);
	this.myFontSize = 12;
	this.myFontGlyphs = [];
	var _g = 32;
	while(_g < 256) {
		var i = _g++;
		this.myFontGlyphs.push(i);
	}
	this.pipe = null;
};
$hxClasses["kha.graphics2.Graphics"] = kha_graphics2_Graphics;
kha_graphics2_Graphics.__name__ = true;
kha_graphics2_Graphics.prototype = {
	begin: function(clear,clearColor) {
		if(clear == null) {
			clear = true;
		}
	}
	,end: function() {
	}
	,flush: function() {
	}
	,clear: function(color) {
	}
	,drawImage: function(img,x,y) {
		this.drawSubImage(img,x,y,0,0,img.get_width(),img.get_height());
	}
	,drawSubImage: function(img,x,y,sx,sy,sw,sh) {
		this.drawScaledSubImage(img,sx,sy,sw,sh,x,y,sw,sh);
	}
	,drawScaledImage: function(img,dx,dy,dw,dh) {
		this.drawScaledSubImage(img,0,0,img.get_width(),img.get_height(),dx,dy,dw,dh);
	}
	,drawScaledSubImage: function(image,sx,sy,sw,sh,dx,dy,dw,dh) {
	}
	,drawRect: function(x,y,width,height,strength) {
		if(strength == null) {
			strength = 1.0;
		}
	}
	,fillRect: function(x,y,width,height) {
	}
	,drawString: function(text,x,y) {
	}
	,drawCharacters: function(text,start,length,x,y) {
	}
	,drawLine: function(x1,y1,x2,y2,strength) {
		if(strength == null) {
			strength = 1.0;
		}
	}
	,drawVideo: function(video,x,y,width,height) {
	}
	,fillTriangle: function(x1,y1,x2,y2,x3,y3) {
	}
	,get_imageScaleQuality: function() {
		return kha_graphics2_ImageScaleQuality.Low;
	}
	,set_imageScaleQuality: function(value) {
		return kha_graphics2_ImageScaleQuality.High;
	}
	,get_mipmapScaleQuality: function() {
		return kha_graphics2_ImageScaleQuality.Low;
	}
	,set_mipmapScaleQuality: function(value) {
		return kha_graphics2_ImageScaleQuality.High;
	}
	,get_color: function() {
		return -16777216;
	}
	,set_color: function(color) {
		return -16777216;
	}
	,get_font: function() {
		return null;
	}
	,set_font: function(font) {
		return null;
	}
	,get_fontSize: function() {
		return this.myFontSize;
	}
	,set_fontSize: function(value) {
		return this.myFontSize = value;
	}
	,get_fontGlyphs: function() {
		return this.myFontGlyphs;
	}
	,set_fontGlyphs: function(value) {
		return this.myFontGlyphs = value;
	}
	,pushTransformation: function(transformation) {
		var trans = new kha_math_FastMatrix3(1,0,0,0,1,0,0,0,1);
		trans._00 = transformation._00;
		trans._10 = transformation._10;
		trans._20 = transformation._20;
		trans._01 = transformation._01;
		trans._11 = transformation._11;
		trans._21 = transformation._21;
		trans._02 = transformation._02;
		trans._12 = transformation._12;
		trans._22 = transformation._22;
		this.setTransformation(trans);
		this.transformations.push(trans);
	}
	,popTransformation: function() {
		var ret = this.transformations.pop();
		this.setTransformation(this.transformations[this.transformations.length - 1]);
		return ret;
	}
	,get_transformation: function() {
		return this.transformations[this.transformations.length - 1];
	}
	,set_transformation: function(transformation) {
		this.setTransformation(transformation);
		var _this = this.transformations[this.transformations.length - 1];
		_this._00 = transformation._00;
		_this._10 = transformation._10;
		_this._20 = transformation._20;
		_this._01 = transformation._01;
		_this._11 = transformation._11;
		_this._21 = transformation._21;
		_this._02 = transformation._02;
		_this._12 = transformation._12;
		_this._22 = transformation._22;
		return transformation;
	}
	,translation: function(tx,ty) {
		var _this__22;
		var _this__21;
		var _this__20;
		var _this__12;
		var _this__11;
		var _this__10;
		var _this__02;
		var _this__01;
		var _this__00 = 1;
		_this__10 = 0;
		_this__20 = tx;
		_this__01 = 0;
		_this__11 = 1;
		_this__21 = ty;
		_this__02 = 0;
		_this__12 = 0;
		_this__22 = 1;
		var m = this.transformations[this.transformations.length - 1];
		return new kha_math_FastMatrix3(_this__00 * m._00 + _this__10 * m._01 + _this__20 * m._02,_this__00 * m._10 + _this__10 * m._11 + _this__20 * m._12,_this__00 * m._20 + _this__10 * m._21 + _this__20 * m._22,_this__01 * m._00 + _this__11 * m._01 + _this__21 * m._02,_this__01 * m._10 + _this__11 * m._11 + _this__21 * m._12,_this__01 * m._20 + _this__11 * m._21 + _this__21 * m._22,_this__02 * m._00 + _this__12 * m._01 + _this__22 * m._02,_this__02 * m._10 + _this__12 * m._11 + _this__22 * m._12,_this__02 * m._20 + _this__12 * m._21 + _this__22 * m._22);
	}
	,translate: function(tx,ty) {
		var _this__22;
		var _this__21;
		var _this__20;
		var _this__12;
		var _this__11;
		var _this__10;
		var _this__02;
		var _this__01;
		var _this__00 = 1;
		_this__10 = 0;
		_this__20 = tx;
		_this__01 = 0;
		_this__11 = 1;
		_this__21 = ty;
		_this__02 = 0;
		_this__12 = 0;
		_this__22 = 1;
		var m = this.transformations[this.transformations.length - 1];
		var transformation = new kha_math_FastMatrix3(_this__00 * m._00 + _this__10 * m._01 + _this__20 * m._02,_this__00 * m._10 + _this__10 * m._11 + _this__20 * m._12,_this__00 * m._20 + _this__10 * m._21 + _this__20 * m._22,_this__01 * m._00 + _this__11 * m._01 + _this__21 * m._02,_this__01 * m._10 + _this__11 * m._11 + _this__21 * m._12,_this__01 * m._20 + _this__11 * m._21 + _this__21 * m._22,_this__02 * m._00 + _this__12 * m._01 + _this__22 * m._02,_this__02 * m._10 + _this__12 * m._11 + _this__22 * m._12,_this__02 * m._20 + _this__12 * m._21 + _this__22 * m._22);
		this.setTransformation(transformation);
		var _this = this.transformations[this.transformations.length - 1];
		_this._00 = transformation._00;
		_this._10 = transformation._10;
		_this._20 = transformation._20;
		_this._01 = transformation._01;
		_this._11 = transformation._11;
		_this._21 = transformation._21;
		_this._02 = transformation._02;
		_this._12 = transformation._12;
		_this._22 = transformation._22;
	}
	,pushTranslation: function(tx,ty) {
		var _this__22;
		var _this__21;
		var _this__20;
		var _this__12;
		var _this__11;
		var _this__10;
		var _this__02;
		var _this__01;
		var _this__00 = 1;
		_this__10 = 0;
		_this__20 = tx;
		_this__01 = 0;
		_this__11 = 1;
		_this__21 = ty;
		_this__02 = 0;
		_this__12 = 0;
		_this__22 = 1;
		var m = this.transformations[this.transformations.length - 1];
		this.pushTransformation(new kha_math_FastMatrix3(_this__00 * m._00 + _this__10 * m._01 + _this__20 * m._02,_this__00 * m._10 + _this__10 * m._11 + _this__20 * m._12,_this__00 * m._20 + _this__10 * m._21 + _this__20 * m._22,_this__01 * m._00 + _this__11 * m._01 + _this__21 * m._02,_this__01 * m._10 + _this__11 * m._11 + _this__21 * m._12,_this__01 * m._20 + _this__11 * m._21 + _this__21 * m._22,_this__02 * m._00 + _this__12 * m._01 + _this__22 * m._02,_this__02 * m._10 + _this__12 * m._11 + _this__22 * m._12,_this__02 * m._20 + _this__12 * m._21 + _this__22 * m._22));
	}
	,rotation: function(angle,centerx,centery) {
		var _this__22;
		var _this__21;
		var _this__20;
		var _this__12;
		var _this__11;
		var _this__10;
		var _this__02;
		var _this__01;
		var _this__00;
		var _this__221;
		var _this__211;
		var _this__201;
		var _this__121;
		var _this__111;
		var _this__101;
		var _this__021;
		var _this__011;
		var _this__001;
		var _this__222;
		var _this__212;
		var _this__202;
		var _this__122;
		var _this__112;
		var _this__102;
		var _this__022;
		var _this__012;
		var _this__002 = 1;
		_this__102 = 0;
		_this__202 = centerx;
		_this__012 = 0;
		_this__112 = 1;
		_this__212 = centery;
		_this__022 = 0;
		_this__122 = 0;
		_this__222 = 1;
		var m__22;
		var m__21;
		var m__20;
		var m__12;
		var m__11;
		var m__10;
		var m__02;
		var m__01;
		var m__00 = Math.cos(angle);
		m__10 = -Math.sin(angle);
		m__20 = 0;
		m__01 = Math.sin(angle);
		m__11 = Math.cos(angle);
		m__21 = 0;
		m__02 = 0;
		m__12 = 0;
		m__22 = 1;
		_this__001 = _this__002 * m__00 + _this__102 * m__01 + _this__202 * m__02;
		_this__101 = _this__002 * m__10 + _this__102 * m__11 + _this__202 * m__12;
		_this__201 = _this__002 * m__20 + _this__102 * m__21 + _this__202 * m__22;
		_this__011 = _this__012 * m__00 + _this__112 * m__01 + _this__212 * m__02;
		_this__111 = _this__012 * m__10 + _this__112 * m__11 + _this__212 * m__12;
		_this__211 = _this__012 * m__20 + _this__112 * m__21 + _this__212 * m__22;
		_this__021 = _this__022 * m__00 + _this__122 * m__01 + _this__222 * m__02;
		_this__121 = _this__022 * m__10 + _this__122 * m__11 + _this__222 * m__12;
		_this__221 = _this__022 * m__20 + _this__122 * m__21 + _this__222 * m__22;
		var m__221;
		var m__211;
		var m__201;
		var m__121;
		var m__111;
		var m__101;
		var m__021;
		var m__011;
		var m__001 = 1;
		m__101 = 0;
		m__201 = -centerx;
		m__011 = 0;
		m__111 = 1;
		m__211 = -centery;
		m__021 = 0;
		m__121 = 0;
		m__221 = 1;
		_this__00 = _this__001 * m__001 + _this__101 * m__011 + _this__201 * m__021;
		_this__10 = _this__001 * m__101 + _this__101 * m__111 + _this__201 * m__121;
		_this__20 = _this__001 * m__201 + _this__101 * m__211 + _this__201 * m__221;
		_this__01 = _this__011 * m__001 + _this__111 * m__011 + _this__211 * m__021;
		_this__11 = _this__011 * m__101 + _this__111 * m__111 + _this__211 * m__121;
		_this__21 = _this__011 * m__201 + _this__111 * m__211 + _this__211 * m__221;
		_this__02 = _this__021 * m__001 + _this__121 * m__011 + _this__221 * m__021;
		_this__12 = _this__021 * m__101 + _this__121 * m__111 + _this__221 * m__121;
		_this__22 = _this__021 * m__201 + _this__121 * m__211 + _this__221 * m__221;
		var m = this.transformations[this.transformations.length - 1];
		return new kha_math_FastMatrix3(_this__00 * m._00 + _this__10 * m._01 + _this__20 * m._02,_this__00 * m._10 + _this__10 * m._11 + _this__20 * m._12,_this__00 * m._20 + _this__10 * m._21 + _this__20 * m._22,_this__01 * m._00 + _this__11 * m._01 + _this__21 * m._02,_this__01 * m._10 + _this__11 * m._11 + _this__21 * m._12,_this__01 * m._20 + _this__11 * m._21 + _this__21 * m._22,_this__02 * m._00 + _this__12 * m._01 + _this__22 * m._02,_this__02 * m._10 + _this__12 * m._11 + _this__22 * m._12,_this__02 * m._20 + _this__12 * m._21 + _this__22 * m._22);
	}
	,rotate: function(angle,centerx,centery) {
		var temp__22;
		var temp__21;
		var temp__20;
		var temp__12;
		var temp__11;
		var temp__10;
		var temp__02;
		var temp__01;
		var temp__00;
		var _this__22;
		var _this__21;
		var _this__20;
		var _this__12;
		var _this__11;
		var _this__10;
		var _this__02;
		var _this__01;
		var _this__00;
		var _this__221;
		var _this__211;
		var _this__201;
		var _this__121;
		var _this__111;
		var _this__101;
		var _this__021;
		var _this__011;
		var _this__001;
		var _this__222;
		var _this__212;
		var _this__202;
		var _this__122;
		var _this__112;
		var _this__102;
		var _this__022;
		var _this__012;
		var _this__002 = 1;
		_this__102 = 0;
		_this__202 = centerx;
		_this__012 = 0;
		_this__112 = 1;
		_this__212 = centery;
		_this__022 = 0;
		_this__122 = 0;
		_this__222 = 1;
		var m__22;
		var m__21;
		var m__20;
		var m__12;
		var m__11;
		var m__10;
		var m__02;
		var m__01;
		var m__00 = Math.cos(angle);
		m__10 = -Math.sin(angle);
		m__20 = 0;
		m__01 = Math.sin(angle);
		m__11 = Math.cos(angle);
		m__21 = 0;
		m__02 = 0;
		m__12 = 0;
		m__22 = 1;
		_this__001 = _this__002 * m__00 + _this__102 * m__01 + _this__202 * m__02;
		_this__101 = _this__002 * m__10 + _this__102 * m__11 + _this__202 * m__12;
		_this__201 = _this__002 * m__20 + _this__102 * m__21 + _this__202 * m__22;
		_this__011 = _this__012 * m__00 + _this__112 * m__01 + _this__212 * m__02;
		_this__111 = _this__012 * m__10 + _this__112 * m__11 + _this__212 * m__12;
		_this__211 = _this__012 * m__20 + _this__112 * m__21 + _this__212 * m__22;
		_this__021 = _this__022 * m__00 + _this__122 * m__01 + _this__222 * m__02;
		_this__121 = _this__022 * m__10 + _this__122 * m__11 + _this__222 * m__12;
		_this__221 = _this__022 * m__20 + _this__122 * m__21 + _this__222 * m__22;
		var m__221;
		var m__211;
		var m__201;
		var m__121;
		var m__111;
		var m__101;
		var m__021;
		var m__011;
		var m__001 = 1;
		m__101 = 0;
		m__201 = -centerx;
		m__011 = 0;
		m__111 = 1;
		m__211 = -centery;
		m__021 = 0;
		m__121 = 0;
		m__221 = 1;
		_this__00 = _this__001 * m__001 + _this__101 * m__011 + _this__201 * m__021;
		_this__10 = _this__001 * m__101 + _this__101 * m__111 + _this__201 * m__121;
		_this__20 = _this__001 * m__201 + _this__101 * m__211 + _this__201 * m__221;
		_this__01 = _this__011 * m__001 + _this__111 * m__011 + _this__211 * m__021;
		_this__11 = _this__011 * m__101 + _this__111 * m__111 + _this__211 * m__121;
		_this__21 = _this__011 * m__201 + _this__111 * m__211 + _this__211 * m__221;
		_this__02 = _this__021 * m__001 + _this__121 * m__011 + _this__221 * m__021;
		_this__12 = _this__021 * m__101 + _this__121 * m__111 + _this__221 * m__121;
		_this__22 = _this__021 * m__201 + _this__121 * m__211 + _this__221 * m__221;
		var m = this.transformations[this.transformations.length - 1];
		temp__00 = _this__00 * m._00 + _this__10 * m._01 + _this__20 * m._02;
		temp__10 = _this__00 * m._10 + _this__10 * m._11 + _this__20 * m._12;
		temp__20 = _this__00 * m._20 + _this__10 * m._21 + _this__20 * m._22;
		temp__01 = _this__01 * m._00 + _this__11 * m._01 + _this__21 * m._02;
		temp__11 = _this__01 * m._10 + _this__11 * m._11 + _this__21 * m._12;
		temp__21 = _this__01 * m._20 + _this__11 * m._21 + _this__21 * m._22;
		temp__02 = _this__02 * m._00 + _this__12 * m._01 + _this__22 * m._02;
		temp__12 = _this__02 * m._10 + _this__12 * m._11 + _this__22 * m._12;
		temp__22 = _this__02 * m._20 + _this__12 * m._21 + _this__22 * m._22;
		this.transformations[this.transformations.length - 1]._00 = temp__00;
		this.transformations[this.transformations.length - 1]._01 = temp__01;
		this.transformations[this.transformations.length - 1]._02 = temp__02;
		this.transformations[this.transformations.length - 1]._10 = temp__10;
		this.transformations[this.transformations.length - 1]._11 = temp__11;
		this.transformations[this.transformations.length - 1]._12 = temp__12;
		this.transformations[this.transformations.length - 1]._20 = temp__20;
		this.transformations[this.transformations.length - 1]._21 = temp__21;
		this.transformations[this.transformations.length - 1]._22 = temp__22;
	}
	,pushRotation: function(angle,centerx,centery) {
		var _this__22;
		var _this__21;
		var _this__20;
		var _this__12;
		var _this__11;
		var _this__10;
		var _this__02;
		var _this__01;
		var _this__00;
		var _this__221;
		var _this__211;
		var _this__201;
		var _this__121;
		var _this__111;
		var _this__101;
		var _this__021;
		var _this__011;
		var _this__001;
		var _this__222;
		var _this__212;
		var _this__202;
		var _this__122;
		var _this__112;
		var _this__102;
		var _this__022;
		var _this__012;
		var _this__002 = 1;
		_this__102 = 0;
		_this__202 = centerx;
		_this__012 = 0;
		_this__112 = 1;
		_this__212 = centery;
		_this__022 = 0;
		_this__122 = 0;
		_this__222 = 1;
		var m__22;
		var m__21;
		var m__20;
		var m__12;
		var m__11;
		var m__10;
		var m__02;
		var m__01;
		var m__00 = Math.cos(angle);
		m__10 = -Math.sin(angle);
		m__20 = 0;
		m__01 = Math.sin(angle);
		m__11 = Math.cos(angle);
		m__21 = 0;
		m__02 = 0;
		m__12 = 0;
		m__22 = 1;
		_this__001 = _this__002 * m__00 + _this__102 * m__01 + _this__202 * m__02;
		_this__101 = _this__002 * m__10 + _this__102 * m__11 + _this__202 * m__12;
		_this__201 = _this__002 * m__20 + _this__102 * m__21 + _this__202 * m__22;
		_this__011 = _this__012 * m__00 + _this__112 * m__01 + _this__212 * m__02;
		_this__111 = _this__012 * m__10 + _this__112 * m__11 + _this__212 * m__12;
		_this__211 = _this__012 * m__20 + _this__112 * m__21 + _this__212 * m__22;
		_this__021 = _this__022 * m__00 + _this__122 * m__01 + _this__222 * m__02;
		_this__121 = _this__022 * m__10 + _this__122 * m__11 + _this__222 * m__12;
		_this__221 = _this__022 * m__20 + _this__122 * m__21 + _this__222 * m__22;
		var m__221;
		var m__211;
		var m__201;
		var m__121;
		var m__111;
		var m__101;
		var m__021;
		var m__011;
		var m__001 = 1;
		m__101 = 0;
		m__201 = -centerx;
		m__011 = 0;
		m__111 = 1;
		m__211 = -centery;
		m__021 = 0;
		m__121 = 0;
		m__221 = 1;
		_this__00 = _this__001 * m__001 + _this__101 * m__011 + _this__201 * m__021;
		_this__10 = _this__001 * m__101 + _this__101 * m__111 + _this__201 * m__121;
		_this__20 = _this__001 * m__201 + _this__101 * m__211 + _this__201 * m__221;
		_this__01 = _this__011 * m__001 + _this__111 * m__011 + _this__211 * m__021;
		_this__11 = _this__011 * m__101 + _this__111 * m__111 + _this__211 * m__121;
		_this__21 = _this__011 * m__201 + _this__111 * m__211 + _this__211 * m__221;
		_this__02 = _this__021 * m__001 + _this__121 * m__011 + _this__221 * m__021;
		_this__12 = _this__021 * m__101 + _this__121 * m__111 + _this__221 * m__121;
		_this__22 = _this__021 * m__201 + _this__121 * m__211 + _this__221 * m__221;
		var m = this.transformations[this.transformations.length - 1];
		this.pushTransformation(new kha_math_FastMatrix3(_this__00 * m._00 + _this__10 * m._01 + _this__20 * m._02,_this__00 * m._10 + _this__10 * m._11 + _this__20 * m._12,_this__00 * m._20 + _this__10 * m._21 + _this__20 * m._22,_this__01 * m._00 + _this__11 * m._01 + _this__21 * m._02,_this__01 * m._10 + _this__11 * m._11 + _this__21 * m._12,_this__01 * m._20 + _this__11 * m._21 + _this__21 * m._22,_this__02 * m._00 + _this__12 * m._01 + _this__22 * m._02,_this__02 * m._10 + _this__12 * m._11 + _this__22 * m._12,_this__02 * m._20 + _this__12 * m._21 + _this__22 * m._22));
	}
	,pushOpacity: function(opacity) {
		this.setOpacity(opacity);
		this.opacities.push(opacity);
	}
	,popOpacity: function() {
		var ret = this.opacities.pop();
		this.setOpacity(this.get_opacity());
		return ret;
	}
	,get_opacity: function() {
		return this.opacities[this.opacities.length - 1];
	}
	,set_opacity: function(opacity) {
		this.setOpacity(opacity);
		return this.opacities[this.opacities.length - 1] = opacity;
	}
	,scissor: function(x,y,width,height) {
	}
	,disableScissor: function() {
	}
	,pipe: null
	,get_pipeline: function() {
		return this.pipe;
	}
	,set_pipeline: function(pipeline) {
		this.setPipeline(pipeline);
		return this.pipe = pipeline;
	}
	,transformations: null
	,opacities: null
	,myFontSize: null
	,myFontGlyphs: null
	,setTransformation: function(transformation) {
	}
	,setOpacity: function(opacity) {
	}
	,setPipeline: function(pipeline) {
	}
	,__class__: kha_graphics2_Graphics
};
var kha_graphics2_Graphics1 = function(canvas) {
	this.canvas = canvas;
};
$hxClasses["kha.graphics2.Graphics1"] = kha_graphics2_Graphics1;
kha_graphics2_Graphics1.__name__ = true;
kha_graphics2_Graphics1.__interfaces__ = [kha_graphics1_Graphics];
kha_graphics2_Graphics1.prototype = {
	canvas: null
	,texture: null
	,pixels: null
	,begin: function() {
		if(this.texture == null) {
			this.texture = kha_Image.create(this.canvas.get_width(),this.canvas.get_height(),kha_graphics4_TextureFormat.RGBA32,kha_graphics4_Usage.ReadableUsage);
		}
		this.pixels = this.texture.lock();
	}
	,end: function() {
		this.texture.unlock();
		this.canvas.get_g2().begin();
		this.canvas.get_g2().drawImage(this.texture,0,0);
		this.canvas.get_g2().end();
	}
	,setPixel: function(x,y,color) {
		this.pixels.setInt32(y * this.texture.get_realWidth() * 4 + x * 4,kha__$Color_Color_$Impl_$.fromBytes(color & 255,(color & 65280) >>> 8,(color & 16711680) >>> 16,color >>> 24));
	}
	,__class__: kha_graphics2_Graphics1
};
var kha_graphics2_ImageScaleQuality = $hxClasses["kha.graphics2.ImageScaleQuality"] = { __ename__ : true, __constructs__ : ["Low","High"] };
kha_graphics2_ImageScaleQuality.Low = ["Low",0];
kha_graphics2_ImageScaleQuality.Low.toString = $estr;
kha_graphics2_ImageScaleQuality.Low.__enum__ = kha_graphics2_ImageScaleQuality;
kha_graphics2_ImageScaleQuality.High = ["High",1];
kha_graphics2_ImageScaleQuality.High.toString = $estr;
kha_graphics2_ImageScaleQuality.High.__enum__ = kha_graphics2_ImageScaleQuality;
var kha_graphics2_truetype_VectorOfIntPointer = function() {
};
$hxClasses["kha.graphics2.truetype.VectorOfIntPointer"] = kha_graphics2_truetype_VectorOfIntPointer;
kha_graphics2_truetype_VectorOfIntPointer.__name__ = true;
kha_graphics2_truetype_VectorOfIntPointer.prototype = {
	value: null
	,__class__: kha_graphics2_truetype_VectorOfIntPointer
};
var kha_graphics2_truetype_Stbtt_$temp_$rect = function() {
};
$hxClasses["kha.graphics2.truetype.Stbtt_temp_rect"] = kha_graphics2_truetype_Stbtt_$temp_$rect;
kha_graphics2_truetype_Stbtt_$temp_$rect.__name__ = true;
kha_graphics2_truetype_Stbtt_$temp_$rect.prototype = {
	x0: null
	,y0: null
	,x1: null
	,y1: null
	,__class__: kha_graphics2_truetype_Stbtt_$temp_$rect
};
var kha_graphics2_truetype_Stbtt_$temp_$glyph_$h_$metrics = function() {
};
$hxClasses["kha.graphics2.truetype.Stbtt_temp_glyph_h_metrics"] = kha_graphics2_truetype_Stbtt_$temp_$glyph_$h_$metrics;
kha_graphics2_truetype_Stbtt_$temp_$glyph_$h_$metrics.__name__ = true;
kha_graphics2_truetype_Stbtt_$temp_$glyph_$h_$metrics.prototype = {
	advanceWidth: null
	,leftSideBearing: null
	,__class__: kha_graphics2_truetype_Stbtt_$temp_$glyph_$h_$metrics
};
var kha_graphics2_truetype_Stbtt_$temp_$font_$v_$metrics = function() {
};
$hxClasses["kha.graphics2.truetype.Stbtt_temp_font_v_metrics"] = kha_graphics2_truetype_Stbtt_$temp_$font_$v_$metrics;
kha_graphics2_truetype_Stbtt_$temp_$font_$v_$metrics.__name__ = true;
kha_graphics2_truetype_Stbtt_$temp_$font_$v_$metrics.prototype = {
	ascent: null
	,descent: null
	,lineGap: null
	,__class__: kha_graphics2_truetype_Stbtt_$temp_$font_$v_$metrics
};
var kha_graphics2_truetype_Stbtt_$temp_$region = function() {
};
$hxClasses["kha.graphics2.truetype.Stbtt_temp_region"] = kha_graphics2_truetype_Stbtt_$temp_$region;
kha_graphics2_truetype_Stbtt_$temp_$region.__name__ = true;
kha_graphics2_truetype_Stbtt_$temp_$region.prototype = {
	width: null
	,height: null
	,xoff: null
	,yoff: null
	,__class__: kha_graphics2_truetype_Stbtt_$temp_$region
};
var kha_graphics2_truetype_Stbtt_$bakedchar = function() {
};
$hxClasses["kha.graphics2.truetype.Stbtt_bakedchar"] = kha_graphics2_truetype_Stbtt_$bakedchar;
kha_graphics2_truetype_Stbtt_$bakedchar.__name__ = true;
kha_graphics2_truetype_Stbtt_$bakedchar.prototype = {
	x0: null
	,y0: null
	,x1: null
	,y1: null
	,xoff: null
	,yoff: null
	,xadvance: null
	,__class__: kha_graphics2_truetype_Stbtt_$bakedchar
};
var kha_graphics2_truetype_Stbtt_$aligned_$quad = function() { };
$hxClasses["kha.graphics2.truetype.Stbtt_aligned_quad"] = kha_graphics2_truetype_Stbtt_$aligned_$quad;
kha_graphics2_truetype_Stbtt_$aligned_$quad.__name__ = true;
kha_graphics2_truetype_Stbtt_$aligned_$quad.prototype = {
	x0: null
	,y0: null
	,s0: null
	,t0: null
	,x1: null
	,y1: null
	,s1: null
	,t1: null
	,__class__: kha_graphics2_truetype_Stbtt_$aligned_$quad
};
var kha_graphics2_truetype_Stbtt_$packedchar = function() { };
$hxClasses["kha.graphics2.truetype.Stbtt_packedchar"] = kha_graphics2_truetype_Stbtt_$packedchar;
kha_graphics2_truetype_Stbtt_$packedchar.__name__ = true;
kha_graphics2_truetype_Stbtt_$packedchar.prototype = {
	x0: null
	,y0: null
	,x1: null
	,y1: null
	,xoff: null
	,yoff: null
	,xadvance: null
	,xoff2: null
	,yoff2: null
	,__class__: kha_graphics2_truetype_Stbtt_$packedchar
};
var kha_graphics2_truetype_Stbtt_$pack_$range = function() { };
$hxClasses["kha.graphics2.truetype.Stbtt_pack_range"] = kha_graphics2_truetype_Stbtt_$pack_$range;
kha_graphics2_truetype_Stbtt_$pack_$range.__name__ = true;
kha_graphics2_truetype_Stbtt_$pack_$range.prototype = {
	font_size: null
	,first_unicode_codepoint_in_range: null
	,array_of_unicode_codepoints: null
	,num_chars: null
	,chardata_for_range: null
	,h_oversample: null
	,v_oversample: null
	,__class__: kha_graphics2_truetype_Stbtt_$pack_$range
};
var kha_graphics2_truetype_Stbtt_$pack_$context = function() { };
$hxClasses["kha.graphics2.truetype.Stbtt_pack_context"] = kha_graphics2_truetype_Stbtt_$pack_$context;
kha_graphics2_truetype_Stbtt_$pack_$context.__name__ = true;
kha_graphics2_truetype_Stbtt_$pack_$context.prototype = {
	width: null
	,height: null
	,stride_in_bytes: null
	,padding: null
	,h_oversample: null
	,v_oversample: null
	,pixels: null
	,__class__: kha_graphics2_truetype_Stbtt_$pack_$context
};
var kha_graphics2_truetype_Stbtt_$fontinfo = function() {
};
$hxClasses["kha.graphics2.truetype.Stbtt_fontinfo"] = kha_graphics2_truetype_Stbtt_$fontinfo;
kha_graphics2_truetype_Stbtt_$fontinfo.__name__ = true;
kha_graphics2_truetype_Stbtt_$fontinfo.prototype = {
	data: null
	,fontstart: null
	,numGlyphs: null
	,loca: null
	,head: null
	,glyf: null
	,hhea: null
	,hmtx: null
	,kern: null
	,index_map: null
	,indexToLocFormat: null
	,__class__: kha_graphics2_truetype_Stbtt_$fontinfo
};
var kha_graphics2_truetype_Stbtt_$vertex = function() {
};
$hxClasses["kha.graphics2.truetype.Stbtt_vertex"] = kha_graphics2_truetype_Stbtt_$vertex;
kha_graphics2_truetype_Stbtt_$vertex.__name__ = true;
kha_graphics2_truetype_Stbtt_$vertex.prototype = {
	x: null
	,y: null
	,cx: null
	,cy: null
	,type: null
	,padding: null
	,__class__: kha_graphics2_truetype_Stbtt_$vertex
};
var kha_graphics2_truetype_Stbtt_$_$bitmap = function() {
};
$hxClasses["kha.graphics2.truetype.Stbtt__bitmap"] = kha_graphics2_truetype_Stbtt_$_$bitmap;
kha_graphics2_truetype_Stbtt_$_$bitmap.__name__ = true;
kha_graphics2_truetype_Stbtt_$_$bitmap.prototype = {
	w: null
	,h: null
	,stride: null
	,pixels: null
	,pixels_offset: null
	,__class__: kha_graphics2_truetype_Stbtt_$_$bitmap
};
var kha_graphics2_truetype_Stbtt_$_$edge = function() {
};
$hxClasses["kha.graphics2.truetype.Stbtt__edge"] = kha_graphics2_truetype_Stbtt_$_$edge;
kha_graphics2_truetype_Stbtt_$_$edge.__name__ = true;
kha_graphics2_truetype_Stbtt_$_$edge.prototype = {
	x0: null
	,y0: null
	,x1: null
	,y1: null
	,invert: null
	,__class__: kha_graphics2_truetype_Stbtt_$_$edge
};
var kha_graphics2_truetype_Stbtt_$_$active_$edge = function() {
};
$hxClasses["kha.graphics2.truetype.Stbtt__active_edge"] = kha_graphics2_truetype_Stbtt_$_$active_$edge;
kha_graphics2_truetype_Stbtt_$_$active_$edge.__name__ = true;
kha_graphics2_truetype_Stbtt_$_$active_$edge.prototype = {
	next: null
	,fx: null
	,fdx: null
	,fdy: null
	,direction: null
	,sy: null
	,ey: null
	,__class__: kha_graphics2_truetype_Stbtt_$_$active_$edge
};
var kha_graphics2_truetype_Stbtt_$_$point = function() {
};
$hxClasses["kha.graphics2.truetype.Stbtt__point"] = kha_graphics2_truetype_Stbtt_$_$point;
kha_graphics2_truetype_Stbtt_$_$point.__name__ = true;
kha_graphics2_truetype_Stbtt_$_$point.prototype = {
	x: null
	,y: null
	,__class__: kha_graphics2_truetype_Stbtt_$_$point
};
var kha_graphics2_truetype_StbTruetype = function() { };
$hxClasses["kha.graphics2.truetype.StbTruetype"] = kha_graphics2_truetype_StbTruetype;
kha_graphics2_truetype_StbTruetype.__name__ = true;
kha_graphics2_truetype_StbTruetype.STBTT_assert = function(value) {
	if(!value) {
		throw new js__$Boot_HaxeError("Error");
	}
};
kha_graphics2_truetype_StbTruetype.STBTT_POINT_SIZE = function(x) {
	return -x;
};
kha_graphics2_truetype_StbTruetype.ttBYTE = function(p,pos) {
	if(pos == null) {
		pos = 0;
	}
	return p.readU8(pos);
};
kha_graphics2_truetype_StbTruetype.ttCHAR = function(p,pos) {
	if(pos == null) {
		pos = 0;
	}
	var n = p.readU8(pos);
	if(n >= 128) {
		return n - 256;
	}
	return n;
};
kha_graphics2_truetype_StbTruetype.ttUSHORT = function(p,pos) {
	if(pos == null) {
		pos = 0;
	}
	var ch1 = p.readU8(pos);
	var ch2 = p.readU8(pos + 1);
	return ch2 | ch1 << 8;
};
kha_graphics2_truetype_StbTruetype.ttSHORT = function(p,pos) {
	if(pos == null) {
		pos = 0;
	}
	var ch1 = p.readU8(pos);
	var ch2 = p.readU8(pos + 1);
	var n = ch2 | ch1 << 8;
	if((n & 32768) != 0) {
		return n - 65536;
	}
	return n;
};
kha_graphics2_truetype_StbTruetype.ttULONG = function(p,pos) {
	if(pos == null) {
		pos = 0;
	}
	var ch1 = p.readU8(pos);
	var ch2 = p.readU8(pos + 1);
	var ch3 = p.readU8(pos + 2);
	var ch4 = p.readU8(pos + 3);
	return ch4 | ch3 << 8 | ch2 << 16 | ch1 << 24;
};
kha_graphics2_truetype_StbTruetype.ttLONG = function(p,pos) {
	if(pos == null) {
		pos = 0;
	}
	var ch1 = p.readU8(pos);
	var ch2 = p.readU8(pos + 1);
	var ch3 = p.readU8(pos + 2);
	var ch4 = p.readU8(pos + 3);
	return ch4 | ch3 << 8 | ch2 << 16 | ch1 << 24;
};
kha_graphics2_truetype_StbTruetype.ttFixed = function(p,pos) {
	if(pos == null) {
		pos = 0;
	}
	var ch1 = p.readU8(pos);
	var ch2 = p.readU8(pos + 1);
	var ch3 = p.readU8(pos + 2);
	var ch4 = p.readU8(pos + 3);
	return ch4 | ch3 << 8 | ch2 << 16 | ch1 << 24;
};
kha_graphics2_truetype_StbTruetype.stbtt_tag4 = function(p,pos,c0,c1,c2,c3) {
	if(p.readU8(pos) == c0 && p.readU8(pos + 1) == c1 && p.readU8(pos + 2) == c2) {
		return p.readU8(pos + 3) == c3;
	} else {
		return false;
	}
};
kha_graphics2_truetype_StbTruetype.stbtt_tag = function(p,pos,str) {
	var c0 = HxOverrides.cca(str,0);
	var c1 = HxOverrides.cca(str,1);
	var c2 = HxOverrides.cca(str,2);
	var c3 = HxOverrides.cca(str,3);
	if(p.readU8(pos) == c0 && p.readU8(pos + 1) == c1 && p.readU8(pos + 2) == c2) {
		return p.readU8(pos + 3) == c3;
	} else {
		return false;
	}
};
kha_graphics2_truetype_StbTruetype.stbtt__isfont = function(font) {
	var c0 = HxOverrides.cca("1",0);
	if(font.readU8(0) == c0 && font.readU8(1) == 0 && font.readU8(2) == 0 && font.readU8(3) == 0) {
		return true;
	}
	var c01 = HxOverrides.cca("typ1",0);
	var c1 = HxOverrides.cca("typ1",1);
	var c2 = HxOverrides.cca("typ1",2);
	var c3 = HxOverrides.cca("typ1",3);
	if(font.readU8(0) == c01 && font.readU8(1) == c1 && font.readU8(2) == c2 && font.readU8(3) == c3) {
		return true;
	}
	var c02 = HxOverrides.cca("OTTO",0);
	var c11 = HxOverrides.cca("OTTO",1);
	var c21 = HxOverrides.cca("OTTO",2);
	var c31 = HxOverrides.cca("OTTO",3);
	if(font.readU8(0) == c02 && font.readU8(1) == c11 && font.readU8(2) == c21 && font.readU8(3) == c31) {
		return true;
	}
	if(font.readU8(0) == 0 && font.readU8(1) == 1 && font.readU8(2) == 0 && font.readU8(3) == 0) {
		return true;
	}
	return false;
};
kha_graphics2_truetype_StbTruetype.stbtt__find_table = function(data,fontstart,tag) {
	var pos = fontstart + 4;
	var ch1 = data.readU8(pos);
	var ch2 = data.readU8(pos + 1);
	var num_tables = ch2 | ch1 << 8;
	var tabledir = fontstart + 12;
	var _g1 = 0;
	var _g = num_tables;
	while(_g1 < _g) {
		var i = _g1++;
		var loc = tabledir + 16 * i;
		var c0 = HxOverrides.cca(tag,0);
		var c1 = HxOverrides.cca(tag,1);
		var c2 = HxOverrides.cca(tag,2);
		var c3 = HxOverrides.cca(tag,3);
		if(data.readU8(loc) == c0 && data.readU8(loc + 1) == c1 && data.readU8(loc + 2) == c2 && data.readU8(loc + 3) == c3) {
			var pos1 = loc + 8;
			var ch11 = data.readU8(pos1);
			var ch21 = data.readU8(pos1 + 1);
			var ch3 = data.readU8(pos1 + 2);
			var ch4 = data.readU8(pos1 + 3);
			return ch4 | ch3 << 8 | ch21 << 16 | ch11 << 24;
		}
	}
	return 0;
};
kha_graphics2_truetype_StbTruetype.stbtt_GetFontOffsetForIndex = function(font_collection,index) {
	if(kha_graphics2_truetype_StbTruetype.stbtt__isfont(font_collection)) {
		if(index == 0) {
			return 0;
		} else {
			return -1;
		}
	}
	var c0 = HxOverrides.cca("ttcf",0);
	var c1 = HxOverrides.cca("ttcf",1);
	var c2 = HxOverrides.cca("ttcf",2);
	var c3 = HxOverrides.cca("ttcf",3);
	if(font_collection.readU8(0) == c0 && font_collection.readU8(1) == c1 && font_collection.readU8(2) == c2 && font_collection.readU8(3) == c3) {
		var tmp;
		var ch1 = font_collection.readU8(4);
		var ch2 = font_collection.readU8(5);
		var ch3 = font_collection.readU8(6);
		var ch4 = font_collection.readU8(7);
		if((ch4 | ch3 << 8 | ch2 << 16 | ch1 << 24) != 65536) {
			var ch11 = font_collection.readU8(4);
			var ch21 = font_collection.readU8(5);
			var ch31 = font_collection.readU8(6);
			var ch41 = font_collection.readU8(7);
			tmp = (ch41 | ch31 << 8 | ch21 << 16 | ch11 << 24) == 131072;
		} else {
			tmp = true;
		}
		if(tmp) {
			var ch12 = font_collection.readU8(8);
			var ch22 = font_collection.readU8(9);
			var ch32 = font_collection.readU8(10);
			var ch42 = font_collection.readU8(11);
			var n = ch42 | ch32 << 8 | ch22 << 16 | ch12 << 24;
			if(index >= n) {
				return -1;
			}
			var pos = 12 + index * 4;
			var ch13 = font_collection.readU8(pos);
			var ch23 = font_collection.readU8(pos + 1);
			var ch33 = font_collection.readU8(pos + 2);
			var ch43 = font_collection.readU8(pos + 3);
			return ch43 | ch33 << 8 | ch23 << 16 | ch13 << 24;
		}
	}
	return -1;
};
kha_graphics2_truetype_StbTruetype.stbtt_InitFont = function(info,data,fontstart) {
	var cmap;
	var t;
	var numTables;
	info.data = data;
	info.fontstart = fontstart;
	cmap = kha_graphics2_truetype_StbTruetype.stbtt__find_table(data,fontstart,"cmap");
	info.loca = kha_graphics2_truetype_StbTruetype.stbtt__find_table(data,fontstart,"loca");
	info.head = kha_graphics2_truetype_StbTruetype.stbtt__find_table(data,fontstart,"head");
	info.glyf = kha_graphics2_truetype_StbTruetype.stbtt__find_table(data,fontstart,"glyf");
	info.hhea = kha_graphics2_truetype_StbTruetype.stbtt__find_table(data,fontstart,"hhea");
	info.hmtx = kha_graphics2_truetype_StbTruetype.stbtt__find_table(data,fontstart,"hmtx");
	info.kern = kha_graphics2_truetype_StbTruetype.stbtt__find_table(data,fontstart,"kern");
	if(cmap == 0 || info.loca == 0 || info.head == 0 || info.glyf == 0 || info.hhea == 0 || info.hmtx == 0) {
		return false;
	}
	t = kha_graphics2_truetype_StbTruetype.stbtt__find_table(data,fontstart,"maxp");
	if(t != 0) {
		var pos = t + 4;
		var ch1 = data.readU8(pos);
		var ch2 = data.readU8(pos + 1);
		info.numGlyphs = ch2 | ch1 << 8;
	} else {
		info.numGlyphs = 65535;
	}
	var pos1 = cmap + 2;
	var ch11 = data.readU8(pos1);
	var ch21 = data.readU8(pos1 + 1);
	numTables = ch21 | ch11 << 8;
	info.index_map = 0;
	var _g1 = 0;
	var _g = numTables;
	while(_g1 < _g) {
		var i = _g1++;
		var encoding_record = cmap + 4 + 8 * i;
		var ch12 = data.readU8(encoding_record);
		var ch22 = data.readU8(encoding_record + 1);
		var _g2 = ch22 | ch12 << 8;
		switch(_g2) {
		case 0:
			var pos2 = encoding_record + 4;
			var ch13 = data.readU8(pos2);
			var ch23 = data.readU8(pos2 + 1);
			var ch3 = data.readU8(pos2 + 2);
			var ch4 = data.readU8(pos2 + 3);
			info.index_map = cmap + (ch4 | ch3 << 8 | ch23 << 16 | ch13 << 24);
			break;
		case 3:
			var pos3 = encoding_record + 2;
			var ch14 = data.readU8(pos3);
			var ch24 = data.readU8(pos3 + 1);
			var _g21 = ch24 | ch14 << 8;
			switch(_g21) {
			case 1:case 10:
				var pos4 = encoding_record + 4;
				var ch15 = data.readU8(pos4);
				var ch25 = data.readU8(pos4 + 1);
				var ch31 = data.readU8(pos4 + 2);
				var ch41 = data.readU8(pos4 + 3);
				info.index_map = cmap + (ch41 | ch31 << 8 | ch25 << 16 | ch15 << 24);
				break;
			}
			break;
		}
	}
	if(info.index_map == 0) {
		return false;
	}
	var pos5 = info.head + 50;
	var ch16 = data.readU8(pos5);
	var ch26 = data.readU8(pos5 + 1);
	info.indexToLocFormat = ch26 | ch16 << 8;
	return true;
};
kha_graphics2_truetype_StbTruetype.stbtt_FindGlyphIndex = function(info,unicode_codepoint) {
	var data = info.data;
	var index_map = info.index_map;
	var ch1 = data.readU8(index_map);
	var ch2 = data.readU8(index_map + 1);
	var format = ch2 | ch1 << 8;
	if(format == 0) {
		var pos = index_map + 2;
		var ch11 = data.readU8(pos);
		var ch21 = data.readU8(pos + 1);
		var bytes = ch21 | ch11 << 8;
		if(unicode_codepoint < bytes - 6) {
			return data.readU8(index_map + 6 + unicode_codepoint);
		}
		return 0;
	} else if(format == 6) {
		var pos1 = index_map + 6;
		var ch12 = data.readU8(pos1);
		var ch22 = data.readU8(pos1 + 1);
		var first = ch22 | ch12 << 8;
		var pos2 = index_map + 8;
		var ch13 = data.readU8(pos2);
		var ch23 = data.readU8(pos2 + 1);
		var count = ch23 | ch13 << 8;
		if(unicode_codepoint >= first && unicode_codepoint < first + count) {
			var pos3 = index_map + 10 + (unicode_codepoint - first) * 2;
			var ch14 = data.readU8(pos3);
			var ch24 = data.readU8(pos3 + 1);
			return ch24 | ch14 << 8;
		}
		return 0;
	} else if(format == 2) {
		throw new js__$Boot_HaxeError("Error");
	} else if(format == 4) {
		var pos4 = index_map + 6;
		var ch15 = data.readU8(pos4);
		var ch25 = data.readU8(pos4 + 1);
		var segcount = (ch25 | ch15 << 8) >> 1;
		var pos5 = index_map + 8;
		var ch16 = data.readU8(pos5);
		var ch26 = data.readU8(pos5 + 1);
		var searchRange = (ch26 | ch16 << 8) >> 1;
		var pos6 = index_map + 10;
		var ch17 = data.readU8(pos6);
		var ch27 = data.readU8(pos6 + 1);
		var entrySelector = ch27 | ch17 << 8;
		var pos7 = index_map + 12;
		var ch18 = data.readU8(pos7);
		var ch28 = data.readU8(pos7 + 1);
		var rangeShift = (ch28 | ch18 << 8) >> 1;
		var endCount = index_map + 14;
		var search = endCount;
		if(unicode_codepoint > 65535) {
			return 0;
		}
		var pos8 = search + rangeShift * 2;
		var ch19 = data.readU8(pos8);
		var ch29 = data.readU8(pos8 + 1);
		if(unicode_codepoint >= (ch29 | ch19 << 8)) {
			search += rangeShift * 2;
		}
		search -= 2;
		while(entrySelector != 0) {
			var end;
			searchRange >>= 1;
			var pos9 = search + searchRange * 2;
			var ch110 = data.readU8(pos9);
			var ch210 = data.readU8(pos9 + 1);
			end = ch210 | ch110 << 8;
			if(unicode_codepoint > end) {
				search += searchRange * 2;
			}
			--entrySelector;
		}
		search += 2;
		var offset;
		var start;
		var item = search - endCount >> 1;
		var pos10 = endCount + 2 * item;
		var ch111 = data.readU8(pos10);
		var ch211 = data.readU8(pos10 + 1);
		if(unicode_codepoint > (ch211 | ch111 << 8)) {
			throw new js__$Boot_HaxeError("Error");
		}
		var pos11 = index_map + 14 + segcount * 2 + 2 + 2 * item;
		var ch112 = data.readU8(pos11);
		var ch212 = data.readU8(pos11 + 1);
		start = ch212 | ch112 << 8;
		if(unicode_codepoint < start) {
			return 0;
		}
		var pos12 = index_map + 14 + segcount * 6 + 2 + 2 * item;
		var ch113 = data.readU8(pos12);
		var ch213 = data.readU8(pos12 + 1);
		offset = ch213 | ch113 << 8;
		if(offset == 0) {
			var pos13 = index_map + 14 + segcount * 4 + 2 + 2 * item;
			var ch114 = data.readU8(pos13);
			var ch214 = data.readU8(pos13 + 1);
			var n = ch214 | ch114 << 8;
			return unicode_codepoint + ((n & 32768) != 0 ? n - 65536 : n);
		}
		var pos14 = offset + (unicode_codepoint - start) * 2 + index_map + 14 + segcount * 6 + 2 + 2 * item;
		var ch115 = data.readU8(pos14);
		var ch215 = data.readU8(pos14 + 1);
		return ch215 | ch115 << 8;
	} else if(format == 12 || format == 13) {
		var pos15 = index_map + 12;
		var ch116 = data.readU8(pos15);
		var ch216 = data.readU8(pos15 + 1);
		var ch3 = data.readU8(pos15 + 2);
		var ch4 = data.readU8(pos15 + 3);
		var ngroups = ch4 | ch3 << 8 | ch216 << 16 | ch116 << 24;
		var low;
		var high;
		low = 0;
		high = ngroups;
		while(low < high) {
			var mid = low + (high - low >> 1);
			var pos16 = index_map + 16 + mid * 12;
			var ch117 = data.readU8(pos16);
			var ch217 = data.readU8(pos16 + 1);
			var ch31 = data.readU8(pos16 + 2);
			var ch41 = data.readU8(pos16 + 3);
			var start_char = ch41 | ch31 << 8 | ch217 << 16 | ch117 << 24;
			var pos17 = index_map + 16 + mid * 12 + 4;
			var ch118 = data.readU8(pos17);
			var ch218 = data.readU8(pos17 + 1);
			var ch32 = data.readU8(pos17 + 2);
			var ch42 = data.readU8(pos17 + 3);
			var end_char = ch42 | ch32 << 8 | ch218 << 16 | ch118 << 24;
			if(unicode_codepoint < start_char) {
				high = mid;
			} else if(unicode_codepoint > end_char) {
				low = mid + 1;
			} else {
				var pos18 = index_map + 16 + mid * 12 + 8;
				var ch119 = data.readU8(pos18);
				var ch219 = data.readU8(pos18 + 1);
				var ch33 = data.readU8(pos18 + 2);
				var ch43 = data.readU8(pos18 + 3);
				var start_glyph = ch43 | ch33 << 8 | ch219 << 16 | ch119 << 24;
				if(format == 12) {
					return start_glyph + unicode_codepoint - start_char;
				} else {
					return start_glyph;
				}
			}
		}
		return 0;
	}
	throw new js__$Boot_HaxeError("Error");
};
kha_graphics2_truetype_StbTruetype.stbtt_GetCodepointShape = function(info,unicode_codepoint) {
	return kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphShape(info,kha_graphics2_truetype_StbTruetype.stbtt_FindGlyphIndex(info,unicode_codepoint));
};
kha_graphics2_truetype_StbTruetype.stbtt_setvertex = function(v,type,x,y,cx,cy) {
	v.type = type;
	v.x = x;
	v.y = y;
	v.cx = cx;
	v.cy = cy;
};
kha_graphics2_truetype_StbTruetype.stbtt__GetGlyfOffset = function(info,glyph_index) {
	var g1;
	var g2;
	if(glyph_index >= info.numGlyphs) {
		return -1;
	}
	if(info.indexToLocFormat >= 2) {
		return -1;
	}
	if(info.indexToLocFormat == 0) {
		var info1 = info.glyf;
		var p = info.data;
		var pos = info.loca + glyph_index * 2;
		var ch1 = p.readU8(pos);
		var ch2 = p.readU8(pos + 1);
		g1 = info1 + (ch2 | ch1 << 8) * 2;
		var info2 = info.glyf;
		var p1 = info.data;
		var pos1 = info.loca + glyph_index * 2 + 2;
		var ch11 = p1.readU8(pos1);
		var ch21 = p1.readU8(pos1 + 1);
		g2 = info2 + (ch21 | ch11 << 8) * 2;
	} else {
		var info3 = info.glyf;
		var p2 = info.data;
		var pos2 = info.loca + glyph_index * 4;
		var ch12 = p2.readU8(pos2);
		var ch22 = p2.readU8(pos2 + 1);
		var ch3 = p2.readU8(pos2 + 2);
		var ch4 = p2.readU8(pos2 + 3);
		g1 = info3 + (ch4 | ch3 << 8 | ch22 << 16 | ch12 << 24);
		var info4 = info.glyf;
		var p3 = info.data;
		var pos3 = info.loca + glyph_index * 4 + 4;
		var ch13 = p3.readU8(pos3);
		var ch23 = p3.readU8(pos3 + 1);
		var ch31 = p3.readU8(pos3 + 2);
		var ch41 = p3.readU8(pos3 + 3);
		g2 = info4 + (ch41 | ch31 << 8 | ch23 << 16 | ch13 << 24);
	}
	if(g1 == g2) {
		return -1;
	} else {
		return g1;
	}
};
kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphBox = function(info,glyph_index,rect) {
	var g = kha_graphics2_truetype_StbTruetype.stbtt__GetGlyfOffset(info,glyph_index);
	if(g < 0) {
		return false;
	}
	var p = info.data;
	var pos = g + 2;
	var ch1 = p.readU8(pos);
	var ch2 = p.readU8(pos + 1);
	var n = ch2 | ch1 << 8;
	rect.x0 = (n & 32768) != 0 ? n - 65536 : n;
	var p1 = info.data;
	var pos1 = g + 4;
	var ch11 = p1.readU8(pos1);
	var ch21 = p1.readU8(pos1 + 1);
	var n1 = ch21 | ch11 << 8;
	rect.y0 = (n1 & 32768) != 0 ? n1 - 65536 : n1;
	var p2 = info.data;
	var pos2 = g + 6;
	var ch12 = p2.readU8(pos2);
	var ch22 = p2.readU8(pos2 + 1);
	var n2 = ch22 | ch12 << 8;
	rect.x1 = (n2 & 32768) != 0 ? n2 - 65536 : n2;
	var p3 = info.data;
	var pos3 = g + 8;
	var ch13 = p3.readU8(pos3);
	var ch23 = p3.readU8(pos3 + 1);
	var n3 = ch23 | ch13 << 8;
	rect.y1 = (n3 & 32768) != 0 ? n3 - 65536 : n3;
	return true;
};
kha_graphics2_truetype_StbTruetype.stbtt_GetCodepointBox = function(info,codepoint,rect) {
	return kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphBox(info,kha_graphics2_truetype_StbTruetype.stbtt_FindGlyphIndex(info,codepoint),rect);
};
kha_graphics2_truetype_StbTruetype.stbtt_IsGlyphEmpty = function(info,glyph_index) {
	var numberOfContours;
	var g = kha_graphics2_truetype_StbTruetype.stbtt__GetGlyfOffset(info,glyph_index);
	if(g < 0) {
		return true;
	}
	var p = info.data;
	var ch1 = p.readU8(g);
	var ch2 = p.readU8(g + 1);
	var n = ch2 | ch1 << 8;
	if((n & 32768) != 0) {
		numberOfContours = n - 65536;
	} else {
		numberOfContours = n;
	}
	return numberOfContours == 0;
};
kha_graphics2_truetype_StbTruetype.stbtt__close_shape = function(vertices,num_vertices,was_off,start_off,sx,sy,scx,scy,cx,cy) {
	if(start_off) {
		if(was_off) {
			kha_graphics2_truetype_StbTruetype.stbtt_setvertex(vertices[num_vertices++],3,cx + scx >> 1,cy + scy >> 1,cx,cy);
		}
		kha_graphics2_truetype_StbTruetype.stbtt_setvertex(vertices[num_vertices++],3,sx,sy,scx,scy);
	} else if(was_off) {
		kha_graphics2_truetype_StbTruetype.stbtt_setvertex(vertices[num_vertices++],3,sx,sy,cx,cy);
	} else {
		kha_graphics2_truetype_StbTruetype.stbtt_setvertex(vertices[num_vertices++],2,sx,sy,0,0);
	}
	return num_vertices;
};
kha_graphics2_truetype_StbTruetype.copyVertices = function(from,to,offset,count) {
	var _g1 = 0;
	var _g = count;
	while(_g1 < _g) {
		var i = _g1++;
		to[offset + i] = from[i];
	}
};
kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphShape = function(info,glyph_index) {
	var numberOfContours;
	var endPtsOfContours;
	var data = info.data;
	var vertices = null;
	var num_vertices = 0;
	var g = kha_graphics2_truetype_StbTruetype.stbtt__GetGlyfOffset(info,glyph_index);
	if(g < 0) {
		return null;
	}
	var ch1 = data.readU8(g);
	var ch2 = data.readU8(g + 1);
	var n = ch2 | ch1 << 8;
	if((n & 32768) != 0) {
		numberOfContours = n - 65536;
	} else {
		numberOfContours = n;
	}
	if(numberOfContours > 0) {
		var flags = 0;
		var flagcount;
		var ins;
		var j = 0;
		var m;
		var n1;
		var next_move = 0;
		var off = 0;
		var was_off = false;
		var start_off = false;
		var x;
		var y;
		var cx;
		var cy;
		var sx;
		var sy;
		var scx;
		var scy;
		var points;
		var pointsIndex = 0;
		endPtsOfContours = data.sub(g + 10,data.get_length() - (g + 10));
		var pos = g + 10 + numberOfContours * 2;
		var ch11 = data.readU8(pos);
		var ch21 = data.readU8(pos + 1);
		ins = ch21 | ch11 << 8;
		points = data.sub(g + 10 + numberOfContours * 2 + 2 + ins,data.get_length() - (g + 10 + numberOfContours * 2 + 2 + ins));
		var pos1 = numberOfContours * 2 - 2;
		var ch12 = endPtsOfContours.readU8(pos1);
		var ch22 = endPtsOfContours.readU8(pos1 + 1);
		n1 = 1 + (ch22 | ch12 << 8);
		m = n1 + 2 * numberOfContours;
		var this1 = new Array(m);
		vertices = this1;
		if(vertices == null) {
			return null;
		} else {
			var _g1 = 0;
			var _g = vertices.length;
			while(_g1 < _g) {
				var i = _g1++;
				vertices[i] = new kha_graphics2_truetype_Stbtt_$vertex();
			}
		}
		next_move = 0;
		flagcount = 0;
		off = m - n1;
		var _g11 = 0;
		var _g2 = n1;
		while(_g11 < _g2) {
			var i1 = _g11++;
			if(flagcount == 0) {
				flags = points.readU8(pointsIndex++);
				if((flags & 8) != 0) {
					flagcount = points.readU8(pointsIndex++);
				}
			} else {
				--flagcount;
			}
			vertices[off + i1].type = flags;
		}
		x = 0;
		var _g12 = 0;
		var _g3 = n1;
		while(_g12 < _g3) {
			var i2 = _g12++;
			flags = vertices[off + i2].type;
			if((flags & 2) != 0) {
				var dx = points.readU8(pointsIndex++);
				x += (flags & 16) != 0 ? dx : -dx;
			} else if((flags & 16) == 0) {
				var value;
				var ch13 = points.readU8(pointsIndex);
				var ch23 = points.readU8(pointsIndex + 1);
				var n2 = ch23 | ch13 << 8;
				if((n2 & 32768) != 0) {
					value = n2 - 65536;
				} else {
					value = n2;
				}
				x += value;
				pointsIndex += 2;
			}
			vertices[off + i2].x = x;
		}
		y = 0;
		var _g13 = 0;
		var _g4 = n1;
		while(_g13 < _g4) {
			var i3 = _g13++;
			flags = vertices[off + i3].type;
			if((flags & 4) != 0) {
				var dy = points.readU8(pointsIndex++);
				y += (flags & 32) != 0 ? dy : -dy;
			} else if((flags & 32) == 0) {
				var value1;
				var ch14 = points.readU8(pointsIndex);
				var ch24 = points.readU8(pointsIndex + 1);
				var n3 = ch24 | ch14 << 8;
				if((n3 & 32768) != 0) {
					value1 = n3 - 65536;
				} else {
					value1 = n3;
				}
				y += value1;
				pointsIndex += 2;
			}
			vertices[off + i3].y = y;
		}
		num_vertices = 0;
		scy = 0;
		scx = scy;
		cy = scx;
		cx = cy;
		sy = cx;
		sx = sy;
		var i4 = 0;
		while(i4 < n1) {
			flags = vertices[off + i4].type;
			x = vertices[off + i4].x;
			y = vertices[off + i4].y;
			if(next_move == i4) {
				if(i4 != 0) {
					num_vertices = kha_graphics2_truetype_StbTruetype.stbtt__close_shape(vertices,num_vertices,was_off,start_off,sx,sy,scx,scy,cx,cy);
				}
				start_off = (flags & 1) == 0;
				if(start_off) {
					scx = x;
					scy = y;
					if((vertices[off + i4 + 1].type & 1) == 0) {
						sx = x + vertices[off + i4 + 1].x >> 1;
						sy = y + vertices[off + i4 + 1].y >> 1;
					} else {
						sx = vertices[off + i4 + 1].x;
						sy = vertices[off + i4 + 1].y;
						++i4;
					}
				} else {
					sx = x;
					sy = y;
				}
				kha_graphics2_truetype_StbTruetype.stbtt_setvertex(vertices[num_vertices++],1,sx,sy,0,0);
				was_off = false;
				var pos2 = j * 2;
				var ch15 = endPtsOfContours.readU8(pos2);
				var ch25 = endPtsOfContours.readU8(pos2 + 1);
				next_move = 1 + (ch25 | ch15 << 8);
				++j;
			} else if((flags & 1) == 0) {
				if(was_off) {
					kha_graphics2_truetype_StbTruetype.stbtt_setvertex(vertices[num_vertices++],3,cx + x >> 1,cy + y >> 1,cx,cy);
				}
				cx = x;
				cy = y;
				was_off = true;
			} else {
				if(was_off) {
					kha_graphics2_truetype_StbTruetype.stbtt_setvertex(vertices[num_vertices++],3,x,y,cx,cy);
				} else {
					kha_graphics2_truetype_StbTruetype.stbtt_setvertex(vertices[num_vertices++],2,x,y,0,0);
				}
				was_off = false;
			}
			++i4;
		}
		num_vertices = kha_graphics2_truetype_StbTruetype.stbtt__close_shape(vertices,num_vertices,was_off,start_off,sx,sy,scx,scy,cx,cy);
	} else if(numberOfContours == -1) {
		var more = 1;
		var comp = data.sub(g + 10,data.get_length() - (g + 10));
		var compIndex = 0;
		num_vertices = 0;
		vertices = null;
		while(more != 0) {
			var flags1;
			var gidx;
			var comp_num_verts = 0;
			var i5;
			var comp_verts = null;
			var tmp = null;
			var mtx0 = 1;
			var mtx1 = 0;
			var mtx2 = 0;
			var mtx3 = 1;
			var mtx4 = 0;
			var mtx5 = 0;
			var m1;
			var n4;
			var ch16 = comp.readU8(compIndex);
			var ch26 = comp.readU8(compIndex + 1);
			var n5 = ch26 | ch16 << 8;
			if((n5 & 32768) != 0) {
				flags1 = n5 - 65536;
			} else {
				flags1 = n5;
			}
			compIndex += 2;
			var ch17 = comp.readU8(compIndex);
			var ch27 = comp.readU8(compIndex + 1);
			var n6 = ch27 | ch17 << 8;
			if((n6 & 32768) != 0) {
				gidx = n6 - 65536;
			} else {
				gidx = n6;
			}
			compIndex += 2;
			if((flags1 & 2) != 0) {
				if((flags1 & 1) != 0) {
					var ch18 = comp.readU8(compIndex);
					var ch28 = comp.readU8(compIndex + 1);
					var n7 = ch28 | ch18 << 8;
					if((n7 & 32768) != 0) {
						mtx4 = n7 - 65536;
					} else {
						mtx4 = n7;
					}
					compIndex += 2;
					var ch19 = comp.readU8(compIndex);
					var ch29 = comp.readU8(compIndex + 1);
					var n8 = ch29 | ch19 << 8;
					if((n8 & 32768) != 0) {
						mtx5 = n8 - 65536;
					} else {
						mtx5 = n8;
					}
					compIndex += 2;
				} else {
					var n9 = comp.readU8(compIndex);
					if(n9 >= 128) {
						mtx4 = n9 - 256;
					} else {
						mtx4 = n9;
					}
					++compIndex;
					var n10 = comp.readU8(compIndex);
					if(n10 >= 128) {
						mtx5 = n10 - 256;
					} else {
						mtx5 = n10;
					}
					++compIndex;
				}
			} else {
				throw new js__$Boot_HaxeError("Error");
			}
			if((flags1 & 8) != 0) {
				var ch110 = comp.readU8(compIndex);
				var ch210 = comp.readU8(compIndex + 1);
				var n11 = ch210 | ch110 << 8;
				mtx3 = ((n11 & 32768) != 0 ? n11 - 65536 : n11) / 16384.0;
				mtx0 = mtx3;
				compIndex += 2;
				mtx2 = 0;
				mtx1 = mtx2;
			} else if((flags1 & 64) != 0) {
				var ch111 = comp.readU8(compIndex);
				var ch211 = comp.readU8(compIndex + 1);
				var n12 = ch211 | ch111 << 8;
				mtx0 = ((n12 & 32768) != 0 ? n12 - 65536 : n12) / 16384.0;
				compIndex += 2;
				mtx2 = 0;
				mtx1 = mtx2;
				var ch112 = comp.readU8(compIndex);
				var ch212 = comp.readU8(compIndex + 1);
				var n13 = ch212 | ch112 << 8;
				mtx3 = ((n13 & 32768) != 0 ? n13 - 65536 : n13) / 16384.0;
				compIndex += 2;
			} else if((flags1 & 128) != 0) {
				var ch113 = comp.readU8(compIndex);
				var ch213 = comp.readU8(compIndex + 1);
				var n14 = ch213 | ch113 << 8;
				mtx0 = ((n14 & 32768) != 0 ? n14 - 65536 : n14) / 16384.0;
				compIndex += 2;
				var ch114 = comp.readU8(compIndex);
				var ch214 = comp.readU8(compIndex + 1);
				var n15 = ch214 | ch114 << 8;
				mtx1 = ((n15 & 32768) != 0 ? n15 - 65536 : n15) / 16384.0;
				compIndex += 2;
				var ch115 = comp.readU8(compIndex);
				var ch215 = comp.readU8(compIndex + 1);
				var n16 = ch215 | ch115 << 8;
				mtx2 = ((n16 & 32768) != 0 ? n16 - 65536 : n16) / 16384.0;
				compIndex += 2;
				var ch116 = comp.readU8(compIndex);
				var ch216 = comp.readU8(compIndex + 1);
				var n17 = ch216 | ch116 << 8;
				mtx3 = ((n17 & 32768) != 0 ? n17 - 65536 : n17) / 16384.0;
				compIndex += 2;
			}
			m1 = Math.sqrt(mtx0 * mtx0 + mtx1 * mtx1);
			n4 = Math.sqrt(mtx2 * mtx2 + mtx3 * mtx3);
			comp_verts = kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphShape(info,gidx);
			if(comp_verts == null) {
				comp_num_verts = 0;
			} else {
				comp_num_verts = comp_verts.length;
			}
			if(comp_num_verts > 0) {
				var _g14 = 0;
				var _g5 = comp_num_verts;
				while(_g14 < _g5) {
					var i6 = _g14++;
					var v = comp_verts[i6];
					var x1;
					var y1;
					x1 = v.x;
					y1 = v.y;
					v.x = m1 * (mtx0 * x1 + mtx2 * y1 + mtx4) | 0;
					v.y = n4 * (mtx1 * x1 + mtx3 * y1 + mtx5) | 0;
					x1 = v.cx;
					y1 = v.cy;
					v.cx = m1 * (mtx0 * x1 + mtx2 * y1 + mtx4) | 0;
					v.cy = n4 * (mtx1 * x1 + mtx3 * y1 + mtx5) | 0;
				}
				var this2 = new Array(num_vertices + comp_num_verts);
				tmp = this2;
				if(tmp == null) {
					return null;
				}
				if(num_vertices > 0) {
					kha_graphics2_truetype_StbTruetype.copyVertices(vertices,tmp,0,num_vertices);
				}
				kha_graphics2_truetype_StbTruetype.copyVertices(comp_verts,tmp,num_vertices,comp_num_verts);
				vertices = tmp;
				num_vertices += comp_num_verts;
			}
			more = flags1 & 32;
		}
	} else if(numberOfContours < 0) {
		throw new js__$Boot_HaxeError("Error");
	}
	if(vertices == null) {
		return null;
	}
	if(vertices.length < num_vertices) {
		throw new js__$Boot_HaxeError("Error");
	}
	if(num_vertices < vertices.length) {
		var this3 = new Array(num_vertices);
		var tmp1 = this3;
		kha_graphics2_truetype_StbTruetype.copyVertices(vertices,tmp1,0,num_vertices);
		return tmp1;
	} else {
		return vertices;
	}
};
kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphHMetrics = function(info,glyph_index) {
	var p = info.data;
	var pos = info.hhea + 34;
	var ch1 = p.readU8(pos);
	var ch2 = p.readU8(pos + 1);
	var numOfLongHorMetrics = ch2 | ch1 << 8;
	var metrics = new kha_graphics2_truetype_Stbtt_$temp_$glyph_$h_$metrics();
	if(glyph_index < numOfLongHorMetrics) {
		var p1 = info.data;
		var pos1 = info.hmtx + 4 * glyph_index;
		var ch11 = p1.readU8(pos1);
		var ch21 = p1.readU8(pos1 + 1);
		var n = ch21 | ch11 << 8;
		metrics.advanceWidth = (n & 32768) != 0 ? n - 65536 : n;
		var p2 = info.data;
		var pos2 = info.hmtx + 4 * glyph_index + 2;
		var ch12 = p2.readU8(pos2);
		var ch22 = p2.readU8(pos2 + 1);
		var n1 = ch22 | ch12 << 8;
		metrics.leftSideBearing = (n1 & 32768) != 0 ? n1 - 65536 : n1;
	} else {
		var p3 = info.data;
		var pos3 = info.hmtx + 4 * (numOfLongHorMetrics - 1);
		var ch13 = p3.readU8(pos3);
		var ch23 = p3.readU8(pos3 + 1);
		var n2 = ch23 | ch13 << 8;
		metrics.advanceWidth = (n2 & 32768) != 0 ? n2 - 65536 : n2;
		var p4 = info.data;
		var pos4 = info.hmtx + 4 * numOfLongHorMetrics + 2 * (glyph_index - numOfLongHorMetrics);
		var ch14 = p4.readU8(pos4);
		var ch24 = p4.readU8(pos4 + 1);
		var n3 = ch24 | ch14 << 8;
		metrics.leftSideBearing = (n3 & 32768) != 0 ? n3 - 65536 : n3;
	}
	return metrics;
};
kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphKernAdvance = function(info,glyph1,glyph2) {
	var data = info.data.sub(info.kern,info.data.get_length() - info.kern);
	var needle;
	var straw;
	var l;
	var r;
	var m;
	if(info.kern == 0) {
		return 0;
	}
	var ch1 = data.readU8(2);
	var ch2 = data.readU8(3);
	if((ch2 | ch1 << 8) < 1) {
		return 0;
	}
	var ch11 = data.readU8(8);
	var ch21 = data.readU8(9);
	if((ch21 | ch11 << 8) != 1) {
		return 0;
	}
	l = 0;
	var ch12 = data.readU8(10);
	var ch22 = data.readU8(11);
	r = (ch22 | ch12 << 8) - 1;
	needle = glyph1 << 16 | glyph2;
	while(l <= r) {
		m = l + r >> 1;
		var pos = 18 + m * 6;
		var ch13 = data.readU8(pos);
		var ch23 = data.readU8(pos + 1);
		var ch3 = data.readU8(pos + 2);
		var ch4 = data.readU8(pos + 3);
		straw = ch4 | ch3 << 8 | ch23 << 16 | ch13 << 24;
		if(needle < straw) {
			r = m - 1;
		} else if(needle > straw) {
			l = m + 1;
		} else {
			var pos1 = 22 + m * 6;
			var ch14 = data.readU8(pos1);
			var ch24 = data.readU8(pos1 + 1);
			var n = ch24 | ch14 << 8;
			if((n & 32768) != 0) {
				return n - 65536;
			} else {
				return n;
			}
		}
	}
	return 0;
};
kha_graphics2_truetype_StbTruetype.stbtt_GetCodepointKernAdvance = function(info,ch1,ch2) {
	if(info.kern == 0) {
		return 0;
	}
	return kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphKernAdvance(info,kha_graphics2_truetype_StbTruetype.stbtt_FindGlyphIndex(info,ch1),kha_graphics2_truetype_StbTruetype.stbtt_FindGlyphIndex(info,ch2));
};
kha_graphics2_truetype_StbTruetype.stbtt_GetCodepointHMetrics = function(info,codepoint) {
	return kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphHMetrics(info,kha_graphics2_truetype_StbTruetype.stbtt_FindGlyphIndex(info,codepoint));
};
kha_graphics2_truetype_StbTruetype.stbtt_GetFontVMetrics = function(info) {
	var metrics = new kha_graphics2_truetype_Stbtt_$temp_$font_$v_$metrics();
	var p = info.data;
	var pos = info.hhea + 4;
	var ch1 = p.readU8(pos);
	var ch2 = p.readU8(pos + 1);
	var n = ch2 | ch1 << 8;
	metrics.ascent = (n & 32768) != 0 ? n - 65536 : n;
	var p1 = info.data;
	var pos1 = info.hhea + 6;
	var ch11 = p1.readU8(pos1);
	var ch21 = p1.readU8(pos1 + 1);
	var n1 = ch21 | ch11 << 8;
	metrics.descent = (n1 & 32768) != 0 ? n1 - 65536 : n1;
	var p2 = info.data;
	var pos2 = info.hhea + 8;
	var ch12 = p2.readU8(pos2);
	var ch22 = p2.readU8(pos2 + 1);
	var n2 = ch22 | ch12 << 8;
	metrics.lineGap = (n2 & 32768) != 0 ? n2 - 65536 : n2;
	return metrics;
};
kha_graphics2_truetype_StbTruetype.stbtt_GetFontBoundingBox = function(info) {
	var rect = new kha_graphics2_truetype_Stbtt_$temp_$rect();
	var p = info.data;
	var pos = info.head + 36;
	var ch1 = p.readU8(pos);
	var ch2 = p.readU8(pos + 1);
	var n = ch2 | ch1 << 8;
	rect.x0 = (n & 32768) != 0 ? n - 65536 : n;
	var p1 = info.data;
	var pos1 = info.head + 38;
	var ch11 = p1.readU8(pos1);
	var ch21 = p1.readU8(pos1 + 1);
	var n1 = ch21 | ch11 << 8;
	rect.y0 = (n1 & 32768) != 0 ? n1 - 65536 : n1;
	var p2 = info.data;
	var pos2 = info.head + 40;
	var ch12 = p2.readU8(pos2);
	var ch22 = p2.readU8(pos2 + 1);
	var n2 = ch22 | ch12 << 8;
	rect.x1 = (n2 & 32768) != 0 ? n2 - 65536 : n2;
	var p3 = info.data;
	var pos3 = info.head + 42;
	var ch13 = p3.readU8(pos3);
	var ch23 = p3.readU8(pos3 + 1);
	var n3 = ch23 | ch13 << 8;
	rect.y1 = (n3 & 32768) != 0 ? n3 - 65536 : n3;
	return rect;
};
kha_graphics2_truetype_StbTruetype.stbtt_ScaleForPixelHeight = function(info,height) {
	var p = info.data;
	var pos = info.hhea + 4;
	var ch1 = p.readU8(pos);
	var ch2 = p.readU8(pos + 1);
	var n = ch2 | ch1 << 8;
	var p1 = info.data;
	var pos1 = info.hhea + 6;
	var ch11 = p1.readU8(pos1);
	var ch21 = p1.readU8(pos1 + 1);
	var n1 = ch21 | ch11 << 8;
	var fheight = ((n & 32768) != 0 ? n - 65536 : n) - ((n1 & 32768) != 0 ? n1 - 65536 : n1);
	return height / fheight;
};
kha_graphics2_truetype_StbTruetype.stbtt_ScaleForMappingEmToPixels = function(info,pixels) {
	var p = info.data;
	var pos = info.head + 18;
	var ch1 = p.readU8(pos);
	var ch2 = p.readU8(pos + 1);
	var unitsPerEm = ch2 | ch1 << 8;
	return pixels / unitsPerEm;
};
kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphBitmapBoxSubpixel = function(font,glyph,scale_x,scale_y,shift_x,shift_y) {
	var rect = new kha_graphics2_truetype_Stbtt_$temp_$rect();
	if(!kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphBox(font,glyph,rect)) {
		rect.x0 = 0;
		rect.y0 = 0;
		rect.x1 = 0;
		rect.y1 = 0;
	} else {
		var x0 = rect.x0;
		var x1 = rect.x1;
		var y0 = rect.y0;
		var y1 = rect.y1;
		rect.x0 = Math.floor(x0 * scale_x + shift_x);
		rect.y0 = Math.floor(-y1 * scale_y + shift_y);
		rect.x1 = Math.ceil(x1 * scale_x + shift_x);
		rect.y1 = Math.ceil(-y0 * scale_y + shift_y);
	}
	return rect;
};
kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphBitmapBox = function(font,glyph,scale_x,scale_y) {
	return kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphBitmapBoxSubpixel(font,glyph,scale_x,scale_y,0.0,0.0);
};
kha_graphics2_truetype_StbTruetype.stbtt_GetCodepointBitmapBoxSubpixel = function(font,codepoint,scale_x,scale_y,shift_x,shift_y) {
	return kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphBitmapBoxSubpixel(font,kha_graphics2_truetype_StbTruetype.stbtt_FindGlyphIndex(font,codepoint),scale_x,scale_y,shift_x,shift_y);
};
kha_graphics2_truetype_StbTruetype.stbtt_GetCodepointBitmapBox = function(font,codepoint,scale_x,scale_y) {
	return kha_graphics2_truetype_StbTruetype.stbtt_GetCodepointBitmapBoxSubpixel(font,codepoint,scale_x,scale_y,0.0,0.0);
};
kha_graphics2_truetype_StbTruetype.stbtt__new_active = function(e,eIndex,off_x,start_point) {
	var z = new kha_graphics2_truetype_Stbtt_$_$active_$edge();
	var dxdy = (e[eIndex].x1 - e[eIndex].x0) / (e[eIndex].y1 - e[eIndex].y0);
	if(z == null) {
		return z;
	}
	z.fdx = dxdy;
	z.fdy = dxdy != 0.0 ? 1.0 / dxdy : 0.0;
	z.fx = e[eIndex].x0 + dxdy * (start_point - e[eIndex].y0);
	z.fx -= off_x;
	z.direction = e[eIndex].invert ? 1.0 : -1.0;
	z.sy = e[eIndex].y0;
	z.ey = e[eIndex].y1;
	z.next = null;
	return z;
};
kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge = function(scanline,scanlineIndex,x,e,x0,y0,x1,y1) {
	if(y0 == y1) {
		return;
	}
	if(!(y0 < y1)) {
		throw new js__$Boot_HaxeError("Error");
	}
	if(!(e.sy <= e.ey)) {
		throw new js__$Boot_HaxeError("Error");
	}
	if(y0 > e.ey) {
		return;
	}
	if(y1 < e.sy) {
		return;
	}
	if(y0 < e.sy) {
		x0 += (x1 - x0) * (e.sy - y0) / (y1 - y0);
		y0 = e.sy;
	}
	if(y1 > e.ey) {
		x1 += (x1 - x0) * (e.ey - y1) / (y1 - y0);
		y1 = e.ey;
	}
	if(x0 == x) {
		if(!(x1 <= x + 1)) {
			throw new js__$Boot_HaxeError("Error");
		}
	} else if(x0 == x + 1) {
		if(!(x1 >= x)) {
			throw new js__$Boot_HaxeError("Error");
		}
	} else if(x0 <= x) {
		if(!(x1 <= x)) {
			throw new js__$Boot_HaxeError("Error");
		}
	} else if(x0 >= x + 1) {
		if(!(x1 >= x + 1)) {
			throw new js__$Boot_HaxeError("Error");
		}
	} else if(!(x1 >= x && x1 <= x + 1)) {
		throw new js__$Boot_HaxeError("Error");
	}
	if(x0 <= x && x1 <= x) {
		var _g = scanlineIndex + x;
		var _g1 = scanline;
		_g1[_g] = _g1[_g] + e.direction * (y1 - y0);
	} else if(!(x0 >= x + 1 && x1 >= x + 1)) {
		if(!(x0 >= x && x0 <= x + 1 && x1 >= x && x1 <= x + 1)) {
			throw new js__$Boot_HaxeError("Error");
		}
		var _g2 = scanlineIndex + x;
		var _g11 = scanline;
		_g11[_g2] = _g11[_g2] + e.direction * (y1 - y0) * (1 - (x0 - x + (x1 - x)) / 2);
	}
};
kha_graphics2_truetype_StbTruetype.stbtt__fill_active_edges_new = function(scanline,scanline_fill,scanline_fillIndex,len,e,y_top) {
	var y_bottom = y_top + 1;
	while(e != null) {
		if(!(e.ey >= y_top)) {
			throw new js__$Boot_HaxeError("Error");
		}
		if(e.fdx == 0) {
			var x0 = e.fx;
			if(x0 < len) {
				if(x0 >= 0) {
					kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge(scanline,0,x0 | 0,e,x0,y_top,x0,y_bottom);
					kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge(scanline_fill,scanline_fillIndex - 1,x0 + 1 | 0,e,x0,y_top,x0,y_bottom);
				} else {
					kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge(scanline_fill,scanline_fillIndex - 1,0,e,x0,y_top,x0,y_bottom);
				}
			}
		} else {
			var x01 = e.fx;
			var dx = e.fdx;
			var xb = x01 + dx;
			var x_top;
			var x_bottom;
			var sy0;
			var sy1;
			var dy = e.fdy;
			if(!(e.sy <= y_bottom && e.ey >= y_top)) {
				throw new js__$Boot_HaxeError("Error");
			}
			if(e.sy > y_top) {
				x_top = x01 + dx * (e.sy - y_top);
				sy0 = e.sy;
			} else {
				x_top = x01;
				sy0 = y_top;
			}
			if(e.ey < y_bottom) {
				x_bottom = x01 + dx * (e.ey - y_top);
				sy1 = e.ey;
			} else {
				x_bottom = xb;
				sy1 = y_bottom;
			}
			if(x_top >= 0 && x_bottom >= 0 && x_top < len && x_bottom < len) {
				if((x_top | 0) == (x_bottom | 0)) {
					var height;
					var x = x_top | 0;
					height = sy1 - sy0;
					if(!(x >= 0 && x < len)) {
						throw new js__$Boot_HaxeError("Error");
					}
					var _g = x;
					var _g1 = scanline;
					_g1[_g] = _g1[_g] + e.direction * (1 - (x_top - x + (x_bottom - x)) / 2) * height;
					var _g2 = scanline_fillIndex + x;
					var _g11 = scanline_fill;
					_g11[_g2] = _g11[_g2] + e.direction * height;
				} else {
					var x1;
					var x11;
					var x2;
					var y_crossing;
					var step;
					var sign;
					var area;
					if(x_top > x_bottom) {
						var t;
						sy0 = y_bottom - (sy0 - y_top);
						sy1 = y_bottom - (sy1 - y_top);
						t = sy0;
						sy0 = sy1;
						sy1 = t;
						t = x_bottom;
						x_bottom = x_top;
						x_top = t;
						dx = -dx;
						dy = -dy;
						t = x01;
						x01 = xb;
						xb = t;
					}
					x11 = x_top | 0;
					x2 = x_bottom | 0;
					y_crossing = (x11 + 1 - x01) * dy + y_top;
					sign = e.direction;
					area = sign * (y_crossing - sy0);
					var _g3 = x11;
					var _g12 = scanline;
					_g12[_g3] = _g12[_g3] + area * (1 - (x_top - x11 + (x11 + 1 - x11)) / 2);
					step = sign * dy;
					var _g13 = x11 + 1;
					var _g4 = x2;
					while(_g13 < _g4) {
						var x3 = _g13++;
						var _g21 = x3;
						var _g31 = scanline;
						_g31[_g21] = _g31[_g21] + (area + step / 2);
						area += step;
					}
					y_crossing += dy * (x2 - (x11 + 1));
					if(!(Math.abs(area) <= 1.01)) {
						throw new js__$Boot_HaxeError("Error");
					}
					var _g5 = x2;
					var _g14 = scanline;
					_g14[_g5] = _g14[_g5] + (area + sign * (1 - (x2 - x2 + (x_bottom - x2)) / 2) * (sy1 - y_crossing));
					var _g6 = scanline_fillIndex + x2;
					var _g15 = scanline_fill;
					_g15[_g6] = _g15[_g6] + sign * (sy1 - sy0);
				}
			} else {
				var _g16 = 0;
				var _g7 = len;
				while(_g16 < _g7) {
					var x4 = _g16++;
					var y0 = y_top;
					var x12 = x4;
					var x21 = x4 + 1;
					var x31 = xb;
					var y3 = y_bottom;
					var y1;
					var y2;
					y1 = (x4 - x01) / dx + y_top;
					y2 = (x4 + 1 - x01) / dx + y_top;
					if(x01 < x12 && x31 > x21) {
						kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge(scanline,0,x4,e,x01,y0,x12,y1);
						kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge(scanline,0,x4,e,x12,y1,x21,y2);
						kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge(scanline,0,x4,e,x21,y2,x31,y3);
					} else if(x31 < x12 && x01 > x21) {
						kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge(scanline,0,x4,e,x01,y0,x21,y2);
						kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge(scanline,0,x4,e,x21,y2,x12,y1);
						kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge(scanline,0,x4,e,x12,y1,x31,y3);
					} else if(x01 < x12 && x31 > x12) {
						kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge(scanline,0,x4,e,x01,y0,x12,y1);
						kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge(scanline,0,x4,e,x12,y1,x31,y3);
					} else if(x31 < x12 && x01 > x12) {
						kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge(scanline,0,x4,e,x01,y0,x12,y1);
						kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge(scanline,0,x4,e,x12,y1,x31,y3);
					} else if(x01 < x21 && x31 > x21) {
						kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge(scanline,0,x4,e,x01,y0,x21,y2);
						kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge(scanline,0,x4,e,x21,y2,x31,y3);
					} else if(x31 < x21 && x01 > x21) {
						kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge(scanline,0,x4,e,x01,y0,x21,y2);
						kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge(scanline,0,x4,e,x21,y2,x31,y3);
					} else {
						kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge(scanline,0,x4,e,x01,y0,x31,y3);
					}
				}
			}
		}
		e = e.next;
	}
};
kha_graphics2_truetype_StbTruetype.stbtt__rasterize_sorted_edges = function(result,e,n,vsubsample,off_x,off_y) {
	var active = null;
	var y;
	var j = 0;
	var i;
	var scanline;
	var scanline2;
	var scanline2Index = 0;
	var eIndex = 0;
	if(result.w > 64) {
		var length = result.w * 2 + 1;
		var this1 = new Array(length);
		scanline = this1;
	} else {
		var this2 = new Array(129);
		scanline = this2;
	}
	scanline2 = scanline;
	scanline2Index = result.w;
	y = off_y;
	e[eIndex + n].y0 = off_y + result.h + 1;
	while(j < result.h) {
		var scan_y_top = y + 0.0;
		var scan_y_bottom = y + 1.0;
		var step_value;
		var step_parent;
		step_value = active;
		step_parent = null;
		var _g1 = 0;
		var _g = result.w;
		while(_g1 < _g) {
			var i1 = _g1++;
			scanline[i1] = 0;
		}
		var _g11 = 0;
		var _g2 = result.w + 1;
		while(_g11 < _g2) {
			var i2 = _g11++;
			scanline2[scanline2Index + i2] = 0;
		}
		while(step_value != null) {
			var z = step_value;
			if(z.ey <= scan_y_top) {
				if(step_parent == null) {
					active = z.next;
					step_value = z.next;
				} else {
					step_parent.next = z.next;
					step_value = z.next;
				}
				if(z.direction == 0) {
					throw new js__$Boot_HaxeError("Error");
				}
				z.direction = 0;
			} else {
				step_parent = step_value;
				step_value = step_value.next;
			}
		}
		while(e[eIndex].y0 <= scan_y_bottom) {
			if(e[eIndex].y0 != e[eIndex].y1) {
				var z1 = kha_graphics2_truetype_StbTruetype.stbtt__new_active(e,eIndex,off_x,scan_y_top);
				if(!(z1.ey >= scan_y_top)) {
					throw new js__$Boot_HaxeError("Error");
				}
				z1.next = active;
				active = z1;
			}
			++eIndex;
		}
		if(active != null) {
			kha_graphics2_truetype_StbTruetype.stbtt__fill_active_edges_new(scanline,scanline2,scanline2Index + 1,result.w,active,scan_y_top);
		}
		var sum = 0;
		var _g12 = 0;
		var _g3 = result.w;
		while(_g12 < _g3) {
			var i3 = _g12++;
			var k;
			var m;
			sum += scanline2[scanline2Index + i3];
			k = scanline[i3] + sum;
			k = Math.abs(k) * 255.0 + 0.5;
			m = k | 0;
			if(m > 255) {
				m = 255;
			}
			result.pixels.writeU8(result.pixels_offset + j * result.stride + i3,m);
		}
		step_parent = null;
		step_value = active;
		while(step_value != null) {
			var z2 = step_value;
			z2.fx += z2.fdx;
			step_parent = step_value;
			step_value = step_value.next;
		}
		++y;
		++j;
	}
};
kha_graphics2_truetype_StbTruetype.STBTT__COMPARE = function(a,b) {
	return a.y0 < b.y0;
};
kha_graphics2_truetype_StbTruetype.stbtt__sort_edges_ins_sort = function(p,n) {
	var i;
	var j;
	var _g1 = 1;
	var _g = n;
	while(_g1 < _g) {
		var i1 = _g1++;
		var t = p[i1];
		var a = t;
		j = i1;
		while(j > 0) {
			var b = p[j - 1];
			var c = kha_graphics2_truetype_StbTruetype.STBTT__COMPARE(a,b);
			if(!c) {
				break;
			}
			p[j] = p[j - 1];
			--j;
		}
		if(i1 != j) {
			p[j] = t;
		}
	}
};
kha_graphics2_truetype_StbTruetype.stbtt__sort_edges_quicksort = function(p,pIndex,n) {
	while(n > 12) {
		var t;
		var c01;
		var c12;
		var c;
		var m;
		var i;
		var j;
		m = n >> 1;
		c01 = kha_graphics2_truetype_StbTruetype.STBTT__COMPARE(p[pIndex],p[pIndex + m]);
		c12 = kha_graphics2_truetype_StbTruetype.STBTT__COMPARE(p[pIndex + m],p[pIndex + n - 1]);
		if(c01 != c12) {
			var z;
			c = kha_graphics2_truetype_StbTruetype.STBTT__COMPARE(p[pIndex],p[pIndex + n - 1]);
			if(c == c12) {
				z = 0;
			} else {
				z = n - 1;
			}
			t = p[pIndex + z];
			p[pIndex + z] = p[pIndex + m];
			p[pIndex + m] = t;
		}
		t = p[pIndex];
		p[pIndex] = p[pIndex + m];
		p[pIndex + m] = t;
		i = 1;
		j = n - 1;
		while(true) {
			while(kha_graphics2_truetype_StbTruetype.STBTT__COMPARE(p[pIndex + i],p[pIndex])) ++i;
			while(kha_graphics2_truetype_StbTruetype.STBTT__COMPARE(p[pIndex],p[pIndex + j])) --j;
			if(i >= j) {
				break;
			}
			t = p[pIndex + i];
			p[pIndex + i] = p[pIndex + j];
			p[pIndex + j] = t;
			++i;
			--j;
		}
		if(j < n - i) {
			kha_graphics2_truetype_StbTruetype.stbtt__sort_edges_quicksort(p,pIndex,j);
			pIndex += i;
			n -= i;
		} else {
			kha_graphics2_truetype_StbTruetype.stbtt__sort_edges_quicksort(p,pIndex + i,n - i);
			n = j;
		}
	}
};
kha_graphics2_truetype_StbTruetype.stbtt__sort_edges = function(p,n) {
	kha_graphics2_truetype_StbTruetype.stbtt__sort_edges_quicksort(p,0,n);
	kha_graphics2_truetype_StbTruetype.stbtt__sort_edges_ins_sort(p,n);
};
kha_graphics2_truetype_StbTruetype.stbtt__rasterize = function(result,pts,wcount,windings,scale_x,scale_y,shift_x,shift_y,off_x,off_y,invert) {
	var y_scale_inv = invert ? -scale_y : scale_y;
	var e;
	var n;
	var i;
	var j;
	var k;
	var m;
	var vsubsample = 1;
	var ptsIndex = 0;
	n = 0;
	var _g1 = 0;
	var _g = windings;
	while(_g1 < _g) {
		var i1 = _g1++;
		n += wcount[i1];
	}
	var this1 = new Array(n + 1);
	e = this1;
	if(e == null) {
		return;
	} else {
		var _g11 = 0;
		var _g2 = e.length;
		while(_g11 < _g2) {
			var i2 = _g11++;
			e[i2] = new kha_graphics2_truetype_Stbtt_$_$edge();
		}
	}
	n = 0;
	m = 0;
	var _g12 = 0;
	var _g3 = windings;
	while(_g12 < _g3) {
		var i3 = _g12++;
		var p = pts;
		var pIndex = ptsIndex + m;
		m += wcount[i3];
		j = wcount[i3] - 1;
		var _g31 = 0;
		var _g21 = wcount[i3];
		while(_g31 < _g21) {
			var k1 = _g31++;
			var a = k1;
			var b = j;
			if(p[pIndex + j].y == p[pIndex + k1].y) {
				j = k1;
				continue;
			}
			e[n].invert = false;
			if(invert ? p[pIndex + j].y > p[pIndex + k1].y : p[pIndex + j].y < p[pIndex + k1].y) {
				e[n].invert = true;
				a = j;
				b = k1;
			}
			e[n].x0 = p[pIndex + a].x * scale_x + shift_x;
			e[n].y0 = (p[pIndex + a].y * y_scale_inv + shift_y) * vsubsample;
			e[n].x1 = p[pIndex + b].x * scale_x + shift_x;
			e[n].y1 = (p[pIndex + b].y * y_scale_inv + shift_y) * vsubsample;
			++n;
			j = k1;
		}
	}
	kha_graphics2_truetype_StbTruetype.stbtt__sort_edges(e,n);
	kha_graphics2_truetype_StbTruetype.stbtt__rasterize_sorted_edges(result,e,n,vsubsample,off_x,off_y);
};
kha_graphics2_truetype_StbTruetype.stbtt__add_point = function(points,n,x,y) {
	if(points == null) {
		return;
	}
	points[n].x = x;
	points[n].y = y;
};
kha_graphics2_truetype_StbTruetype.stbtt__tesselate_curve = function(points,num_points,x0,y0,x1,y1,x2,y2,objspace_flatness_squared,n) {
	var mx = (x0 + 2 * x1 + x2) / 4;
	var my = (y0 + 2 * y1 + y2) / 4;
	var dx = (x0 + x2) / 2 - mx;
	var dy = (y0 + y2) / 2 - my;
	if(n > 16) {
		return 1;
	}
	if(dx * dx + dy * dy > objspace_flatness_squared) {
		kha_graphics2_truetype_StbTruetype.stbtt__tesselate_curve(points,num_points,x0,y0,(x0 + x1) / 2.0,(y0 + y1) / 2.0,mx,my,objspace_flatness_squared,n + 1);
		kha_graphics2_truetype_StbTruetype.stbtt__tesselate_curve(points,num_points,mx,my,(x1 + x2) / 2.0,(y1 + y2) / 2.0,x2,y2,objspace_flatness_squared,n + 1);
	} else {
		kha_graphics2_truetype_StbTruetype.stbtt__add_point(points,num_points.value,x2,y2);
		num_points.value += 1;
	}
	return 1;
};
kha_graphics2_truetype_StbTruetype.stbtt_FlattenCurves = function(vertices,num_verts,objspace_flatness,contour_lengths,num_contours) {
	var points = null;
	var num_points = 0;
	var objspace_flatness_squared = objspace_flatness * objspace_flatness;
	var i;
	var n = 0;
	var start = 0;
	var pass;
	var _g1 = 0;
	var _g = num_verts;
	while(_g1 < _g) {
		var i1 = _g1++;
		if(vertices[i1].type == 1) {
			++n;
		}
	}
	num_contours.value = n;
	if(n == 0) {
		return null;
	}
	var this1 = new Array(n);
	contour_lengths.value = this1;
	if(contour_lengths.value == null) {
		num_contours.value = 0;
		return null;
	}
	var _g2 = 0;
	while(_g2 < 2) {
		var pass1 = _g2++;
		var x = 0;
		var y = 0;
		if(pass1 == 1) {
			var this2 = new Array(num_points);
			points = this2;
			if(points == null) {
				contour_lengths.value = null;
				num_contours.value = 0;
				return null;
			} else {
				var _g21 = 0;
				var _g11 = points.length;
				while(_g21 < _g11) {
					var i2 = _g21++;
					points[i2] = new kha_graphics2_truetype_Stbtt_$_$point();
				}
			}
		}
		num_points = 0;
		n = -1;
		var _g22 = 0;
		var _g12 = num_verts;
		while(_g22 < _g12) {
			var i3 = _g22++;
			var _g3 = vertices[i3].type;
			switch(_g3) {
			case 1:
				if(n >= 0) {
					contour_lengths.value[n] = num_points - start;
				}
				++n;
				start = num_points;
				x = vertices[i3].x;
				y = vertices[i3].y;
				kha_graphics2_truetype_StbTruetype.stbtt__add_point(points,num_points++,x,y);
				break;
			case 2:
				x = vertices[i3].x;
				y = vertices[i3].y;
				kha_graphics2_truetype_StbTruetype.stbtt__add_point(points,num_points++,x,y);
				break;
			case 3:
				var num_points_reference = { value : num_points};
				kha_graphics2_truetype_StbTruetype.stbtt__tesselate_curve(points,num_points_reference,x,y,vertices[i3].cx,vertices[i3].cy,vertices[i3].x,vertices[i3].y,objspace_flatness_squared,0);
				num_points = num_points_reference.value;
				x = vertices[i3].x;
				y = vertices[i3].y;
				break;
			}
		}
		contour_lengths.value[n] = num_points - start;
	}
	return points;
};
kha_graphics2_truetype_StbTruetype.stbtt_Rasterize = function(result,flatness_in_pixels,vertices,num_verts,scale_x,scale_y,shift_x,shift_y,x_off,y_off,invert) {
	var scale = scale_x > scale_y ? scale_y : scale_x;
	var winding_count = 0;
	var winding_lengths = null;
	var winding_count_reference = { value : winding_count};
	var winding_lengths_reference = new kha_graphics2_truetype_VectorOfIntPointer();
	var windings = kha_graphics2_truetype_StbTruetype.stbtt_FlattenCurves(vertices,num_verts,flatness_in_pixels / scale,winding_lengths_reference,winding_count_reference);
	winding_count = winding_count_reference.value;
	winding_lengths = winding_lengths_reference.value;
	if(windings != null) {
		kha_graphics2_truetype_StbTruetype.stbtt__rasterize(result,windings,winding_lengths,winding_count,scale_x,scale_y,shift_x,shift_y,x_off,y_off,invert);
	}
};
kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphBitmapSubpixel = function(info,scale_x,scale_y,shift_x,shift_y,glyph,region) {
	var ix0;
	var iy0;
	var ix1;
	var iy1;
	var gbm = new kha_graphics2_truetype_Stbtt_$_$bitmap();
	var vertices = kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphShape(info,glyph);
	var num_verts = vertices.length;
	if(scale_x == 0) {
		scale_x = scale_y;
	}
	if(scale_y == 0) {
		if(scale_x == 0) {
			return null;
		}
		scale_y = scale_x;
	}
	var rect = kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphBitmapBoxSubpixel(info,glyph,scale_x,scale_y,shift_x,shift_y);
	ix0 = rect.x0;
	iy0 = rect.y0;
	ix1 = rect.x1;
	iy1 = rect.y1;
	gbm.w = ix1 - ix0;
	gbm.h = iy1 - iy0;
	gbm.pixels = null;
	region.width = gbm.w;
	region.height = gbm.h;
	region.xoff = ix0;
	region.yoff = iy0;
	if(gbm.w != 0 && gbm.h != 0) {
		gbm.pixels = kha_internal_BytesBlob.alloc(gbm.w * gbm.h);
		if(gbm.pixels != null) {
			gbm.stride = gbm.w;
			kha_graphics2_truetype_StbTruetype.stbtt_Rasterize(gbm,0.35,vertices,num_verts,scale_x,scale_y,shift_x,shift_y,ix0,iy0,true);
		}
	}
	return gbm.pixels;
};
kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphBitmap = function(info,scale_x,scale_y,glyph,region) {
	return kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphBitmapSubpixel(info,scale_x,scale_y,0.0,0.0,glyph,region);
};
kha_graphics2_truetype_StbTruetype.stbtt_MakeGlyphBitmapSubpixel = function(info,output,output_offset,out_w,out_h,out_stride,scale_x,scale_y,shift_x,shift_y,glyph) {
	var ix0 = 0;
	var iy0 = 0;
	var vertices = kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphShape(info,glyph);
	var num_verts = vertices == null ? 0 : vertices.length;
	var gbm = new kha_graphics2_truetype_Stbtt_$_$bitmap();
	var rect = kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphBitmapBoxSubpixel(info,glyph,scale_x,scale_y,shift_x,shift_y);
	ix0 = rect.x0;
	iy0 = rect.y0;
	gbm.pixels = output;
	gbm.pixels_offset = output_offset;
	gbm.w = out_w;
	gbm.h = out_h;
	gbm.stride = out_stride;
	if(gbm.w != 0 && gbm.h != 0) {
		kha_graphics2_truetype_StbTruetype.stbtt_Rasterize(gbm,0.35,vertices,num_verts,scale_x,scale_y,shift_x,shift_y,ix0,iy0,true);
	}
};
kha_graphics2_truetype_StbTruetype.stbtt_MakeGlyphBitmap = function(info,output,output_offset,out_w,out_h,out_stride,scale_x,scale_y,glyph) {
	kha_graphics2_truetype_StbTruetype.stbtt_MakeGlyphBitmapSubpixel(info,output,output_offset,out_w,out_h,out_stride,scale_x,scale_y,0.0,0.0,glyph);
};
kha_graphics2_truetype_StbTruetype.stbtt_GetCodepointBitmapSubpixel = function(info,scale_x,scale_y,shift_x,shift_y,codepoint,region) {
	return kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphBitmapSubpixel(info,scale_x,scale_y,shift_x,shift_y,kha_graphics2_truetype_StbTruetype.stbtt_FindGlyphIndex(info,codepoint),region);
};
kha_graphics2_truetype_StbTruetype.stbtt_MakeCodepointBitmapSubpixel = function(info,output,output_offset,out_w,out_h,out_stride,scale_x,scale_y,shift_x,shift_y,codepoint) {
	kha_graphics2_truetype_StbTruetype.stbtt_MakeGlyphBitmapSubpixel(info,output,output_offset,out_w,out_h,out_stride,scale_x,scale_y,shift_x,shift_y,kha_graphics2_truetype_StbTruetype.stbtt_FindGlyphIndex(info,codepoint));
};
kha_graphics2_truetype_StbTruetype.stbtt_GetCodepointBitmap = function(info,scale_x,scale_y,codepoint,region) {
	return kha_graphics2_truetype_StbTruetype.stbtt_GetCodepointBitmapSubpixel(info,scale_x,scale_y,0.0,0.0,codepoint,region);
};
kha_graphics2_truetype_StbTruetype.stbtt_MakeCodepointBitmap = function(info,output,output_offset,out_w,out_h,out_stride,scale_x,scale_y,codepoint) {
	kha_graphics2_truetype_StbTruetype.stbtt_MakeCodepointBitmapSubpixel(info,output,output_offset,out_w,out_h,out_stride,scale_x,scale_y,0.0,0.0,codepoint);
};
kha_graphics2_truetype_StbTruetype.stbtt_BakeFontBitmap = function(data,offset,pixel_height,pixels,pw,ph,chars,chardata) {
	var scale;
	var x;
	var y;
	var bottom_y;
	var f = new kha_graphics2_truetype_Stbtt_$fontinfo();
	if(!kha_graphics2_truetype_StbTruetype.stbtt_InitFont(f,data,offset)) {
		return -1;
	}
	var _g1 = 0;
	var _g = pw * ph;
	while(_g1 < _g) {
		var i = _g1++;
		pixels.writeU8(i,0);
	}
	y = 1;
	x = y;
	bottom_y = 1;
	scale = kha_graphics2_truetype_StbTruetype.stbtt_ScaleForPixelHeight(f,pixel_height);
	var i1 = 0;
	var _g2 = 0;
	while(_g2 < chars.length) {
		var index = chars[_g2];
		++_g2;
		var advance;
		var lsb;
		var x0;
		var y0;
		var x1;
		var y1;
		var gw;
		var gh;
		var g = kha_graphics2_truetype_StbTruetype.stbtt_FindGlyphIndex(f,index);
		var metrics = kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphHMetrics(f,g);
		advance = metrics.advanceWidth;
		lsb = metrics.leftSideBearing;
		var rect = kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphBitmapBox(f,g,scale,scale);
		x0 = rect.x0;
		y0 = rect.y0;
		x1 = rect.x1;
		y1 = rect.y1;
		gw = x1 - x0;
		gh = y1 - y0;
		if(x + gw + 1 >= pw) {
			y = bottom_y;
			x = 1;
		}
		if(y + gh + 1 >= ph) {
			return -i1;
		}
		if(x + gw >= pw) {
			throw new js__$Boot_HaxeError("Error");
		}
		if(y + gh >= ph) {
			throw new js__$Boot_HaxeError("Error");
		}
		kha_graphics2_truetype_StbTruetype.stbtt_MakeGlyphBitmap(f,pixels,x + y * pw,gw,gh,pw,scale,scale,g);
		chardata[i1].x0 = x;
		chardata[i1].y0 = y;
		chardata[i1].x1 = x + gw;
		chardata[i1].y1 = y + gh;
		chardata[i1].xadvance = scale * advance;
		chardata[i1].xoff = x0;
		chardata[i1].yoff = y0;
		x = x + gw + 1;
		if(y + gh + 1 > bottom_y) {
			bottom_y = y + gh + 1;
		}
		++i1;
	}
	return bottom_y;
};
kha_graphics2_truetype_StbTruetype.stbtt_GetBakedQuad = function(chardata,pw,ph,char_index,xpos,ypos,q,opengl_fillrule) {
	var d3d_bias = opengl_fillrule ? 0 : -0.5;
	var ipw = 1.0 / pw;
	var iph = 1.0 / ph;
	var b = chardata[char_index];
	var round_x = Math.floor(xpos.value + b.xoff + 0.5);
	var round_y = Math.floor(ypos.value + b.yoff + 0.5);
	q.x0 = round_x + d3d_bias;
	q.y0 = round_y + d3d_bias;
	q.x1 = round_x + b.x1 - b.x0 + d3d_bias;
	q.y1 = round_y + b.y1 - b.y0 + d3d_bias;
	q.s0 = b.x0 * ipw;
	q.t0 = b.y0 * iph;
	q.s1 = b.x1 * ipw;
	q.t1 = b.y1 * iph;
	xpos.value += b.xadvance;
};
var kha_graphics4_BlendingFactor = $hxClasses["kha.graphics4.BlendingFactor"] = { __ename__ : true, __constructs__ : ["Undefined","BlendOne","BlendZero","SourceAlpha","DestinationAlpha","InverseSourceAlpha","InverseDestinationAlpha","SourceColor","DestinationColor","InverseSourceColor","InverseDestinationColor"] };
kha_graphics4_BlendingFactor.Undefined = ["Undefined",0];
kha_graphics4_BlendingFactor.Undefined.toString = $estr;
kha_graphics4_BlendingFactor.Undefined.__enum__ = kha_graphics4_BlendingFactor;
kha_graphics4_BlendingFactor.BlendOne = ["BlendOne",1];
kha_graphics4_BlendingFactor.BlendOne.toString = $estr;
kha_graphics4_BlendingFactor.BlendOne.__enum__ = kha_graphics4_BlendingFactor;
kha_graphics4_BlendingFactor.BlendZero = ["BlendZero",2];
kha_graphics4_BlendingFactor.BlendZero.toString = $estr;
kha_graphics4_BlendingFactor.BlendZero.__enum__ = kha_graphics4_BlendingFactor;
kha_graphics4_BlendingFactor.SourceAlpha = ["SourceAlpha",3];
kha_graphics4_BlendingFactor.SourceAlpha.toString = $estr;
kha_graphics4_BlendingFactor.SourceAlpha.__enum__ = kha_graphics4_BlendingFactor;
kha_graphics4_BlendingFactor.DestinationAlpha = ["DestinationAlpha",4];
kha_graphics4_BlendingFactor.DestinationAlpha.toString = $estr;
kha_graphics4_BlendingFactor.DestinationAlpha.__enum__ = kha_graphics4_BlendingFactor;
kha_graphics4_BlendingFactor.InverseSourceAlpha = ["InverseSourceAlpha",5];
kha_graphics4_BlendingFactor.InverseSourceAlpha.toString = $estr;
kha_graphics4_BlendingFactor.InverseSourceAlpha.__enum__ = kha_graphics4_BlendingFactor;
kha_graphics4_BlendingFactor.InverseDestinationAlpha = ["InverseDestinationAlpha",6];
kha_graphics4_BlendingFactor.InverseDestinationAlpha.toString = $estr;
kha_graphics4_BlendingFactor.InverseDestinationAlpha.__enum__ = kha_graphics4_BlendingFactor;
kha_graphics4_BlendingFactor.SourceColor = ["SourceColor",7];
kha_graphics4_BlendingFactor.SourceColor.toString = $estr;
kha_graphics4_BlendingFactor.SourceColor.__enum__ = kha_graphics4_BlendingFactor;
kha_graphics4_BlendingFactor.DestinationColor = ["DestinationColor",8];
kha_graphics4_BlendingFactor.DestinationColor.toString = $estr;
kha_graphics4_BlendingFactor.DestinationColor.__enum__ = kha_graphics4_BlendingFactor;
kha_graphics4_BlendingFactor.InverseSourceColor = ["InverseSourceColor",9];
kha_graphics4_BlendingFactor.InverseSourceColor.toString = $estr;
kha_graphics4_BlendingFactor.InverseSourceColor.__enum__ = kha_graphics4_BlendingFactor;
kha_graphics4_BlendingFactor.InverseDestinationColor = ["InverseDestinationColor",10];
kha_graphics4_BlendingFactor.InverseDestinationColor.toString = $estr;
kha_graphics4_BlendingFactor.InverseDestinationColor.__enum__ = kha_graphics4_BlendingFactor;
var kha_graphics4_BlendingOperation = $hxClasses["kha.graphics4.BlendingOperation"] = { __ename__ : true, __constructs__ : ["Add","Subtract","ReverseSubtract","Min","Max"] };
kha_graphics4_BlendingOperation.Add = ["Add",0];
kha_graphics4_BlendingOperation.Add.toString = $estr;
kha_graphics4_BlendingOperation.Add.__enum__ = kha_graphics4_BlendingOperation;
kha_graphics4_BlendingOperation.Subtract = ["Subtract",1];
kha_graphics4_BlendingOperation.Subtract.toString = $estr;
kha_graphics4_BlendingOperation.Subtract.__enum__ = kha_graphics4_BlendingOperation;
kha_graphics4_BlendingOperation.ReverseSubtract = ["ReverseSubtract",2];
kha_graphics4_BlendingOperation.ReverseSubtract.toString = $estr;
kha_graphics4_BlendingOperation.ReverseSubtract.__enum__ = kha_graphics4_BlendingOperation;
kha_graphics4_BlendingOperation.Min = ["Min",3];
kha_graphics4_BlendingOperation.Min.toString = $estr;
kha_graphics4_BlendingOperation.Min.__enum__ = kha_graphics4_BlendingOperation;
kha_graphics4_BlendingOperation.Max = ["Max",4];
kha_graphics4_BlendingOperation.Max.toString = $estr;
kha_graphics4_BlendingOperation.Max.__enum__ = kha_graphics4_BlendingOperation;
var kha_graphics4_CompareMode = $hxClasses["kha.graphics4.CompareMode"] = { __ename__ : true, __constructs__ : ["Always","Never","Equal","NotEqual","Less","LessEqual","Greater","GreaterEqual"] };
kha_graphics4_CompareMode.Always = ["Always",0];
kha_graphics4_CompareMode.Always.toString = $estr;
kha_graphics4_CompareMode.Always.__enum__ = kha_graphics4_CompareMode;
kha_graphics4_CompareMode.Never = ["Never",1];
kha_graphics4_CompareMode.Never.toString = $estr;
kha_graphics4_CompareMode.Never.__enum__ = kha_graphics4_CompareMode;
kha_graphics4_CompareMode.Equal = ["Equal",2];
kha_graphics4_CompareMode.Equal.toString = $estr;
kha_graphics4_CompareMode.Equal.__enum__ = kha_graphics4_CompareMode;
kha_graphics4_CompareMode.NotEqual = ["NotEqual",3];
kha_graphics4_CompareMode.NotEqual.toString = $estr;
kha_graphics4_CompareMode.NotEqual.__enum__ = kha_graphics4_CompareMode;
kha_graphics4_CompareMode.Less = ["Less",4];
kha_graphics4_CompareMode.Less.toString = $estr;
kha_graphics4_CompareMode.Less.__enum__ = kha_graphics4_CompareMode;
kha_graphics4_CompareMode.LessEqual = ["LessEqual",5];
kha_graphics4_CompareMode.LessEqual.toString = $estr;
kha_graphics4_CompareMode.LessEqual.__enum__ = kha_graphics4_CompareMode;
kha_graphics4_CompareMode.Greater = ["Greater",6];
kha_graphics4_CompareMode.Greater.toString = $estr;
kha_graphics4_CompareMode.Greater.__enum__ = kha_graphics4_CompareMode;
kha_graphics4_CompareMode.GreaterEqual = ["GreaterEqual",7];
kha_graphics4_CompareMode.GreaterEqual.toString = $estr;
kha_graphics4_CompareMode.GreaterEqual.__enum__ = kha_graphics4_CompareMode;
var kha_graphics4_ConstantLocation = function() { };
$hxClasses["kha.graphics4.ConstantLocation"] = kha_graphics4_ConstantLocation;
kha_graphics4_ConstantLocation.__name__ = true;
var kha_graphics4_CubeMap = function(size,format,renderTarget,depthStencilFormat) {
	this.isDepthAttachment = false;
	this.depthTexture = null;
	this.texture = null;
	this.frameBuffer = null;
	this.myWidth = size;
	this.myHeight = size;
	this.format = format;
	this.renderTarget = renderTarget;
	this.depthStencilFormat = depthStencilFormat;
	if(renderTarget) {
		this.createTexture();
	}
};
$hxClasses["kha.graphics4.CubeMap"] = kha_graphics4_CubeMap;
kha_graphics4_CubeMap.__name__ = true;
kha_graphics4_CubeMap.__interfaces__ = [kha_Resource,kha_Canvas];
kha_graphics4_CubeMap.createRenderTarget = function(size,format,depthStencil,contextId) {
	if(contextId == null) {
		contextId = 0;
	}
	if(format == null) {
		format = kha_graphics4_TextureFormat.RGBA32;
	}
	if(depthStencil == null) {
		depthStencil = 0;
	}
	return new kha_graphics4_CubeMap(size,format,true,depthStencil);
};
kha_graphics4_CubeMap.prototype = {
	myWidth: null
	,myHeight: null
	,format: null
	,renderTarget: null
	,depthStencilFormat: null
	,graphics4: null
	,frameBuffer: null
	,texture: null
	,depthTexture: null
	,isDepthAttachment: null
	,createTexture: function() {
		if(kha_SystemImpl.gl == null) {
			return;
		}
		this.texture = kha_SystemImpl.gl.createTexture();
		kha_SystemImpl.gl.bindTexture(34067,this.texture);
		kha_SystemImpl.gl.texParameteri(34067,10240,9729);
		kha_SystemImpl.gl.texParameteri(34067,10241,9729);
		kha_SystemImpl.gl.texParameteri(34067,10242,33071);
		kha_SystemImpl.gl.texParameteri(34067,10243,33071);
		if(this.renderTarget) {
			this.frameBuffer = kha_SystemImpl.gl.createFramebuffer();
			kha_SystemImpl.gl.bindFramebuffer(36160,this.frameBuffer);
			var _g = this.format;
			switch(_g[1]) {
			case 0:
				var _g1 = 0;
				while(_g1 < 6) {
					var i = _g1++;
					kha_SystemImpl.gl.texImage2D(34069 + i,0,6408,this.myWidth,this.myHeight,0,6408,5121,null);
				}
				break;
			case 2:
				var _g2 = 0;
				while(_g2 < 6) {
					var i1 = _g2++;
					kha_SystemImpl.gl.texImage2D(34069 + i1,0,kha_SystemImpl.gl2 ? 34836 : 6408,this.myWidth,this.myHeight,0,6408,5126,null);
				}
				break;
			case 3:
				var _g3 = 0;
				while(_g3 < 6) {
					var i2 = _g3++;
					kha_SystemImpl.gl.texImage2D(34069 + i2,0,kha_SystemImpl.gl2 ? 33189 : 6402,this.myWidth,this.myHeight,0,6402,5123,null);
				}
				break;
			case 4:
				var _g4 = 0;
				while(_g4 < 6) {
					var i3 = _g4++;
					kha_SystemImpl.gl.texImage2D(34069 + i3,0,kha_SystemImpl.gl2 ? 34842 : 6408,this.myWidth,this.myHeight,0,6408,kha_SystemImpl.halfFloat.HALF_FLOAT_OES,null);
				}
				break;
			case 5:
				var _g5 = 0;
				while(_g5 < 6) {
					var i4 = _g5++;
					kha_SystemImpl.gl.texImage2D(34069 + i4,0,kha_SystemImpl.gl2 ? 33326 : 6406,this.myWidth,this.myHeight,0,6406,5126,null);
				}
				break;
			case 6:
				var _g6 = 0;
				while(_g6 < 6) {
					var i5 = _g6++;
					kha_SystemImpl.gl.texImage2D(34069 + i5,0,kha_SystemImpl.gl2 ? 33325 : 6406,this.myWidth,this.myHeight,0,6406,kha_SystemImpl.halfFloat.HALF_FLOAT_OES,null);
				}
				break;
			default:
				var _g7 = 0;
				while(_g7 < 6) {
					var i6 = _g7++;
					kha_SystemImpl.gl.texImage2D(34069 + i6,0,6408,this.myWidth,this.myHeight,0,6408,5121,null);
				}
			}
			if(this.format == kha_graphics4_TextureFormat.DEPTH16) {
				kha_SystemImpl.gl.texParameteri(34067,10240,9728);
				kha_SystemImpl.gl.texParameteri(34067,10241,9728);
				this.isDepthAttachment = true;
				if(navigator.appVersion.indexOf("Win") == -1) {
					var colortex = kha_SystemImpl.gl.createTexture();
					kha_SystemImpl.gl.bindTexture(34067,colortex);
					var _g11 = 0;
					while(_g11 < 6) {
						var i7 = _g11++;
						kha_SystemImpl.gl.texImage2D(34069 + i7,0,6408,this.myWidth,this.myHeight,0,6408,5121,null);
						kha_SystemImpl.gl.framebufferTexture2D(36160,36064,34069 + i7,colortex,0);
					}
					kha_SystemImpl.gl.bindTexture(34067,this.texture);
				}
			}
			this.initDepthStencilBuffer(this.depthStencilFormat);
			kha_SystemImpl.gl.bindFramebuffer(36160,null);
		}
		kha_SystemImpl.gl.bindTexture(34067,null);
	}
	,initDepthStencilBuffer: function(depthStencilFormat) {
		switch(depthStencilFormat) {
		case 0:
			break;
		case 1:case 5:
			this.depthTexture = kha_SystemImpl.gl.createTexture();
			kha_SystemImpl.gl.bindTexture(34067,this.depthTexture);
			if(depthStencilFormat == 1) {
				kha_SystemImpl.gl.texImage2D(34067,0,kha_SystemImpl.gl2 ? 33190 : 6402,this.myWidth,this.myHeight,0,6402,5125,null);
			} else {
				kha_SystemImpl.gl.texImage2D(34067,0,kha_SystemImpl.gl2 ? 33189 : 6402,this.myWidth,this.myHeight,0,6402,5123,null);
			}
			kha_SystemImpl.gl.texParameteri(34067,10240,9728);
			kha_SystemImpl.gl.texParameteri(34067,10241,9728);
			kha_SystemImpl.gl.texParameteri(34067,10242,33071);
			kha_SystemImpl.gl.texParameteri(34067,10243,33071);
			kha_SystemImpl.gl.bindFramebuffer(36160,this.frameBuffer);
			kha_SystemImpl.gl.framebufferTexture2D(36160,36096,34067,this.depthTexture,0);
			break;
		case 2:case 3:case 4:
			this.depthTexture = kha_SystemImpl.gl.createTexture();
			kha_SystemImpl.gl.bindTexture(34067,this.depthTexture);
			kha_SystemImpl.gl.texImage2D(34067,0,kha_SystemImpl.gl2 ? 35056 : 34041,this.myWidth,this.myHeight,0,34041,kha_SystemImpl.depthTexture.UNSIGNED_INT_24_8_WEBGL,null);
			kha_SystemImpl.gl.texParameteri(34067,10240,9728);
			kha_SystemImpl.gl.texParameteri(34067,10241,9728);
			kha_SystemImpl.gl.texParameteri(34067,10242,33071);
			kha_SystemImpl.gl.texParameteri(34067,10243,33071);
			kha_SystemImpl.gl.bindFramebuffer(36160,this.frameBuffer);
			kha_SystemImpl.gl.framebufferTexture2D(36160,33306,34067,this.depthTexture,0);
			break;
		}
	}
	,set: function(stage) {
		kha_SystemImpl.gl.activeTexture(33984 + stage);
		kha_SystemImpl.gl.bindTexture(34067,this.texture);
	}
	,setDepth: function(stage) {
		kha_SystemImpl.gl.activeTexture(33984 + stage);
		kha_SystemImpl.gl.bindTexture(34067,this.depthTexture);
	}
	,unload: function() {
	}
	,lock: function(level) {
		if(level == null) {
			level = 0;
		}
		return null;
	}
	,unlock: function() {
	}
	,width: null
	,get_width: function() {
		return this.myWidth;
	}
	,height: null
	,get_height: function() {
		return this.myHeight;
	}
	,g1: null
	,get_g1: function() {
		return null;
	}
	,g2: null
	,get_g2: function() {
		return null;
	}
	,g4: null
	,get_g4: function() {
		if(this.graphics4 == null) {
			this.graphics4 = new kha_js_graphics4_Graphics(this);
		}
		return this.graphics4;
	}
	,__class__: kha_graphics4_CubeMap
};
var kha_graphics4_CullMode = $hxClasses["kha.graphics4.CullMode"] = { __ename__ : true, __constructs__ : ["Clockwise","CounterClockwise","None"] };
kha_graphics4_CullMode.Clockwise = ["Clockwise",0];
kha_graphics4_CullMode.Clockwise.toString = $estr;
kha_graphics4_CullMode.Clockwise.__enum__ = kha_graphics4_CullMode;
kha_graphics4_CullMode.CounterClockwise = ["CounterClockwise",1];
kha_graphics4_CullMode.CounterClockwise.toString = $estr;
kha_graphics4_CullMode.CounterClockwise.__enum__ = kha_graphics4_CullMode;
kha_graphics4_CullMode.None = ["None",2];
kha_graphics4_CullMode.None.toString = $estr;
kha_graphics4_CullMode.None.__enum__ = kha_graphics4_CullMode;
var kha_graphics4_FragmentShader = function(sources,files) {
	this.sources = [];
	var _g = 0;
	while(_g < sources.length) {
		var source = sources[_g];
		++_g;
		this.sources.push(source.toString());
	}
	this.type = 35632;
	this.shader = null;
	this.files = files;
};
$hxClasses["kha.graphics4.FragmentShader"] = kha_graphics4_FragmentShader;
kha_graphics4_FragmentShader.__name__ = true;
kha_graphics4_FragmentShader.fromSource = function(source) {
	var shader = new kha_graphics4_FragmentShader([],["runtime-string"]);
	shader.sources.push(source);
	return shader;
};
kha_graphics4_FragmentShader.prototype = {
	sources: null
	,type: null
	,shader: null
	,files: null
	,'delete': function() {
		kha_SystemImpl.gl.deleteShader(this.shader);
		this.shader = null;
		this.sources = null;
	}
	,__class__: kha_graphics4_FragmentShader
};
var kha_graphics4_GeometryShader = function(source) {
};
$hxClasses["kha.graphics4.GeometryShader"] = kha_graphics4_GeometryShader;
kha_graphics4_GeometryShader.__name__ = true;
kha_graphics4_GeometryShader.prototype = {
	'delete': function() {
	}
	,__class__: kha_graphics4_GeometryShader
};
var kha_graphics4_Graphics = function() { };
$hxClasses["kha.graphics4.Graphics"] = kha_graphics4_Graphics;
kha_graphics4_Graphics.__name__ = true;
kha_graphics4_Graphics.prototype = {
	begin: null
	,beginFace: null
	,beginEye: null
	,end: null
	,vsynced: null
	,refreshRate: null
	,clear: null
	,viewport: null
	,scissor: null
	,disableScissor: null
	,setVertexBuffer: null
	,setVertexBuffers: null
	,setIndexBuffer: null
	,setTexture: null
	,setTextureDepth: null
	,setTextureArray: null
	,setVideoTexture: null
	,setImageTexture: null
	,setTextureParameters: null
	,setTexture3DParameters: null
	,setCubeMap: null
	,setCubeMapDepth: null
	,renderTargetsInvertedY: null
	,instancedRenderingAvailable: null
	,setPipeline: null
	,setBool: null
	,setInt: null
	,setFloat: null
	,setFloat2: null
	,setFloat3: null
	,setFloat4: null
	,setFloats: null
	,setVector2: null
	,setVector3: null
	,setVector4: null
	,setMatrix: null
	,setMatrix3: null
	,drawIndexedVertices: null
	,drawIndexedVerticesInstanced: null
	,flush: null
	,__class__: kha_graphics4_Graphics
};
var kha_graphics4_ImageShaderPainter = function(g4) {
	this.destinationBlend = kha_graphics4_BlendingFactor.Undefined;
	this.sourceBlend = kha_graphics4_BlendingFactor.Undefined;
	this.myPipeline = null;
	this.bilinearMipmaps = false;
	this.bilinear = false;
	this.g = g4;
	this.bufferIndex = 0;
	kha_graphics4_ImageShaderPainter.initShaders();
	this.initBuffers();
	this.projectionLocation = kha_graphics4_ImageShaderPainter.shaderPipeline.getConstantLocation("projectionMatrix");
	this.textureLocation = kha_graphics4_ImageShaderPainter.shaderPipeline.getTextureUnit("tex");
};
$hxClasses["kha.graphics4.ImageShaderPainter"] = kha_graphics4_ImageShaderPainter;
kha_graphics4_ImageShaderPainter.__name__ = true;
kha_graphics4_ImageShaderPainter.initShaders = function() {
	if(kha_graphics4_ImageShaderPainter.shaderPipeline != null) {
		return;
	}
	kha_graphics4_ImageShaderPainter.shaderPipeline = new kha_graphics4_PipelineState();
	kha_graphics4_ImageShaderPainter.shaderPipeline.fragmentShader = kha_Shaders.painter_image_frag;
	kha_graphics4_ImageShaderPainter.shaderPipeline.vertexShader = kha_Shaders.painter_image_vert;
	kha_graphics4_ImageShaderPainter.structure = new kha_graphics4_VertexStructure();
	kha_graphics4_ImageShaderPainter.structure.add("vertexPosition",kha_graphics4_VertexData.Float3);
	kha_graphics4_ImageShaderPainter.structure.add("texPosition",kha_graphics4_VertexData.Float2);
	kha_graphics4_ImageShaderPainter.structure.add("vertexColor",kha_graphics4_VertexData.Float4);
	kha_graphics4_ImageShaderPainter.shaderPipeline.inputLayout = [kha_graphics4_ImageShaderPainter.structure];
	kha_graphics4_ImageShaderPainter.shaderPipeline.blendSource = kha_graphics4_BlendingFactor.BlendOne;
	kha_graphics4_ImageShaderPainter.shaderPipeline.blendDestination = kha_graphics4_BlendingFactor.InverseSourceAlpha;
	kha_graphics4_ImageShaderPainter.shaderPipeline.alphaBlendSource = kha_graphics4_BlendingFactor.SourceAlpha;
	kha_graphics4_ImageShaderPainter.shaderPipeline.alphaBlendDestination = kha_graphics4_BlendingFactor.InverseSourceAlpha;
	kha_graphics4_ImageShaderPainter.shaderPipeline.compile();
};
kha_graphics4_ImageShaderPainter.prototype = {
	projectionMatrix: null
	,projectionLocation: null
	,textureLocation: null
	,bufferIndex: null
	,rectVertexBuffer: null
	,rectVertices: null
	,indexBuffer: null
	,lastTexture: null
	,bilinear: null
	,bilinearMipmaps: null
	,g: null
	,myPipeline: null
	,sourceBlend: null
	,destinationBlend: null
	,get_pipeline: function() {
		return this.myPipeline;
	}
	,set_pipeline: function(pipe) {
		if(pipe == null) {
			this.projectionLocation = kha_graphics4_ImageShaderPainter.shaderPipeline.getConstantLocation("projectionMatrix");
			this.textureLocation = kha_graphics4_ImageShaderPainter.shaderPipeline.getTextureUnit("tex");
		} else {
			this.projectionLocation = pipe.getConstantLocation("projectionMatrix");
			this.textureLocation = pipe.getTextureUnit("tex");
		}
		return this.myPipeline = pipe;
	}
	,setProjection: function(projectionMatrix) {
		this.projectionMatrix = projectionMatrix;
	}
	,initBuffers: function() {
		this.rectVertexBuffer = new kha_graphics4_VertexBuffer(kha_graphics4_ImageShaderPainter.bufferSize * 4,kha_graphics4_ImageShaderPainter.structure,kha_graphics4_Usage.DynamicUsage);
		this.rectVertices = this.rectVertexBuffer.lock();
		this.indexBuffer = new kha_graphics4_IndexBuffer(kha_graphics4_ImageShaderPainter.bufferSize * 3 * 2,kha_graphics4_Usage.StaticUsage);
		var indices = this.indexBuffer.lock();
		var _g1 = 0;
		var _g = kha_graphics4_ImageShaderPainter.bufferSize;
		while(_g1 < _g) {
			var i = _g1++;
			indices[i * 3 * 2] = i * 4;
			indices[i * 3 * 2 + 1] = i * 4 + 1;
			indices[i * 3 * 2 + 2] = i * 4 + 2;
			indices[i * 3 * 2 + 3] = i * 4;
			indices[i * 3 * 2 + 4] = i * 4 + 2;
			indices[i * 3 * 2 + 5] = i * 4 + 3;
		}
		this.indexBuffer.unlock();
	}
	,setRectVertices: function(bottomleftx,bottomlefty,topleftx,toplefty,toprightx,toprighty,bottomrightx,bottomrighty) {
		var baseIndex = this.bufferIndex * kha_graphics4_ImageShaderPainter.vertexSize * 4;
		this.rectVertices[baseIndex] = bottomleftx;
		this.rectVertices[baseIndex + 1] = bottomlefty;
		this.rectVertices[baseIndex + 2] = -5.0;
		this.rectVertices[baseIndex + 9] = topleftx;
		this.rectVertices[baseIndex + 10] = toplefty;
		this.rectVertices[baseIndex + 11] = -5.0;
		this.rectVertices[baseIndex + 18] = toprightx;
		this.rectVertices[baseIndex + 19] = toprighty;
		this.rectVertices[baseIndex + 20] = -5.0;
		this.rectVertices[baseIndex + 27] = bottomrightx;
		this.rectVertices[baseIndex + 28] = bottomrighty;
		this.rectVertices[baseIndex + 29] = -5.0;
	}
	,setRectTexCoords: function(left,top,right,bottom) {
		var baseIndex = this.bufferIndex * kha_graphics4_ImageShaderPainter.vertexSize * 4;
		this.rectVertices[baseIndex + 3] = left;
		this.rectVertices[baseIndex + 4] = bottom;
		this.rectVertices[baseIndex + 12] = left;
		this.rectVertices[baseIndex + 13] = top;
		this.rectVertices[baseIndex + 21] = right;
		this.rectVertices[baseIndex + 22] = top;
		this.rectVertices[baseIndex + 30] = right;
		this.rectVertices[baseIndex + 31] = bottom;
	}
	,setRectColor: function(r,g,b,a) {
		var baseIndex = this.bufferIndex * kha_graphics4_ImageShaderPainter.vertexSize * 4;
		this.rectVertices[baseIndex + 5] = r;
		this.rectVertices[baseIndex + 6] = g;
		this.rectVertices[baseIndex + 7] = b;
		this.rectVertices[baseIndex + 8] = a;
		this.rectVertices[baseIndex + 14] = r;
		this.rectVertices[baseIndex + 15] = g;
		this.rectVertices[baseIndex + 16] = b;
		this.rectVertices[baseIndex + 17] = a;
		this.rectVertices[baseIndex + 23] = r;
		this.rectVertices[baseIndex + 24] = g;
		this.rectVertices[baseIndex + 25] = b;
		this.rectVertices[baseIndex + 26] = a;
		this.rectVertices[baseIndex + 32] = r;
		this.rectVertices[baseIndex + 33] = g;
		this.rectVertices[baseIndex + 34] = b;
		this.rectVertices[baseIndex + 35] = a;
	}
	,drawBuffer: function() {
		this.rectVertexBuffer.unlock();
		this.g.setVertexBuffer(this.rectVertexBuffer);
		this.g.setIndexBuffer(this.indexBuffer);
		this.g.setPipeline(this.get_pipeline() == null ? kha_graphics4_ImageShaderPainter.shaderPipeline : this.get_pipeline());
		this.g.setTexture(this.textureLocation,this.lastTexture);
		this.g.setTextureParameters(this.textureLocation,kha_graphics4_TextureAddressing.Clamp,kha_graphics4_TextureAddressing.Clamp,this.bilinear ? kha_graphics4_TextureFilter.LinearFilter : kha_graphics4_TextureFilter.PointFilter,this.bilinear ? kha_graphics4_TextureFilter.LinearFilter : kha_graphics4_TextureFilter.PointFilter,this.bilinearMipmaps ? kha_graphics4_MipMapFilter.LinearMipFilter : kha_graphics4_MipMapFilter.NoMipFilter);
		this.g.setMatrix(this.projectionLocation,this.projectionMatrix);
		this.g.drawIndexedVertices(0,this.bufferIndex * 2 * 3);
		this.g.setTexture(this.textureLocation,null);
		this.bufferIndex = 0;
		this.rectVertices = this.rectVertexBuffer.lock();
	}
	,setBilinearFilter: function(bilinear) {
		this.end();
		this.bilinear = bilinear;
	}
	,setBilinearMipmapFilter: function(bilinear) {
		this.end();
		this.bilinearMipmaps = bilinear;
	}
	,drawImage: function(img,bottomleftx,bottomlefty,topleftx,toplefty,toprightx,toprighty,bottomrightx,bottomrighty,opacity,color) {
		var tex = img;
		if(this.bufferIndex + 1 >= kha_graphics4_ImageShaderPainter.bufferSize || this.lastTexture != null && tex != this.lastTexture) {
			this.drawBuffer();
		}
		var r = ((color & 16711680) >>> 16) * 0.00392156862745098;
		var g = ((color & 65280) >>> 8) * 0.00392156862745098;
		var b = (color & 255) * 0.00392156862745098;
		var a = (color >>> 24) * 0.00392156862745098 * opacity;
		var baseIndex = this.bufferIndex * kha_graphics4_ImageShaderPainter.vertexSize * 4;
		this.rectVertices[baseIndex + 5] = r;
		this.rectVertices[baseIndex + 6] = g;
		this.rectVertices[baseIndex + 7] = b;
		this.rectVertices[baseIndex + 8] = a;
		this.rectVertices[baseIndex + 14] = r;
		this.rectVertices[baseIndex + 15] = g;
		this.rectVertices[baseIndex + 16] = b;
		this.rectVertices[baseIndex + 17] = a;
		this.rectVertices[baseIndex + 23] = r;
		this.rectVertices[baseIndex + 24] = g;
		this.rectVertices[baseIndex + 25] = b;
		this.rectVertices[baseIndex + 26] = a;
		this.rectVertices[baseIndex + 32] = r;
		this.rectVertices[baseIndex + 33] = g;
		this.rectVertices[baseIndex + 34] = b;
		this.rectVertices[baseIndex + 35] = a;
		var right = tex.get_width() / tex.get_realWidth();
		var bottom = tex.get_height() / tex.get_realHeight();
		var baseIndex1 = this.bufferIndex * kha_graphics4_ImageShaderPainter.vertexSize * 4;
		this.rectVertices[baseIndex1 + 3] = 0;
		this.rectVertices[baseIndex1 + 4] = bottom;
		this.rectVertices[baseIndex1 + 12] = 0;
		this.rectVertices[baseIndex1 + 13] = 0;
		this.rectVertices[baseIndex1 + 21] = right;
		this.rectVertices[baseIndex1 + 22] = 0;
		this.rectVertices[baseIndex1 + 30] = right;
		this.rectVertices[baseIndex1 + 31] = bottom;
		var baseIndex2 = this.bufferIndex * kha_graphics4_ImageShaderPainter.vertexSize * 4;
		this.rectVertices[baseIndex2] = bottomleftx;
		this.rectVertices[baseIndex2 + 1] = bottomlefty;
		this.rectVertices[baseIndex2 + 2] = -5.0;
		this.rectVertices[baseIndex2 + 9] = topleftx;
		this.rectVertices[baseIndex2 + 10] = toplefty;
		this.rectVertices[baseIndex2 + 11] = -5.0;
		this.rectVertices[baseIndex2 + 18] = toprightx;
		this.rectVertices[baseIndex2 + 19] = toprighty;
		this.rectVertices[baseIndex2 + 20] = -5.0;
		this.rectVertices[baseIndex2 + 27] = bottomrightx;
		this.rectVertices[baseIndex2 + 28] = bottomrighty;
		this.rectVertices[baseIndex2 + 29] = -5.0;
		++this.bufferIndex;
		this.lastTexture = tex;
	}
	,drawImage2: function(img,sx,sy,sw,sh,bottomleftx,bottomlefty,topleftx,toplefty,toprightx,toprighty,bottomrightx,bottomrighty,opacity,color) {
		var tex = img;
		if(this.bufferIndex + 1 >= kha_graphics4_ImageShaderPainter.bufferSize || this.lastTexture != null && tex != this.lastTexture) {
			this.drawBuffer();
		}
		var left = sx / tex.get_realWidth();
		var top = sy / tex.get_realHeight();
		var right = (sx + sw) / tex.get_realWidth();
		var bottom = (sy + sh) / tex.get_realHeight();
		var baseIndex = this.bufferIndex * kha_graphics4_ImageShaderPainter.vertexSize * 4;
		this.rectVertices[baseIndex + 3] = left;
		this.rectVertices[baseIndex + 4] = bottom;
		this.rectVertices[baseIndex + 12] = left;
		this.rectVertices[baseIndex + 13] = top;
		this.rectVertices[baseIndex + 21] = right;
		this.rectVertices[baseIndex + 22] = top;
		this.rectVertices[baseIndex + 30] = right;
		this.rectVertices[baseIndex + 31] = bottom;
		var r = ((color & 16711680) >>> 16) * 0.00392156862745098;
		var g = ((color & 65280) >>> 8) * 0.00392156862745098;
		var b = (color & 255) * 0.00392156862745098;
		var a = (color >>> 24) * 0.00392156862745098 * opacity;
		var baseIndex1 = this.bufferIndex * kha_graphics4_ImageShaderPainter.vertexSize * 4;
		this.rectVertices[baseIndex1 + 5] = r;
		this.rectVertices[baseIndex1 + 6] = g;
		this.rectVertices[baseIndex1 + 7] = b;
		this.rectVertices[baseIndex1 + 8] = a;
		this.rectVertices[baseIndex1 + 14] = r;
		this.rectVertices[baseIndex1 + 15] = g;
		this.rectVertices[baseIndex1 + 16] = b;
		this.rectVertices[baseIndex1 + 17] = a;
		this.rectVertices[baseIndex1 + 23] = r;
		this.rectVertices[baseIndex1 + 24] = g;
		this.rectVertices[baseIndex1 + 25] = b;
		this.rectVertices[baseIndex1 + 26] = a;
		this.rectVertices[baseIndex1 + 32] = r;
		this.rectVertices[baseIndex1 + 33] = g;
		this.rectVertices[baseIndex1 + 34] = b;
		this.rectVertices[baseIndex1 + 35] = a;
		var baseIndex2 = this.bufferIndex * kha_graphics4_ImageShaderPainter.vertexSize * 4;
		this.rectVertices[baseIndex2] = bottomleftx;
		this.rectVertices[baseIndex2 + 1] = bottomlefty;
		this.rectVertices[baseIndex2 + 2] = -5.0;
		this.rectVertices[baseIndex2 + 9] = topleftx;
		this.rectVertices[baseIndex2 + 10] = toplefty;
		this.rectVertices[baseIndex2 + 11] = -5.0;
		this.rectVertices[baseIndex2 + 18] = toprightx;
		this.rectVertices[baseIndex2 + 19] = toprighty;
		this.rectVertices[baseIndex2 + 20] = -5.0;
		this.rectVertices[baseIndex2 + 27] = bottomrightx;
		this.rectVertices[baseIndex2 + 28] = bottomrighty;
		this.rectVertices[baseIndex2 + 29] = -5.0;
		++this.bufferIndex;
		this.lastTexture = tex;
	}
	,drawImageScale: function(img,sx,sy,sw,sh,left,top,right,bottom,opacity,color) {
		var tex = img;
		if(this.bufferIndex + 1 >= kha_graphics4_ImageShaderPainter.bufferSize || this.lastTexture != null && tex != this.lastTexture) {
			this.drawBuffer();
		}
		var left1 = sx / tex.get_realWidth();
		var top1 = sy / tex.get_realHeight();
		var right1 = (sx + sw) / tex.get_realWidth();
		var bottom1 = (sy + sh) / tex.get_realHeight();
		var baseIndex = this.bufferIndex * kha_graphics4_ImageShaderPainter.vertexSize * 4;
		this.rectVertices[baseIndex + 3] = left1;
		this.rectVertices[baseIndex + 4] = bottom1;
		this.rectVertices[baseIndex + 12] = left1;
		this.rectVertices[baseIndex + 13] = top1;
		this.rectVertices[baseIndex + 21] = right1;
		this.rectVertices[baseIndex + 22] = top1;
		this.rectVertices[baseIndex + 30] = right1;
		this.rectVertices[baseIndex + 31] = bottom1;
		var r = ((color & 16711680) >>> 16) * 0.00392156862745098;
		var g = ((color & 65280) >>> 8) * 0.00392156862745098;
		var b = (color & 255) * 0.00392156862745098;
		var baseIndex1 = this.bufferIndex * kha_graphics4_ImageShaderPainter.vertexSize * 4;
		this.rectVertices[baseIndex1 + 5] = r;
		this.rectVertices[baseIndex1 + 6] = g;
		this.rectVertices[baseIndex1 + 7] = b;
		this.rectVertices[baseIndex1 + 8] = opacity;
		this.rectVertices[baseIndex1 + 14] = r;
		this.rectVertices[baseIndex1 + 15] = g;
		this.rectVertices[baseIndex1 + 16] = b;
		this.rectVertices[baseIndex1 + 17] = opacity;
		this.rectVertices[baseIndex1 + 23] = r;
		this.rectVertices[baseIndex1 + 24] = g;
		this.rectVertices[baseIndex1 + 25] = b;
		this.rectVertices[baseIndex1 + 26] = opacity;
		this.rectVertices[baseIndex1 + 32] = r;
		this.rectVertices[baseIndex1 + 33] = g;
		this.rectVertices[baseIndex1 + 34] = b;
		this.rectVertices[baseIndex1 + 35] = opacity;
		var baseIndex2 = this.bufferIndex * kha_graphics4_ImageShaderPainter.vertexSize * 4;
		this.rectVertices[baseIndex2] = left;
		this.rectVertices[baseIndex2 + 1] = bottom;
		this.rectVertices[baseIndex2 + 2] = -5.0;
		this.rectVertices[baseIndex2 + 9] = left;
		this.rectVertices[baseIndex2 + 10] = top;
		this.rectVertices[baseIndex2 + 11] = -5.0;
		this.rectVertices[baseIndex2 + 18] = right;
		this.rectVertices[baseIndex2 + 19] = top;
		this.rectVertices[baseIndex2 + 20] = -5.0;
		this.rectVertices[baseIndex2 + 27] = right;
		this.rectVertices[baseIndex2 + 28] = bottom;
		this.rectVertices[baseIndex2 + 29] = -5.0;
		++this.bufferIndex;
		this.lastTexture = tex;
	}
	,end: function() {
		if(this.bufferIndex > 0) {
			this.drawBuffer();
		}
		this.lastTexture = null;
	}
	,__class__: kha_graphics4_ImageShaderPainter
};
var kha_graphics4_ColoredShaderPainter = function(g4) {
	this.destinationBlend = kha_graphics4_BlendingFactor.Undefined;
	this.sourceBlend = kha_graphics4_BlendingFactor.Undefined;
	this.myPipeline = null;
	this.g = g4;
	this.bufferIndex = 0;
	this.triangleBufferIndex = 0;
	kha_graphics4_ColoredShaderPainter.initShaders();
	this.initBuffers();
	this.projectionLocation = kha_graphics4_ColoredShaderPainter.shaderPipeline.getConstantLocation("projectionMatrix");
};
$hxClasses["kha.graphics4.ColoredShaderPainter"] = kha_graphics4_ColoredShaderPainter;
kha_graphics4_ColoredShaderPainter.__name__ = true;
kha_graphics4_ColoredShaderPainter.initShaders = function() {
	if(kha_graphics4_ColoredShaderPainter.shaderPipeline != null) {
		return;
	}
	kha_graphics4_ColoredShaderPainter.shaderPipeline = new kha_graphics4_PipelineState();
	kha_graphics4_ColoredShaderPainter.shaderPipeline.fragmentShader = kha_Shaders.painter_colored_frag;
	kha_graphics4_ColoredShaderPainter.shaderPipeline.vertexShader = kha_Shaders.painter_colored_vert;
	kha_graphics4_ColoredShaderPainter.structure = new kha_graphics4_VertexStructure();
	kha_graphics4_ColoredShaderPainter.structure.add("vertexPosition",kha_graphics4_VertexData.Float3);
	kha_graphics4_ColoredShaderPainter.structure.add("vertexColor",kha_graphics4_VertexData.Float4);
	kha_graphics4_ColoredShaderPainter.shaderPipeline.inputLayout = [kha_graphics4_ColoredShaderPainter.structure];
	kha_graphics4_ColoredShaderPainter.shaderPipeline.blendSource = kha_graphics4_BlendingFactor.SourceAlpha;
	kha_graphics4_ColoredShaderPainter.shaderPipeline.blendDestination = kha_graphics4_BlendingFactor.InverseSourceAlpha;
	kha_graphics4_ColoredShaderPainter.shaderPipeline.alphaBlendSource = kha_graphics4_BlendingFactor.SourceAlpha;
	kha_graphics4_ColoredShaderPainter.shaderPipeline.alphaBlendDestination = kha_graphics4_BlendingFactor.InverseSourceAlpha;
	kha_graphics4_ColoredShaderPainter.shaderPipeline.compile();
};
kha_graphics4_ColoredShaderPainter.prototype = {
	projectionMatrix: null
	,projectionLocation: null
	,bufferIndex: null
	,rectVertexBuffer: null
	,rectVertices: null
	,indexBuffer: null
	,triangleBufferIndex: null
	,triangleVertexBuffer: null
	,triangleVertices: null
	,triangleIndexBuffer: null
	,g: null
	,myPipeline: null
	,sourceBlend: null
	,destinationBlend: null
	,get_pipeline: function() {
		return this.myPipeline;
	}
	,set_pipeline: function(pipe) {
		if(pipe == null) {
			this.projectionLocation = kha_graphics4_ColoredShaderPainter.shaderPipeline.getConstantLocation("projectionMatrix");
		} else {
			this.projectionLocation = pipe.getConstantLocation("projectionMatrix");
		}
		return this.myPipeline = pipe;
	}
	,setProjection: function(projectionMatrix) {
		this.projectionMatrix = projectionMatrix;
	}
	,initBuffers: function() {
		this.rectVertexBuffer = new kha_graphics4_VertexBuffer(kha_graphics4_ColoredShaderPainter.bufferSize * 4,kha_graphics4_ColoredShaderPainter.structure,kha_graphics4_Usage.DynamicUsage);
		this.rectVertices = this.rectVertexBuffer.lock();
		this.indexBuffer = new kha_graphics4_IndexBuffer(kha_graphics4_ColoredShaderPainter.bufferSize * 3 * 2,kha_graphics4_Usage.StaticUsage);
		var indices = this.indexBuffer.lock();
		var _g1 = 0;
		var _g = kha_graphics4_ColoredShaderPainter.bufferSize;
		while(_g1 < _g) {
			var i = _g1++;
			indices[i * 3 * 2] = i * 4;
			indices[i * 3 * 2 + 1] = i * 4 + 1;
			indices[i * 3 * 2 + 2] = i * 4 + 2;
			indices[i * 3 * 2 + 3] = i * 4;
			indices[i * 3 * 2 + 4] = i * 4 + 2;
			indices[i * 3 * 2 + 5] = i * 4 + 3;
		}
		this.indexBuffer.unlock();
		this.triangleVertexBuffer = new kha_graphics4_VertexBuffer(kha_graphics4_ColoredShaderPainter.triangleBufferSize * 3,kha_graphics4_ColoredShaderPainter.structure,kha_graphics4_Usage.DynamicUsage);
		this.triangleVertices = this.triangleVertexBuffer.lock();
		this.triangleIndexBuffer = new kha_graphics4_IndexBuffer(kha_graphics4_ColoredShaderPainter.triangleBufferSize * 3,kha_graphics4_Usage.StaticUsage);
		var triIndices = this.triangleIndexBuffer.lock();
		var _g11 = 0;
		var _g2 = kha_graphics4_ColoredShaderPainter.bufferSize;
		while(_g11 < _g2) {
			var i1 = _g11++;
			triIndices[i1 * 3] = i1 * 3;
			triIndices[i1 * 3 + 1] = i1 * 3 + 1;
			triIndices[i1 * 3 + 2] = i1 * 3 + 2;
		}
		this.triangleIndexBuffer.unlock();
	}
	,setRectVertices: function(bottomleftx,bottomlefty,topleftx,toplefty,toprightx,toprighty,bottomrightx,bottomrighty) {
		var baseIndex = this.bufferIndex * 7 * 4;
		this.rectVertices[baseIndex] = bottomleftx;
		this.rectVertices[baseIndex + 1] = bottomlefty;
		this.rectVertices[baseIndex + 2] = -5.0;
		this.rectVertices[baseIndex + 7] = topleftx;
		this.rectVertices[baseIndex + 8] = toplefty;
		this.rectVertices[baseIndex + 9] = -5.0;
		this.rectVertices[baseIndex + 14] = toprightx;
		this.rectVertices[baseIndex + 15] = toprighty;
		this.rectVertices[baseIndex + 16] = -5.0;
		this.rectVertices[baseIndex + 21] = bottomrightx;
		this.rectVertices[baseIndex + 22] = bottomrighty;
		this.rectVertices[baseIndex + 23] = -5.0;
	}
	,setRectColors: function(opacity,color) {
		var baseIndex = this.bufferIndex * 7 * 4;
		var a = opacity * ((color >>> 24) * 0.00392156862745098);
		this.rectVertices[baseIndex + 3] = ((color & 16711680) >>> 16) * 0.00392156862745098;
		this.rectVertices[baseIndex + 4] = ((color & 65280) >>> 8) * 0.00392156862745098;
		this.rectVertices[baseIndex + 5] = (color & 255) * 0.00392156862745098;
		this.rectVertices[baseIndex + 6] = a;
		this.rectVertices[baseIndex + 10] = ((color & 16711680) >>> 16) * 0.00392156862745098;
		this.rectVertices[baseIndex + 11] = ((color & 65280) >>> 8) * 0.00392156862745098;
		this.rectVertices[baseIndex + 12] = (color & 255) * 0.00392156862745098;
		this.rectVertices[baseIndex + 13] = a;
		this.rectVertices[baseIndex + 17] = ((color & 16711680) >>> 16) * 0.00392156862745098;
		this.rectVertices[baseIndex + 18] = ((color & 65280) >>> 8) * 0.00392156862745098;
		this.rectVertices[baseIndex + 19] = (color & 255) * 0.00392156862745098;
		this.rectVertices[baseIndex + 20] = a;
		this.rectVertices[baseIndex + 24] = ((color & 16711680) >>> 16) * 0.00392156862745098;
		this.rectVertices[baseIndex + 25] = ((color & 65280) >>> 8) * 0.00392156862745098;
		this.rectVertices[baseIndex + 26] = (color & 255) * 0.00392156862745098;
		this.rectVertices[baseIndex + 27] = a;
	}
	,setTriVertices: function(x1,y1,x2,y2,x3,y3) {
		var baseIndex = this.triangleBufferIndex * 7 * 3;
		this.triangleVertices[baseIndex] = x1;
		this.triangleVertices[baseIndex + 1] = y1;
		this.triangleVertices[baseIndex + 2] = -5.0;
		this.triangleVertices[baseIndex + 7] = x2;
		this.triangleVertices[baseIndex + 8] = y2;
		this.triangleVertices[baseIndex + 9] = -5.0;
		this.triangleVertices[baseIndex + 14] = x3;
		this.triangleVertices[baseIndex + 15] = y3;
		this.triangleVertices[baseIndex + 16] = -5.0;
	}
	,setTriColors: function(opacity,color) {
		var baseIndex = this.triangleBufferIndex * 7 * 3;
		var a = opacity * ((color >>> 24) * 0.00392156862745098);
		this.triangleVertices[baseIndex + 3] = ((color & 16711680) >>> 16) * 0.00392156862745098;
		this.triangleVertices[baseIndex + 4] = ((color & 65280) >>> 8) * 0.00392156862745098;
		this.triangleVertices[baseIndex + 5] = (color & 255) * 0.00392156862745098;
		this.triangleVertices[baseIndex + 6] = a;
		this.triangleVertices[baseIndex + 10] = ((color & 16711680) >>> 16) * 0.00392156862745098;
		this.triangleVertices[baseIndex + 11] = ((color & 65280) >>> 8) * 0.00392156862745098;
		this.triangleVertices[baseIndex + 12] = (color & 255) * 0.00392156862745098;
		this.triangleVertices[baseIndex + 13] = a;
		this.triangleVertices[baseIndex + 17] = ((color & 16711680) >>> 16) * 0.00392156862745098;
		this.triangleVertices[baseIndex + 18] = ((color & 65280) >>> 8) * 0.00392156862745098;
		this.triangleVertices[baseIndex + 19] = (color & 255) * 0.00392156862745098;
		this.triangleVertices[baseIndex + 20] = a;
	}
	,drawBuffer: function(trisDone) {
		if(!trisDone) {
			if(this.triangleBufferIndex > 0) {
				this.drawTriBuffer(true);
			}
		}
		this.rectVertexBuffer.unlock();
		this.g.setVertexBuffer(this.rectVertexBuffer);
		this.g.setIndexBuffer(this.indexBuffer);
		this.g.setPipeline(this.get_pipeline() == null ? kha_graphics4_ColoredShaderPainter.shaderPipeline : this.get_pipeline());
		this.g.setMatrix(this.projectionLocation,this.projectionMatrix);
		this.g.drawIndexedVertices(0,this.bufferIndex * 2 * 3);
		this.bufferIndex = 0;
		this.rectVertices = this.rectVertexBuffer.lock();
	}
	,drawTriBuffer: function(rectsDone) {
		if(!rectsDone) {
			if(this.bufferIndex > 0) {
				this.drawBuffer(true);
			}
		}
		this.triangleVertexBuffer.unlock();
		this.g.setVertexBuffer(this.triangleVertexBuffer);
		this.g.setIndexBuffer(this.triangleIndexBuffer);
		this.g.setPipeline(this.get_pipeline() == null ? kha_graphics4_ColoredShaderPainter.shaderPipeline : this.get_pipeline());
		this.g.setMatrix(this.projectionLocation,this.projectionMatrix);
		this.g.drawIndexedVertices(0,this.triangleBufferIndex * 3);
		this.triangleBufferIndex = 0;
		this.triangleVertices = this.triangleVertexBuffer.lock();
	}
	,fillRect: function(opacity,color,bottomleftx,bottomlefty,topleftx,toplefty,toprightx,toprighty,bottomrightx,bottomrighty) {
		if(this.triangleBufferIndex > 0) {
			this.drawTriBuffer(true);
		}
		if(this.bufferIndex + 1 >= kha_graphics4_ColoredShaderPainter.bufferSize) {
			this.drawBuffer(false);
		}
		this.setRectColors(opacity,color);
		this.setRectVertices(bottomleftx,bottomlefty,topleftx,toplefty,toprightx,toprighty,bottomrightx,bottomrighty);
		++this.bufferIndex;
	}
	,fillTriangle: function(opacity,color,x1,y1,x2,y2,x3,y3) {
		if(this.bufferIndex > 0) {
			this.drawBuffer(true);
		}
		if(this.triangleBufferIndex + 1 >= kha_graphics4_ColoredShaderPainter.triangleBufferSize) {
			this.drawTriBuffer(false);
		}
		this.setTriColors(opacity,color);
		this.setTriVertices(x1,y1,x2,y2,x3,y3);
		++this.triangleBufferIndex;
	}
	,endTris: function(rectsDone) {
		if(this.triangleBufferIndex > 0) {
			this.drawTriBuffer(rectsDone);
		}
	}
	,endRects: function(trisDone) {
		if(this.bufferIndex > 0) {
			this.drawBuffer(trisDone);
		}
	}
	,end: function() {
		if(this.triangleBufferIndex > 0) {
			this.drawTriBuffer(false);
		}
		if(this.bufferIndex > 0) {
			this.drawBuffer(false);
		}
	}
	,__class__: kha_graphics4_ColoredShaderPainter
};
var kha_graphics4_TextShaderPainter = function(g4) {
	this.destinationBlend = kha_graphics4_BlendingFactor.Undefined;
	this.sourceBlend = kha_graphics4_BlendingFactor.Undefined;
	this.bilinear = false;
	this.myPipeline = null;
	this.g = g4;
	this.bufferIndex = 0;
	kha_graphics4_TextShaderPainter.initShaders();
	this.initBuffers();
	this.projectionLocation = kha_graphics4_TextShaderPainter.shaderPipeline.getConstantLocation("projectionMatrix");
	this.textureLocation = kha_graphics4_TextShaderPainter.shaderPipeline.getTextureUnit("tex");
};
$hxClasses["kha.graphics4.TextShaderPainter"] = kha_graphics4_TextShaderPainter;
kha_graphics4_TextShaderPainter.__name__ = true;
kha_graphics4_TextShaderPainter.initShaders = function() {
	if(kha_graphics4_TextShaderPainter.shaderPipeline != null) {
		return;
	}
	kha_graphics4_TextShaderPainter.shaderPipeline = new kha_graphics4_PipelineState();
	kha_graphics4_TextShaderPainter.shaderPipeline.fragmentShader = kha_Shaders.painter_text_frag;
	kha_graphics4_TextShaderPainter.shaderPipeline.vertexShader = kha_Shaders.painter_text_vert;
	kha_graphics4_TextShaderPainter.structure = new kha_graphics4_VertexStructure();
	kha_graphics4_TextShaderPainter.structure.add("vertexPosition",kha_graphics4_VertexData.Float3);
	kha_graphics4_TextShaderPainter.structure.add("texPosition",kha_graphics4_VertexData.Float2);
	kha_graphics4_TextShaderPainter.structure.add("vertexColor",kha_graphics4_VertexData.Float4);
	kha_graphics4_TextShaderPainter.shaderPipeline.inputLayout = [kha_graphics4_TextShaderPainter.structure];
	kha_graphics4_TextShaderPainter.shaderPipeline.blendSource = kha_graphics4_BlendingFactor.SourceAlpha;
	kha_graphics4_TextShaderPainter.shaderPipeline.blendDestination = kha_graphics4_BlendingFactor.InverseSourceAlpha;
	kha_graphics4_TextShaderPainter.shaderPipeline.alphaBlendSource = kha_graphics4_BlendingFactor.SourceAlpha;
	kha_graphics4_TextShaderPainter.shaderPipeline.alphaBlendDestination = kha_graphics4_BlendingFactor.InverseSourceAlpha;
	kha_graphics4_TextShaderPainter.shaderPipeline.compile();
};
kha_graphics4_TextShaderPainter.findIndex = function(charcode,fontGlyphs) {
	var _g1 = 0;
	var _g = fontGlyphs.length;
	while(_g1 < _g) {
		var i = _g1++;
		if(fontGlyphs[i] == charcode) {
			return i;
		}
	}
	return 0;
};
kha_graphics4_TextShaderPainter.prototype = {
	projectionMatrix: null
	,projectionLocation: null
	,textureLocation: null
	,bufferIndex: null
	,rectVertexBuffer: null
	,rectVertices: null
	,indexBuffer: null
	,font: null
	,lastTexture: null
	,g: null
	,myPipeline: null
	,fontSize: null
	,bilinear: null
	,sourceBlend: null
	,destinationBlend: null
	,get_pipeline: function() {
		return this.myPipeline;
	}
	,set_pipeline: function(pipe) {
		if(pipe == null) {
			this.projectionLocation = kha_graphics4_TextShaderPainter.shaderPipeline.getConstantLocation("projectionMatrix");
			this.textureLocation = kha_graphics4_TextShaderPainter.shaderPipeline.getTextureUnit("tex");
		} else {
			this.projectionLocation = pipe.getConstantLocation("projectionMatrix");
			this.textureLocation = pipe.getTextureUnit("tex");
		}
		return this.myPipeline = pipe;
	}
	,setProjection: function(projectionMatrix) {
		this.projectionMatrix = projectionMatrix;
	}
	,initBuffers: function() {
		this.rectVertexBuffer = new kha_graphics4_VertexBuffer(kha_graphics4_TextShaderPainter.bufferSize * 4,kha_graphics4_TextShaderPainter.structure,kha_graphics4_Usage.DynamicUsage);
		this.rectVertices = this.rectVertexBuffer.lock();
		this.indexBuffer = new kha_graphics4_IndexBuffer(kha_graphics4_TextShaderPainter.bufferSize * 3 * 2,kha_graphics4_Usage.StaticUsage);
		var indices = this.indexBuffer.lock();
		var _g1 = 0;
		var _g = kha_graphics4_TextShaderPainter.bufferSize;
		while(_g1 < _g) {
			var i = _g1++;
			indices[i * 3 * 2] = i * 4;
			indices[i * 3 * 2 + 1] = i * 4 + 1;
			indices[i * 3 * 2 + 2] = i * 4 + 2;
			indices[i * 3 * 2 + 3] = i * 4;
			indices[i * 3 * 2 + 4] = i * 4 + 2;
			indices[i * 3 * 2 + 5] = i * 4 + 3;
		}
		this.indexBuffer.unlock();
	}
	,setRectVertices: function(bottomleftx,bottomlefty,topleftx,toplefty,toprightx,toprighty,bottomrightx,bottomrighty) {
		var baseIndex = this.bufferIndex * 9 * 4;
		this.rectVertices[baseIndex] = bottomleftx;
		this.rectVertices[baseIndex + 1] = bottomlefty;
		this.rectVertices[baseIndex + 2] = -5.0;
		this.rectVertices[baseIndex + 9] = topleftx;
		this.rectVertices[baseIndex + 10] = toplefty;
		this.rectVertices[baseIndex + 11] = -5.0;
		this.rectVertices[baseIndex + 18] = toprightx;
		this.rectVertices[baseIndex + 19] = toprighty;
		this.rectVertices[baseIndex + 20] = -5.0;
		this.rectVertices[baseIndex + 27] = bottomrightx;
		this.rectVertices[baseIndex + 28] = bottomrighty;
		this.rectVertices[baseIndex + 29] = -5.0;
	}
	,setRectTexCoords: function(left,top,right,bottom) {
		var baseIndex = this.bufferIndex * 9 * 4;
		this.rectVertices[baseIndex + 3] = left;
		this.rectVertices[baseIndex + 4] = bottom;
		this.rectVertices[baseIndex + 12] = left;
		this.rectVertices[baseIndex + 13] = top;
		this.rectVertices[baseIndex + 21] = right;
		this.rectVertices[baseIndex + 22] = top;
		this.rectVertices[baseIndex + 30] = right;
		this.rectVertices[baseIndex + 31] = bottom;
	}
	,setRectColors: function(opacity,color) {
		var baseIndex = this.bufferIndex * 9 * 4;
		var a = opacity * ((color >>> 24) * 0.00392156862745098);
		this.rectVertices[baseIndex + 5] = ((color & 16711680) >>> 16) * 0.00392156862745098;
		this.rectVertices[baseIndex + 6] = ((color & 65280) >>> 8) * 0.00392156862745098;
		this.rectVertices[baseIndex + 7] = (color & 255) * 0.00392156862745098;
		this.rectVertices[baseIndex + 8] = a;
		this.rectVertices[baseIndex + 14] = ((color & 16711680) >>> 16) * 0.00392156862745098;
		this.rectVertices[baseIndex + 15] = ((color & 65280) >>> 8) * 0.00392156862745098;
		this.rectVertices[baseIndex + 16] = (color & 255) * 0.00392156862745098;
		this.rectVertices[baseIndex + 17] = a;
		this.rectVertices[baseIndex + 23] = ((color & 16711680) >>> 16) * 0.00392156862745098;
		this.rectVertices[baseIndex + 24] = ((color & 65280) >>> 8) * 0.00392156862745098;
		this.rectVertices[baseIndex + 25] = (color & 255) * 0.00392156862745098;
		this.rectVertices[baseIndex + 26] = a;
		this.rectVertices[baseIndex + 32] = ((color & 16711680) >>> 16) * 0.00392156862745098;
		this.rectVertices[baseIndex + 33] = ((color & 65280) >>> 8) * 0.00392156862745098;
		this.rectVertices[baseIndex + 34] = (color & 255) * 0.00392156862745098;
		this.rectVertices[baseIndex + 35] = a;
	}
	,drawBuffer: function() {
		this.rectVertexBuffer.unlock();
		this.g.setVertexBuffer(this.rectVertexBuffer);
		this.g.setIndexBuffer(this.indexBuffer);
		this.g.setPipeline(this.get_pipeline() == null ? kha_graphics4_TextShaderPainter.shaderPipeline : this.get_pipeline());
		this.g.setTexture(this.textureLocation,this.lastTexture);
		this.g.setMatrix(this.projectionLocation,this.projectionMatrix);
		this.g.setTextureParameters(this.textureLocation,kha_graphics4_TextureAddressing.Clamp,kha_graphics4_TextureAddressing.Clamp,this.bilinear ? kha_graphics4_TextureFilter.LinearFilter : kha_graphics4_TextureFilter.PointFilter,this.bilinear ? kha_graphics4_TextureFilter.LinearFilter : kha_graphics4_TextureFilter.PointFilter,kha_graphics4_MipMapFilter.NoMipFilter);
		this.g.drawIndexedVertices(0,this.bufferIndex * 2 * 3);
		this.g.setTexture(this.textureLocation,null);
		this.bufferIndex = 0;
		this.rectVertices = this.rectVertexBuffer.lock();
	}
	,setBilinearFilter: function(bilinear) {
		this.end();
		this.bilinear = bilinear;
	}
	,setFont: function(font) {
		this.font = js_Boot.__cast(font , kha_Kravur);
	}
	,text: null
	,startString: function(text) {
		this.text = text;
	}
	,charCodeAt: function(position) {
		return HxOverrides.cca(this.text,position);
	}
	,stringLength: function() {
		return this.text.length;
	}
	,endString: function() {
		this.text = null;
	}
	,drawString: function(text,opacity,color,x,y,transformation,fontGlyphs) {
		var font = this.font._get(this.fontSize,fontGlyphs);
		var tex = font.getTexture();
		if(this.lastTexture != null && tex != this.lastTexture) {
			this.drawBuffer();
		}
		this.lastTexture = tex;
		var xpos = x;
		var ypos = y;
		this.startString(text);
		var _g1 = 0;
		var _g = this.stringLength();
		while(_g1 < _g) {
			var i = _g1++;
			var q = font.getBakedQuad(kha_graphics4_TextShaderPainter.findIndex(this.charCodeAt(i),fontGlyphs),xpos,ypos);
			if(q != null) {
				if(this.bufferIndex + 1 >= kha_graphics4_TextShaderPainter.bufferSize) {
					this.drawBuffer();
				}
				this.setRectColors(opacity,color);
				this.setRectTexCoords(q.s0 * tex.get_width() / tex.get_realWidth(),q.t0 * tex.get_height() / tex.get_realHeight(),q.s1 * tex.get_width() / tex.get_realWidth(),q.t1 * tex.get_height() / tex.get_realHeight());
				var p0_y;
				var p0_x;
				var value_y;
				var value_x = q.x0;
				value_y = q.y1;
				var w = transformation._02 * value_x + transformation._12 * value_y + transformation._22;
				var x1 = (transformation._00 * value_x + transformation._10 * value_y + transformation._20) / w;
				var y1 = (transformation._01 * value_x + transformation._11 * value_y + transformation._21) / w;
				p0_x = x1;
				p0_y = y1;
				var p1_y;
				var p1_x;
				var value_y1;
				var value_x1 = q.x0;
				value_y1 = q.y0;
				var w1 = transformation._02 * value_x1 + transformation._12 * value_y1 + transformation._22;
				var x2 = (transformation._00 * value_x1 + transformation._10 * value_y1 + transformation._20) / w1;
				var y2 = (transformation._01 * value_x1 + transformation._11 * value_y1 + transformation._21) / w1;
				p1_x = x2;
				p1_y = y2;
				var p2_y;
				var p2_x;
				var value_y2;
				var value_x2 = q.x1;
				value_y2 = q.y0;
				var w2 = transformation._02 * value_x2 + transformation._12 * value_y2 + transformation._22;
				var x3 = (transformation._00 * value_x2 + transformation._10 * value_y2 + transformation._20) / w2;
				var y3 = (transformation._01 * value_x2 + transformation._11 * value_y2 + transformation._21) / w2;
				p2_x = x3;
				p2_y = y3;
				var p3_y;
				var p3_x;
				var value_y3;
				var value_x3 = q.x1;
				value_y3 = q.y1;
				var w3 = transformation._02 * value_x3 + transformation._12 * value_y3 + transformation._22;
				var x4 = (transformation._00 * value_x3 + transformation._10 * value_y3 + transformation._20) / w3;
				var y4 = (transformation._01 * value_x3 + transformation._11 * value_y3 + transformation._21) / w3;
				p3_x = x4;
				p3_y = y4;
				this.setRectVertices(p0_x,p0_y,p1_x,p1_y,p2_x,p2_y,p3_x,p3_y);
				xpos += q.xadvance;
				++this.bufferIndex;
			}
		}
		this.endString();
	}
	,drawCharacters: function(text,start,length,opacity,color,x,y,transformation,fontGlyphs) {
		var font = this.font._get(this.fontSize,fontGlyphs);
		var tex = font.getTexture();
		if(this.lastTexture != null && tex != this.lastTexture) {
			this.drawBuffer();
		}
		this.lastTexture = tex;
		var xpos = x;
		var ypos = y;
		var _g1 = start;
		var _g = start + length;
		while(_g1 < _g) {
			var i = _g1++;
			var q = font.getBakedQuad(kha_graphics4_TextShaderPainter.findIndex(text[i],fontGlyphs),xpos,ypos);
			if(q != null) {
				if(this.bufferIndex + 1 >= kha_graphics4_TextShaderPainter.bufferSize) {
					this.drawBuffer();
				}
				this.setRectColors(opacity,color);
				this.setRectTexCoords(q.s0 * tex.get_width() / tex.get_realWidth(),q.t0 * tex.get_height() / tex.get_realHeight(),q.s1 * tex.get_width() / tex.get_realWidth(),q.t1 * tex.get_height() / tex.get_realHeight());
				var p0_y;
				var p0_x;
				var value_y;
				var value_x = q.x0;
				value_y = q.y1;
				var w = transformation._02 * value_x + transformation._12 * value_y + transformation._22;
				var x1 = (transformation._00 * value_x + transformation._10 * value_y + transformation._20) / w;
				var y1 = (transformation._01 * value_x + transformation._11 * value_y + transformation._21) / w;
				p0_x = x1;
				p0_y = y1;
				var p1_y;
				var p1_x;
				var value_y1;
				var value_x1 = q.x0;
				value_y1 = q.y0;
				var w1 = transformation._02 * value_x1 + transformation._12 * value_y1 + transformation._22;
				var x2 = (transformation._00 * value_x1 + transformation._10 * value_y1 + transformation._20) / w1;
				var y2 = (transformation._01 * value_x1 + transformation._11 * value_y1 + transformation._21) / w1;
				p1_x = x2;
				p1_y = y2;
				var p2_y;
				var p2_x;
				var value_y2;
				var value_x2 = q.x1;
				value_y2 = q.y0;
				var w2 = transformation._02 * value_x2 + transformation._12 * value_y2 + transformation._22;
				var x3 = (transformation._00 * value_x2 + transformation._10 * value_y2 + transformation._20) / w2;
				var y3 = (transformation._01 * value_x2 + transformation._11 * value_y2 + transformation._21) / w2;
				p2_x = x3;
				p2_y = y3;
				var p3_y;
				var p3_x;
				var value_y3;
				var value_x3 = q.x1;
				value_y3 = q.y1;
				var w3 = transformation._02 * value_x3 + transformation._12 * value_y3 + transformation._22;
				var x4 = (transformation._00 * value_x3 + transformation._10 * value_y3 + transformation._20) / w3;
				var y4 = (transformation._01 * value_x3 + transformation._11 * value_y3 + transformation._21) / w3;
				p3_x = x4;
				p3_y = y4;
				this.setRectVertices(p0_x,p0_y,p1_x,p1_y,p2_x,p2_y,p3_x,p3_y);
				xpos += q.xadvance;
				++this.bufferIndex;
			}
		}
	}
	,end: function() {
		if(this.bufferIndex > 0) {
			this.drawBuffer();
		}
		this.lastTexture = null;
	}
	,__class__: kha_graphics4_TextShaderPainter
};
var kha_graphics4_Graphics2 = function(canvas) {
	this.myMipmapScaleQuality = kha_graphics2_ImageScaleQuality.High;
	this.myImageScaleQuality = kha_graphics2_ImageScaleQuality.High;
	kha_graphics2_Graphics.call(this);
	this.set_color(-1);
	this.canvas = canvas;
	this.g = canvas.get_g4();
	this.imagePainter = new kha_graphics4_ImageShaderPainter(this.g);
	this.coloredPainter = new kha_graphics4_ColoredShaderPainter(this.g);
	this.textPainter = new kha_graphics4_TextShaderPainter(this.g);
	this.textPainter.fontSize = this.get_fontSize();
	this.setProjection();
	if(kha_graphics4_Graphics2.videoPipeline == null) {
		kha_graphics4_Graphics2.videoPipeline = new kha_graphics4_PipelineState();
		kha_graphics4_Graphics2.videoPipeline.fragmentShader = kha_Shaders.painter_video_frag;
		kha_graphics4_Graphics2.videoPipeline.vertexShader = kha_Shaders.painter_video_vert;
		var structure = new kha_graphics4_VertexStructure();
		structure.add("vertexPosition",kha_graphics4_VertexData.Float3);
		structure.add("texPosition",kha_graphics4_VertexData.Float2);
		structure.add("vertexColor",kha_graphics4_VertexData.Float4);
		kha_graphics4_Graphics2.videoPipeline.inputLayout = [structure];
		kha_graphics4_Graphics2.videoPipeline.compile();
	}
};
$hxClasses["kha.graphics4.Graphics2"] = kha_graphics4_Graphics2;
kha_graphics4_Graphics2.__name__ = true;
kha_graphics4_Graphics2.upperPowerOfTwo = function(v) {
	--v;
	v |= v >>> 1;
	v |= v >>> 2;
	v |= v >>> 4;
	v |= v >>> 8;
	v |= v >>> 16;
	return ++v;
};
kha_graphics4_Graphics2.__super__ = kha_graphics2_Graphics;
kha_graphics4_Graphics2.prototype = $extend(kha_graphics2_Graphics.prototype,{
	myColor: null
	,myFont: null
	,projectionMatrix: null
	,imagePainter: null
	,coloredPainter: null
	,textPainter: null
	,canvas: null
	,g: null
	,setProjection: function() {
		var width = this.canvas.get_width();
		var height = this.canvas.get_height();
		if(js_Boot.__instanceof(this.canvas,kha_Framebuffer)) {
			this.projectionMatrix = kha_math_FastMatrix4.orthogonalProjection(0,width,height,0,0.1,1000);
		} else {
			if(!kha_Image.get_nonPow2Supported()) {
				width = kha_graphics4_Graphics2.upperPowerOfTwo(width);
				height = kha_graphics4_Graphics2.upperPowerOfTwo(height);
			}
			if(this.g.renderTargetsInvertedY()) {
				this.projectionMatrix = kha_math_FastMatrix4.orthogonalProjection(0,width,0,height,0.1,1000);
			} else {
				this.projectionMatrix = kha_math_FastMatrix4.orthogonalProjection(0,width,height,0,0.1,1000);
			}
		}
		this.imagePainter.setProjection(this.projectionMatrix);
		this.coloredPainter.setProjection(this.projectionMatrix);
		this.textPainter.setProjection(this.projectionMatrix);
	}
	,drawImage: function(img,x,y) {
		var _this = this.coloredPainter;
		if(_this.triangleBufferIndex > 0) {
			_this.drawTriBuffer(false);
		}
		if(_this.bufferIndex > 0) {
			_this.drawBuffer(false);
		}
		this.textPainter.end();
		var xw = x + img.get_width();
		var yh = y + img.get_height();
		var p1_y;
		var p1_x;
		var _this1 = this.transformations[this.transformations.length - 1];
		var value_y;
		var value_x = x;
		value_y = yh;
		var w = _this1._02 * value_x + _this1._12 * value_y + _this1._22;
		var x1 = (_this1._00 * value_x + _this1._10 * value_y + _this1._20) / w;
		var y1 = (_this1._01 * value_x + _this1._11 * value_y + _this1._21) / w;
		p1_x = x1;
		p1_y = y1;
		var p2_y;
		var p2_x;
		var _this2 = this.transformations[this.transformations.length - 1];
		var value_y1;
		var value_x1 = x;
		value_y1 = y;
		var w1 = _this2._02 * value_x1 + _this2._12 * value_y1 + _this2._22;
		var x2 = (_this2._00 * value_x1 + _this2._10 * value_y1 + _this2._20) / w1;
		var y2 = (_this2._01 * value_x1 + _this2._11 * value_y1 + _this2._21) / w1;
		p2_x = x2;
		p2_y = y2;
		var p3_y;
		var p3_x;
		var _this3 = this.transformations[this.transformations.length - 1];
		var value_y2;
		var value_x2 = xw;
		value_y2 = y;
		var w2 = _this3._02 * value_x2 + _this3._12 * value_y2 + _this3._22;
		var x3 = (_this3._00 * value_x2 + _this3._10 * value_y2 + _this3._20) / w2;
		var y3 = (_this3._01 * value_x2 + _this3._11 * value_y2 + _this3._21) / w2;
		p3_x = x3;
		p3_y = y3;
		var p4_y;
		var p4_x;
		var _this4 = this.transformations[this.transformations.length - 1];
		var value_y3;
		var value_x3 = xw;
		value_y3 = yh;
		var w3 = _this4._02 * value_x3 + _this4._12 * value_y3 + _this4._22;
		var x4 = (_this4._00 * value_x3 + _this4._10 * value_y3 + _this4._20) / w3;
		var y4 = (_this4._01 * value_x3 + _this4._11 * value_y3 + _this4._21) / w3;
		p4_x = x4;
		p4_y = y4;
		var _this5 = this.imagePainter;
		var opacity = this.get_opacity();
		var color = this.get_color();
		var tex = img;
		if(_this5.bufferIndex + 1 >= kha_graphics4_ImageShaderPainter.bufferSize || _this5.lastTexture != null && tex != _this5.lastTexture) {
			_this5.drawBuffer();
		}
		var r = ((color & 16711680) >>> 16) * 0.00392156862745098;
		var g = ((color & 65280) >>> 8) * 0.00392156862745098;
		var b = (color & 255) * 0.00392156862745098;
		var a = (color >>> 24) * 0.00392156862745098 * opacity;
		var baseIndex = _this5.bufferIndex * kha_graphics4_ImageShaderPainter.vertexSize * 4;
		_this5.rectVertices[baseIndex + 5] = r;
		_this5.rectVertices[baseIndex + 6] = g;
		_this5.rectVertices[baseIndex + 7] = b;
		_this5.rectVertices[baseIndex + 8] = a;
		_this5.rectVertices[baseIndex + 14] = r;
		_this5.rectVertices[baseIndex + 15] = g;
		_this5.rectVertices[baseIndex + 16] = b;
		_this5.rectVertices[baseIndex + 17] = a;
		_this5.rectVertices[baseIndex + 23] = r;
		_this5.rectVertices[baseIndex + 24] = g;
		_this5.rectVertices[baseIndex + 25] = b;
		_this5.rectVertices[baseIndex + 26] = a;
		_this5.rectVertices[baseIndex + 32] = r;
		_this5.rectVertices[baseIndex + 33] = g;
		_this5.rectVertices[baseIndex + 34] = b;
		_this5.rectVertices[baseIndex + 35] = a;
		var right = tex.get_width() / tex.get_realWidth();
		var bottom = tex.get_height() / tex.get_realHeight();
		var baseIndex1 = _this5.bufferIndex * kha_graphics4_ImageShaderPainter.vertexSize * 4;
		_this5.rectVertices[baseIndex1 + 3] = 0;
		_this5.rectVertices[baseIndex1 + 4] = bottom;
		_this5.rectVertices[baseIndex1 + 12] = 0;
		_this5.rectVertices[baseIndex1 + 13] = 0;
		_this5.rectVertices[baseIndex1 + 21] = right;
		_this5.rectVertices[baseIndex1 + 22] = 0;
		_this5.rectVertices[baseIndex1 + 30] = right;
		_this5.rectVertices[baseIndex1 + 31] = bottom;
		var baseIndex2 = _this5.bufferIndex * kha_graphics4_ImageShaderPainter.vertexSize * 4;
		_this5.rectVertices[baseIndex2] = p1_x;
		_this5.rectVertices[baseIndex2 + 1] = p1_y;
		_this5.rectVertices[baseIndex2 + 2] = -5.0;
		_this5.rectVertices[baseIndex2 + 9] = p2_x;
		_this5.rectVertices[baseIndex2 + 10] = p2_y;
		_this5.rectVertices[baseIndex2 + 11] = -5.0;
		_this5.rectVertices[baseIndex2 + 18] = p3_x;
		_this5.rectVertices[baseIndex2 + 19] = p3_y;
		_this5.rectVertices[baseIndex2 + 20] = -5.0;
		_this5.rectVertices[baseIndex2 + 27] = p4_x;
		_this5.rectVertices[baseIndex2 + 28] = p4_y;
		_this5.rectVertices[baseIndex2 + 29] = -5.0;
		++_this5.bufferIndex;
		_this5.lastTexture = tex;
	}
	,drawScaledSubImage: function(img,sx,sy,sw,sh,dx,dy,dw,dh) {
		var _this = this.coloredPainter;
		if(_this.triangleBufferIndex > 0) {
			_this.drawTriBuffer(false);
		}
		if(_this.bufferIndex > 0) {
			_this.drawBuffer(false);
		}
		this.textPainter.end();
		var p1_y;
		var p1_x;
		var _this1 = this.transformations[this.transformations.length - 1];
		var value_y;
		var value_x = dx;
		value_y = dy + dh;
		var w = _this1._02 * value_x + _this1._12 * value_y + _this1._22;
		var x = (_this1._00 * value_x + _this1._10 * value_y + _this1._20) / w;
		var y = (_this1._01 * value_x + _this1._11 * value_y + _this1._21) / w;
		p1_x = x;
		p1_y = y;
		var p2_y;
		var p2_x;
		var _this2 = this.transformations[this.transformations.length - 1];
		var value_y1;
		var value_x1 = dx;
		value_y1 = dy;
		var w1 = _this2._02 * value_x1 + _this2._12 * value_y1 + _this2._22;
		var x1 = (_this2._00 * value_x1 + _this2._10 * value_y1 + _this2._20) / w1;
		var y1 = (_this2._01 * value_x1 + _this2._11 * value_y1 + _this2._21) / w1;
		p2_x = x1;
		p2_y = y1;
		var p3_y;
		var p3_x;
		var _this3 = this.transformations[this.transformations.length - 1];
		var value_y2;
		var value_x2 = dx + dw;
		value_y2 = dy;
		var w2 = _this3._02 * value_x2 + _this3._12 * value_y2 + _this3._22;
		var x2 = (_this3._00 * value_x2 + _this3._10 * value_y2 + _this3._20) / w2;
		var y2 = (_this3._01 * value_x2 + _this3._11 * value_y2 + _this3._21) / w2;
		p3_x = x2;
		p3_y = y2;
		var p4_y;
		var p4_x;
		var _this4 = this.transformations[this.transformations.length - 1];
		var value_y3;
		var value_x3 = dx + dw;
		value_y3 = dy + dh;
		var w3 = _this4._02 * value_x3 + _this4._12 * value_y3 + _this4._22;
		var x3 = (_this4._00 * value_x3 + _this4._10 * value_y3 + _this4._20) / w3;
		var y3 = (_this4._01 * value_x3 + _this4._11 * value_y3 + _this4._21) / w3;
		p4_x = x3;
		p4_y = y3;
		var _this5 = this.imagePainter;
		var opacity = this.get_opacity();
		var color = this.get_color();
		var tex = img;
		if(_this5.bufferIndex + 1 >= kha_graphics4_ImageShaderPainter.bufferSize || _this5.lastTexture != null && tex != _this5.lastTexture) {
			_this5.drawBuffer();
		}
		var left = sx / tex.get_realWidth();
		var top = sy / tex.get_realHeight();
		var right = (sx + sw) / tex.get_realWidth();
		var bottom = (sy + sh) / tex.get_realHeight();
		var baseIndex = _this5.bufferIndex * kha_graphics4_ImageShaderPainter.vertexSize * 4;
		_this5.rectVertices[baseIndex + 3] = left;
		_this5.rectVertices[baseIndex + 4] = bottom;
		_this5.rectVertices[baseIndex + 12] = left;
		_this5.rectVertices[baseIndex + 13] = top;
		_this5.rectVertices[baseIndex + 21] = right;
		_this5.rectVertices[baseIndex + 22] = top;
		_this5.rectVertices[baseIndex + 30] = right;
		_this5.rectVertices[baseIndex + 31] = bottom;
		var r = ((color & 16711680) >>> 16) * 0.00392156862745098;
		var g = ((color & 65280) >>> 8) * 0.00392156862745098;
		var b = (color & 255) * 0.00392156862745098;
		var a = (color >>> 24) * 0.00392156862745098 * opacity;
		var baseIndex1 = _this5.bufferIndex * kha_graphics4_ImageShaderPainter.vertexSize * 4;
		_this5.rectVertices[baseIndex1 + 5] = r;
		_this5.rectVertices[baseIndex1 + 6] = g;
		_this5.rectVertices[baseIndex1 + 7] = b;
		_this5.rectVertices[baseIndex1 + 8] = a;
		_this5.rectVertices[baseIndex1 + 14] = r;
		_this5.rectVertices[baseIndex1 + 15] = g;
		_this5.rectVertices[baseIndex1 + 16] = b;
		_this5.rectVertices[baseIndex1 + 17] = a;
		_this5.rectVertices[baseIndex1 + 23] = r;
		_this5.rectVertices[baseIndex1 + 24] = g;
		_this5.rectVertices[baseIndex1 + 25] = b;
		_this5.rectVertices[baseIndex1 + 26] = a;
		_this5.rectVertices[baseIndex1 + 32] = r;
		_this5.rectVertices[baseIndex1 + 33] = g;
		_this5.rectVertices[baseIndex1 + 34] = b;
		_this5.rectVertices[baseIndex1 + 35] = a;
		var baseIndex2 = _this5.bufferIndex * kha_graphics4_ImageShaderPainter.vertexSize * 4;
		_this5.rectVertices[baseIndex2] = p1_x;
		_this5.rectVertices[baseIndex2 + 1] = p1_y;
		_this5.rectVertices[baseIndex2 + 2] = -5.0;
		_this5.rectVertices[baseIndex2 + 9] = p2_x;
		_this5.rectVertices[baseIndex2 + 10] = p2_y;
		_this5.rectVertices[baseIndex2 + 11] = -5.0;
		_this5.rectVertices[baseIndex2 + 18] = p3_x;
		_this5.rectVertices[baseIndex2 + 19] = p3_y;
		_this5.rectVertices[baseIndex2 + 20] = -5.0;
		_this5.rectVertices[baseIndex2 + 27] = p4_x;
		_this5.rectVertices[baseIndex2 + 28] = p4_y;
		_this5.rectVertices[baseIndex2 + 29] = -5.0;
		++_this5.bufferIndex;
		_this5.lastTexture = tex;
	}
	,get_color: function() {
		return this.myColor;
	}
	,set_color: function(color) {
		return this.myColor = color;
	}
	,drawRect: function(x,y,width,height,strength) {
		if(strength == null) {
			strength = 1.0;
		}
		this.imagePainter.end();
		this.textPainter.end();
		var _this = this.transformations[this.transformations.length - 1];
		var value_y;
		var value_x = x - strength / 2;
		value_y = y + strength / 2;
		var w = _this._02 * value_x + _this._12 * value_y + _this._22;
		var x1 = (_this._00 * value_x + _this._10 * value_y + _this._20) / w;
		var y1 = (_this._01 * value_x + _this._11 * value_y + _this._21) / w;
		var p1 = new kha_math_FastVector2(x1,y1);
		var _this1 = this.transformations[this.transformations.length - 1];
		var value_y1;
		var value_x1 = x - strength / 2;
		value_y1 = y - strength / 2;
		var w1 = _this1._02 * value_x1 + _this1._12 * value_y1 + _this1._22;
		var x2 = (_this1._00 * value_x1 + _this1._10 * value_y1 + _this1._20) / w1;
		var y2 = (_this1._01 * value_x1 + _this1._11 * value_y1 + _this1._21) / w1;
		var p2 = new kha_math_FastVector2(x2,y2);
		var _this2 = this.transformations[this.transformations.length - 1];
		var value_y2;
		var value_x2 = x + width + strength / 2;
		value_y2 = y - strength / 2;
		var w2 = _this2._02 * value_x2 + _this2._12 * value_y2 + _this2._22;
		var x3 = (_this2._00 * value_x2 + _this2._10 * value_y2 + _this2._20) / w2;
		var y3 = (_this2._01 * value_x2 + _this2._11 * value_y2 + _this2._21) / w2;
		var p3 = new kha_math_FastVector2(x3,y3);
		var _this3 = this.transformations[this.transformations.length - 1];
		var value_y3;
		var value_x3 = x + width + strength / 2;
		value_y3 = y + strength / 2;
		var w3 = _this3._02 * value_x3 + _this3._12 * value_y3 + _this3._22;
		var x4 = (_this3._00 * value_x3 + _this3._10 * value_y3 + _this3._20) / w3;
		var y4 = (_this3._01 * value_x3 + _this3._11 * value_y3 + _this3._21) / w3;
		var p4 = new kha_math_FastVector2(x4,y4);
		this.coloredPainter.fillRect(this.get_opacity(),this.get_color(),p1.x,p1.y,p2.x,p2.y,p3.x,p3.y,p4.x,p4.y);
		var _this4 = this.transformations[this.transformations.length - 1];
		var value_y4;
		var value_x4 = x - strength / 2;
		value_y4 = y + height + strength / 2;
		var w4 = _this4._02 * value_x4 + _this4._12 * value_y4 + _this4._22;
		var x5 = (_this4._00 * value_x4 + _this4._10 * value_y4 + _this4._20) / w4;
		var y5 = (_this4._01 * value_x4 + _this4._11 * value_y4 + _this4._21) / w4;
		p1 = new kha_math_FastVector2(x5,y5);
		var _this5 = this.transformations[this.transformations.length - 1];
		var value_y5;
		var value_x5 = x + strength / 2;
		value_y5 = y - strength / 2;
		var w5 = _this5._02 * value_x5 + _this5._12 * value_y5 + _this5._22;
		var x6 = (_this5._00 * value_x5 + _this5._10 * value_y5 + _this5._20) / w5;
		var y6 = (_this5._01 * value_x5 + _this5._11 * value_y5 + _this5._21) / w5;
		p3 = new kha_math_FastVector2(x6,y6);
		var _this6 = this.transformations[this.transformations.length - 1];
		var value_y6;
		var value_x6 = x + strength / 2;
		value_y6 = y + height + strength / 2;
		var w6 = _this6._02 * value_x6 + _this6._12 * value_y6 + _this6._22;
		var x7 = (_this6._00 * value_x6 + _this6._10 * value_y6 + _this6._20) / w6;
		var y7 = (_this6._01 * value_x6 + _this6._11 * value_y6 + _this6._21) / w6;
		p4 = new kha_math_FastVector2(x7,y7);
		this.coloredPainter.fillRect(this.get_opacity(),this.get_color(),p1.x,p1.y,p2.x,p2.y,p3.x,p3.y,p4.x,p4.y);
		var _this7 = this.transformations[this.transformations.length - 1];
		var value_y7;
		var value_x7 = x - strength / 2;
		value_y7 = y + height - strength / 2;
		var w7 = _this7._02 * value_x7 + _this7._12 * value_y7 + _this7._22;
		var x8 = (_this7._00 * value_x7 + _this7._10 * value_y7 + _this7._20) / w7;
		var y8 = (_this7._01 * value_x7 + _this7._11 * value_y7 + _this7._21) / w7;
		p2 = new kha_math_FastVector2(x8,y8);
		var _this8 = this.transformations[this.transformations.length - 1];
		var value_y8;
		var value_x8 = x + width + strength / 2;
		value_y8 = y + height - strength / 2;
		var w8 = _this8._02 * value_x8 + _this8._12 * value_y8 + _this8._22;
		var x9 = (_this8._00 * value_x8 + _this8._10 * value_y8 + _this8._20) / w8;
		var y9 = (_this8._01 * value_x8 + _this8._11 * value_y8 + _this8._21) / w8;
		p3 = new kha_math_FastVector2(x9,y9);
		var _this9 = this.transformations[this.transformations.length - 1];
		var value_y9;
		var value_x9 = x + width + strength / 2;
		value_y9 = y + height + strength / 2;
		var w9 = _this9._02 * value_x9 + _this9._12 * value_y9 + _this9._22;
		var x10 = (_this9._00 * value_x9 + _this9._10 * value_y9 + _this9._20) / w9;
		var y10 = (_this9._01 * value_x9 + _this9._11 * value_y9 + _this9._21) / w9;
		p4 = new kha_math_FastVector2(x10,y10);
		this.coloredPainter.fillRect(this.get_opacity(),this.get_color(),p1.x,p1.y,p2.x,p2.y,p3.x,p3.y,p4.x,p4.y);
		var _this10 = this.transformations[this.transformations.length - 1];
		var value_y10;
		var value_x10 = x + width - strength / 2;
		value_y10 = y + height + strength / 2;
		var w10 = _this10._02 * value_x10 + _this10._12 * value_y10 + _this10._22;
		var x11 = (_this10._00 * value_x10 + _this10._10 * value_y10 + _this10._20) / w10;
		var y11 = (_this10._01 * value_x10 + _this10._11 * value_y10 + _this10._21) / w10;
		p1 = new kha_math_FastVector2(x11,y11);
		var _this11 = this.transformations[this.transformations.length - 1];
		var value_y11;
		var value_x11 = x + width - strength / 2;
		value_y11 = y - strength / 2;
		var w11 = _this11._02 * value_x11 + _this11._12 * value_y11 + _this11._22;
		var x12 = (_this11._00 * value_x11 + _this11._10 * value_y11 + _this11._20) / w11;
		var y12 = (_this11._01 * value_x11 + _this11._11 * value_y11 + _this11._21) / w11;
		p2 = new kha_math_FastVector2(x12,y12);
		var _this12 = this.transformations[this.transformations.length - 1];
		var value_y12;
		var value_x12 = x + width + strength / 2;
		value_y12 = y - strength / 2;
		var w12 = _this12._02 * value_x12 + _this12._12 * value_y12 + _this12._22;
		var x13 = (_this12._00 * value_x12 + _this12._10 * value_y12 + _this12._20) / w12;
		var y13 = (_this12._01 * value_x12 + _this12._11 * value_y12 + _this12._21) / w12;
		p3 = new kha_math_FastVector2(x13,y13);
		var _this13 = this.transformations[this.transformations.length - 1];
		var value_y13;
		var value_x13 = x + width + strength / 2;
		value_y13 = y + height + strength / 2;
		var w13 = _this13._02 * value_x13 + _this13._12 * value_y13 + _this13._22;
		var x14 = (_this13._00 * value_x13 + _this13._10 * value_y13 + _this13._20) / w13;
		var y14 = (_this13._01 * value_x13 + _this13._11 * value_y13 + _this13._21) / w13;
		p4 = new kha_math_FastVector2(x14,y14);
		this.coloredPainter.fillRect(this.get_opacity(),this.get_color(),p1.x,p1.y,p2.x,p2.y,p3.x,p3.y,p4.x,p4.y);
	}
	,fillRect: function(x,y,width,height) {
		this.imagePainter.end();
		this.textPainter.end();
		var p1_y;
		var p1_x;
		var _this = this.transformations[this.transformations.length - 1];
		var value_y;
		var value_x = x;
		value_y = y + height;
		var w = _this._02 * value_x + _this._12 * value_y + _this._22;
		var x1 = (_this._00 * value_x + _this._10 * value_y + _this._20) / w;
		var y1 = (_this._01 * value_x + _this._11 * value_y + _this._21) / w;
		p1_x = x1;
		p1_y = y1;
		var p2_y;
		var p2_x;
		var _this1 = this.transformations[this.transformations.length - 1];
		var value_y1;
		var value_x1 = x;
		value_y1 = y;
		var w1 = _this1._02 * value_x1 + _this1._12 * value_y1 + _this1._22;
		var x2 = (_this1._00 * value_x1 + _this1._10 * value_y1 + _this1._20) / w1;
		var y2 = (_this1._01 * value_x1 + _this1._11 * value_y1 + _this1._21) / w1;
		p2_x = x2;
		p2_y = y2;
		var p3_y;
		var p3_x;
		var _this2 = this.transformations[this.transformations.length - 1];
		var value_y2;
		var value_x2 = x + width;
		value_y2 = y;
		var w2 = _this2._02 * value_x2 + _this2._12 * value_y2 + _this2._22;
		var x3 = (_this2._00 * value_x2 + _this2._10 * value_y2 + _this2._20) / w2;
		var y3 = (_this2._01 * value_x2 + _this2._11 * value_y2 + _this2._21) / w2;
		p3_x = x3;
		p3_y = y3;
		var p4_y;
		var p4_x;
		var _this3 = this.transformations[this.transformations.length - 1];
		var value_y3;
		var value_x3 = x + width;
		value_y3 = y + height;
		var w3 = _this3._02 * value_x3 + _this3._12 * value_y3 + _this3._22;
		var x4 = (_this3._00 * value_x3 + _this3._10 * value_y3 + _this3._20) / w3;
		var y4 = (_this3._01 * value_x3 + _this3._11 * value_y3 + _this3._21) / w3;
		p4_x = x4;
		p4_y = y4;
		this.coloredPainter.fillRect(this.get_opacity(),this.get_color(),p1_x,p1_y,p2_x,p2_y,p3_x,p3_y,p4_x,p4_y);
	}
	,drawString: function(text,x,y) {
		this.imagePainter.end();
		var _this = this.coloredPainter;
		if(_this.triangleBufferIndex > 0) {
			_this.drawTriBuffer(false);
		}
		if(_this.bufferIndex > 0) {
			_this.drawBuffer(false);
		}
		this.textPainter.drawString(text,this.get_opacity(),this.get_color(),x,y,this.transformations[this.transformations.length - 1],this.get_fontGlyphs());
	}
	,drawCharacters: function(text,start,length,x,y) {
		this.imagePainter.end();
		var _this = this.coloredPainter;
		if(_this.triangleBufferIndex > 0) {
			_this.drawTriBuffer(false);
		}
		if(_this.bufferIndex > 0) {
			_this.drawBuffer(false);
		}
		this.textPainter.drawCharacters(text,start,length,this.get_opacity(),this.get_color(),x,y,this.transformations[this.transformations.length - 1],this.get_fontGlyphs());
	}
	,get_font: function() {
		return this.myFont;
	}
	,set_font: function(font) {
		this.textPainter.setFont(font);
		return this.myFont = font;
	}
	,set_fontSize: function(value) {
		return kha_graphics2_Graphics.prototype.set_fontSize.call(this,this.textPainter.fontSize = value);
	}
	,drawLine: function(x1,y1,x2,y2,strength) {
		if(strength == null) {
			strength = 1.0;
		}
		this.imagePainter.end();
		this.textPainter.end();
		var vec;
		if(y2 == y1) {
			vec = new kha_math_FastVector2(0,-1);
		} else {
			vec = new kha_math_FastVector2(1,-(x2 - x1) / (y2 - y1));
		}
		vec.set_length(strength);
		var p1 = new kha_math_FastVector2(x1 + 0.5 * vec.x,y1 + 0.5 * vec.y);
		var p2 = new kha_math_FastVector2(x2 + 0.5 * vec.x,y2 + 0.5 * vec.y);
		var p3 = new kha_math_FastVector2(p1.x - vec.x,p1.y - vec.y);
		var p4 = new kha_math_FastVector2(p2.x - vec.x,p2.y - vec.y);
		var _this = this.transformations[this.transformations.length - 1];
		var w = _this._02 * p1.x + _this._12 * p1.y + _this._22;
		var x = (_this._00 * p1.x + _this._10 * p1.y + _this._20) / w;
		var y = (_this._01 * p1.x + _this._11 * p1.y + _this._21) / w;
		p1 = new kha_math_FastVector2(x,y);
		var _this1 = this.transformations[this.transformations.length - 1];
		var w1 = _this1._02 * p2.x + _this1._12 * p2.y + _this1._22;
		var x3 = (_this1._00 * p2.x + _this1._10 * p2.y + _this1._20) / w1;
		var y3 = (_this1._01 * p2.x + _this1._11 * p2.y + _this1._21) / w1;
		p2 = new kha_math_FastVector2(x3,y3);
		var _this2 = this.transformations[this.transformations.length - 1];
		var w2 = _this2._02 * p3.x + _this2._12 * p3.y + _this2._22;
		var x4 = (_this2._00 * p3.x + _this2._10 * p3.y + _this2._20) / w2;
		var y4 = (_this2._01 * p3.x + _this2._11 * p3.y + _this2._21) / w2;
		p3 = new kha_math_FastVector2(x4,y4);
		var _this3 = this.transformations[this.transformations.length - 1];
		var w3 = _this3._02 * p4.x + _this3._12 * p4.y + _this3._22;
		var x5 = (_this3._00 * p4.x + _this3._10 * p4.y + _this3._20) / w3;
		var y5 = (_this3._01 * p4.x + _this3._11 * p4.y + _this3._21) / w3;
		p4 = new kha_math_FastVector2(x5,y5);
		this.coloredPainter.fillTriangle(this.get_opacity(),this.get_color(),p1.x,p1.y,p2.x,p2.y,p3.x,p3.y);
		this.coloredPainter.fillTriangle(this.get_opacity(),this.get_color(),p3.x,p3.y,p2.x,p2.y,p4.x,p4.y);
	}
	,fillTriangle: function(x1,y1,x2,y2,x3,y3) {
		this.imagePainter.end();
		this.textPainter.end();
		var p1_y;
		var p1_x;
		var _this = this.transformations[this.transformations.length - 1];
		var value_y;
		var value_x = x1;
		value_y = y1;
		var w = _this._02 * value_x + _this._12 * value_y + _this._22;
		var x = (_this._00 * value_x + _this._10 * value_y + _this._20) / w;
		var y = (_this._01 * value_x + _this._11 * value_y + _this._21) / w;
		p1_x = x;
		p1_y = y;
		var p2_y;
		var p2_x;
		var _this1 = this.transformations[this.transformations.length - 1];
		var value_y1;
		var value_x1 = x2;
		value_y1 = y2;
		var w1 = _this1._02 * value_x1 + _this1._12 * value_y1 + _this1._22;
		var x4 = (_this1._00 * value_x1 + _this1._10 * value_y1 + _this1._20) / w1;
		var y4 = (_this1._01 * value_x1 + _this1._11 * value_y1 + _this1._21) / w1;
		p2_x = x4;
		p2_y = y4;
		var p3_y;
		var p3_x;
		var _this2 = this.transformations[this.transformations.length - 1];
		var value_y2;
		var value_x2 = x3;
		value_y2 = y3;
		var w2 = _this2._02 * value_x2 + _this2._12 * value_y2 + _this2._22;
		var x5 = (_this2._00 * value_x2 + _this2._10 * value_y2 + _this2._20) / w2;
		var y5 = (_this2._01 * value_x2 + _this2._11 * value_y2 + _this2._21) / w2;
		p3_x = x5;
		p3_y = y5;
		this.coloredPainter.fillTriangle(this.get_opacity(),this.get_color(),p1_x,p1_y,p2_x,p2_y,p3_x,p3_y);
	}
	,myImageScaleQuality: null
	,get_imageScaleQuality: function() {
		return this.myImageScaleQuality;
	}
	,set_imageScaleQuality: function(value) {
		this.imagePainter.setBilinearFilter(value == kha_graphics2_ImageScaleQuality.High);
		this.textPainter.setBilinearFilter(value == kha_graphics2_ImageScaleQuality.High);
		return this.myImageScaleQuality = value;
	}
	,myMipmapScaleQuality: null
	,get_mipmapScaleQuality: function() {
		return this.myMipmapScaleQuality;
	}
	,set_mipmapScaleQuality: function(value) {
		this.imagePainter.setBilinearMipmapFilter(value == kha_graphics2_ImageScaleQuality.High);
		return this.myMipmapScaleQuality = value;
	}
	,setPipeline: function(pipeline) {
		this.flush();
		this.imagePainter.set_pipeline(pipeline);
		this.coloredPainter.set_pipeline(pipeline);
		this.textPainter.set_pipeline(pipeline);
		if(pipeline != null) {
			this.g.setPipeline(pipeline);
		}
	}
	,scissor: function(x,y,width,height) {
		this.flush();
		this.g.scissor(x,y,width,height);
	}
	,disableScissor: function() {
		this.flush();
		this.g.disableScissor();
	}
	,begin: function(clear,clearColor) {
		if(clear == null) {
			clear = true;
		}
		this.g.begin();
		if(clear) {
			this.clear(clearColor);
		}
		this.setProjection();
	}
	,clear: function(color) {
		this.flush();
		this.g.clear(color == null ? -16777216 : color);
	}
	,flush: function() {
		this.imagePainter.end();
		this.textPainter.end();
		var _this = this.coloredPainter;
		if(_this.triangleBufferIndex > 0) {
			_this.drawTriBuffer(false);
		}
		if(_this.bufferIndex > 0) {
			_this.drawBuffer(false);
		}
	}
	,end: function() {
		this.flush();
		this.g.end();
	}
	,drawVideoInternal: function(video,x,y,width,height) {
	}
	,drawVideo: function(video,x,y,width,height) {
		this.setPipeline(kha_graphics4_Graphics2.videoPipeline);
		this.drawVideoInternal(video,x,y,width,height);
		this.setPipeline(null);
	}
	,__class__: kha_graphics4_Graphics2
});
var kha_graphics4_IndexBuffer = function(indexCount,usage,canRead) {
	if(canRead == null) {
		canRead = false;
	}
	this.usage = usage;
	this.mySize = indexCount;
	this.buffer = kha_SystemImpl.gl.createBuffer();
	var this1 = new Uint32Array(indexCount);
	this._data = this1;
};
$hxClasses["kha.graphics4.IndexBuffer"] = kha_graphics4_IndexBuffer;
kha_graphics4_IndexBuffer.__name__ = true;
kha_graphics4_IndexBuffer.prototype = {
	buffer: null
	,_data: null
	,mySize: null
	,usage: null
	,'delete': function() {
		this._data = null;
		kha_SystemImpl.gl.deleteBuffer(this.buffer);
	}
	,lock: function(start,count) {
		if(start == null) {
			start = 0;
		}
		if(count == null) {
			count = this.mySize;
		}
		return this._data.subarray(start,start + count);
	}
	,unlock: function() {
		kha_SystemImpl.gl.bindBuffer(34963,this.buffer);
		var glData = kha_SystemImpl.elementIndexUint == null ? new Uint16Array(this._data) : this._data;
		kha_SystemImpl.gl.bufferData(34963,glData,this.usage == kha_graphics4_Usage.DynamicUsage ? 35048 : 35044);
	}
	,set: function() {
		kha_SystemImpl.gl.bindBuffer(34963,this.buffer);
	}
	,count: function() {
		return this.mySize;
	}
	,__class__: kha_graphics4_IndexBuffer
};
var kha_graphics4_MipMapFilter = $hxClasses["kha.graphics4.MipMapFilter"] = { __ename__ : true, __constructs__ : ["NoMipFilter","PointMipFilter","LinearMipFilter"] };
kha_graphics4_MipMapFilter.NoMipFilter = ["NoMipFilter",0];
kha_graphics4_MipMapFilter.NoMipFilter.toString = $estr;
kha_graphics4_MipMapFilter.NoMipFilter.__enum__ = kha_graphics4_MipMapFilter;
kha_graphics4_MipMapFilter.PointMipFilter = ["PointMipFilter",1];
kha_graphics4_MipMapFilter.PointMipFilter.toString = $estr;
kha_graphics4_MipMapFilter.PointMipFilter.__enum__ = kha_graphics4_MipMapFilter;
kha_graphics4_MipMapFilter.LinearMipFilter = ["LinearMipFilter",2];
kha_graphics4_MipMapFilter.LinearMipFilter.toString = $estr;
kha_graphics4_MipMapFilter.LinearMipFilter.__enum__ = kha_graphics4_MipMapFilter;
var kha_graphics4_PipelineStateBase = function() {
	this.inputLayout = null;
	this.vertexShader = null;
	this.fragmentShader = null;
	this.geometryShader = null;
	this.tessellationControlShader = null;
	this.tessellationEvaluationShader = null;
	this.cullMode = kha_graphics4_CullMode.None;
	this.depthWrite = false;
	this.depthMode = kha_graphics4_CompareMode.Always;
	this.stencilMode = kha_graphics4_CompareMode.Always;
	this.stencilBothPass = kha_graphics4_StencilAction.Keep;
	this.stencilDepthFail = kha_graphics4_StencilAction.Keep;
	this.stencilFail = kha_graphics4_StencilAction.Keep;
	this.stencilReferenceValue = 0;
	this.stencilReadMask = 255;
	this.stencilWriteMask = 255;
	this.blendSource = kha_graphics4_BlendingFactor.BlendOne;
	this.blendDestination = kha_graphics4_BlendingFactor.BlendZero;
	this.blendOperation = kha_graphics4_BlendingOperation.Add;
	this.alphaBlendSource = kha_graphics4_BlendingFactor.BlendOne;
	this.alphaBlendDestination = kha_graphics4_BlendingFactor.BlendZero;
	this.alphaBlendOperation = kha_graphics4_BlendingOperation.Add;
	this.colorWriteMaskRed = this.colorWriteMaskBlue = this.colorWriteMaskGreen = this.colorWriteMaskAlpha = true;
	this.conservativeRasterization = false;
};
$hxClasses["kha.graphics4.PipelineStateBase"] = kha_graphics4_PipelineStateBase;
kha_graphics4_PipelineStateBase.__name__ = true;
kha_graphics4_PipelineStateBase.prototype = {
	inputLayout: null
	,vertexShader: null
	,fragmentShader: null
	,geometryShader: null
	,tessellationControlShader: null
	,tessellationEvaluationShader: null
	,cullMode: null
	,depthWrite: null
	,depthMode: null
	,stencilMode: null
	,stencilBothPass: null
	,stencilDepthFail: null
	,stencilFail: null
	,stencilReferenceValue: null
	,stencilReadMask: null
	,stencilWriteMask: null
	,blendSource: null
	,blendDestination: null
	,blendOperation: null
	,alphaBlendSource: null
	,alphaBlendDestination: null
	,alphaBlendOperation: null
	,colorWriteMaskRed: null
	,colorWriteMaskGreen: null
	,colorWriteMaskBlue: null
	,colorWriteMaskAlpha: null
	,set_colorWriteMask: function(value) {
		return this.colorWriteMaskRed = this.colorWriteMaskBlue = this.colorWriteMaskGreen = this.colorWriteMaskAlpha = value;
	}
	,conservativeRasterization: null
	,__class__: kha_graphics4_PipelineStateBase
};
var kha_graphics4_PipelineState = function() {
	kha_graphics4_PipelineStateBase.call(this);
	this.program = kha_SystemImpl.gl.createProgram();
	this.textures = [];
	this.textureValues = [];
};
$hxClasses["kha.graphics4.PipelineState"] = kha_graphics4_PipelineState;
kha_graphics4_PipelineState.__name__ = true;
kha_graphics4_PipelineState.__super__ = kha_graphics4_PipelineStateBase;
kha_graphics4_PipelineState.prototype = $extend(kha_graphics4_PipelineStateBase.prototype,{
	program: null
	,textures: null
	,textureValues: null
	,'delete': function() {
		kha_SystemImpl.gl.deleteProgram(this.program);
	}
	,compile: function() {
		this.compileShader(this.vertexShader);
		this.compileShader(this.fragmentShader);
		kha_SystemImpl.gl.attachShader(this.program,this.vertexShader.shader);
		kha_SystemImpl.gl.attachShader(this.program,this.fragmentShader.shader);
		var index = 0;
		var _g = 0;
		var _g1 = this.inputLayout;
		while(_g < _g1.length) {
			var structure = _g1[_g];
			++_g;
			var _g2 = 0;
			var _g3 = structure.elements;
			while(_g2 < _g3.length) {
				var element = _g3[_g2];
				++_g2;
				kha_SystemImpl.gl.bindAttribLocation(this.program,index,element.name);
				if(element.data == kha_graphics4_VertexData.Float4x4) {
					index += 4;
				} else {
					++index;
				}
			}
		}
		kha_SystemImpl.gl.linkProgram(this.program);
		if(!kha_SystemImpl.gl.getProgramParameter(this.program,35714)) {
			throw new js__$Boot_HaxeError("Could not link the shader program:\n" + kha_SystemImpl.gl.getProgramInfoLog(this.program));
		}
	}
	,set: function() {
		kha_SystemImpl.gl.useProgram(this.program);
		var _g1 = 0;
		var _g = this.textureValues.length;
		while(_g1 < _g) {
			var index = _g1++;
			kha_SystemImpl.gl.uniform1i(this.textureValues[index],index);
		}
		kha_SystemImpl.gl.colorMask(this.colorWriteMaskRed,this.colorWriteMaskGreen,this.colorWriteMaskBlue,this.colorWriteMaskAlpha);
	}
	,compileShader: function(shader) {
		if(shader.shader != null) {
			return;
		}
		var s = kha_SystemImpl.gl.createShader(shader.type);
		var highp = kha_SystemImpl.gl.getShaderPrecisionFormat(35632,36338);
		var highpSupported = highp.precision != 0;
		var files = shader.files;
		var _g1 = 0;
		var _g = files.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(kha_SystemImpl.gl2) {
				if(files[i].indexOf("-webgl2") >= 0 || files[i].indexOf("runtime-string") >= 0) {
					kha_SystemImpl.gl.shaderSource(s,shader.sources[i]);
					break;
				}
			} else {
				if(!highpSupported && files[i].indexOf("-relaxed") >= 0) {
					kha_SystemImpl.gl.shaderSource(s,shader.sources[i]);
					break;
				}
				if(highpSupported && files[i].indexOf("-relaxed") < 0) {
					kha_SystemImpl.gl.shaderSource(s,shader.sources[i]);
					break;
				}
			}
		}
		kha_SystemImpl.gl.compileShader(s);
		if(!kha_SystemImpl.gl.getShaderParameter(s,35713)) {
			throw new js__$Boot_HaxeError("Could not compile shader:\n" + kha_SystemImpl.gl.getShaderInfoLog(s));
		}
		shader.shader = s;
	}
	,getConstantLocation: function(name) {
		var location = kha_SystemImpl.gl.getUniformLocation(this.program,name);
		var type = 5126;
		var count = kha_SystemImpl.gl.getProgramParameter(this.program,35718);
		var _g1 = 0;
		var _g = count;
		while(_g1 < _g) {
			var i = _g1++;
			var info = kha_SystemImpl.gl.getActiveUniform(this.program,i);
			if(info.name == name || info.name == name + "[0]") {
				type = info.type;
				break;
			}
		}
		return new kha_js_graphics4_ConstantLocation(location,type);
	}
	,getTextureUnit: function(name) {
		var index = this.findTexture(name);
		if(index < 0) {
			var location = kha_SystemImpl.gl.getUniformLocation(this.program,name);
			index = this.textures.length;
			this.textureValues.push(location);
			this.textures.push(name);
		}
		return new kha_js_graphics4_TextureUnit(index);
	}
	,findTexture: function(name) {
		var _g1 = 0;
		var _g = this.textures.length;
		while(_g1 < _g) {
			var index = _g1++;
			if(this.textures[index] == name) {
				return index;
			}
		}
		return -1;
	}
	,__class__: kha_graphics4_PipelineState
});
var kha_graphics4_StencilAction = $hxClasses["kha.graphics4.StencilAction"] = { __ename__ : true, __constructs__ : ["Keep","Zero","Replace","Increment","IncrementWrap","Decrement","DecrementWrap","Invert"] };
kha_graphics4_StencilAction.Keep = ["Keep",0];
kha_graphics4_StencilAction.Keep.toString = $estr;
kha_graphics4_StencilAction.Keep.__enum__ = kha_graphics4_StencilAction;
kha_graphics4_StencilAction.Zero = ["Zero",1];
kha_graphics4_StencilAction.Zero.toString = $estr;
kha_graphics4_StencilAction.Zero.__enum__ = kha_graphics4_StencilAction;
kha_graphics4_StencilAction.Replace = ["Replace",2];
kha_graphics4_StencilAction.Replace.toString = $estr;
kha_graphics4_StencilAction.Replace.__enum__ = kha_graphics4_StencilAction;
kha_graphics4_StencilAction.Increment = ["Increment",3];
kha_graphics4_StencilAction.Increment.toString = $estr;
kha_graphics4_StencilAction.Increment.__enum__ = kha_graphics4_StencilAction;
kha_graphics4_StencilAction.IncrementWrap = ["IncrementWrap",4];
kha_graphics4_StencilAction.IncrementWrap.toString = $estr;
kha_graphics4_StencilAction.IncrementWrap.__enum__ = kha_graphics4_StencilAction;
kha_graphics4_StencilAction.Decrement = ["Decrement",5];
kha_graphics4_StencilAction.Decrement.toString = $estr;
kha_graphics4_StencilAction.Decrement.__enum__ = kha_graphics4_StencilAction;
kha_graphics4_StencilAction.DecrementWrap = ["DecrementWrap",6];
kha_graphics4_StencilAction.DecrementWrap.toString = $estr;
kha_graphics4_StencilAction.DecrementWrap.__enum__ = kha_graphics4_StencilAction;
kha_graphics4_StencilAction.Invert = ["Invert",7];
kha_graphics4_StencilAction.Invert.toString = $estr;
kha_graphics4_StencilAction.Invert.__enum__ = kha_graphics4_StencilAction;
var kha_graphics4_TessellationControlShader = function(source,file) {
};
$hxClasses["kha.graphics4.TessellationControlShader"] = kha_graphics4_TessellationControlShader;
kha_graphics4_TessellationControlShader.__name__ = true;
kha_graphics4_TessellationControlShader.prototype = {
	'delete': function() {
	}
	,__class__: kha_graphics4_TessellationControlShader
};
var kha_graphics4_TessellationEvaluationShader = function(source,file) {
};
$hxClasses["kha.graphics4.TessellationEvaluationShader"] = kha_graphics4_TessellationEvaluationShader;
kha_graphics4_TessellationEvaluationShader.__name__ = true;
kha_graphics4_TessellationEvaluationShader.prototype = {
	'delete': function() {
	}
	,__class__: kha_graphics4_TessellationEvaluationShader
};
var kha_graphics4_TexDir = $hxClasses["kha.graphics4.TexDir"] = { __ename__ : true, __constructs__ : ["U","V"] };
kha_graphics4_TexDir.U = ["U",0];
kha_graphics4_TexDir.U.toString = $estr;
kha_graphics4_TexDir.U.__enum__ = kha_graphics4_TexDir;
kha_graphics4_TexDir.V = ["V",1];
kha_graphics4_TexDir.V.toString = $estr;
kha_graphics4_TexDir.V.__enum__ = kha_graphics4_TexDir;
var kha_graphics4_TextureAddressing = $hxClasses["kha.graphics4.TextureAddressing"] = { __ename__ : true, __constructs__ : ["Repeat","Mirror","Clamp"] };
kha_graphics4_TextureAddressing.Repeat = ["Repeat",0];
kha_graphics4_TextureAddressing.Repeat.toString = $estr;
kha_graphics4_TextureAddressing.Repeat.__enum__ = kha_graphics4_TextureAddressing;
kha_graphics4_TextureAddressing.Mirror = ["Mirror",1];
kha_graphics4_TextureAddressing.Mirror.toString = $estr;
kha_graphics4_TextureAddressing.Mirror.__enum__ = kha_graphics4_TextureAddressing;
kha_graphics4_TextureAddressing.Clamp = ["Clamp",2];
kha_graphics4_TextureAddressing.Clamp.toString = $estr;
kha_graphics4_TextureAddressing.Clamp.__enum__ = kha_graphics4_TextureAddressing;
var kha_graphics4_TextureFilter = $hxClasses["kha.graphics4.TextureFilter"] = { __ename__ : true, __constructs__ : ["PointFilter","LinearFilter","AnisotropicFilter"] };
kha_graphics4_TextureFilter.PointFilter = ["PointFilter",0];
kha_graphics4_TextureFilter.PointFilter.toString = $estr;
kha_graphics4_TextureFilter.PointFilter.__enum__ = kha_graphics4_TextureFilter;
kha_graphics4_TextureFilter.LinearFilter = ["LinearFilter",1];
kha_graphics4_TextureFilter.LinearFilter.toString = $estr;
kha_graphics4_TextureFilter.LinearFilter.__enum__ = kha_graphics4_TextureFilter;
kha_graphics4_TextureFilter.AnisotropicFilter = ["AnisotropicFilter",2];
kha_graphics4_TextureFilter.AnisotropicFilter.toString = $estr;
kha_graphics4_TextureFilter.AnisotropicFilter.__enum__ = kha_graphics4_TextureFilter;
var kha_graphics4_TextureFormat = $hxClasses["kha.graphics4.TextureFormat"] = { __ename__ : true, __constructs__ : ["RGBA32","L8","RGBA128","DEPTH16","RGBA64","A32","A16"] };
kha_graphics4_TextureFormat.RGBA32 = ["RGBA32",0];
kha_graphics4_TextureFormat.RGBA32.toString = $estr;
kha_graphics4_TextureFormat.RGBA32.__enum__ = kha_graphics4_TextureFormat;
kha_graphics4_TextureFormat.L8 = ["L8",1];
kha_graphics4_TextureFormat.L8.toString = $estr;
kha_graphics4_TextureFormat.L8.__enum__ = kha_graphics4_TextureFormat;
kha_graphics4_TextureFormat.RGBA128 = ["RGBA128",2];
kha_graphics4_TextureFormat.RGBA128.toString = $estr;
kha_graphics4_TextureFormat.RGBA128.__enum__ = kha_graphics4_TextureFormat;
kha_graphics4_TextureFormat.DEPTH16 = ["DEPTH16",3];
kha_graphics4_TextureFormat.DEPTH16.toString = $estr;
kha_graphics4_TextureFormat.DEPTH16.__enum__ = kha_graphics4_TextureFormat;
kha_graphics4_TextureFormat.RGBA64 = ["RGBA64",4];
kha_graphics4_TextureFormat.RGBA64.toString = $estr;
kha_graphics4_TextureFormat.RGBA64.__enum__ = kha_graphics4_TextureFormat;
kha_graphics4_TextureFormat.A32 = ["A32",5];
kha_graphics4_TextureFormat.A32.toString = $estr;
kha_graphics4_TextureFormat.A32.__enum__ = kha_graphics4_TextureFormat;
kha_graphics4_TextureFormat.A16 = ["A16",6];
kha_graphics4_TextureFormat.A16.toString = $estr;
kha_graphics4_TextureFormat.A16.__enum__ = kha_graphics4_TextureFormat;
var kha_graphics4_TextureUnit = function() { };
$hxClasses["kha.graphics4.TextureUnit"] = kha_graphics4_TextureUnit;
kha_graphics4_TextureUnit.__name__ = true;
var kha_graphics4_Usage = $hxClasses["kha.graphics4.Usage"] = { __ename__ : true, __constructs__ : ["StaticUsage","DynamicUsage","ReadableUsage"] };
kha_graphics4_Usage.StaticUsage = ["StaticUsage",0];
kha_graphics4_Usage.StaticUsage.toString = $estr;
kha_graphics4_Usage.StaticUsage.__enum__ = kha_graphics4_Usage;
kha_graphics4_Usage.DynamicUsage = ["DynamicUsage",1];
kha_graphics4_Usage.DynamicUsage.toString = $estr;
kha_graphics4_Usage.DynamicUsage.__enum__ = kha_graphics4_Usage;
kha_graphics4_Usage.ReadableUsage = ["ReadableUsage",2];
kha_graphics4_Usage.ReadableUsage.toString = $estr;
kha_graphics4_Usage.ReadableUsage.__enum__ = kha_graphics4_Usage;
var kha_graphics4_VertexBuffer = function(vertexCount,structure,usage,instanceDataStepRate,canRead) {
	if(canRead == null) {
		canRead = false;
	}
	if(instanceDataStepRate == null) {
		instanceDataStepRate = 0;
	}
	this.usage = usage;
	this.instanceDataStepRate = instanceDataStepRate;
	this.mySize = vertexCount;
	this.myStride = 0;
	var _g = 0;
	var _g1 = structure.elements;
	while(_g < _g1.length) {
		var element = _g1[_g];
		++_g;
		var _g2 = element.data;
		switch(_g2[1]) {
		case 0:
			this.myStride += 4;
			break;
		case 1:
			this.myStride += 8;
			break;
		case 2:
			this.myStride += 12;
			break;
		case 3:
			this.myStride += 16;
			break;
		case 4:
			this.myStride += 64;
			break;
		}
	}
	this.buffer = kha_SystemImpl.gl.createBuffer();
	var this1 = new Float32Array(vertexCount * this.myStride / 4 | 0);
	this._data = this1;
	this.sizes = [];
	this.offsets = [];
	this.sizes[structure.elements.length - 1] = 0;
	this.offsets[structure.elements.length - 1] = 0;
	var offset = 0;
	var index = 0;
	var _g3 = 0;
	var _g11 = structure.elements;
	while(_g3 < _g11.length) {
		var element1 = _g11[_g3];
		++_g3;
		var size;
		var _g21 = element1.data;
		switch(_g21[1]) {
		case 0:
			size = 1;
			break;
		case 1:
			size = 2;
			break;
		case 2:
			size = 3;
			break;
		case 3:
			size = 4;
			break;
		case 4:
			size = 16;
			break;
		}
		this.sizes[index] = size;
		this.offsets[index] = offset;
		var _g31 = element1.data;
		switch(_g31[1]) {
		case 0:
			offset += 4;
			break;
		case 1:
			offset += 8;
			break;
		case 2:
			offset += 12;
			break;
		case 3:
			offset += 16;
			break;
		case 4:
			offset += 64;
			break;
		}
		++index;
	}
};
$hxClasses["kha.graphics4.VertexBuffer"] = kha_graphics4_VertexBuffer;
kha_graphics4_VertexBuffer.__name__ = true;
kha_graphics4_VertexBuffer.prototype = {
	buffer: null
	,_data: null
	,mySize: null
	,myStride: null
	,sizes: null
	,offsets: null
	,usage: null
	,instanceDataStepRate: null
	,'delete': function() {
		this._data = null;
		kha_SystemImpl.gl.deleteBuffer(this.buffer);
	}
	,lock: function(start,count) {
		if(start == null) {
			start = 0;
		}
		if(count == null) {
			count = this.mySize;
		}
		return this._data.subarray(start * this.stride(),(start + count) * this.stride());
	}
	,unlock: function() {
		kha_SystemImpl.gl.bindBuffer(34962,this.buffer);
		kha_SystemImpl.gl.bufferData(34962,this._data,this.usage == kha_graphics4_Usage.DynamicUsage ? 35048 : 35044);
	}
	,stride: function() {
		return this.myStride;
	}
	,count: function() {
		return this.mySize;
	}
	,set: function(offset) {
		var ext = kha_SystemImpl.gl2 ? true : kha_SystemImpl.gl.getExtension("ANGLE_instanced_arrays");
		kha_SystemImpl.gl.bindBuffer(34962,this.buffer);
		var attributesOffset = 0;
		var _g1 = 0;
		var _g = this.sizes.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(this.sizes[i] > 4) {
				var size = this.sizes[i];
				var addonOffset = 0;
				while(size > 0) {
					kha_SystemImpl.gl.enableVertexAttribArray(offset + attributesOffset);
					kha_SystemImpl.gl.vertexAttribPointer(offset + attributesOffset,4,5126,false,this.myStride,this.offsets[i] + addonOffset);
					if(ext) {
						if(kha_SystemImpl.gl2) {
							kha_SystemImpl.gl.vertexAttribDivisor(offset + attributesOffset,this.instanceDataStepRate);
						} else {
							ext.vertexAttribDivisorANGLE(offset + attributesOffset,this.instanceDataStepRate);
						}
					}
					size -= 4;
					addonOffset += 16;
					++attributesOffset;
				}
			} else {
				kha_SystemImpl.gl.enableVertexAttribArray(offset + attributesOffset);
				kha_SystemImpl.gl.vertexAttribPointer(offset + attributesOffset,this.sizes[i],5126,false,this.myStride,this.offsets[i]);
				if(ext) {
					if(kha_SystemImpl.gl2) {
						kha_SystemImpl.gl.vertexAttribDivisor(offset + attributesOffset,this.instanceDataStepRate);
					} else {
						ext.vertexAttribDivisorANGLE(offset + attributesOffset,this.instanceDataStepRate);
					}
				}
				++attributesOffset;
			}
		}
		return attributesOffset;
	}
	,__class__: kha_graphics4_VertexBuffer
};
var kha_graphics4_VertexData = $hxClasses["kha.graphics4.VertexData"] = { __ename__ : true, __constructs__ : ["Float1","Float2","Float3","Float4","Float4x4"] };
kha_graphics4_VertexData.Float1 = ["Float1",0];
kha_graphics4_VertexData.Float1.toString = $estr;
kha_graphics4_VertexData.Float1.__enum__ = kha_graphics4_VertexData;
kha_graphics4_VertexData.Float2 = ["Float2",1];
kha_graphics4_VertexData.Float2.toString = $estr;
kha_graphics4_VertexData.Float2.__enum__ = kha_graphics4_VertexData;
kha_graphics4_VertexData.Float3 = ["Float3",2];
kha_graphics4_VertexData.Float3.toString = $estr;
kha_graphics4_VertexData.Float3.__enum__ = kha_graphics4_VertexData;
kha_graphics4_VertexData.Float4 = ["Float4",3];
kha_graphics4_VertexData.Float4.toString = $estr;
kha_graphics4_VertexData.Float4.__enum__ = kha_graphics4_VertexData;
kha_graphics4_VertexData.Float4x4 = ["Float4x4",4];
kha_graphics4_VertexData.Float4x4.toString = $estr;
kha_graphics4_VertexData.Float4x4.__enum__ = kha_graphics4_VertexData;
var kha_graphics4_VertexElement = function(name,data) {
	this.name = name;
	this.data = data;
};
$hxClasses["kha.graphics4.VertexElement"] = kha_graphics4_VertexElement;
kha_graphics4_VertexElement.__name__ = true;
kha_graphics4_VertexElement.prototype = {
	name: null
	,data: null
	,__class__: kha_graphics4_VertexElement
};
var kha_graphics4_VertexShader = function(sources,files) {
	this.sources = [];
	var _g = 0;
	while(_g < sources.length) {
		var source = sources[_g];
		++_g;
		this.sources.push(source.toString());
	}
	this.type = 35633;
	this.shader = null;
	this.files = files;
};
$hxClasses["kha.graphics4.VertexShader"] = kha_graphics4_VertexShader;
kha_graphics4_VertexShader.__name__ = true;
kha_graphics4_VertexShader.fromSource = function(source) {
	var shader = new kha_graphics4_VertexShader([],["runtime-string"]);
	shader.sources.push(source);
	return shader;
};
kha_graphics4_VertexShader.prototype = {
	sources: null
	,type: null
	,shader: null
	,files: null
	,'delete': function() {
		kha_SystemImpl.gl.deleteShader(this.shader);
		this.shader = null;
		this.sources = null;
	}
	,__class__: kha_graphics4_VertexShader
};
var kha_graphics4_VertexStructure = function() {
	this.elements = [];
	this.instanced = false;
};
$hxClasses["kha.graphics4.VertexStructure"] = kha_graphics4_VertexStructure;
kha_graphics4_VertexStructure.__name__ = true;
kha_graphics4_VertexStructure.prototype = {
	elements: null
	,instanced: null
	,add: function(name,data) {
		this.elements.push(new kha_graphics4_VertexElement(name,data));
	}
	,size: function() {
		return this.elements.length;
	}
	,byteSize: function() {
		var byteSize = 0;
		var _g1 = 0;
		var _g = this.elements.length;
		while(_g1 < _g) {
			var i = _g1++;
			byteSize += this.dataByteSize(this.elements[i].data);
		}
		return byteSize;
	}
	,dataByteSize: function(data) {
		switch(data[1]) {
		case 0:
			return 4;
		case 1:
			return 8;
		case 2:
			return 12;
		case 3:
			return 16;
		case 4:
			return 64;
		}
	}
	,get: function(index) {
		return this.elements[index];
	}
	,__class__: kha_graphics4_VertexStructure
};
var kha_input_Gamepad = $hx_exports["kha"]["input"]["Gamepad"] = function(index,id) {
	if(id == null) {
		id = "unknown";
	}
	if(index == null) {
		index = 0;
	}
	this.index = index;
	this.axisListeners = [];
	this.buttonListeners = [];
	kha_input_Gamepad.instances[index] = this;
};
$hxClasses["kha.input.Gamepad"] = kha_input_Gamepad;
kha_input_Gamepad.__name__ = true;
kha_input_Gamepad.get = function(index) {
	if(index == null) {
		index = 0;
	}
	if(index >= kha_input_Gamepad.instances.length) {
		return null;
	}
	return kha_input_Gamepad.instances[index];
};
kha_input_Gamepad.prototype = {
	index: null
	,notify: function(axisListener,buttonListener) {
		if(axisListener != null) {
			this.axisListeners.push(axisListener);
		}
		if(buttonListener != null) {
			this.buttonListeners.push(buttonListener);
		}
	}
	,remove: function(axisListener,buttonListener) {
		if(axisListener != null) {
			HxOverrides.remove(this.axisListeners,axisListener);
		}
		if(buttonListener != null) {
			HxOverrides.remove(this.buttonListeners,buttonListener);
		}
	}
	,axisListeners: null
	,buttonListeners: null
	,id: null
	,get_id: function() {
		return kha_SystemImpl.getGamepadId(this.index);
	}
	,sendAxisEvent: function(axis,value) {
		var _g = 0;
		var _g1 = this.axisListeners;
		while(_g < _g1.length) {
			var listener = _g1[_g];
			++_g;
			listener(axis,value);
		}
	}
	,sendButtonEvent: function(button,value) {
		var _g = 0;
		var _g1 = this.buttonListeners;
		while(_g < _g1.length) {
			var listener = _g1[_g];
			++_g;
			listener(button,value);
		}
	}
	,__class__: kha_input_Gamepad
};
var kha_network_Controller = function() {
	this.__id = kha_network_ControllerBuilder.nextId++;
	this._inputBuffer = new haxe_io_Bytes(new ArrayBuffer(1));
};
$hxClasses["kha.network.Controller"] = kha_network_Controller;
kha_network_Controller.__name__ = true;
kha_network_Controller.prototype = {
	__id: null
	,_inputBufferIndex: null
	,_inputBuffer: null
	,_id: function() {
		return this.__id;
	}
	,_receive: function(bytes) {
	}
	,__class__: kha_network_Controller
};
var kha_input_Keyboard = $hx_exports["kha"]["input"]["Keyboard"] = function() {
	kha_network_Controller.call(this);
	this.downListeners = [];
	this.upListeners = [];
	this.pressListeners = [];
	kha_input_Keyboard.instance = this;
};
$hxClasses["kha.input.Keyboard"] = kha_input_Keyboard;
kha_input_Keyboard.__name__ = true;
kha_input_Keyboard.get = function(num) {
	if(num == null) {
		num = 0;
	}
	return kha_SystemImpl.getKeyboard(num);
};
kha_input_Keyboard.__super__ = kha_network_Controller;
kha_input_Keyboard.prototype = $extend(kha_network_Controller.prototype,{
	notify: function(downListener,upListener,pressListener) {
		if(downListener != null) {
			this.downListeners.push(downListener);
		}
		if(upListener != null) {
			this.upListeners.push(upListener);
		}
		if(pressListener != null) {
			this.pressListeners.push(pressListener);
		}
	}
	,remove: function(downListener,upListener,pressListener) {
		if(downListener != null) {
			HxOverrides.remove(this.downListeners,downListener);
		}
		if(upListener != null) {
			HxOverrides.remove(this.upListeners,upListener);
		}
		if(pressListener != null) {
			HxOverrides.remove(this.pressListeners,pressListener);
		}
	}
	,show: function() {
	}
	,hide: function() {
	}
	,downListeners: null
	,upListeners: null
	,pressListeners: null
	,sendDownEvent: function(code) {
		if(kha_network_Session.the() != null) {
			var bytes = new haxe_io_Bytes(new ArrayBuffer(4));
			bytes.setInt32(0,0);
			kha_network_Session.the().sendControllerUpdate(this._id(),bytes);
		}
		var _g = 0;
		var _g1 = this.downListeners;
		while(_g < _g1.length) {
			var listener = _g1[_g];
			++_g;
			listener(code);
		}
	}
	,sendUpEvent: function(code) {
		if(kha_network_Session.the() != null) {
			var bytes = new haxe_io_Bytes(new ArrayBuffer(4));
			bytes.setInt32(0,1);
			kha_network_Session.the().sendControllerUpdate(this._id(),bytes);
		}
		var _g = 0;
		var _g1 = this.upListeners;
		while(_g < _g1.length) {
			var listener = _g1[_g];
			++_g;
			listener(code);
		}
	}
	,sendPressEvent: function($char) {
		if(kha_network_Session.the() != null) {
			var bytes = new haxe_io_Bytes(new ArrayBuffer(5));
			bytes.setInt32(0,2);
			var v = HxOverrides.cca($char,0);
			bytes.b[4] = v & 255;
			kha_network_Session.the().sendControllerUpdate(this._id(),bytes);
		}
		var _g = 0;
		var _g1 = this.pressListeners;
		while(_g < _g1.length) {
			var listener = _g1[_g];
			++_g;
			listener($char);
		}
	}
	,_receive: function(bytes) {
		var funcindex = bytes.getInt32(0);
		if(funcindex == 0) {
			var input0 = bytes.b[4];
			this.sendDownEvent(input0);
			return;
		}
		if(funcindex == 1) {
			var input01 = bytes.b[4];
			this.sendUpEvent(input01);
			return;
		}
		if(funcindex == 2) {
			var input02 = String.fromCharCode(bytes.b[4]);
			this.sendPressEvent(input02);
			return;
		}
	}
	,__class__: kha_input_Keyboard
});
var kha_input_Mouse = $hx_exports["kha"]["input"]["Mouse"] = function() {
	kha_network_Controller.call(this);
	kha_input_Mouse.instance = this;
};
$hxClasses["kha.input.Mouse"] = kha_input_Mouse;
kha_input_Mouse.__name__ = true;
kha_input_Mouse.get = function(num) {
	if(num == null) {
		num = 0;
	}
	return kha_SystemImpl.getMouse(num);
};
kha_input_Mouse.__super__ = kha_network_Controller;
kha_input_Mouse.prototype = $extend(kha_network_Controller.prototype,{
	notify: function(downListener,upListener,moveListener,wheelListener,leaveListener) {
		this.notifyWindowed(0,downListener,upListener,moveListener,wheelListener,leaveListener);
	}
	,remove: function(downListener,upListener,moveListener,wheelListener,leaveListener) {
		this.removeWindowed(0,downListener,upListener,moveListener,wheelListener,leaveListener);
	}
	,notifyWindowed: function(windowId,downListener,upListener,moveListener,wheelListener,leaveListener) {
		if(downListener != null) {
			if(this.windowDownListeners == null) {
				this.windowDownListeners = [];
			}
			while(this.windowDownListeners.length <= windowId) this.windowDownListeners.push([]);
			this.windowDownListeners[windowId].push(downListener);
		}
		if(upListener != null) {
			if(this.windowUpListeners == null) {
				this.windowUpListeners = [];
			}
			while(this.windowUpListeners.length <= windowId) this.windowUpListeners.push([]);
			this.windowUpListeners[windowId].push(upListener);
		}
		if(moveListener != null) {
			if(this.windowMoveListeners == null) {
				this.windowMoveListeners = [];
			}
			while(this.windowMoveListeners.length <= windowId) this.windowMoveListeners.push([]);
			this.windowMoveListeners[windowId].push(moveListener);
		}
		if(wheelListener != null) {
			if(this.windowWheelListeners == null) {
				this.windowWheelListeners = [];
			}
			while(this.windowWheelListeners.length <= windowId) this.windowWheelListeners.push([]);
			this.windowWheelListeners[windowId].push(wheelListener);
		}
		if(leaveListener != null) {
			if(this.windowLeaveListeners == null) {
				this.windowLeaveListeners = [];
			}
			while(this.windowLeaveListeners.length <= windowId) this.windowLeaveListeners.push([]);
			this.windowLeaveListeners[windowId].push(leaveListener);
		}
	}
	,removeWindowed: function(windowId,downListener,upListener,moveListener,wheelListener,leaveListener) {
		if(downListener != null) {
			if(this.windowDownListeners != null) {
				if(windowId < this.windowDownListeners.length) {
					HxOverrides.remove(this.windowDownListeners[windowId],downListener);
				} else {
					haxe_Log.trace("no downListeners for window \"" + windowId + "\" are registered",{ fileName : "Mouse.hx", lineNumber : 88, className : "kha.input.Mouse", methodName : "removeWindowed"});
				}
			} else {
				haxe_Log.trace("no downListeners were ever registered",{ fileName : "Mouse.hx", lineNumber : 91, className : "kha.input.Mouse", methodName : "removeWindowed"});
			}
		}
		if(upListener != null) {
			if(this.windowUpListeners != null) {
				if(windowId < this.windowUpListeners.length) {
					HxOverrides.remove(this.windowUpListeners[windowId],upListener);
				} else {
					haxe_Log.trace("no upListeners for window \"" + windowId + "\" are registered",{ fileName : "Mouse.hx", lineNumber : 100, className : "kha.input.Mouse", methodName : "removeWindowed"});
				}
			} else {
				haxe_Log.trace("no upListeners were ever registered",{ fileName : "Mouse.hx", lineNumber : 103, className : "kha.input.Mouse", methodName : "removeWindowed"});
			}
		}
		if(moveListener != null) {
			if(this.windowMoveListeners != null) {
				if(windowId < this.windowMoveListeners.length) {
					HxOverrides.remove(this.windowMoveListeners[windowId],moveListener);
				} else {
					haxe_Log.trace("no moveListeners for window \"" + windowId + "\" are registered",{ fileName : "Mouse.hx", lineNumber : 112, className : "kha.input.Mouse", methodName : "removeWindowed"});
				}
			} else {
				haxe_Log.trace("no moveListeners were ever registered",{ fileName : "Mouse.hx", lineNumber : 115, className : "kha.input.Mouse", methodName : "removeWindowed"});
			}
		}
		if(wheelListener != null) {
			if(this.windowWheelListeners != null) {
				if(windowId < this.windowWheelListeners.length) {
					HxOverrides.remove(this.windowWheelListeners[windowId],wheelListener);
				} else {
					haxe_Log.trace("no wheelListeners for window \"" + windowId + "\" are registered",{ fileName : "Mouse.hx", lineNumber : 124, className : "kha.input.Mouse", methodName : "removeWindowed"});
				}
			} else {
				haxe_Log.trace("no wheelListeners were ever registered",{ fileName : "Mouse.hx", lineNumber : 127, className : "kha.input.Mouse", methodName : "removeWindowed"});
			}
		}
		if(leaveListener != null) {
			if(this.windowLeaveListeners != null) {
				if(windowId < this.windowLeaveListeners.length) {
					HxOverrides.remove(this.windowLeaveListeners[windowId],leaveListener);
				} else {
					haxe_Log.trace("no leaveListeners for window \"" + windowId + "\" are registered",{ fileName : "Mouse.hx", lineNumber : 136, className : "kha.input.Mouse", methodName : "removeWindowed"});
				}
			} else {
				haxe_Log.trace("no leaveListeners were ever registered",{ fileName : "Mouse.hx", lineNumber : 139, className : "kha.input.Mouse", methodName : "removeWindowed"});
			}
		}
	}
	,lock: function() {
	}
	,unlock: function() {
	}
	,canLock: function() {
		return false;
	}
	,isLocked: function() {
		return false;
	}
	,notifyOnLockChange: function(func,error) {
	}
	,removeFromLockChange: function(func,error) {
	}
	,hideSystemCursor: function() {
	}
	,showSystemCursor: function() {
	}
	,windowDownListeners: null
	,windowUpListeners: null
	,windowMoveListeners: null
	,windowWheelListeners: null
	,windowLeaveListeners: null
	,sendLeaveEvent: function(windowId) {
		if(kha_network_Session.the() != null) {
			var bytes = new haxe_io_Bytes(new ArrayBuffer(8));
			bytes.setInt32(0,0);
			bytes.setInt32(4,windowId);
			kha_network_Session.the().sendControllerUpdate(this._id(),bytes);
		}
		if(this.windowLeaveListeners != null) {
			var _g = 0;
			var _g1 = this.windowLeaveListeners[windowId];
			while(_g < _g1.length) {
				var listener = _g1[_g];
				++_g;
				listener();
			}
		}
	}
	,sendDownEvent: function(windowId,button,x,y) {
		if(kha_network_Session.the() != null) {
			var bytes = new haxe_io_Bytes(new ArrayBuffer(20));
			bytes.setInt32(0,1);
			bytes.setInt32(4,windowId);
			bytes.setInt32(8,button);
			bytes.setInt32(12,x);
			bytes.setInt32(16,y);
			kha_network_Session.the().sendControllerUpdate(this._id(),bytes);
		}
		if(this.windowDownListeners != null) {
			var _g = 0;
			var _g1 = this.windowDownListeners[windowId];
			while(_g < _g1.length) {
				var listener = _g1[_g];
				++_g;
				listener(button,x,y);
			}
		}
	}
	,sendUpEvent: function(windowId,button,x,y) {
		if(kha_network_Session.the() != null) {
			var bytes = new haxe_io_Bytes(new ArrayBuffer(20));
			bytes.setInt32(0,2);
			bytes.setInt32(4,windowId);
			bytes.setInt32(8,button);
			bytes.setInt32(12,x);
			bytes.setInt32(16,y);
			kha_network_Session.the().sendControllerUpdate(this._id(),bytes);
		}
		if(this.windowUpListeners != null) {
			var _g = 0;
			var _g1 = this.windowUpListeners[windowId];
			while(_g < _g1.length) {
				var listener = _g1[_g];
				++_g;
				listener(button,x,y);
			}
		}
	}
	,sendMoveEvent: function(windowId,x,y,movementX,movementY) {
		if(kha_network_Session.the() != null) {
			var bytes = new haxe_io_Bytes(new ArrayBuffer(24));
			bytes.setInt32(0,3);
			bytes.setInt32(4,windowId);
			bytes.setInt32(8,x);
			bytes.setInt32(12,y);
			bytes.setInt32(16,movementX);
			bytes.setInt32(20,movementY);
			kha_network_Session.the().sendControllerUpdate(this._id(),bytes);
		}
		if(this.windowMoveListeners != null) {
			var _g = 0;
			var _g1 = this.windowMoveListeners[windowId];
			while(_g < _g1.length) {
				var listener = _g1[_g];
				++_g;
				listener(x,y,movementX,movementY);
			}
		}
	}
	,sendWheelEvent: function(windowId,delta) {
		if(kha_network_Session.the() != null) {
			var bytes = new haxe_io_Bytes(new ArrayBuffer(12));
			bytes.setInt32(0,4);
			bytes.setInt32(4,windowId);
			bytes.setInt32(8,delta);
			kha_network_Session.the().sendControllerUpdate(this._id(),bytes);
		}
		if(this.windowWheelListeners != null) {
			var _g = 0;
			var _g1 = this.windowWheelListeners[windowId];
			while(_g < _g1.length) {
				var listener = _g1[_g];
				++_g;
				listener(delta);
			}
		}
	}
	,_receive: function(bytes) {
		var funcindex = bytes.getInt32(0);
		if(funcindex == 0) {
			var input0 = bytes.getInt32(4);
			this.sendLeaveEvent(input0);
			return;
		}
		if(funcindex == 1) {
			var input01 = bytes.getInt32(4);
			var input1 = bytes.getInt32(8);
			var input2 = bytes.getInt32(12);
			var input3 = bytes.getInt32(16);
			this.sendDownEvent(input01,input1,input2,input3);
			return;
		}
		if(funcindex == 2) {
			var input02 = bytes.getInt32(4);
			var input11 = bytes.getInt32(8);
			var input21 = bytes.getInt32(12);
			var input31 = bytes.getInt32(16);
			this.sendUpEvent(input02,input11,input21,input31);
			return;
		}
		if(funcindex == 3) {
			var input03 = bytes.getInt32(4);
			var input12 = bytes.getInt32(8);
			var input22 = bytes.getInt32(12);
			var input32 = bytes.getInt32(16);
			var input4 = bytes.getInt32(20);
			this.sendMoveEvent(input03,input12,input22,input32,input4);
			return;
		}
		if(funcindex == 4) {
			var input04 = bytes.getInt32(4);
			var input13 = bytes.getInt32(8);
			this.sendWheelEvent(input04,input13);
			return;
		}
	}
	,__class__: kha_input_Mouse
});
var kha_input_MouseImpl = function() {
	kha_input_Mouse.call(this);
};
$hxClasses["kha.input.MouseImpl"] = kha_input_MouseImpl;
kha_input_MouseImpl.__name__ = true;
kha_input_MouseImpl.__super__ = kha_input_Mouse;
kha_input_MouseImpl.prototype = $extend(kha_input_Mouse.prototype,{
	hideSystemCursor: function() {
		kha_SystemImpl.khanvas.style.cursor = "none";
	}
	,showSystemCursor: function() {
		kha_SystemImpl.khanvas.style.cursor = "default";
	}
	,_receive: function(bytes) {
		var funcindex = bytes.getInt32(0);
	}
	,__class__: kha_input_MouseImpl
});
var kha_input_Surface = $hx_exports["kha"]["input"]["Surface"] = function() {
	this.touchStartListeners = [];
	this.touchEndListeners = [];
	this.moveListeners = [];
	kha_input_Surface.instance = this;
};
$hxClasses["kha.input.Surface"] = kha_input_Surface;
kha_input_Surface.__name__ = true;
kha_input_Surface.get = function(num) {
	if(num == null) {
		num = 0;
	}
	if(num != 0) {
		return null;
	}
	return kha_input_Surface.instance;
};
kha_input_Surface.prototype = {
	notify: function(touchStartListener,touchEndListener,moveListener) {
		if(touchStartListener != null) {
			this.touchStartListeners.push(touchStartListener);
		}
		if(touchEndListener != null) {
			this.touchEndListeners.push(touchEndListener);
		}
		if(moveListener != null) {
			this.moveListeners.push(moveListener);
		}
	}
	,remove: function(touchStartListener,touchEndListener,moveListener) {
		if(touchStartListener != null) {
			HxOverrides.remove(this.touchStartListeners,touchStartListener);
		}
		if(touchEndListener != null) {
			HxOverrides.remove(this.touchEndListeners,touchEndListener);
		}
		if(moveListener != null) {
			this.moveListeners.push(moveListener);
		}
	}
	,touchStartListeners: null
	,touchEndListeners: null
	,moveListeners: null
	,sendTouchStartEvent: function(index,x,y) {
		var _g = 0;
		var _g1 = this.touchStartListeners;
		while(_g < _g1.length) {
			var listener = _g1[_g];
			++_g;
			listener(index,x,y);
		}
	}
	,sendTouchEndEvent: function(index,x,y) {
		var _g = 0;
		var _g1 = this.touchEndListeners;
		while(_g < _g1.length) {
			var listener = _g1[_g];
			++_g;
			listener(index,x,y);
		}
	}
	,sendMoveEvent: function(index,x,y) {
		var _g = 0;
		var _g1 = this.moveListeners;
		while(_g < _g1.length) {
			var listener = _g1[_g];
			++_g;
			listener(index,x,y);
		}
	}
	,__class__: kha_input_Surface
};
var kha_internal_BytesBlob = function(bytes) {
	this.myFirstLine = true;
	this.bytes = bytes;
	this.buffer = [];
};
$hxClasses["kha.internal.BytesBlob"] = kha_internal_BytesBlob;
kha_internal_BytesBlob.__name__ = true;
kha_internal_BytesBlob.__interfaces__ = [kha_Resource];
kha_internal_BytesBlob.fromBytes = function(bytes) {
	return new kha_internal_BytesBlob(bytes);
};
kha_internal_BytesBlob.alloc = function(size) {
	return new kha_internal_BytesBlob(new haxe_io_Bytes(new ArrayBuffer(size)));
};
kha_internal_BytesBlob.readF32 = function(i) {
	var sign = (i & -2147483648) == 0 ? 1 : -1;
	var exp = i >> 23 & 255;
	var man = i & 8388607;
	switch(exp) {
	case 0:
		return 0.0;
	case 255:
		if(man != 0) {
			return NaN;
		} else if(sign > 0) {
			return Infinity;
		} else {
			return -Infinity;
		}
		break;
	default:
		return sign * ((man + 8388608) / 8388608.0) * Math.pow(2,exp - 127);
	}
};
kha_internal_BytesBlob.bit = function(value,position) {
	var b = (value >>> position & 1) == 1;
	if(b) {
		var a = 3;
		++a;
		return true;
	} else {
		var c = 4;
		--c;
		return false;
	}
};
kha_internal_BytesBlob.prototype = {
	bytes: null
	,buffer: null
	,myFirstLine: null
	,sub: function(start,length) {
		return new kha_internal_BytesBlob(this.bytes.sub(start,length));
	}
	,length: null
	,get_length: function() {
		return this.bytes.length;
	}
	,writeU8: function(position,value) {
		this.bytes.b[position] = value & 255;
	}
	,readU8: function(position) {
		var $byte = this.bytes.b[position];
		++position;
		return $byte;
	}
	,readS8: function(position) {
		var $byte = this.bytes.b[position];
		++position;
		var sign = ($byte & 128) == 0 ? 1 : -1;
		$byte &= 127;
		return sign * $byte;
	}
	,readU16BE: function(position) {
		var first = this.bytes.b[position];
		var second = this.bytes.b[position + 1];
		position += 2;
		return first * 256 + second;
	}
	,readU16LE: function(position) {
		var first = this.bytes.b[position];
		var second = this.bytes.b[position + 1];
		position += 2;
		return second * 256 + first;
	}
	,readU32LE: function(position) {
		var fourth = this.bytes.b[position];
		var third = this.bytes.b[position + 1];
		var second = this.bytes.b[position + 2];
		var first = this.bytes.b[position + 3];
		position += 4;
		return fourth + third * 256 + second * 256 * 256 + first * 256 * 256 * 256;
	}
	,readU32BE: function(position) {
		var fourth = this.bytes.b[position];
		var third = this.bytes.b[position + 1];
		var second = this.bytes.b[position + 2];
		var first = this.bytes.b[position + 3];
		position += 4;
		return first + second * 256 + third * 256 * 256 + fourth * 256 * 256 * 256;
	}
	,readS16BE: function(position) {
		var first = this.bytes.b[position];
		var second = this.bytes.b[position + 1];
		position += 2;
		var sign = (first & 128) == 0 ? 1 : -1;
		first &= 127;
		if(sign == -1) {
			return -32767 + first * 256 + second;
		} else {
			return first * 256 + second;
		}
	}
	,readS16LE: function(position) {
		var first = this.bytes.b[position];
		var second = this.bytes.b[position + 1];
		var sign = (second & 128) == 0 ? 1 : -1;
		second &= 127;
		position += 2;
		if(sign == -1) {
			return -32767 + second * 256 + first;
		} else {
			return second * 256 + first;
		}
	}
	,readS32LE: function(position) {
		var fourth = this.bytes.b[position];
		var third = this.bytes.b[position + 1];
		var second = this.bytes.b[position + 2];
		var first = this.bytes.b[position + 3];
		var sign = (first & 128) == 0 ? 1 : -1;
		first &= 127;
		position += 4;
		if(sign == -1) {
			return -2147483647 + fourth + third * 256 + second * 256 * 256 + first * 256 * 256 * 256;
		} else {
			return fourth + third * 256 + second * 256 * 256 + first * 256 * 256 * 256;
		}
	}
	,readS32BE: function(position) {
		var fourth = this.bytes.b[position];
		var third = this.bytes.b[position + 1];
		var second = this.bytes.b[position + 2];
		var first = this.bytes.b[position + 3];
		var sign = (fourth & 128) == 0 ? 1 : -1;
		fourth &= 127;
		position += 4;
		if(sign == -1) {
			return -2147483647 + first + second * 256 + third * 256 * 256 + fourth * 256 * 256 * 256;
		}
		return first + second * 256 + third * 256 * 256 + fourth * 256 * 256 * 256;
	}
	,readF32LE: function(position) {
		return kha_internal_BytesBlob.readF32(this.readS32LE(position));
	}
	,readF32BE: function(position) {
		return kha_internal_BytesBlob.readF32(this.readS32BE(position));
	}
	,toString: function() {
		return this.bytes.toString();
	}
	,readUtf8Char: function(position) {
		if(position.value >= this.get_length()) {
			return -1;
		}
		var c = this.readU8(position.value);
		++position.value;
		var value = 0;
		if(!kha_internal_BytesBlob.bit(c,7)) {
			value = c;
		} else if(kha_internal_BytesBlob.bit(c,7) && kha_internal_BytesBlob.bit(c,6) && !kha_internal_BytesBlob.bit(c,5)) {
			var a = c & 31;
			var c2 = this.readU8(position.value);
			++position.value;
			var b = c2 & 63;
			value = a << 6 | b;
		} else if(kha_internal_BytesBlob.bit(c,7) && kha_internal_BytesBlob.bit(c,6) && kha_internal_BytesBlob.bit(c,5) && !kha_internal_BytesBlob.bit(c,4)) {
			position.value += 2;
		} else if(kha_internal_BytesBlob.bit(c,7) && kha_internal_BytesBlob.bit(c,6) && kha_internal_BytesBlob.bit(c,5) && kha_internal_BytesBlob.bit(c,4) && !kha_internal_BytesBlob.bit(c,3)) {
			position.value += 3;
		}
		return value;
	}
	,readUtf8Block: function(position) {
		var bufferindex = 0;
		if(position.value >= this.get_length()) {
			return "";
		}
		while(bufferindex < 2000) {
			var c = this.readUtf8Char(position);
			if(c < 0) {
				break;
			}
			this.buffer[bufferindex] = c;
			++bufferindex;
		}
		if(this.myFirstLine) {
			this.myFirstLine = false;
			if(bufferindex > 2 && this.buffer[0] == 239 && this.buffer[1] == 187 && this.buffer[2] == 191) {
				var chars = [];
				var _g1 = 3;
				var _g = bufferindex - 3;
				while(_g1 < _g) {
					var i = _g1++;
					chars[i - 3] = this.buffer[i];
				}
				return this.toText(chars,bufferindex - 3);
			}
		}
		var chars1 = [];
		var _g11 = 0;
		var _g2 = bufferindex;
		while(_g11 < _g2) {
			var i1 = _g11++;
			chars1[i1] = this.buffer[i1];
		}
		return this.toText(chars1,bufferindex);
	}
	,toText: function(chars,length) {
		var value = "";
		var _g1 = 0;
		var _g = length;
		while(_g1 < _g) {
			var i = _g1++;
			value += String.fromCharCode(chars[i]);
		}
		return value;
	}
	,readUtf8String: function() {
		var text = "";
		var position = { value : 0};
		while(position.value < this.get_length()) text += this.readUtf8Block(position);
		return text;
	}
	,toBytes: function() {
		return this.bytes;
	}
	,unload: function() {
		this.bytes = null;
	}
	,__class__: kha_internal_BytesBlob
};
var kha_internal_HdrFormat = function() {
};
$hxClasses["kha.internal.HdrFormat"] = kha_internal_HdrFormat;
kha_internal_HdrFormat.__name__ = true;
kha_internal_HdrFormat.readBuf = function(buf) {
	var bytesRead = 0;
	while(true) {
		buf[bytesRead++] = kha_internal_HdrFormat.buffer[kha_internal_HdrFormat.fileOffset] & 255;
		if(!(++kha_internal_HdrFormat.fileOffset < kha_internal_HdrFormat.bufferLength && bytesRead < buf.length)) {
			break;
		}
	}
	return bytesRead;
};
kha_internal_HdrFormat.readBufOffset = function(buf,offset,length) {
	var bytesRead = 0;
	while(true) {
		buf[offset + bytesRead++] = kha_internal_HdrFormat.buffer[kha_internal_HdrFormat.fileOffset] & 255;
		if(!(++kha_internal_HdrFormat.fileOffset < kha_internal_HdrFormat.bufferLength && bytesRead < length)) {
			break;
		}
	}
	return bytesRead;
};
kha_internal_HdrFormat.readPixelsRaw = function(buffer,data,offset,numpixels) {
	var numExpected = 4 * numpixels;
	var numRead = kha_internal_HdrFormat.readBufOffset(data,offset,numExpected);
	if(numRead < numExpected) {
		haxe_Log.trace("Error reading raw pixels: got " + numRead + " bytes, expected " + numExpected,{ fileName : "HdrFormat.hx", lineNumber : 43, className : "kha.internal.HdrFormat", methodName : "readPixelsRaw"});
		return;
	}
};
kha_internal_HdrFormat.readPixelsRawRLE = function(buffer,data,offset,scanline_width,num_scanlines) {
	var this1 = new Uint8Array(4);
	var rgbe = this1;
	var scanline_buffer = null;
	var ptr;
	var ptr_end;
	var count;
	var this2 = new Uint8Array(2);
	var buf = this2;
	var bufferLength = buffer.length;
	while(num_scanlines > 0) {
		if(kha_internal_HdrFormat.readBuf(rgbe) < rgbe.length) {
			haxe_Log.trace("Error reading bytes: expected " + rgbe.length,{ fileName : "HdrFormat.hx", lineNumber : 59, className : "kha.internal.HdrFormat", methodName : "readPixelsRawRLE"});
			return;
		}
		if(rgbe[0] != 2 || rgbe[1] != 2 || (rgbe[2] & 128) != 0) {
			data[offset++] = rgbe[0] & 255;
			data[offset++] = rgbe[1] & 255;
			data[offset++] = rgbe[2] & 255;
			data[offset++] = rgbe[3] & 255;
			kha_internal_HdrFormat.readPixelsRaw(buffer,data,offset,scanline_width * num_scanlines - 1);
			return;
		}
		if(((rgbe[2] & 255) << 8 | rgbe[3] & 255) != scanline_width) {
			haxe_Log.trace("Wrong scanline width " + ((rgbe[2] & 255) << 8 | rgbe[3] & 255) + ", expected " + scanline_width,{ fileName : "HdrFormat.hx", lineNumber : 74, className : "kha.internal.HdrFormat", methodName : "readPixelsRawRLE"});
			return;
		}
		if(scanline_buffer == null) {
			var this3 = new Uint8Array(4 * scanline_width);
			scanline_buffer = this3;
		}
		ptr = 0;
		var _g = 0;
		while(_g < 4) {
			var i = _g++;
			ptr_end = (i + 1) * scanline_width;
			while(ptr < ptr_end) {
				if(kha_internal_HdrFormat.readBuf(buf) < buf.length) {
					haxe_Log.trace("Error reading 2-byte buffer",{ fileName : "HdrFormat.hx", lineNumber : 88, className : "kha.internal.HdrFormat", methodName : "readPixelsRawRLE"});
					return;
				}
				if((buf[0] & 255) > 128) {
					count = (buf[0] & 255) - 128;
					if(count == 0 || count > ptr_end - ptr) {
						haxe_Log.trace("Bad scanline data",{ fileName : "HdrFormat.hx", lineNumber : 95, className : "kha.internal.HdrFormat", methodName : "readPixelsRawRLE"});
						return;
					}
					while(count-- > 0) scanline_buffer[ptr++] = buf[1] & 255;
				} else {
					count = buf[0] & 255;
					if(count == 0 || count > ptr_end - ptr) {
						haxe_Log.trace("Bad scanline data",{ fileName : "HdrFormat.hx", lineNumber : 106, className : "kha.internal.HdrFormat", methodName : "readPixelsRawRLE"});
						return;
					}
					scanline_buffer[ptr++] = buf[1] & 255;
					if(--count > 0) {
						if(kha_internal_HdrFormat.readBufOffset(scanline_buffer,ptr,count) < count) {
							haxe_Log.trace("Error reading non-run data",{ fileName : "HdrFormat.hx", lineNumber : 112, className : "kha.internal.HdrFormat", methodName : "readPixelsRawRLE"});
							return;
						}
						ptr += count;
					}
				}
			}
		}
		var _g1 = 0;
		var _g2 = scanline_width;
		while(_g1 < _g2) {
			var i1 = _g1++;
			data[offset] = scanline_buffer[i1] & 255;
			data[offset + 1] = scanline_buffer[i1 + scanline_width] & 255;
			data[offset + 2] = scanline_buffer[i1 + 2 * scanline_width] & 255;
			data[offset + 3] = scanline_buffer[i1 + 3 * scanline_width] & 255;
			offset += 4;
		}
		--num_scanlines;
	}
};
kha_internal_HdrFormat.readLine = function() {
	var buf = "";
	while(true) {
		var b = kha_internal_HdrFormat.buffer[kha_internal_HdrFormat.fileOffset];
		if(b == 10) {
			++kha_internal_HdrFormat.fileOffset;
			break;
		}
		buf += String.fromCharCode(b);
		if(!(++kha_internal_HdrFormat.fileOffset < kha_internal_HdrFormat.bufferLength)) {
			break;
		}
	}
	return buf;
};
kha_internal_HdrFormat.parse = function(bytes) {
	kha_internal_HdrFormat.buffer = haxe_io__$UInt8Array_UInt8Array_$Impl_$.fromBytes(bytes);
	kha_internal_HdrFormat.bufferLength = kha_internal_HdrFormat.buffer.length;
	kha_internal_HdrFormat.fileOffset = 0;
	var width = 0;
	var height = 0;
	var exposure = 1.0;
	var gamma = 1.0;
	var rle = false;
	var _g = 0;
	while(_g < 20) {
		var i = _g++;
		var line = kha_internal_HdrFormat.readLine();
		if(kha_internal_HdrFormat.formatPattern.match(line)) {
			rle = true;
		} else if(kha_internal_HdrFormat.exposurePattern.match(line)) {
			exposure = parseFloat(kha_internal_HdrFormat.exposurePattern.matched(1));
		} else if(kha_internal_HdrFormat.widthHeightPattern.match(line)) {
			height = Std.parseInt(kha_internal_HdrFormat.widthHeightPattern.matched(1));
			width = Std.parseInt(kha_internal_HdrFormat.widthHeightPattern.matched(2));
			break;
		}
	}
	if(!rle) {
		haxe_Log.trace("File is not run length encoded!",{ fileName : "HdrFormat.hx", lineNumber : 175, className : "kha.internal.HdrFormat", methodName : "parse"});
		return null;
	}
	var this1 = new Uint8Array(width * height * 4);
	var data = this1;
	var scanline_width = width;
	var num_scanlines = height;
	kha_internal_HdrFormat.readPixelsRawRLE(kha_internal_HdrFormat.buffer,data,0,scanline_width,num_scanlines);
	var this2 = new Float32Array(width * height * 4);
	var floatData = this2;
	var offset = 0;
	while(offset < data.length) {
		var r = data[offset] / 255;
		var g = data[offset + 1] / 255;
		var b = data[offset + 2] / 255;
		var e = data[offset + 3];
		var f = Math.pow(2.0,e - 128.0);
		r *= f;
		g *= f;
		b *= f;
		floatData[offset] = r;
		floatData[offset + 1] = g;
		floatData[offset + 2] = b;
		floatData[offset + 3] = 1.0;
		offset += 4;
	}
	return { width : width, height : height, data : floatData};
};
kha_internal_HdrFormat.prototype = {
	__class__: kha_internal_HdrFormat
};
var kha_js_AEAudioChannel = function(element) {
	this.stopped = false;
	this.element = element;
};
$hxClasses["kha.js.AEAudioChannel"] = kha_js_AEAudioChannel;
kha_js_AEAudioChannel.__name__ = true;
kha_js_AEAudioChannel.__interfaces__ = [kha_audio1_AudioChannel];
kha_js_AEAudioChannel.prototype = {
	element: null
	,stopped: null
	,play: function() {
		this.stopped = false;
		if(kha_SystemImpl.mobile) {
			if(kha_SystemImpl.insideInputEvent) {
				this.element.play();
				kha_SystemImpl.mobileAudioPlaying = true;
			} else if(kha_SystemImpl.mobileAudioPlaying) {
				this.element.play();
			} else {
				kha_js_AEAudioChannel.todo.push(this);
			}
		} else {
			this.element.play();
		}
	}
	,pause: function() {
		try {
			this.element.pause();
		} catch( e ) {
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			haxe_Log.trace(e,{ fileName : "AEAudioChannel.hx", lineNumber : 39, className : "kha.js.AEAudioChannel", methodName : "pause"});
		}
	}
	,stop: function() {
		try {
			this.element.pause();
			this.element.currentTime = 0;
			this.stopped = true;
		} catch( e ) {
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			haxe_Log.trace(e,{ fileName : "AEAudioChannel.hx", lineNumber : 50, className : "kha.js.AEAudioChannel", methodName : "stop"});
		}
	}
	,length: null
	,get_length: function() {
		if(isFinite(this.element.duration)) {
			return this.element.duration;
		} else {
			return Infinity;
		}
	}
	,position: null
	,get_position: function() {
		return this.element.currentTime;
	}
	,get_volume: function() {
		return this.element.volume;
	}
	,set_volume: function(value) {
		return this.element.volume = value;
	}
	,finished: null
	,get_finished: function() {
		if(!this.stopped) {
			return this.get_position() >= this.get_length();
		} else {
			return true;
		}
	}
	,__class__: kha_js_AEAudioChannel
};
var kha_js_AudioElementAudio = function() { };
$hxClasses["kha.js.AudioElementAudio"] = kha_js_AudioElementAudio;
kha_js_AudioElementAudio.__name__ = true;
kha_js_AudioElementAudio._compile = function() {
};
kha_js_AudioElementAudio.play = function(sound,loop) {
	if(loop == null) {
		loop = false;
	}
	return kha_js_AudioElementAudio.stream(sound,loop);
};
kha_js_AudioElementAudio.stream = function(sound,loop) {
	if(loop == null) {
		loop = false;
	}
	sound.element.loop = loop;
	var channel = new kha_js_AEAudioChannel(sound.element);
	channel.play();
	return channel;
};
var kha_js_CanvasGraphics = function(canvas) {
	kha_graphics2_Graphics.call(this);
	this.canvas = canvas;
	kha_js_CanvasGraphics.instance = this;
	this.myColor = kha__$Color_Color_$Impl_$.fromBytes(0,0,0);
	canvas.save();
};
$hxClasses["kha.js.CanvasGraphics"] = kha_js_CanvasGraphics;
kha_js_CanvasGraphics.__name__ = true;
kha_js_CanvasGraphics.stringWidth = function(font,text) {
	if(kha_js_CanvasGraphics.instance == null) {
		return 5 * text.length;
	} else {
		kha_js_CanvasGraphics.instance.set_font(font);
		return kha_js_CanvasGraphics.instance.canvas.measureText(text).width;
	}
};
kha_js_CanvasGraphics.__super__ = kha_graphics2_Graphics;
kha_js_CanvasGraphics.prototype = $extend(kha_graphics2_Graphics.prototype,{
	canvas: null
	,webfont: null
	,myColor: null
	,scaleQuality: null
	,begin: function(clear,clearColor) {
		if(clear == null) {
			clear = true;
		}
		if(clear) {
			this.clear(clearColor);
		}
	}
	,clear: function(color) {
		if(color == null) {
			color = 0;
		}
		this.canvas.strokeStyle = "rgba(" + ((color & 16711680) >>> 16) + "," + ((color & 65280) >>> 8) + "," + (color & 255) + "," + (color >>> 24) * 0.00392156862745098 + ")";
		this.canvas.fillStyle = "rgba(" + ((color & 16711680) >>> 16) + "," + ((color & 65280) >>> 8) + "," + (color & 255) + "," + (color >>> 24) * 0.00392156862745098 + ")";
		if((color >>> 24) * 0.00392156862745098 == 0) {
			this.canvas.clearRect(0,0,this.canvas.canvas.width,this.canvas.canvas.height);
		} else {
			this.canvas.fillRect(0,0,this.canvas.canvas.width,this.canvas.canvas.height);
		}
		this.set_color(this.myColor);
	}
	,end: function() {
	}
	,drawImage: function(img,x,y) {
		this.canvas.globalAlpha = this.get_opacity();
		this.canvas.drawImage((js_Boot.__cast(img , kha_CanvasImage)).image,x,y);
		this.canvas.globalAlpha = 1;
	}
	,drawScaledSubImage: function(image,sx,sy,sw,sh,dx,dy,dw,dh) {
		this.canvas.globalAlpha = this.get_opacity();
		try {
			if(dw < 0 || dh < 0) {
				this.canvas.save();
				this.canvas.translate(dx,dy);
				var x = 0.0;
				var y = 0.0;
				if(dw < 0) {
					this.canvas.scale(-1,1);
					x = -dw;
				}
				if(dh < 0) {
					this.canvas.scale(1,-1);
					y = -dh;
				}
				this.canvas.drawImage((js_Boot.__cast(image , kha_CanvasImage)).image,sx,sy,sw,sh,x,y,dw,dh);
				this.canvas.restore();
			} else {
				this.canvas.drawImage((js_Boot.__cast(image , kha_CanvasImage)).image,sx,sy,sw,sh,dx,dy,dw,dh);
			}
		} catch( ex ) {
		}
		this.canvas.globalAlpha = 1;
	}
	,set_color: function(color) {
		this.myColor = color;
		this.canvas.strokeStyle = "rgba(" + ((color & 16711680) >>> 16) + "," + ((color & 65280) >>> 8) + "," + (color & 255) + "," + (color >>> 24) * 0.00392156862745098 + ")";
		this.canvas.fillStyle = "rgba(" + ((color & 16711680) >>> 16) + "," + ((color & 65280) >>> 8) + "," + (color & 255) + "," + (color >>> 24) * 0.00392156862745098 + ")";
		return color;
	}
	,get_color: function() {
		return this.myColor;
	}
	,get_imageScaleQuality: function() {
		return this.scaleQuality;
	}
	,set_imageScaleQuality: function(value) {
		if(value == kha_graphics2_ImageScaleQuality.Low) {
			this.canvas.mozImageSmoothingEnabled = false;
			this.canvas.webkitImageSmoothingEnabled = false;
			this.canvas.msImageSmoothingEnabled = false;
			this.canvas.imageSmoothingEnabled = false;
		} else {
			this.canvas.mozImageSmoothingEnabled = true;
			this.canvas.webkitImageSmoothingEnabled = true;
			this.canvas.msImageSmoothingEnabled = true;
			this.canvas.imageSmoothingEnabled = true;
		}
		return this.scaleQuality = value;
	}
	,drawRect: function(x,y,width,height,strength) {
		if(strength == null) {
			strength = 1.0;
		}
		this.canvas.beginPath();
		var oldStrength = this.canvas.lineWidth;
		this.canvas.lineWidth = Math.round(strength);
		this.canvas.rect(x,y,width,height);
		this.canvas.stroke();
		this.canvas.lineWidth = oldStrength;
	}
	,fillRect: function(x,y,width,height) {
		var tmp = this.get_opacity();
		this.canvas.globalAlpha = tmp * ((this.myColor >>> 24) * 0.00392156862745098);
		this.canvas.fillRect(x,y,width,height);
		this.canvas.globalAlpha = this.get_opacity();
	}
	,drawCircle: function(cx,cy,radius,strength) {
		if(strength == null) {
			strength = 1.0;
		}
		this.canvas.beginPath();
		var oldStrength = this.canvas.lineWidth;
		this.canvas.lineWidth = Math.round(strength);
		this.canvas.arc(cx,cy,radius,0,2 * Math.PI,false);
		this.canvas.stroke();
		this.canvas.lineWidth = oldStrength;
	}
	,fillCircle: function(cx,cy,radius) {
		this.canvas.beginPath();
		this.canvas.arc(cx,cy,radius,0,2 * Math.PI,false);
		this.canvas.fill();
	}
	,drawString: function(text,x,y) {
		var image = this.webfont.getImage(this.get_fontSize(),this.myColor);
		if(image.width > 0) {
			var xpos = x;
			var ypos = y;
			var _g1 = 0;
			var _g = text.length;
			while(_g1 < _g) {
				var i = _g1++;
				var q = this.webfont.kravur._get(this.get_fontSize()).getBakedQuad(HxOverrides.cca(text,i) - 32,xpos,ypos);
				if(q != null) {
					if(q.s1 - q.s0 > 0 && q.t1 - q.t0 > 0 && q.x1 - q.x0 > 0 && q.y1 - q.y0 > 0) {
						this.canvas.drawImage(image,q.s0 * image.width,q.t0 * image.height,(q.s1 - q.s0) * image.width,(q.t1 - q.t0) * image.height,q.x0,q.y0,q.x1 - q.x0,q.y1 - q.y0);
					}
					xpos += q.xadvance;
				}
			}
		}
	}
	,set_font: function(font) {
		this.webfont = js_Boot.__cast(font , kha_js_Font);
		return this.webfont;
	}
	,get_font: function() {
		return this.webfont;
	}
	,drawLine: function(x1,y1,x2,y2,strength) {
		if(strength == null) {
			strength = 1.0;
		}
		this.canvas.beginPath();
		var oldWith = this.canvas.lineWidth;
		this.canvas.lineWidth = Math.round(strength);
		this.canvas.moveTo(x1,y1);
		this.canvas.lineTo(x2,y2);
		this.canvas.moveTo(0,0);
		this.canvas.stroke();
		this.canvas.lineWidth = oldWith;
	}
	,fillTriangle: function(x1,y1,x2,y2,x3,y3) {
		this.canvas.beginPath();
		this.canvas.closePath();
		this.canvas.fill();
	}
	,scissor: function(x,y,width,height) {
		this.canvas.beginPath();
		this.canvas.rect(x,y,width,height);
		this.canvas.clip();
	}
	,disableScissor: function() {
		this.canvas.restore();
	}
	,drawVideo: function(video,x,y,width,height) {
		this.canvas.drawImage((js_Boot.__cast(video , kha_js_Video)).element,x,y,width,height);
	}
	,setTransformation: function(transformation) {
		this.canvas.setTransform(transformation._00,transformation._01,transformation._10,transformation._11,transformation._20,transformation._21);
	}
	,__class__: kha_js_CanvasGraphics
});
var kha_js_URLParser = function(url) {
	this._parts = null;
	this._parts = ["source","protocol","authority","userInfo","user","password","host","port","relative","path","directory","file","query","anchor"];
	this.url = url;
	var r = new EReg("^(?:(?![^:@]+:[^:@/]*@)([^:/?#.]+):)?(?://)?((?:(([^:@]*)(?::([^:@]*))?)?@)?([^:/?#]*)(?::(\\d*))?)(((/(?:[^?#](?![^?#/]*\\.[^?#/.]+(?:[?#]|$)))*/?)?([^?#/]*))(?:\\?([^#]*))?(?:#(.*))?)","");
	r.match(url);
	var _g1 = 0;
	var _g = this._parts.length;
	while(_g1 < _g) {
		var i = _g1++;
		this[this._parts[i]] = r.matched(i);
	}
};
$hxClasses["kha.js.URLParser"] = kha_js_URLParser;
kha_js_URLParser.__name__ = true;
kha_js_URLParser.parse = function(url) {
	return new kha_js_URLParser(url);
};
kha_js_URLParser.prototype = {
	url: null
	,source: null
	,protocol: null
	,authority: null
	,userInfo: null
	,user: null
	,password: null
	,host: null
	,port: null
	,relative: null
	,path: null
	,directory: null
	,file: null
	,query: null
	,anchor: null
	,_parts: null
	,toString: function() {
		var s = "For Url -> " + this.url + "\n";
		var _g1 = 0;
		var _g = this._parts.length;
		while(_g1 < _g) {
			var i = _g1++;
			s += this._parts[i] + ": " + Std.string(Reflect.field(this,this._parts[i])) + (i == this._parts.length - 1 ? "" : "\n");
		}
		return s;
	}
	,__class__: kha_js_URLParser
};
var kha_js_EnvironmentVariables = function() {
	kha_EnvironmentVariables.call(this);
};
$hxClasses["kha.js.EnvironmentVariables"] = kha_js_EnvironmentVariables;
kha_js_EnvironmentVariables.__name__ = true;
kha_js_EnvironmentVariables.__super__ = kha_EnvironmentVariables;
kha_js_EnvironmentVariables.prototype = $extend(kha_EnvironmentVariables.prototype,{
	getVariable: function(name) {
		var parser = new kha_js_URLParser(window.location.href);
		var query = parser.query;
		var parts = query.split("&");
		var _g = 0;
		while(_g < parts.length) {
			var part = parts[_g];
			++_g;
			var subparts = part.split("=");
			if(subparts[0] == name) {
				return subparts[1];
			}
		}
		haxe_Log.trace("Environment variables requested.",{ fileName : "EnvironmentVariables.hx", lineNumber : 90, className : "kha.js.EnvironmentVariables", methodName : "getVariable"});
		return "";
	}
	,__class__: kha_js_EnvironmentVariables
});
var kha_js_Font = function(kravur) {
	this.images = new haxe_ds_IntMap();
	this.kravur = kravur;
};
$hxClasses["kha.js.Font"] = kha_js_Font;
kha_js_Font.__name__ = true;
kha_js_Font.__interfaces__ = [kha_Font];
kha_js_Font.prototype = {
	kravur: null
	,images: null
	,height: function(fontSize) {
		return this.kravur._get(fontSize).getHeight();
	}
	,width: function(fontSize,str) {
		return this.kravur._get(fontSize).stringWidth(str);
	}
	,widthOfCharacters: function(fontSize,characters,start,length) {
		return this.kravur._get(fontSize).charactersWidth(characters,start,length);
	}
	,baseline: function(fontSize) {
		return this.kravur._get(fontSize).getBaselinePosition();
	}
	,getImage: function(fontSize,color) {
		if(!this.images.h.hasOwnProperty(fontSize)) {
			var this1 = this.images;
			var v = new haxe_ds_IntMap();
			this1.h[fontSize] = v;
		}
		if(!this.images.h[fontSize].h.hasOwnProperty(color)) {
			var kravur = this.kravur._get(fontSize);
			var canvas = window.document.createElement("canvas");
			canvas.width = kravur.width;
			canvas.height = kravur.height;
			var ctx = canvas.getContext("2d");
			ctx.fillStyle = "black";
			ctx.fillRect(0,0,kravur.width,kravur.height);
			var imageData = ctx.getImageData(0,0,kravur.width,kravur.height);
			var bytes = (js_Boot.__cast(kravur.getTexture() , kha_CanvasImage)).bytes;
			var _g1 = 0;
			var _g = bytes.length;
			while(_g1 < _g) {
				var i = _g1++;
				imageData.data[i * 4] = (color & 16711680) >>> 16;
				imageData.data[i * 4 + 1] = (color & 65280) >>> 8;
				imageData.data[i * 4 + 2] = color & 255;
				imageData.data[i * 4 + 3] = bytes.b[i];
			}
			ctx.putImageData(imageData,0,0);
			var img = window.document.createElement("img");
			img.src = canvas.toDataURL("image/png");
			this.images.h[fontSize].h[color] = img;
			return img;
		}
		return this.images.h[fontSize].h[color];
	}
	,unload: function() {
		this.kravur = null;
		this.images = null;
	}
	,__class__: kha_js_Font
};
var kha_js_MobileWebAudio = function() { };
$hxClasses["kha.js.MobileWebAudio"] = kha_js_MobileWebAudio;
kha_js_MobileWebAudio.__name__ = true;
kha_js_MobileWebAudio._init = function() {
	try {
		kha_js_MobileWebAudio._context = new AudioContext();
		return;
	} catch( e ) {
	}
	try {
		this._context = new webkitAudioContext();
		return;
	} catch( e1 ) {
	}
};
kha_js_MobileWebAudio.play = function(sound,loop) {
	if(loop == null) {
		loop = false;
	}
	var channel = new kha_js_MobileWebAudioChannel(sound,loop);
	channel.play();
	return channel;
};
kha_js_MobileWebAudio.stream = function(sound,loop) {
	if(loop == null) {
		loop = false;
	}
	return kha_js_MobileWebAudio.play(sound,loop);
};
var kha_js_MobileWebAudioChannel = function(sound,loop) {
	this.stopped = false;
	this.paused = false;
	this.buffer = sound._buffer;
	this.loop = loop;
	this.createSource();
};
$hxClasses["kha.js.MobileWebAudioChannel"] = kha_js_MobileWebAudioChannel;
kha_js_MobileWebAudioChannel.__name__ = true;
kha_js_MobileWebAudioChannel.__interfaces__ = [kha_audio1_AudioChannel];
kha_js_MobileWebAudioChannel.prototype = {
	buffer: null
	,loop: null
	,source: null
	,gain: null
	,startTime: null
	,pauseTime: null
	,paused: null
	,stopped: null
	,createSource: function() {
		var _gthis = this;
		this.source = kha_js_MobileWebAudio._context.createBufferSource();
		this.source.loop = this.loop;
		this.source.buffer = this.buffer;
		this.source.onended = function() {
			_gthis.stopped = true;
		};
		this.gain = kha_js_MobileWebAudio._context.createGain();
		this.source.connect(this.gain);
		this.gain.connect(kha_js_MobileWebAudio._context.destination);
	}
	,play: function() {
		if(this.paused || this.stopped) {
			this.createSource();
		}
		this.stopped = false;
		if(this.paused) {
			this.paused = false;
			this.startTime = kha_js_MobileWebAudio._context.currentTime - this.pauseTime;
			this.source.start(0,this.pauseTime);
		} else {
			this.startTime = kha_js_MobileWebAudio._context.currentTime;
			this.source.start();
		}
	}
	,pause: function() {
		this.pauseTime = kha_js_MobileWebAudio._context.currentTime - this.startTime;
		this.paused = true;
		this.source.stop();
	}
	,stop: function() {
		this.paused = false;
		this.stopped = true;
		this.source.stop();
	}
	,length: null
	,get_length: function() {
		return this.source.buffer.duration;
	}
	,position: null
	,get_position: function() {
		if(this.stopped) {
			return this.get_length();
		}
		if(this.paused) {
			return this.pauseTime;
		} else {
			return kha_js_MobileWebAudio._context.currentTime - this.startTime;
		}
	}
	,get_volume: function() {
		return this.gain.gain.value;
	}
	,set_volume: function(value) {
		return this.gain.gain.value = value;
	}
	,finished: null
	,get_finished: function() {
		return this.stopped;
	}
	,__class__: kha_js_MobileWebAudioChannel
};
var kha_js_MobileWebAudioSound = function(filename,done) {
	var _gthis = this;
	kha_Sound.call(this);
	var request = new XMLHttpRequest();
	request.open("GET",filename,true);
	request.responseType = "arraybuffer";
	request.onerror = function() {
		haxe_Log.trace("Error loading " + filename,{ fileName : "MobileWebAudioSound.hx", lineNumber : 25, className : "kha.js.MobileWebAudioSound", methodName : "new"});
	};
	request.onload = function() {
		_gthis.compressedData = haxe_io_Bytes.ofData(request.response);
		_gthis.uncompressedData = null;
		kha_js_MobileWebAudio._context.decodeAudioData(_gthis.compressedData.b.bufferValue,function(buffer) {
			_gthis._buffer = buffer;
			done(_gthis);
		},function() {
			throw new js__$Boot_HaxeError("Audio format not supported");
		});
	};
	request.send(null);
};
$hxClasses["kha.js.MobileWebAudioSound"] = kha_js_MobileWebAudioSound;
kha_js_MobileWebAudioSound.__name__ = true;
kha_js_MobileWebAudioSound.__super__ = kha_Sound;
kha_js_MobileWebAudioSound.prototype = $extend(kha_Sound.prototype,{
	_buffer: null
	,uncompress: function(done) {
		done();
	}
	,__class__: kha_js_MobileWebAudioSound
});
var kha_js_Sound = function(filenames,done) {
	kha_Sound.call(this);
	this.done = done;
	kha_js_Sound.loading.push(this);
	this.element = window.document.createElement("audio");
	this.filenames = [];
	var _g = 0;
	while(_g < filenames.length) {
		var filename = filenames[_g];
		++_g;
		if(this.element.canPlayType("audio/ogg") != "" && StringTools.endsWith(filename,".ogg")) {
			this.filenames.push(filename);
		}
		if(this.element.canPlayType("audio/mp4") != "" && StringTools.endsWith(filename,".mp4")) {
			this.filenames.push(filename);
		}
	}
	this.element.addEventListener("error",$bind(this,this.errorListener),false);
	this.element.addEventListener("canplay",$bind(this,this.canPlayThroughListener),false);
	this.element.src = this.filenames[0];
	this.element.preload = "auto";
	this.element.load();
};
$hxClasses["kha.js.Sound"] = kha_js_Sound;
kha_js_Sound.__name__ = true;
kha_js_Sound.__super__ = kha_Sound;
kha_js_Sound.prototype = $extend(kha_Sound.prototype,{
	filenames: null
	,done: null
	,element: null
	,errorListener: function(eventInfo) {
		if(this.element.error.code == 4) {
			var _g1 = 0;
			var _g = this.filenames.length - 1;
			while(_g1 < _g) {
				var i = _g1++;
				if(this.element.src == this.filenames[i]) {
					this.element.src = this.filenames[i + 1];
					return;
				}
			}
		}
		haxe_Log.trace("Error loading " + this.element.src,{ fileName : "Sound.hx", lineNumber : 108, className : "kha.js.Sound", methodName : "errorListener"});
		window.console.log("loadSound failed");
		this.finishAsset();
	}
	,canPlayThroughListener: function(eventInfo) {
		this.finishAsset();
	}
	,finishAsset: function() {
		this.element.removeEventListener("error",$bind(this,this.errorListener),false);
		this.element.removeEventListener("canplaythrough",$bind(this,this.canPlayThroughListener),false);
		this.done(this);
		HxOverrides.remove(kha_js_Sound.loading,this);
	}
	,uncompress: function(done) {
		done();
	}
	,__class__: kha_js_Sound
});
var kha_js_Video = function() {
	kha_Video.call(this);
};
$hxClasses["kha.js.Video"] = kha_js_Video;
kha_js_Video.__name__ = true;
kha_js_Video.fromElement = function(element) {
	var video = new kha_js_Video();
	video.element = element;
	if(kha_SystemImpl.gl != null) {
		video.texture = kha_Image.fromVideo(video);
	}
	return video;
};
kha_js_Video.fromFile = function(filenames,done) {
	var video = new kha_js_Video();
	video.done = done;
	video.element = window.document.createElement("video");
	video.filenames = [];
	var _g = 0;
	while(_g < filenames.length) {
		var filename = filenames[_g];
		++_g;
		if(video.element.canPlayType("video/webm") != "" && StringTools.endsWith(filename,".webm")) {
			video.filenames.push(filename);
		}
		if(video.element.canPlayType("video/mp4") != "" && StringTools.endsWith(filename,".mp4")) {
			video.filenames.push(filename);
		}
	}
	video.element.addEventListener("error",$bind(video,video.errorListener),false);
	video.element.addEventListener("canplaythrough",$bind(video,video.canPlayThroughListener),false);
	video.element.preload = "auto";
	video.element.src = video.filenames[0];
};
kha_js_Video.__super__ = kha_Video;
kha_js_Video.prototype = $extend(kha_Video.prototype,{
	filenames: null
	,element: null
	,done: null
	,texture: null
	,width: function() {
		return this.element.videoWidth;
	}
	,height: function() {
		return this.element.videoHeight;
	}
	,play: function(loop) {
		if(loop == null) {
			loop = false;
		}
		try {
			this.element.loop = loop;
			this.element.play();
		} catch( e ) {
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			haxe_Log.trace(e,{ fileName : "Video.hx", lineNumber : 64, className : "kha.js.Video", methodName : "play"});
		}
	}
	,pause: function() {
		try {
			this.element.pause();
		} catch( e ) {
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			haxe_Log.trace(e,{ fileName : "Video.hx", lineNumber : 73, className : "kha.js.Video", methodName : "pause"});
		}
	}
	,stop: function() {
		try {
			this.element.pause();
			this.element.currentTime = 0;
		} catch( e ) {
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			haxe_Log.trace(e,{ fileName : "Video.hx", lineNumber : 83, className : "kha.js.Video", methodName : "stop"});
		}
	}
	,getCurrentPos: function() {
		return Math.ceil(this.element.currentTime * 1000);
	}
	,get_position: function() {
		return Math.ceil(this.element.currentTime * 1000);
	}
	,set_position: function(value) {
		this.element.currentTime = value / 1000;
		return value;
	}
	,getLength: function() {
		if(isFinite(this.element.duration)) {
			return Math.floor(this.element.duration * 1000);
		} else {
			return -1;
		}
	}
	,errorListener: function(eventInfo) {
		if(this.element.error.code == 4) {
			var _g1 = 0;
			var _g = this.filenames.length - 1;
			while(_g1 < _g) {
				var i = _g1++;
				if(this.element.src == this.filenames[i]) {
					this.element.src = this.filenames[i + 1];
					return;
				}
			}
		}
		haxe_Log.trace("Error loading " + this.element.src,{ fileName : "Video.hx", lineNumber : 120, className : "kha.js.Video", methodName : "errorListener"});
		this.finishAsset();
	}
	,canPlayThroughListener: function(eventInfo) {
		this.finishAsset();
	}
	,finishAsset: function() {
		this.element.removeEventListener("error",$bind(this,this.errorListener),false);
		this.element.removeEventListener("canplaythrough",$bind(this,this.canPlayThroughListener),false);
		if(kha_SystemImpl.gl != null) {
			this.texture = kha_Image.fromVideo(this);
		}
		this.done(this);
	}
	,__class__: kha_js_Video
});
var kha_js_WebAudioSound = function(filename,done) {
	var _gthis = this;
	kha_Sound.call(this);
	var request = new XMLHttpRequest();
	request.open("GET",filename,true);
	request.responseType = "arraybuffer";
	request.onerror = function() {
		haxe_Log.trace("Error loading " + filename,{ fileName : "WebAudioSound.hx", lineNumber : 76, className : "kha.js.WebAudioSound", methodName : "new"});
	};
	request.onload = function() {
		_gthis.compressedData = haxe_io_Bytes.ofData(request.response);
		_gthis.uncompressedData = null;
		done(_gthis);
	};
	request.send(null);
};
$hxClasses["kha.js.WebAudioSound"] = kha_js_WebAudioSound;
kha_js_WebAudioSound.__name__ = true;
kha_js_WebAudioSound.__super__ = kha_Sound;
kha_js_WebAudioSound.prototype = $extend(kha_Sound.prototype,{
	superUncompress: function(done) {
		kha_Sound.prototype.uncompress.call(this,done);
	}
	,uncompress: function(done) {
		var _gthis = this;
		kha_audio2_Audio._context.decodeAudioData(this.compressedData.b.bufferValue,function(buffer) {
			var length = buffer.getChannelData(0).length * 2;
			var this1 = new Array(length);
			_gthis.uncompressedData = this1;
			if(buffer.numberOfChannels == 1) {
				var _g1 = 0;
				var _g = buffer.getChannelData(0).length;
				while(_g1 < _g) {
					var i = _g1++;
					_gthis.uncompressedData[i * 2] = buffer.getChannelData(0)[i];
					_gthis.uncompressedData[i * 2 + 1] = buffer.getChannelData(0)[i];
				}
			} else {
				var _g11 = 0;
				var _g2 = buffer.getChannelData(0).length;
				while(_g11 < _g2) {
					var i1 = _g11++;
					_gthis.uncompressedData[i1 * 2] = buffer.getChannelData(0)[i1];
					_gthis.uncompressedData[i1 * 2 + 1] = buffer.getChannelData(1)[i1];
				}
			}
			_gthis.compressedData = null;
			done();
		},function() {
			_gthis.superUncompress(done);
		});
	}
	,__class__: kha_js_WebAudioSound
});
var kha_js_graphics4_ConstantLocation = function(value,type) {
	this.value = value;
	this.type = type;
};
$hxClasses["kha.js.graphics4.ConstantLocation"] = kha_js_graphics4_ConstantLocation;
kha_js_graphics4_ConstantLocation.__name__ = true;
kha_js_graphics4_ConstantLocation.__interfaces__ = [kha_graphics4_ConstantLocation];
kha_js_graphics4_ConstantLocation.prototype = {
	value: null
	,type: null
	,__class__: kha_js_graphics4_ConstantLocation
};
var kha_js_graphics4_Graphics = function(renderTarget) {
	var this1 = new Array(9);
	this.matrix3Cache = this1;
	var this11 = new Array(16);
	this.matrixCache = this11;
	this.isDepthAttachment = false;
	this.isCubeMap = false;
	this.colorMaskAlpha = true;
	this.colorMaskBlue = true;
	this.colorMaskGreen = true;
	this.colorMaskRed = true;
	this.depthMask = false;
	this.depthTest = false;
	this.renderTarget = renderTarget;
	this.init();
	if(kha_SystemImpl.gl2) {
		this.instancedExtension = true;
	} else {
		this.instancedExtension = kha_SystemImpl.gl.getExtension("ANGLE_instanced_arrays");
		this.blendMinMaxExtension = kha_SystemImpl.gl.getExtension("EXT_blend_minmax");
	}
};
$hxClasses["kha.js.graphics4.Graphics"] = kha_js_graphics4_Graphics;
kha_js_graphics4_Graphics.__name__ = true;
kha_js_graphics4_Graphics.__interfaces__ = [kha_graphics4_Graphics];
kha_js_graphics4_Graphics.getBlendFunc = function(factor) {
	switch(factor[1]) {
	case 0:case 2:
		return 0;
	case 1:
		return 1;
	case 3:
		return 770;
	case 4:
		return 772;
	case 5:
		return 771;
	case 6:
		return 773;
	case 7:
		return 768;
	case 8:
		return 774;
	case 9:
		return 769;
	case 10:
		return 775;
	}
};
kha_js_graphics4_Graphics.getBlendOp = function(op) {
	switch(op[1]) {
	case 0:
		return 32774;
	case 1:
		return 32778;
	case 2:
		return 32779;
	case 3:
		return 32775;
	case 4:
		return 32776;
	}
};
kha_js_graphics4_Graphics.prototype = {
	depthTest: null
	,depthMask: null
	,colorMaskRed: null
	,colorMaskGreen: null
	,colorMaskBlue: null
	,colorMaskAlpha: null
	,indicesCount: null
	,renderTarget: null
	,renderTargetFrameBuffer: null
	,renderTargetTexture: null
	,isCubeMap: null
	,isDepthAttachment: null
	,instancedExtension: null
	,blendMinMaxExtension: null
	,init: function() {
		if(this.renderTarget == null) {
			return;
		}
		this.isCubeMap = js_Boot.__instanceof(this.renderTarget,kha_graphics4_CubeMap);
		if(this.isCubeMap) {
			var cubeMap = js_Boot.__cast(this.renderTarget , kha_graphics4_CubeMap);
			this.renderTargetFrameBuffer = cubeMap.frameBuffer;
			this.renderTargetTexture = cubeMap.texture;
			this.isDepthAttachment = cubeMap.isDepthAttachment;
		} else {
			var image = js_Boot.__cast(this.renderTarget , kha_WebGLImage);
			this.renderTargetFrameBuffer = image.frameBuffer;
			this.renderTargetTexture = image.texture;
		}
	}
	,begin: function(additionalRenderTargets) {
		kha_SystemImpl.gl.enable(3042);
		kha_SystemImpl.gl.blendFunc(770,771);
		if(this.renderTarget == null) {
			kha_SystemImpl.gl.bindFramebuffer(36160,null);
			kha_SystemImpl.gl.viewport(0,0,kha_System.windowWidth(),kha_System.windowHeight());
		} else {
			kha_SystemImpl.gl.bindFramebuffer(36160,this.renderTargetFrameBuffer);
			kha_SystemImpl.gl.viewport(0,0,this.renderTarget.get_width(),this.renderTarget.get_height());
			if(additionalRenderTargets != null) {
				kha_SystemImpl.gl.framebufferTexture2D(36160,kha_SystemImpl.drawBuffers.COLOR_ATTACHMENT0_WEBGL,3553,this.renderTargetTexture,0);
				var _g1 = 0;
				var _g = additionalRenderTargets.length;
				while(_g1 < _g) {
					var i = _g1++;
					kha_SystemImpl.gl.framebufferTexture2D(36160,kha_SystemImpl.drawBuffers.COLOR_ATTACHMENT0_WEBGL + i + 1,3553,(js_Boot.__cast(additionalRenderTargets[i] , kha_WebGLImage)).texture,0);
				}
				var attachments = [kha_SystemImpl.drawBuffers.COLOR_ATTACHMENT0_WEBGL];
				var _g11 = 0;
				var _g2 = additionalRenderTargets.length;
				while(_g11 < _g2) {
					var i1 = _g11++;
					attachments.push(kha_SystemImpl.drawBuffers.COLOR_ATTACHMENT0_WEBGL + i1 + 1);
				}
				if(kha_SystemImpl.gl2) {
					kha_SystemImpl.gl.drawBuffers(attachments);
				} else {
					kha_SystemImpl.drawBuffers.drawBuffersWEBGL(attachments);
				}
			}
		}
	}
	,beginFace: function(face) {
		kha_SystemImpl.gl.enable(3042);
		kha_SystemImpl.gl.blendFunc(770,771);
		kha_SystemImpl.gl.bindFramebuffer(36160,this.renderTargetFrameBuffer);
		kha_SystemImpl.gl.framebufferTexture2D(36160,this.isDepthAttachment ? 36096 : 36064,34069 + face,this.renderTargetTexture,0);
		kha_SystemImpl.gl.viewport(0,0,this.renderTarget.get_width(),this.renderTarget.get_height());
	}
	,beginEye: function(eye) {
		kha_SystemImpl.gl.enable(3042);
		kha_SystemImpl.gl.blendFunc(770,771);
		kha_SystemImpl.gl.bindFramebuffer(36160,null);
		if(eye == 0) {
			kha_SystemImpl.gl.viewport(0,0,kha_System.windowWidth() * 0.5 | 0,kha_System.windowHeight());
		} else {
			kha_SystemImpl.gl.viewport(kha_System.windowWidth() * 0.5 | 0,0,kha_System.windowWidth() * 0.5 | 0,kha_System.windowHeight());
		}
	}
	,end: function() {
		var error = kha_SystemImpl.gl.getError();
		switch(error) {
		case 0:
			break;
		case 1280:
			haxe_Log.trace("WebGL error: Invalid enum",{ fileName : "Graphics.hx", lineNumber : 130, className : "kha.js.graphics4.Graphics", methodName : "end"});
			break;
		case 1281:
			haxe_Log.trace("WebGL error: Invalid value",{ fileName : "Graphics.hx", lineNumber : 132, className : "kha.js.graphics4.Graphics", methodName : "end"});
			break;
		case 1282:
			haxe_Log.trace("WebGL error: Invalid operation",{ fileName : "Graphics.hx", lineNumber : 134, className : "kha.js.graphics4.Graphics", methodName : "end"});
			break;
		case 1285:
			haxe_Log.trace("WebGL error: Out of memory",{ fileName : "Graphics.hx", lineNumber : 138, className : "kha.js.graphics4.Graphics", methodName : "end"});
			break;
		case 1286:
			haxe_Log.trace("WebGL error: Invalid framebuffer operation",{ fileName : "Graphics.hx", lineNumber : 136, className : "kha.js.graphics4.Graphics", methodName : "end"});
			break;
		case 37442:
			haxe_Log.trace("WebGL error: Context lost",{ fileName : "Graphics.hx", lineNumber : 140, className : "kha.js.graphics4.Graphics", methodName : "end"});
			break;
		default:
			haxe_Log.trace("Unknown WebGL error",{ fileName : "Graphics.hx", lineNumber : 142, className : "kha.js.graphics4.Graphics", methodName : "end"});
		}
	}
	,flush: function() {
	}
	,vsynced: function() {
		return true;
	}
	,refreshRate: function() {
		return 60;
	}
	,clear: function(color,depth,stencil) {
		var clearMask = 0;
		if(color != null) {
			clearMask |= 16384;
			kha_SystemImpl.gl.colorMask(true,true,true,true);
			kha_SystemImpl.gl.clearColor(((color & 16711680) >>> 16) * 0.00392156862745098,((color & 65280) >>> 8) * 0.00392156862745098,(color & 255) * 0.00392156862745098,(color >>> 24) * 0.00392156862745098);
		}
		if(depth != null) {
			clearMask |= 256;
			kha_SystemImpl.gl.enable(2929);
			kha_SystemImpl.gl.depthMask(true);
			kha_SystemImpl.gl.clearDepth(depth);
		}
		if(stencil != null) {
			clearMask |= 1024;
			kha_SystemImpl.gl.enable(2960);
			kha_SystemImpl.gl.stencilMask(255);
			kha_SystemImpl.gl.clearStencil(stencil);
		}
		kha_SystemImpl.gl.clear(clearMask);
		kha_SystemImpl.gl.colorMask(this.colorMaskRed,this.colorMaskGreen,this.colorMaskBlue,this.colorMaskAlpha);
		if(this.depthTest) {
			kha_SystemImpl.gl.enable(2929);
		} else {
			kha_SystemImpl.gl.disable(2929);
		}
		kha_SystemImpl.gl.depthMask(this.depthMask);
	}
	,viewport: function(x,y,width,height) {
		var h = this.renderTarget == null ? kha_System.windowHeight(0) : this.renderTarget.get_height();
		kha_SystemImpl.gl.viewport(x,h - y - height,width,height);
	}
	,setDepthMode: function(write,mode) {
		switch(mode[1]) {
		case 0:
			if(write) {
				kha_SystemImpl.gl.enable(2929);
			} else {
				kha_SystemImpl.gl.disable(2929);
			}
			this.depthTest = write;
			kha_SystemImpl.gl.depthFunc(519);
			break;
		case 1:
			kha_SystemImpl.gl.enable(2929);
			this.depthTest = true;
			kha_SystemImpl.gl.depthFunc(512);
			break;
		case 2:
			kha_SystemImpl.gl.enable(2929);
			this.depthTest = true;
			kha_SystemImpl.gl.depthFunc(514);
			break;
		case 3:
			kha_SystemImpl.gl.enable(2929);
			this.depthTest = true;
			kha_SystemImpl.gl.depthFunc(517);
			break;
		case 4:
			kha_SystemImpl.gl.enable(2929);
			this.depthTest = true;
			kha_SystemImpl.gl.depthFunc(513);
			break;
		case 5:
			kha_SystemImpl.gl.enable(2929);
			this.depthTest = true;
			kha_SystemImpl.gl.depthFunc(515);
			break;
		case 6:
			kha_SystemImpl.gl.enable(2929);
			this.depthTest = true;
			kha_SystemImpl.gl.depthFunc(516);
			break;
		case 7:
			kha_SystemImpl.gl.enable(2929);
			this.depthTest = true;
			kha_SystemImpl.gl.depthFunc(518);
			break;
		}
		kha_SystemImpl.gl.depthMask(write);
		this.depthMask = write;
	}
	,setBlendingMode: function(source,destination,operation,alphaSource,alphaDestination,alphaOperation) {
		if(source == kha_graphics4_BlendingFactor.BlendOne && destination == kha_graphics4_BlendingFactor.BlendZero) {
			kha_SystemImpl.gl.disable(3042);
		} else {
			kha_SystemImpl.gl.enable(3042);
			kha_SystemImpl.gl.blendFuncSeparate(kha_js_graphics4_Graphics.getBlendFunc(source),kha_js_graphics4_Graphics.getBlendFunc(destination),kha_js_graphics4_Graphics.getBlendFunc(alphaSource),kha_js_graphics4_Graphics.getBlendFunc(alphaDestination));
			kha_SystemImpl.gl.blendEquationSeparate(kha_js_graphics4_Graphics.getBlendOp(operation),kha_js_graphics4_Graphics.getBlendOp(alphaOperation));
		}
	}
	,createVertexBuffer: function(vertexCount,structure,usage,canRead) {
		if(canRead == null) {
			canRead = false;
		}
		return new kha_graphics4_VertexBuffer(vertexCount,structure,usage);
	}
	,setVertexBuffer: function(vertexBuffer) {
		(js_Boot.__cast(vertexBuffer , kha_graphics4_VertexBuffer)).set(0);
	}
	,setVertexBuffers: function(vertexBuffers) {
		var offset = 0;
		var _g = 0;
		while(_g < vertexBuffers.length) {
			var vertexBuffer = vertexBuffers[_g];
			++_g;
			offset += (js_Boot.__cast(vertexBuffer , kha_graphics4_VertexBuffer)).set(offset);
		}
	}
	,createIndexBuffer: function(indexCount,usage,canRead) {
		if(canRead == null) {
			canRead = false;
		}
		return new kha_graphics4_IndexBuffer(indexCount,usage);
	}
	,setIndexBuffer: function(indexBuffer) {
		this.indicesCount = indexBuffer.count();
		(js_Boot.__cast(indexBuffer , kha_graphics4_IndexBuffer)).set();
	}
	,setTexture: function(stage,texture) {
		if(texture == null) {
			kha_SystemImpl.gl.activeTexture(33984 + (js_Boot.__cast(stage , kha_js_graphics4_TextureUnit)).value);
			kha_SystemImpl.gl.bindTexture(3553,null);
		} else {
			(js_Boot.__cast(texture , kha_WebGLImage)).set((js_Boot.__cast(stage , kha_js_graphics4_TextureUnit)).value);
		}
	}
	,setTextureDepth: function(stage,texture) {
		(js_Boot.__cast(texture , kha_WebGLImage)).setDepth((js_Boot.__cast(stage , kha_js_graphics4_TextureUnit)).value);
	}
	,setTextureArray: function(unit,texture) {
	}
	,setVideoTexture: function(unit,texture) {
		if(texture == null) {
			kha_SystemImpl.gl.activeTexture(33984 + (js_Boot.__cast(unit , kha_js_graphics4_TextureUnit)).value);
			kha_SystemImpl.gl.bindTexture(3553,null);
		} else {
			(js_Boot.__cast((js_Boot.__cast(texture , kha_js_Video)).texture , kha_WebGLImage)).set((js_Boot.__cast(unit , kha_js_graphics4_TextureUnit)).value);
		}
	}
	,setImageTexture: function(unit,texture) {
	}
	,setTextureParameters: function(texunit,uAddressing,vAddressing,minificationFilter,magnificationFilter,mipmapFilter) {
		kha_SystemImpl.gl.activeTexture(33984 + (js_Boot.__cast(texunit , kha_js_graphics4_TextureUnit)).value);
		switch(uAddressing[1]) {
		case 0:
			kha_SystemImpl.gl.texParameteri(3553,10242,10497);
			break;
		case 1:
			kha_SystemImpl.gl.texParameteri(3553,10242,33648);
			break;
		case 2:
			kha_SystemImpl.gl.texParameteri(3553,10242,33071);
			break;
		}
		switch(vAddressing[1]) {
		case 0:
			kha_SystemImpl.gl.texParameteri(3553,10243,10497);
			break;
		case 1:
			kha_SystemImpl.gl.texParameteri(3553,10243,33648);
			break;
		case 2:
			kha_SystemImpl.gl.texParameteri(3553,10243,33071);
			break;
		}
		switch(minificationFilter[1]) {
		case 0:
			switch(mipmapFilter[1]) {
			case 0:
				kha_SystemImpl.gl.texParameteri(3553,10241,9728);
				break;
			case 1:
				kha_SystemImpl.gl.texParameteri(3553,10241,9984);
				break;
			case 2:
				kha_SystemImpl.gl.texParameteri(3553,10241,9986);
				break;
			}
			break;
		case 1:case 2:
			switch(mipmapFilter[1]) {
			case 0:
				kha_SystemImpl.gl.texParameteri(3553,10241,9729);
				break;
			case 1:
				kha_SystemImpl.gl.texParameteri(3553,10241,9985);
				break;
			case 2:
				kha_SystemImpl.gl.texParameteri(3553,10241,9987);
				break;
			}
			if(minificationFilter == kha_graphics4_TextureFilter.AnisotropicFilter) {
				kha_SystemImpl.gl.texParameteri(3553,kha_SystemImpl.anisotropicFilter.TEXTURE_MAX_ANISOTROPY_EXT,4);
			}
			break;
		}
		switch(magnificationFilter[1]) {
		case 0:
			kha_SystemImpl.gl.texParameteri(3553,10240,9728);
			break;
		case 1:case 2:
			kha_SystemImpl.gl.texParameteri(3553,10240,9729);
			break;
		}
	}
	,setTexture3DParameters: function(texunit,uAddressing,vAddressing,wAddressing,minificationFilter,magnificationFilter,mipmapFilter) {
	}
	,setCubeMap: function(stage,cubeMap) {
		if(cubeMap == null) {
			kha_SystemImpl.gl.activeTexture(33984 + (js_Boot.__cast(stage , kha_js_graphics4_TextureUnit)).value);
			kha_SystemImpl.gl.bindTexture(34067,null);
		} else {
			cubeMap.set((js_Boot.__cast(stage , kha_js_graphics4_TextureUnit)).value);
		}
	}
	,setCubeMapDepth: function(stage,cubeMap) {
		cubeMap.setDepth((js_Boot.__cast(stage , kha_js_graphics4_TextureUnit)).value);
	}
	,setCullMode: function(mode) {
		switch(mode[1]) {
		case 0:
			kha_SystemImpl.gl.enable(2884);
			kha_SystemImpl.gl.cullFace(1029);
			break;
		case 1:
			kha_SystemImpl.gl.enable(2884);
			kha_SystemImpl.gl.cullFace(1028);
			break;
		case 2:
			kha_SystemImpl.gl.disable(2884);
			break;
		}
	}
	,setPipeline: function(pipe) {
		this.setCullMode(pipe.cullMode);
		this.setDepthMode(pipe.depthWrite,pipe.depthMode);
		this.setStencilParameters(pipe.stencilMode,pipe.stencilBothPass,pipe.stencilDepthFail,pipe.stencilFail,pipe.stencilReferenceValue,pipe.stencilReadMask,pipe.stencilWriteMask);
		this.setBlendingMode(pipe.blendSource,pipe.blendDestination,pipe.blendOperation,pipe.alphaBlendSource,pipe.alphaBlendDestination,pipe.alphaBlendOperation);
		pipe.set();
		this.colorMaskRed = pipe.colorWriteMaskRed;
		this.colorMaskGreen = pipe.colorWriteMaskGreen;
		this.colorMaskBlue = pipe.colorWriteMaskBlue;
		this.colorMaskAlpha = pipe.colorWriteMaskAlpha;
	}
	,setBool: function(location,value) {
		kha_SystemImpl.gl.uniform1i((js_Boot.__cast(location , kha_js_graphics4_ConstantLocation)).value,value ? 1 : 0);
	}
	,setInt: function(location,value) {
		kha_SystemImpl.gl.uniform1i((js_Boot.__cast(location , kha_js_graphics4_ConstantLocation)).value,value);
	}
	,setFloat: function(location,value) {
		kha_SystemImpl.gl.uniform1f((js_Boot.__cast(location , kha_js_graphics4_ConstantLocation)).value,value);
	}
	,setFloat2: function(location,value1,value2) {
		kha_SystemImpl.gl.uniform2f((js_Boot.__cast(location , kha_js_graphics4_ConstantLocation)).value,value1,value2);
	}
	,setFloat3: function(location,value1,value2,value3) {
		kha_SystemImpl.gl.uniform3f((js_Boot.__cast(location , kha_js_graphics4_ConstantLocation)).value,value1,value2,value3);
	}
	,setFloat4: function(location,value1,value2,value3,value4) {
		kha_SystemImpl.gl.uniform4f((js_Boot.__cast(location , kha_js_graphics4_ConstantLocation)).value,value1,value2,value3,value4);
	}
	,setFloats: function(location,values) {
		var webglLocation = js_Boot.__cast(location , kha_js_graphics4_ConstantLocation);
		var _g = webglLocation.type;
		switch(_g) {
		case 35664:
			kha_SystemImpl.gl.uniform2fv(webglLocation.value,values);
			break;
		case 35665:
			kha_SystemImpl.gl.uniform3fv(webglLocation.value,values);
			break;
		case 35666:
			kha_SystemImpl.gl.uniform4fv(webglLocation.value,values);
			break;
		default:
			kha_SystemImpl.gl.uniform1fv(webglLocation.value,values);
		}
	}
	,setVector2: function(location,value) {
		kha_SystemImpl.gl.uniform2f((js_Boot.__cast(location , kha_js_graphics4_ConstantLocation)).value,value.x,value.y);
	}
	,setVector3: function(location,value) {
		kha_SystemImpl.gl.uniform3f((js_Boot.__cast(location , kha_js_graphics4_ConstantLocation)).value,value.x,value.y,value.z);
	}
	,setVector4: function(location,value) {
		kha_SystemImpl.gl.uniform4f((js_Boot.__cast(location , kha_js_graphics4_ConstantLocation)).value,value.x,value.y,value.z,value.w);
	}
	,matrixCache: null
	,setMatrix: function(location,matrix) {
		this.matrixCache[0] = matrix._00;
		this.matrixCache[1] = matrix._01;
		this.matrixCache[2] = matrix._02;
		this.matrixCache[3] = matrix._03;
		this.matrixCache[4] = matrix._10;
		this.matrixCache[5] = matrix._11;
		this.matrixCache[6] = matrix._12;
		this.matrixCache[7] = matrix._13;
		this.matrixCache[8] = matrix._20;
		this.matrixCache[9] = matrix._21;
		this.matrixCache[10] = matrix._22;
		this.matrixCache[11] = matrix._23;
		this.matrixCache[12] = matrix._30;
		this.matrixCache[13] = matrix._31;
		this.matrixCache[14] = matrix._32;
		this.matrixCache[15] = matrix._33;
		kha_SystemImpl.gl.uniformMatrix4fv((js_Boot.__cast(location , kha_js_graphics4_ConstantLocation)).value,false,this.matrixCache);
	}
	,matrix3Cache: null
	,setMatrix3: function(location,matrix) {
		this.matrix3Cache[0] = matrix._00;
		this.matrix3Cache[1] = matrix._01;
		this.matrix3Cache[2] = matrix._02;
		this.matrix3Cache[3] = matrix._10;
		this.matrix3Cache[4] = matrix._11;
		this.matrix3Cache[5] = matrix._12;
		this.matrix3Cache[6] = matrix._20;
		this.matrix3Cache[7] = matrix._21;
		this.matrix3Cache[8] = matrix._22;
		kha_SystemImpl.gl.uniformMatrix3fv((js_Boot.__cast(location , kha_js_graphics4_ConstantLocation)).value,false,this.matrix3Cache);
	}
	,drawIndexedVertices: function(start,count) {
		if(count == null) {
			count = -1;
		}
		if(start == null) {
			start = 0;
		}
		var type = kha_SystemImpl.elementIndexUint == null ? 5123 : 5125;
		var size = type == 5123 ? 2 : 4;
		kha_SystemImpl.gl.drawElements(4,count == -1 ? this.indicesCount : count,type,start * size);
	}
	,convertStencilAction: function(action) {
		switch(action[1]) {
		case 0:
			return 7680;
		case 1:
			return 0;
		case 2:
			return 7681;
		case 3:
			return 7682;
		case 4:
			return 34055;
		case 5:
			return 7683;
		case 6:
			return 34056;
		case 7:
			return 5386;
		}
	}
	,setStencilParameters: function(compareMode,bothPass,depthFail,stencilFail,referenceValue,readMask,writeMask) {
		if(writeMask == null) {
			writeMask = 255;
		}
		if(readMask == null) {
			readMask = 255;
		}
		if(compareMode == kha_graphics4_CompareMode.Always && bothPass == kha_graphics4_StencilAction.Keep && depthFail == kha_graphics4_StencilAction.Keep && stencilFail == kha_graphics4_StencilAction.Keep) {
			kha_SystemImpl.gl.disable(2960);
		} else {
			kha_SystemImpl.gl.enable(2960);
			var stencilFunc = 0;
			switch(compareMode[1]) {
			case 0:
				stencilFunc = 519;
				break;
			case 1:
				stencilFunc = 512;
				break;
			case 2:
				stencilFunc = 514;
				break;
			case 3:
				stencilFunc = 517;
				break;
			case 4:
				stencilFunc = 513;
				break;
			case 5:
				stencilFunc = 515;
				break;
			case 6:
				stencilFunc = 516;
				break;
			case 7:
				stencilFunc = 518;
				break;
			}
			kha_SystemImpl.gl.stencilMask(writeMask);
			kha_SystemImpl.gl.stencilOp(this.convertStencilAction(stencilFail),this.convertStencilAction(depthFail),this.convertStencilAction(bothPass));
			kha_SystemImpl.gl.stencilFunc(stencilFunc,referenceValue,readMask);
		}
	}
	,scissor: function(x,y,width,height) {
		kha_SystemImpl.gl.enable(3089);
		if(this.renderTarget == null) {
			kha_SystemImpl.gl.scissor(x,kha_System.windowHeight(0) - y - height,width,height);
		} else {
			kha_SystemImpl.gl.scissor(x,y,width,height);
		}
	}
	,disableScissor: function() {
		kha_SystemImpl.gl.disable(3089);
	}
	,renderTargetsInvertedY: function() {
		return true;
	}
	,drawIndexedVerticesInstanced: function(instanceCount,start,count) {
		if(count == null) {
			count = -1;
		}
		if(start == null) {
			start = 0;
		}
		if(this.instancedRenderingAvailable()) {
			var type = kha_SystemImpl.elementIndexUint == null ? 5123 : 5125;
			var typeSize = kha_SystemImpl.elementIndexUint == null ? 2 : 4;
			if(kha_SystemImpl.gl2) {
				kha_SystemImpl.gl.drawElementsInstanced(4,count == -1 ? this.indicesCount : count,type,start * typeSize,instanceCount);
			} else {
				this.instancedExtension.drawElementsInstancedANGLE(4,count == -1 ? this.indicesCount : count,type,start * typeSize,instanceCount);
			}
		}
	}
	,instancedRenderingAvailable: function() {
		return this.instancedExtension;
	}
	,__class__: kha_js_graphics4_Graphics
};
var kha_js_graphics4_Graphics2 = function(canvas) {
	kha_graphics4_Graphics2.call(this,canvas);
};
$hxClasses["kha.js.graphics4.Graphics2"] = kha_js_graphics4_Graphics2;
kha_js_graphics4_Graphics2.__name__ = true;
kha_js_graphics4_Graphics2.__super__ = kha_graphics4_Graphics2;
kha_js_graphics4_Graphics2.prototype = $extend(kha_graphics4_Graphics2.prototype,{
	drawVideoInternal: function(video,x,y,width,height) {
		var v = js_Boot.__cast(video , kha_js_Video);
		this.drawScaledSubImage(v.texture,0,0,v.texture.get_width(),v.texture.get_height(),x,y,width,height);
	}
	,begin: function(clear,clearColor) {
		if(clear == null) {
			clear = true;
		}
		kha_SystemImpl.gl.colorMask(true,true,true,true);
		kha_SystemImpl.gl.disable(2929);
		kha_SystemImpl.gl.depthFunc(519);
		kha_graphics4_Graphics2.prototype.begin.call(this,clear,clearColor);
	}
	,__class__: kha_js_graphics4_Graphics2
});
var kha_js_graphics4_TextureUnit = function(value) {
	this.value = value;
};
$hxClasses["kha.js.graphics4.TextureUnit"] = kha_js_graphics4_TextureUnit;
kha_js_graphics4_TextureUnit.__name__ = true;
kha_js_graphics4_TextureUnit.__interfaces__ = [kha_graphics4_TextureUnit];
kha_js_graphics4_TextureUnit.prototype = {
	value: null
	,__class__: kha_js_graphics4_TextureUnit
};
var kha_vr_VrInterface = function() {
};
$hxClasses["kha.vr.VrInterface"] = kha_vr_VrInterface;
kha_vr_VrInterface.__name__ = true;
kha_vr_VrInterface.prototype = {
	GetSensorState: function() {
		return null;
	}
	,GetPredictedSensorState: function(time) {
		return null;
	}
	,WarpSwapBlack: function() {
		return;
	}
	,WarpSwapLoadingIcon: function() {
		return;
	}
	,WarpSwap: function(parms) {
		return;
	}
	,IsPresenting: function() {
		return false;
	}
	,IsVrEnabled: function() {
		return false;
	}
	,GetTimeInSeconds: function() {
		return 0.0;
	}
	,GetProjectionMatrix: function(eye) {
		return null;
	}
	,GetViewMatrix: function(eye) {
		return null;
	}
	,onVRRequestPresent: function() {
		return;
	}
	,onVRExitPresent: function() {
		return;
	}
	,onResetPose: function() {
		return;
	}
	,__class__: kha_vr_VrInterface
};
var kha_js_vr_VrInterface = function() {
	this.vrHeight = 0;
	this.vrWidth = 0;
	this.height = 0;
	this.width = 0;
	this.rightViewMatrix = new kha_math_FastMatrix4(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1);
	this.leftViewMatrix = new kha_math_FastMatrix4(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1);
	this.rightProjectionMatrix = new kha_math_FastMatrix4(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1);
	this.leftProjectionMatrix = new kha_math_FastMatrix4(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1);
	this.vrEnabled = false;
	kha_vr_VrInterface.call(this);
	var displayEnabled = navigator.getVRDisplays;
	if(displayEnabled) {
		this.vrEnabled = true;
		this.getVRDisplays();
		haxe_Log.trace("Display enabled.",{ fileName : "VrInterface.hx", lineNumber : 36, className : "kha.js.vr.VrInterface", methodName : "new"});
	}
};
$hxClasses["kha.js.vr.VrInterface"] = kha_js_vr_VrInterface;
kha_js_vr_VrInterface.__name__ = true;
kha_js_vr_VrInterface.__super__ = kha_vr_VrInterface;
kha_js_vr_VrInterface.prototype = $extend(kha_vr_VrInterface.prototype,{
	vrEnabled: null
	,vrDisplay: null
	,frameData: null
	,leftProjectionMatrix: null
	,rightProjectionMatrix: null
	,leftViewMatrix: null
	,rightViewMatrix: null
	,width: null
	,height: null
	,vrWidth: null
	,vrHeight: null
	,getVRDisplays: function() {
		var _gthis = this;
		var vrDisplayInstance = navigator.getVRDisplays();
		vrDisplayInstance.then(function(displays) {
			if(displays.length > 0) {
				_gthis.frameData = new VRFrameData();
				_gthis.vrDisplay = displays[0];
				_gthis.vrDisplay.depthNear = 0.1;
				_gthis.vrDisplay.depthFar = 1024.0;
				var leftEye = _gthis.vrDisplay.getEyeParameters("left");
				var rightEye = _gthis.vrDisplay.getEyeParameters("right");
				_gthis.width = kha_SystemImpl.khanvas.width;
				_gthis.height = kha_SystemImpl.khanvas.height;
				_gthis.vrWidth = Math.max(leftEye.renderWidth,rightEye.renderWidth) * 2 | 0;
				_gthis.vrHeight = Math.max(leftEye.renderHeight,rightEye.renderHeight) | 0;
			} else {
				haxe_Log.trace("There are no VR displays connected.",{ fileName : "VrInterface.hx", lineNumber : 56, className : "kha.js.vr.VrInterface", methodName : "getVRDisplays"});
			}
		});
	}
	,onVRRequestPresent: function() {
		var _gthis = this;
		try {
			this.vrDisplay.requestPresent([{ source : kha_SystemImpl.khanvas}]).then(function() {
				_gthis.onResize();
				_gthis.vrDisplay.requestAnimationFrame($bind(_gthis,_gthis.onAnimationFrame));
			});
		} catch( err ) {
			if (err instanceof js__$Boot_HaxeError) err = err.val;
			haxe_Log.trace("Failed to requestPresent.",{ fileName : "VrInterface.hx", lineNumber : 68, className : "kha.js.vr.VrInterface", methodName : "onVRRequestPresent"});
			haxe_Log.trace(err,{ fileName : "VrInterface.hx", lineNumber : 69, className : "kha.js.vr.VrInterface", methodName : "onVRRequestPresent"});
		}
	}
	,onVRExitPresent: function() {
		var _gthis = this;
		try {
			this.vrDisplay.exitPresent([{ source : kha_SystemImpl.khanvas}]).then(function() {
				_gthis.onResize();
			});
		} catch( err ) {
			if (err instanceof js__$Boot_HaxeError) err = err.val;
			haxe_Log.trace("Failed to exitPresent.",{ fileName : "VrInterface.hx", lineNumber : 79, className : "kha.js.vr.VrInterface", methodName : "onVRExitPresent"});
			haxe_Log.trace(err,{ fileName : "VrInterface.hx", lineNumber : 80, className : "kha.js.vr.VrInterface", methodName : "onVRExitPresent"});
		}
	}
	,onResetPose: function() {
		try {
			this.vrDisplay.resetPose();
		} catch( err ) {
			if (err instanceof js__$Boot_HaxeError) err = err.val;
			haxe_Log.trace("Failed to resetPose",{ fileName : "VrInterface.hx", lineNumber : 88, className : "kha.js.vr.VrInterface", methodName : "onResetPose"});
			haxe_Log.trace(err,{ fileName : "VrInterface.hx", lineNumber : 89, className : "kha.js.vr.VrInterface", methodName : "onResetPose"});
		}
	}
	,onAnimationFrame: function(timestamp) {
		if(this.vrDisplay != null && this.vrDisplay.isPresenting) {
			this.vrDisplay.requestAnimationFrame($bind(this,this.onAnimationFrame));
			this.vrDisplay.getFrameData(this.frameData);
			this.leftProjectionMatrix = this.createMatrixFromArray(this.frameData.leftProjectionMatrix);
			this.leftViewMatrix = this.createMatrixFromArray(this.frameData.leftViewMatrix);
			this.rightProjectionMatrix = this.createMatrixFromArray(this.frameData.rightProjectionMatrix);
			this.rightViewMatrix = this.createMatrixFromArray(this.frameData.rightViewMatrix);
			this.vrDisplay.submitFrame();
		}
	}
	,onResize: function() {
		if(this.vrDisplay != null && this.vrDisplay.isPresenting) {
			kha_SystemImpl.khanvas.width = this.vrWidth;
			kha_SystemImpl.khanvas.height = this.vrHeight;
		} else {
			kha_SystemImpl.khanvas.width = this.width;
			kha_SystemImpl.khanvas.height = this.height;
		}
	}
	,GetSensorState: function() {
		return this.GetPredictedSensorState(0.0);
	}
	,GetPredictedSensorState: function(time) {
		var result = new kha_vr_SensorState();
		result.Predicted = new kha_vr_PoseState();
		result.Recorded = result.Predicted;
		result.Predicted.AngularAcceleration = new kha_math_Vector3();
		result.Predicted.AngularVelocity = new kha_math_Vector3();
		result.Predicted.LinearAcceleration = new kha_math_Vector3();
		result.Predicted.LinearVelocity = new kha_math_Vector3();
		result.Predicted.TimeInSeconds = time;
		result.Predicted.Pose = new kha_vr_Pose();
		result.Predicted.Pose.Orientation = new kha_math_Quaternion();
		result.Predicted.Pose.Position = new kha_math_Vector3();
		var mPose = this.frameData.pose;
		if(mPose != null) {
			result.Predicted.AngularVelocity = this.createVectorFromArray(mPose.angularVelocity);
			result.Predicted.AngularAcceleration = this.createVectorFromArray(mPose.angularAcceleration);
			result.Predicted.LinearVelocity = this.createVectorFromArray(mPose.linearVelocity);
			result.Predicted.LinearAcceleration = this.createVectorFromArray(mPose.linearAcceleration);
			result.Predicted.Pose.Orientation = this.createQuaternion(mPose.orientation);
			result.Predicted.Pose.Position = this.createVectorFromArray(mPose.position);
		}
		return result;
	}
	,WarpSwapBlack: function() {
	}
	,WarpSwapLoadingIcon: function() {
	}
	,WarpSwap: function(parms) {
	}
	,IsPresenting: function() {
		if(this.vrDisplay != null) {
			return this.vrDisplay.isPresenting;
		}
		return false;
	}
	,IsVrEnabled: function() {
		return this.vrEnabled;
	}
	,GetTimeInSeconds: function() {
		return kha_Scheduler.time();
	}
	,GetProjectionMatrix: function(eye) {
		if(eye == 0) {
			return this.leftProjectionMatrix;
		} else {
			return this.rightProjectionMatrix;
		}
	}
	,GetViewMatrix: function(eye) {
		if(eye == 0) {
			return this.leftViewMatrix;
		} else {
			return this.rightViewMatrix;
		}
	}
	,createMatrixFromArray: function(array) {
		var matrix = new kha_math_FastMatrix4(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1);
		matrix._00 = array[0];
		matrix._01 = array[1];
		matrix._02 = array[2];
		matrix._03 = array[3];
		matrix._10 = array[4];
		matrix._11 = array[5];
		matrix._12 = array[6];
		matrix._13 = array[7];
		matrix._20 = array[8];
		matrix._21 = array[9];
		matrix._22 = array[10];
		matrix._23 = array[11];
		matrix._30 = array[12];
		matrix._31 = array[13];
		matrix._32 = array[14];
		matrix._33 = array[15];
		return matrix;
	}
	,createVectorFromArray: function(array) {
		var vector = new kha_math_Vector3(0,0,0);
		if(array != null) {
			vector.x = array[0];
			vector.y = array[1];
			vector.z = array[2];
		}
		return vector;
	}
	,createQuaternion: function(array) {
		var quaternion = new kha_math_Quaternion(0,0,0,0);
		if(array != null) {
			quaternion.set_x(array[0]);
			quaternion.set_y(array[1]);
			quaternion.set_z(array[2]);
			quaternion.set_w(array[3]);
		}
		return quaternion;
	}
	,__class__: kha_js_vr_VrInterface
});
var kha_math_FastMatrix3 = function(_00,_10,_20,_01,_11,_21,_02,_12,_22) {
	this._00 = _00;
	this._10 = _10;
	this._20 = _20;
	this._01 = _01;
	this._11 = _11;
	this._21 = _21;
	this._02 = _02;
	this._12 = _12;
	this._22 = _22;
};
$hxClasses["kha.math.FastMatrix3"] = kha_math_FastMatrix3;
kha_math_FastMatrix3.__name__ = true;
kha_math_FastMatrix3.fromMatrix3 = function(m) {
	return new kha_math_FastMatrix3(m._00,m._10,m._20,m._01,m._11,m._21,m._02,m._12,m._22);
};
kha_math_FastMatrix3.prototype = {
	_00: null
	,_10: null
	,_20: null
	,_01: null
	,_11: null
	,_21: null
	,_02: null
	,_12: null
	,_22: null
	,__class__: kha_math_FastMatrix3
};
var kha_math_FastMatrix4 = function(_00,_10,_20,_30,_01,_11,_21,_31,_02,_12,_22,_32,_03,_13,_23,_33) {
	this._00 = _00;
	this._10 = _10;
	this._20 = _20;
	this._30 = _30;
	this._01 = _01;
	this._11 = _11;
	this._21 = _21;
	this._31 = _31;
	this._02 = _02;
	this._12 = _12;
	this._22 = _22;
	this._32 = _32;
	this._03 = _03;
	this._13 = _13;
	this._23 = _23;
	this._33 = _33;
};
$hxClasses["kha.math.FastMatrix4"] = kha_math_FastMatrix4;
kha_math_FastMatrix4.__name__ = true;
kha_math_FastMatrix4.fromMatrix4 = function(m) {
	return new kha_math_FastMatrix4(m._00,m._10,m._20,m._30,m._01,m._11,m._21,m._31,m._02,m._12,m._22,m._32,m._03,m._13,m._23,m._33);
};
kha_math_FastMatrix4.orthogonalProjection = function(left,right,bottom,top,zn,zf) {
	var tx = -(right + left) / (right - left);
	var ty = -(top + bottom) / (top - bottom);
	var tz = -(zf + zn) / (zf - zn);
	return new kha_math_FastMatrix4(2 / (right - left),0,0,tx,0,2 / (top - bottom),0,ty,0,0,-2 / (zf - zn),tz,0,0,0,1);
};
kha_math_FastMatrix4.perspectiveProjection = function(fovY,aspect,zn,zf) {
	var uh = 1.0 / Math.tan(fovY / 2);
	var uw = uh / aspect;
	return new kha_math_FastMatrix4(uw,0,0,0,0,uh,0,0,0,0,(zf + zn) / (zn - zf),2 * zf * zn / (zn - zf),0,0,-1,0);
};
kha_math_FastMatrix4.lookAt = function(eye,at,up) {
	var zaxis = new kha_math_FastVector3(at.x - eye.x,at.y - eye.y,at.z - eye.z);
	zaxis.set_length(1);
	var _x = zaxis.y * up.z - zaxis.z * up.y;
	var _y = zaxis.z * up.x - zaxis.x * up.z;
	var _z = zaxis.x * up.y - zaxis.y * up.x;
	var xaxis = new kha_math_FastVector3(_x,_y,_z);
	xaxis.set_length(1);
	var yaxis_z;
	var yaxis_y;
	var yaxis_x;
	var _x1 = xaxis.y * zaxis.z - xaxis.z * zaxis.y;
	var _y1 = xaxis.z * zaxis.x - xaxis.x * zaxis.z;
	var _z1 = xaxis.x * zaxis.y - xaxis.y * zaxis.x;
	yaxis_x = _x1;
	yaxis_y = _y1;
	yaxis_z = _z1;
	return new kha_math_FastMatrix4(xaxis.x,xaxis.y,xaxis.z,-(xaxis.x * eye.x + xaxis.y * eye.y + xaxis.z * eye.z),yaxis_x,yaxis_y,yaxis_z,-(yaxis_x * eye.x + yaxis_y * eye.y + yaxis_z * eye.z),-zaxis.x,-zaxis.y,-zaxis.z,zaxis.x * eye.x + zaxis.y * eye.y + zaxis.z * eye.z,0,0,0,1);
};
kha_math_FastMatrix4.prototype = {
	_00: null
	,_10: null
	,_20: null
	,_30: null
	,_01: null
	,_11: null
	,_21: null
	,_31: null
	,_02: null
	,_12: null
	,_22: null
	,_32: null
	,_03: null
	,_13: null
	,_23: null
	,_33: null
	,__class__: kha_math_FastMatrix4
};
var kha_math_FastVector2 = function(x,y) {
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.x = x;
	this.y = y;
};
$hxClasses["kha.math.FastVector2"] = kha_math_FastVector2;
kha_math_FastVector2.__name__ = true;
kha_math_FastVector2.fromVector2 = function(v) {
	return new kha_math_FastVector2(v.x,v.y);
};
kha_math_FastVector2.prototype = {
	x: null
	,y: null
	,get_length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y);
	}
	,set_length: function(length) {
		var currentLength = this.get_length();
		if(currentLength == 0) {
			return 0;
		}
		var mul = length / currentLength;
		this.x *= mul;
		this.y *= mul;
		return length;
	}
	,toString: function() {
		return "FastVector2(" + this.x + ", " + this.y + ")";
	}
	,__class__: kha_math_FastVector2
};
var kha_math_FastVector3 = function(x,y,z) {
	if(z == null) {
		z = 0;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.x = x;
	this.y = y;
	this.z = z;
};
$hxClasses["kha.math.FastVector3"] = kha_math_FastVector3;
kha_math_FastVector3.__name__ = true;
kha_math_FastVector3.fromVector3 = function(v) {
	return new kha_math_FastVector3(v.x,v.y,v.z);
};
kha_math_FastVector3.prototype = {
	x: null
	,y: null
	,z: null
	,get_length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
	}
	,set_length: function(length) {
		var currentLength = this.get_length();
		if(currentLength == 0) {
			return 0;
		}
		var mul = length / currentLength;
		this.x *= mul;
		this.y *= mul;
		this.z *= mul;
		return length;
	}
	,toString: function() {
		return "FastVector3(" + this.x + ", " + this.y + ", " + this.z + ")";
	}
	,__class__: kha_math_FastVector3
};
var kha_math_FastVector4 = function(x,y,z,w) {
	if(w == null) {
		w = 1;
	}
	if(z == null) {
		z = 0;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.x = x;
	this.y = y;
	this.z = z;
	this.w = w;
};
$hxClasses["kha.math.FastVector4"] = kha_math_FastVector4;
kha_math_FastVector4.__name__ = true;
kha_math_FastVector4.fromVector4 = function(v) {
	return new kha_math_FastVector4(v.x,v.y,v.z,v.w);
};
kha_math_FastVector4.prototype = {
	x: null
	,y: null
	,z: null
	,w: null
	,get_length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);
	}
	,set_length: function(length) {
		var currentLength = this.get_length();
		if(currentLength == 0) {
			return 0;
		}
		var mul = length / currentLength;
		this.x *= mul;
		this.y *= mul;
		this.z *= mul;
		this.w *= mul;
		return length;
	}
	,toString: function() {
		return "FastVector4(" + this.x + ", " + this.y + ", " + this.z + ", " + this.w + ")";
	}
	,__class__: kha_math_FastVector4
};
var kha_math_Matrix3 = function(_00,_10,_20,_01,_11,_21,_02,_12,_22) {
	this._00 = _00;
	this._10 = _10;
	this._20 = _20;
	this._01 = _01;
	this._11 = _11;
	this._21 = _21;
	this._02 = _02;
	this._12 = _12;
	this._22 = _22;
};
$hxClasses["kha.math.Matrix3"] = kha_math_Matrix3;
kha_math_Matrix3.__name__ = true;
kha_math_Matrix3.prototype = {
	_00: null
	,_10: null
	,_20: null
	,_01: null
	,_11: null
	,_21: null
	,_02: null
	,_12: null
	,_22: null
	,__class__: kha_math_Matrix3
};
var kha_math_Matrix4 = function(_00,_10,_20,_30,_01,_11,_21,_31,_02,_12,_22,_32,_03,_13,_23,_33) {
	this._00 = _00;
	this._10 = _10;
	this._20 = _20;
	this._30 = _30;
	this._01 = _01;
	this._11 = _11;
	this._21 = _21;
	this._31 = _31;
	this._02 = _02;
	this._12 = _12;
	this._22 = _22;
	this._32 = _32;
	this._03 = _03;
	this._13 = _13;
	this._23 = _23;
	this._33 = _33;
};
$hxClasses["kha.math.Matrix4"] = kha_math_Matrix4;
kha_math_Matrix4.__name__ = true;
kha_math_Matrix4.orthogonalProjection = function(left,right,bottom,top,zn,zf) {
	var tx = -(right + left) / (right - left);
	var ty = -(top + bottom) / (top - bottom);
	var tz = -(zf + zn) / (zf - zn);
	return new kha_math_Matrix4(2 / (right - left),0,0,tx,0,2 / (top - bottom),0,ty,0,0,-2 / (zf - zn),tz,0,0,0,1);
};
kha_math_Matrix4.perspectiveProjection = function(fovY,aspect,zn,zf) {
	var uh = 1.0 / Math.tan(fovY / 2);
	var uw = uh / aspect;
	return new kha_math_Matrix4(uw,0,0,0,0,uh,0,0,0,0,(zf + zn) / (zn - zf),2 * zf * zn / (zn - zf),0,0,-1,0);
};
kha_math_Matrix4.lookAt = function(eye,at,up) {
	var zaxis = new kha_math_Vector3(at.x - eye.x,at.y - eye.y,at.z - eye.z);
	zaxis.set_length(1);
	var _x = zaxis.y * up.z - zaxis.z * up.y;
	var _y = zaxis.z * up.x - zaxis.x * up.z;
	var _z = zaxis.x * up.y - zaxis.y * up.x;
	var xaxis = new kha_math_Vector3(_x,_y,_z);
	xaxis.set_length(1);
	var yaxis_z;
	var yaxis_y;
	var yaxis_x;
	var _x1 = xaxis.y * zaxis.z - xaxis.z * zaxis.y;
	var _y1 = xaxis.z * zaxis.x - xaxis.x * zaxis.z;
	var _z1 = xaxis.x * zaxis.y - xaxis.y * zaxis.x;
	yaxis_x = _x1;
	yaxis_y = _y1;
	yaxis_z = _z1;
	return new kha_math_Matrix4(xaxis.x,xaxis.y,xaxis.z,-(xaxis.x * eye.x + xaxis.y * eye.y + xaxis.z * eye.z),yaxis_x,yaxis_y,yaxis_z,-(yaxis_x * eye.x + yaxis_y * eye.y + yaxis_z * eye.z),-zaxis.x,-zaxis.y,-zaxis.z,zaxis.x * eye.x + zaxis.y * eye.y + zaxis.z * eye.z,0,0,0,1);
};
kha_math_Matrix4.prototype = {
	_00: null
	,_10: null
	,_20: null
	,_30: null
	,_01: null
	,_11: null
	,_21: null
	,_31: null
	,_02: null
	,_12: null
	,_22: null
	,_32: null
	,_03: null
	,_13: null
	,_23: null
	,_33: null
	,__class__: kha_math_Matrix4
};
var kha_math_Quaternion = function(x,y,z,w) {
	if(w == null) {
		w = 1;
	}
	if(z == null) {
		z = 0;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.values = [];
	this.values.push(x);
	this.values.push(y);
	this.values.push(z);
	this.values.push(w);
};
$hxClasses["kha.math.Quaternion"] = kha_math_Quaternion;
kha_math_Quaternion.__name__ = true;
kha_math_Quaternion.fromAxisAngle = function(axis,radians) {
	var q = new kha_math_Quaternion();
	q.set_w(Math.cos(radians / 2.0));
	q.set_x(q.set_y(q.set_z(Math.sin(radians / 2.0))));
	var _g = q;
	_g.set_x(_g.get_x() * axis.x);
	var _g1 = q;
	_g1.set_y(_g1.get_y() * axis.y);
	var _g2 = q;
	_g2.set_z(_g2.get_z() * axis.z);
	return q;
};
kha_math_Quaternion.prototype = {
	values: null
	,slerp: function(t,q) {
		var epsilon = 0.0005;
		var dot = this.dot(q);
		if(dot > 1 - epsilon) {
			var result = q.add(this.sub(q).scaled(t));
			result.normalize();
			return result;
		}
		if(dot < 0) {
			dot = 0;
		}
		if(dot > 1) {
			dot = 1;
		}
		var theta0 = Math.acos(dot);
		var theta = theta0 * t;
		var q2 = q.sub(this.scaled(dot));
		q2.normalize();
		var result1 = this.scaled(Math.cos(theta)).add(q2.scaled(Math.sin(theta)));
		result1.normalize();
		return result1;
	}
	,rotated: function(b) {
		var q = new kha_math_Quaternion();
		q.set_w(this.get_w() * b.get_w() - this.get_x() * b.get_x() - this.get_y() * b.get_y() - this.get_z() * b.get_z());
		q.set_x(this.get_w() * b.get_x() + this.get_x() * b.get_w() + this.get_y() * b.get_z() - this.get_z() * b.get_y());
		q.set_y(this.get_w() * b.get_y() + this.get_y() * b.get_w() + this.get_z() * b.get_x() - this.get_x() * b.get_z());
		q.set_z(this.get_w() * b.get_z() + this.get_z() * b.get_w() + this.get_x() * b.get_y() - this.get_y() * b.get_x());
		q.normalize();
		return q;
	}
	,scaled: function(scale) {
		return new kha_math_Quaternion(this.get_x() * scale,this.get_y() * scale,this.get_z() * scale,this.get_w() * scale);
	}
	,scale: function(scale) {
		this.set_x(this.get_x() * scale);
		this.set_y(this.get_y() * scale);
		this.set_z(this.get_z() * scale);
		this.set_w(this.get_w() * scale);
	}
	,matrix: function() {
		var s = 2.0;
		var xs = this.get_x() * s;
		var ys = this.get_y() * s;
		var zs = this.get_z() * s;
		var wx = this.get_w() * xs;
		var wy = this.get_w() * ys;
		var wz = this.get_w() * zs;
		var xx = this.get_x() * xs;
		var xy = this.get_x() * ys;
		var xz = this.get_x() * zs;
		var yy = this.get_y() * ys;
		var yz = this.get_y() * zs;
		var zz = this.get_z() * zs;
		return new kha_math_Matrix4(1 - (yy + zz),xy - wz,xz + wy,0,xy + wz,1 - (xx + zz),yz - wx,0,xz - wy,yz + wx,1 - (xx + yy),0,0,0,0,1);
	}
	,get: function(index) {
		return this.values[index];
	}
	,set: function(index,value) {
		this.values[index] = value;
	}
	,get_x: function() {
		return this.values[0];
	}
	,set_x: function(value) {
		return this.values[0] = value;
	}
	,get_y: function() {
		return this.values[1];
	}
	,set_y: function(value) {
		return this.values[1] = value;
	}
	,get_z: function() {
		return this.values[2];
	}
	,set_z: function(value) {
		return this.values[2] = value;
	}
	,get_w: function() {
		return this.values[3];
	}
	,set_w: function(value) {
		return this.values[3] = value;
	}
	,get_length: function() {
		return Math.sqrt(this.get_x() * this.get_x() + this.get_y() * this.get_y() + this.get_z() * this.get_z() + this.get_w() * this.get_w());
	}
	,set_length: function(length) {
		if(this.get_length() == 0) {
			return 0;
		}
		var mul = length / this.get_length();
		var _g = this;
		_g.set_x(_g.get_x() * mul);
		var _g1 = this;
		_g1.set_y(_g1.get_y() * mul);
		var _g2 = this;
		_g2.set_z(_g2.get_z() * mul);
		return length;
	}
	,addVector: function(vec) {
		var result = new kha_math_Quaternion(this.get_x(),this.get_y(),this.get_z(),this.get_w());
		var q1 = new kha_math_Quaternion(0,vec.x,vec.y,vec.z);
		q1 = q1.mult(result);
		var _g = result;
		_g.set_x(_g.get_x() + q1.get_x() * 0.5);
		var _g1 = result;
		_g1.set_y(_g1.get_y() + q1.get_y() * 0.5);
		var _g2 = result;
		_g2.set_z(_g2.get_z() + q1.get_z() * 0.5);
		var _g3 = result;
		_g3.set_w(_g3.get_w() + q1.get_w() * 0.5);
		return result;
	}
	,add: function(q) {
		return new kha_math_Quaternion(this.get_x() + q.get_x(),this.get_y() + q.get_y(),this.get_z() + q.get_z(),this.get_w() + q.get_w());
	}
	,sub: function(q) {
		return new kha_math_Quaternion(this.get_x() - q.get_x(),this.get_y() - q.get_y(),this.get_z() - q.get_z(),this.get_w() - q.get_w());
	}
	,mult: function(r) {
		var q = new kha_math_Quaternion();
		q.set_x(this.get_w() * r.get_x() + this.get_x() * r.get_w() + this.get_y() * r.get_z() - this.get_z() * r.get_y());
		q.set_y(this.get_w() * r.get_y() - this.get_x() * r.get_z() + this.get_y() * r.get_w() + this.get_z() * r.get_x());
		q.set_z(this.get_w() * r.get_z() + this.get_x() * r.get_y() - this.get_y() * r.get_x() + this.get_z() * r.get_w());
		q.set_w(this.get_w() * r.get_w() - this.get_x() * r.get_x() - this.get_y() * r.get_y() - this.get_z() * r.get_z());
		return q;
	}
	,normalize: function() {
		this.scale(1.0 / this.get_length());
	}
	,dot: function(q) {
		return this.get_x() * q.get_x() + this.get_y() * q.get_y() + this.get_z() * q.get_z() + this.get_w() * q.get_w();
	}
	,getEulerAngles: function(A1,A2,A3,S,D) {
		if(D == null) {
			D = 1;
		}
		if(S == null) {
			S = 1;
		}
		var result = new kha_math_Vector3();
		var Q = [];
		Q[0] = this.get_x();
		Q[1] = this.get_y();
		Q[2] = this.get_z();
		var ww = this.get_w() * this.get_w();
		var Q11 = Q[A1] * Q[A1];
		var Q22 = Q[A2] * Q[A2];
		var Q33 = Q[A3] * Q[A3];
		var psign = -1;
		var SingularityRadius = 0.0000001;
		var PiOver2 = Math.PI / 2.0;
		if((A1 + 1) % 3 == A2 && (A2 + 1) % 3 == A3) {
			psign = 1;
		}
		var s2 = psign * 2.0 * (psign * this.get_w() * Q[A2] + Q[A1] * Q[A3]);
		if(s2 < -1 + SingularityRadius) {
			result.x = 0;
			result.y = -S * D * PiOver2;
			result.z = S * D * Math.atan2(2 * (psign * Q[A1] * Q[A2] + this.get_w() * Q[A3]),ww + Q22 - Q11 - Q33);
		} else if(s2 > 1 - SingularityRadius) {
			result.x = 0;
			result.y = S * D * PiOver2;
			result.z = S * D * Math.atan2(2 * (psign * Q[A1] * Q[A2] + this.get_w() * Q[A3]),ww + Q22 - Q11 - Q33);
		} else {
			result.x = -S * D * Math.atan2(-2 * (this.get_w() * Q[A1] - psign * Q[A2] * Q[A3]),ww + Q33 - Q11 - Q22);
			result.y = S * D * Math.asin(s2);
			result.z = S * D * Math.atan2(2 * (this.get_w() * Q[A3] - psign * Q[A1] * Q[A2]),ww + Q11 - Q22 - Q33);
		}
		return result;
	}
	,__class__: kha_math_Quaternion
};
var kha_math_Vector2 = function(x,y) {
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.x = x;
	this.y = y;
};
$hxClasses["kha.math.Vector2"] = kha_math_Vector2;
kha_math_Vector2.__name__ = true;
kha_math_Vector2.prototype = {
	x: null
	,y: null
	,get_length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y);
	}
	,set_length: function(length) {
		var currentLength = this.get_length();
		if(currentLength == 0) {
			return 0;
		}
		var mul = length / currentLength;
		this.x *= mul;
		this.y *= mul;
		return length;
	}
	,__class__: kha_math_Vector2
};
var kha_math_Vector3 = function(x,y,z) {
	if(z == null) {
		z = 0;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.x = x;
	this.y = y;
	this.z = z;
};
$hxClasses["kha.math.Vector3"] = kha_math_Vector3;
kha_math_Vector3.__name__ = true;
kha_math_Vector3.prototype = {
	x: null
	,y: null
	,z: null
	,get_length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
	}
	,set_length: function(length) {
		var currentLength = this.get_length();
		if(currentLength == 0) {
			return 0;
		}
		var mul = length / currentLength;
		this.x *= mul;
		this.y *= mul;
		this.z *= mul;
		return length;
	}
	,__class__: kha_math_Vector3
};
var kha_math_Vector4 = function(x,y,z,w) {
	if(w == null) {
		w = 1;
	}
	if(z == null) {
		z = 0;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.x = x;
	this.y = y;
	this.z = z;
	this.w = w;
};
$hxClasses["kha.math.Vector4"] = kha_math_Vector4;
kha_math_Vector4.__name__ = true;
kha_math_Vector4.prototype = {
	x: null
	,y: null
	,z: null
	,w: null
	,get_length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);
	}
	,set_length: function(length) {
		var currentLength = this.get_length();
		if(currentLength == 0) {
			return 0;
		}
		var mul = length / currentLength;
		this.x *= mul;
		this.y *= mul;
		this.z *= mul;
		this.w *= mul;
		return length;
	}
	,__class__: kha_math_Vector4
};
var kha_network_Client = function() { };
$hxClasses["kha.network.Client"] = kha_network_Client;
kha_network_Client.__name__ = true;
kha_network_Client.prototype = {
	get_id: null
	,id: null
	,send: null
	,receive: null
	,onClose: null
	,__class__: kha_network_Client
};
var kha_network_ControllerBuilder = function() { };
$hxClasses["kha.network.ControllerBuilder"] = kha_network_ControllerBuilder;
kha_network_ControllerBuilder.__name__ = true;
var kha_network_Entity = function() { };
$hxClasses["kha.network.Entity"] = kha_network_Entity;
kha_network_Entity.__name__ = true;
kha_network_Entity.prototype = {
	_id: null
	,_size: null
	,_send: null
	,_receive: null
	,__class__: kha_network_Entity
};
var kha_network_LocalClient = function(id) {
	this.myId = id;
};
$hxClasses["kha.network.LocalClient"] = kha_network_LocalClient;
kha_network_LocalClient.__name__ = true;
kha_network_LocalClient.__interfaces__ = [kha_network_Client];
kha_network_LocalClient.prototype = {
	myId: null
	,send: function(bytes,mandatory) {
	}
	,receive: function(receiver) {
	}
	,onClose: function(close) {
	}
	,controllers: null
	,get_controllers: function() {
		return null;
	}
	,id: null
	,get_id: function() {
		return this.myId;
	}
	,__class__: kha_network_LocalClient
};
var kha_network_Network = function(url,port,errorCallback,closeCallback) {
	this.open = false;
	var _gthis = this;
	this.socket = new WebSocket("ws://" + url + ":" + port);
	this.socket.onerror = function(error) {
		haxe_Log.trace("Network error: " + error,{ fileName : "Network.hx", lineNumber : 14, className : "kha.network.Network", methodName : "new"});
		errorCallback();
	};
	this.socket.binaryType = "arraybuffer";
	this.socket.onopen = function() {
		_gthis.open = true;
	};
	this.socket.onclose = function(event) {
		haxe_Log.trace("Network connection closed",{ fileName : "Network.hx", lineNumber : 22, className : "kha.network.Network", methodName : "new"});
		closeCallback();
	};
};
$hxClasses["kha.network.Network"] = kha_network_Network;
kha_network_Network.__name__ = true;
kha_network_Network.prototype = {
	socket: null
	,open: null
	,send: function(bytes,mandatory) {
		if(this.open) {
			this.socket.send(bytes.b.bufferValue);
		}
	}
	,listen: function(listener) {
		this.socket.onmessage = function(message) {
			var tmp = haxe_io_Bytes.ofData(message.data);
			listener(tmp);
		};
	}
	,__class__: kha_network_Network
};
var kha_network_State = function(time,data) {
	this.time = time;
	this.data = data;
};
$hxClasses["kha.network.State"] = kha_network_State;
kha_network_State.__name__ = true;
kha_network_State.prototype = {
	time: null
	,data: null
	,__class__: kha_network_State
};
var kha_network_Session = function(maxPlayers,address,port) {
	this.ping = 1;
	this.currentPlayers = 0;
	this.controllers = new haxe_ds_IntMap();
	this.entities = new haxe_ds_IntMap();
	kha_network_Session.instance = this;
	this.maxPlayers = maxPlayers;
	this.address = address;
	this.port = port;
};
$hxClasses["kha.network.Session"] = kha_network_Session;
kha_network_Session.__name__ = true;
kha_network_Session.the = function() {
	return kha_network_Session.instance;
};
kha_network_Session.prototype = {
	entities: null
	,controllers: null
	,maxPlayers: null
	,currentPlayers: null
	,ping: null
	,address: null
	,port: null
	,startCallback: null
	,refusedCallback: null
	,resetCallback: null
	,localClient: null
	,network: null
	,updateTaskId: null
	,pingTaskId: null
	,me: null
	,get_me: function() {
		return this.localClient;
	}
	,addEntity: function(entity) {
		var this1 = this.entities;
		var key = entity._id();
		this1.h[key] = entity;
	}
	,addController: function(controller) {
		haxe_Log.trace("Adding controller id " + controller._id(),{ fileName : "Session.hx", lineNumber : 88, className : "kha.network.Session", methodName : "addController"});
		controller._inputBufferIndex = 0;
		var this1 = this.controllers;
		var key = controller._id();
		this1.h[key] = controller;
	}
	,sendControllerUpdate: function(id,bytes) {
		if(this.controllers.h.hasOwnProperty(id)) {
			if(this.controllers.h[id]._inputBuffer.length < this.controllers.h[id]._inputBufferIndex + 4 + bytes.length) {
				var newBuffer = new haxe_io_Bytes(new ArrayBuffer(this.controllers.h[id]._inputBufferIndex + 4 + bytes.length));
				newBuffer.blit(0,this.controllers.h[id]._inputBuffer,0,this.controllers.h[id]._inputBufferIndex);
				this.controllers.h[id]._inputBuffer = newBuffer;
			}
			this.controllers.h[id]._inputBuffer.setInt32(this.controllers.h[id]._inputBufferIndex,bytes.length);
			this.controllers.h[id]._inputBuffer.blit(this.controllers.h[id]._inputBufferIndex + 4,bytes,0,bytes.length);
			this.controllers.h[id]._inputBufferIndex += 4 + bytes.length;
		}
	}
	,sendPing: function() {
		var bytes = new haxe_io_Bytes(new ArrayBuffer(5));
		bytes.b[0] = 4;
		bytes.setFloat(1,kha_Scheduler.realTime());
		this.sendToServer(bytes);
	}
	,sendPlayerUpdate: function() {
	}
	,receive: function(bytes,client) {
		var _g = bytes.b[0];
		switch(_g) {
		case 0:
			var index = bytes.b[1];
			this.localClient = new kha_network_LocalClient(index);
			kha_Scheduler.resetTime();
			this.startCallback();
			break;
		case 1:
			var time = bytes.getDouble(1);
			var offset = 9;
			var entity = this.entities.iterator();
			while(entity.hasNext()) {
				var entity1 = entity.next();
				entity1._receive(offset,bytes);
				offset += entity1._size();
			}
			kha_Scheduler.back(time);
			break;
		case 3:
			var _g1 = bytes.b[1];
			switch(_g1) {
			case 0:
				break;
			case 1:
				this.executeRPC(bytes);
				break;
			}
			break;
		case 4:
			var sendTime = bytes.getFloat(1);
			this.ping = kha_Scheduler.realTime() - sendTime;
			break;
		case 5:
			this.refusedCallback();
			break;
		case 6:
			this.currentPlayers = bytes.getInt32(1);
			break;
		}
	}
	,executeRPC: function(bytes) {
		var args = [];
		var syncId = bytes.getInt32(2);
		var index = 6;
		var classnamelength = bytes.getUInt16(index);
		index += 2;
		var classname = "";
		var _g1 = 0;
		var _g = classnamelength;
		while(_g1 < _g) {
			var i = _g1++;
			classname += String.fromCharCode(bytes.b[index]);
			++index;
		}
		var methodnamelength = bytes.getUInt16(index);
		index += 2;
		var methodname = "";
		var _g11 = 0;
		var _g2 = methodnamelength;
		while(_g11 < _g2) {
			var i1 = _g11++;
			methodname += String.fromCharCode(bytes.b[index]);
			++index;
		}
		while(index < bytes.length) {
			var type = bytes.b[index];
			++index;
			switch(type) {
			case 66:
				var value = bytes.b[index] == 1;
				++index;
				haxe_Log.trace("Bool: " + (value == null ? "null" : "" + value),{ fileName : "Session.hx", lineNumber : 288, className : "kha.network.Session", methodName : "executeRPC"});
				args.push(value);
				break;
			case 70:
				var value1 = bytes.getDouble(index);
				index += 8;
				haxe_Log.trace("Float: " + value1,{ fileName : "Session.hx", lineNumber : 293, className : "kha.network.Session", methodName : "executeRPC"});
				args.push(value1);
				break;
			case 73:
				var value2 = bytes.getInt32(index);
				index += 4;
				haxe_Log.trace("Int: " + value2,{ fileName : "Session.hx", lineNumber : 298, className : "kha.network.Session", methodName : "executeRPC"});
				args.push(value2);
				break;
			case 83:
				var length = bytes.getUInt16(index);
				index += 2;
				var str = "";
				var _g12 = 0;
				var _g3 = length;
				while(_g12 < _g3) {
					var i2 = _g12++;
					str += String.fromCharCode(bytes.b[index]);
					++index;
				}
				haxe_Log.trace("String: " + str,{ fileName : "Session.hx", lineNumber : 308, className : "kha.network.Session", methodName : "executeRPC"});
				args.push(str);
				break;
			default:
				haxe_Log.trace("Unknown argument type.",{ fileName : "Session.hx", lineNumber : 311, className : "kha.network.Session", methodName : "executeRPC"});
			}
		}
		if(syncId == -1) {
			Reflect.field(Type.resolveClass(classname),methodname + "_remotely").apply(null,args);
		} else {
			var o = kha_network_SyncBuilder.objects[syncId];
			Reflect.field(kha_network_SyncBuilder.objects[syncId],methodname + "_remotely").apply(o,args);
		}
	}
	,waitForStart: function(callback,refuseCallback,errorCallback,closeCallback,resCallback) {
		var _gthis = this;
		this.startCallback = callback;
		this.refusedCallback = refuseCallback;
		this.resetCallback = resCallback;
		this.network = new kha_network_Network(this.address,this.port,errorCallback,function() {
			closeCallback();
			_gthis.reset();
		});
		this.network.listen(function(bytes) {
			_gthis.receive(bytes);
		});
		this.updateTaskId = kha_Scheduler.addFrameTask($bind(this,this.update),0);
		this.ping = 1;
		this.pingTaskId = kha_Scheduler.addTimeTask($bind(this,this.sendPing),0,1);
	}
	,reset: function() {
		kha_Scheduler.removeFrameTask(this.updateTaskId);
		kha_Scheduler.removeTimeTask(this.pingTaskId);
		this.currentPlayers = 0;
		this.ping = 1;
		this.controllers = new haxe_ds_IntMap();
		this.entities = new haxe_ds_IntMap();
		this.resetCallback();
	}
	,update: function() {
		var controller = this.controllers.iterator();
		while(controller.hasNext()) {
			var controller1 = controller.next();
			if(controller1._inputBufferIndex > 0) {
				var bytes = new haxe_io_Bytes(new ArrayBuffer(22 + controller1._inputBufferIndex));
				bytes.b[0] = 2;
				bytes.setInt32(1,controller1._id());
				bytes.setDouble(5,kha_Scheduler.realTime());
				bytes.setInt32(13,kha_System.windowWidth(0));
				bytes.setInt32(17,kha_System.windowHeight(0));
				var v = kha_System.get_screenRotation()[1];
				bytes.b[21] = v & 255;
				bytes.blit(22,controller1._inputBuffer,0,controller1._inputBufferIndex);
				this.sendToServer(bytes);
				controller1._inputBufferIndex = 0;
			}
		}
	}
	,sendToServer: function(bytes) {
		this.network.send(bytes,false);
	}
	,__class__: kha_network_Session
};
var kha_network_SyncBuilder = function() { };
$hxClasses["kha.network.SyncBuilder"] = kha_network_SyncBuilder;
kha_network_SyncBuilder.__name__ = true;
var kha_simd_Float32x4 = function(_0,_1,_2,_3) {
	this._0 = _0;
	this._1 = _1;
	this._2 = _2;
	this._3 = _3;
};
$hxClasses["kha.simd.Float32x4"] = kha_simd_Float32x4;
kha_simd_Float32x4.__name__ = true;
kha_simd_Float32x4.create = function() {
	return new kha_simd_Float32x4(0,0,0,0);
};
kha_simd_Float32x4.loadAllFast = function(t) {
	return new kha_simd_Float32x4(t,t,t,t);
};
kha_simd_Float32x4.load = function(a,b,c,d) {
	return new kha_simd_Float32x4(a,b,c,d);
};
kha_simd_Float32x4.loadFast = function(a,b,c,d) {
	return new kha_simd_Float32x4(a,b,c,d);
};
kha_simd_Float32x4.get = function(t,index) {
	var value = 0;
	switch(index) {
	case 0:
		value = t._0;
		break;
	case 1:
		value = t._1;
		break;
	case 2:
		value = t._2;
		break;
	case 3:
		value = t._3;
		break;
	}
	return value;
};
kha_simd_Float32x4.getFast = function(t,index) {
	switch(index) {
	case 0:
		return t._0;
	case 1:
		return t._1;
	case 2:
		return t._2;
	case 3:
		return t._3;
	}
	return 0;
};
kha_simd_Float32x4.abs = function(t) {
	return new kha_simd_Float32x4(Math.abs(t._0),Math.abs(t._1),Math.abs(t._2),Math.abs(t._3));
};
kha_simd_Float32x4.add = function(a,b) {
	return new kha_simd_Float32x4(a._0 + b._0,a._1 + b._1,a._2 + b._2,a._3 + b._3);
};
kha_simd_Float32x4.div = function(a,b) {
	return new kha_simd_Float32x4(a._0 / b._0,a._1 / b._1,a._2 / b._2,a._3 / b._3);
};
kha_simd_Float32x4.mul = function(a,b) {
	return new kha_simd_Float32x4(a._0 * b._0,a._1 * b._1,a._2 * b._2,a._3 * b._3);
};
kha_simd_Float32x4.neg = function(t) {
	return new kha_simd_Float32x4(-t._0,-t._1,-t._2,-t._3);
};
kha_simd_Float32x4.reciprocalApproximation = function(t) {
	return new kha_simd_Float32x4(0,0,0,0);
};
kha_simd_Float32x4.reciprocalSqrtApproximation = function(t) {
	return new kha_simd_Float32x4(0,0,0,0);
};
kha_simd_Float32x4.sub = function(a,b) {
	return new kha_simd_Float32x4(a._0 - b._0,a._1 - b._1,a._2 - b._2,a._3 - b._3);
};
kha_simd_Float32x4.sqrt = function(t) {
	return new kha_simd_Float32x4(Math.sqrt(t._0),Math.sqrt(t._1),Math.sqrt(t._2),Math.sqrt(t._3));
};
kha_simd_Float32x4.prototype = {
	_0: null
	,_1: null
	,_2: null
	,_3: null
	,__class__: kha_simd_Float32x4
};
var kha_vr_Pose = function() {
	this.Orientation = new kha_math_Quaternion();
	this.Position = new kha_math_Vector3();
};
$hxClasses["kha.vr.Pose"] = kha_vr_Pose;
kha_vr_Pose.__name__ = true;
kha_vr_Pose.prototype = {
	Orientation: null
	,Position: null
	,__class__: kha_vr_Pose
};
var kha_vr_PoseState = function() {
};
$hxClasses["kha.vr.PoseState"] = kha_vr_PoseState;
kha_vr_PoseState.__name__ = true;
kha_vr_PoseState.prototype = {
	Pose: null
	,AngularVelocity: null
	,LinearVelocity: null
	,AngularAcceleration: null
	,LinearAcceleration: null
	,TimeInSeconds: null
	,__class__: kha_vr_PoseState
};
var kha_vr_SensorState = function() {
};
$hxClasses["kha.vr.SensorState"] = kha_vr_SensorState;
kha_vr_SensorState.__name__ = true;
kha_vr_SensorState.prototype = {
	Predicted: null
	,Recorded: null
	,Temperature: null
	,Status: null
	,__class__: kha_vr_SensorState
};
var kha_vr_TimeWarpImage = function() {
};
$hxClasses["kha.vr.TimeWarpImage"] = kha_vr_TimeWarpImage;
kha_vr_TimeWarpImage.__name__ = true;
kha_vr_TimeWarpImage.prototype = {
	Image: null
	,TexCoordsFromTanAngles: null
	,Pose: null
	,__class__: kha_vr_TimeWarpImage
};
var kha_vr_TimeWarpParms = function() {
};
$hxClasses["kha.vr.TimeWarpParms"] = kha_vr_TimeWarpParms;
kha_vr_TimeWarpParms.__name__ = true;
kha_vr_TimeWarpParms.prototype = {
	LeftImage: null
	,RightImage: null
	,LeftOverlay: null
	,RightOverlay: null
	,__class__: kha_vr_TimeWarpParms
};
var quake_CDAudio = function() { };
$hxClasses["quake.CDAudio"] = quake_CDAudio;
quake_CDAudio.__name__ = true;
quake_CDAudio.Init = function() {
	quake_Cmd.AddCommand("cd",quake_CDAudio.CD_f);
	if(quake_COM.CheckParm("-nocdaudio") != null) {
		return;
	}
	quake_CDAudio.known = [];
	var xhr = new XMLHttpRequest();
	var _g = 2;
	while(_g < 100) {
		var i = _g++;
		var track = "/music/track" + (i <= 9 ? "0" : "") + i + ".ogg";
		var j = quake_COM.searchpaths.length - 1;
		while(j >= 0) {
			xhr.open("HEAD",quake_COM.searchpaths[j].filename + track,false);
			xhr.send();
			if(xhr.status >= 200 && xhr.status <= 299) {
				quake_CDAudio.known[i - 2] = quake_COM.searchpaths[j].filename + track;
				break;
			}
			--j;
		}
		if(j < 0) {
			break;
		}
	}
	if(quake_CDAudio.known.length == 0) {
		return;
	}
	quake_CDAudio.initialized = quake_CDAudio.enabled = true;
	quake_CDAudio.Update();
	quake_Console.Print("CD Audio Initialized\n");
};
quake_CDAudio.Update = function() {
	if(!quake_CDAudio.initialized || !quake_CDAudio.enabled) {
		return;
	}
	if(quake_S.bgmvolume.value == quake_CDAudio.cdvolume) {
		return;
	}
	if(quake_S.bgmvolume.value < 0.0) {
		quake_S.bgmvolume.setValue(0.0);
	} else if(quake_S.bgmvolume.value > 1.0) {
		quake_S.bgmvolume.setValue(1.0);
	}
	quake_CDAudio.cdvolume = quake_S.bgmvolume.value;
	if(quake_CDAudio.cd != null) {
		quake_CDAudio.cd.volume = quake_CDAudio.cdvolume;
	}
};
quake_CDAudio.Play = function(track,looping) {
	if(!quake_CDAudio.initialized || !quake_CDAudio.enabled) {
		return;
	}
	track -= 2;
	if(quake_CDAudio.playTrack == track) {
		if(quake_CDAudio.cd != null) {
			quake_CDAudio.cd.loop = looping;
			if(looping && quake_CDAudio.cd.paused) {
				quake_CDAudio.cd.play();
			}
		}
		return;
	}
	if(track < 0 || track >= quake_CDAudio.known.length) {
		quake_Console.DPrint("CDAudio.Play: Bad track number " + (track + 2) + ".\n");
		return;
	}
	quake_CDAudio.Stop();
	quake_CDAudio.playTrack = track;
	quake_CDAudio.cd = new Audio(quake_CDAudio.known[track]);
	quake_CDAudio.cd.loop = looping;
	quake_CDAudio.cd.volume = quake_CDAudio.cdvolume;
	quake_CDAudio.cd.play();
};
quake_CDAudio.Stop = function() {
	if(!quake_CDAudio.initialized || !quake_CDAudio.enabled) {
		return;
	}
	if(quake_CDAudio.cd != null) {
		quake_CDAudio.cd.pause();
	}
	quake_CDAudio.playTrack = null;
	quake_CDAudio.cd = null;
};
quake_CDAudio.Pause = function() {
	if(!quake_CDAudio.initialized || !quake_CDAudio.enabled) {
		return;
	}
	if(quake_CDAudio.cd != null) {
		quake_CDAudio.cd.pause();
	}
};
quake_CDAudio.Resume = function() {
	if(!quake_CDAudio.initialized || !quake_CDAudio.enabled) {
		return;
	}
	if(quake_CDAudio.cd != null) {
		quake_CDAudio.cd.play();
	}
};
quake_CDAudio.CD_f = function() {
	if(!quake_CDAudio.initialized || quake_Cmd.argv.length <= 1) {
		return;
	}
	var command = quake_Cmd.argv[1].toLowerCase();
	switch(command) {
	case "info":
		quake_Console.Print(quake_CDAudio.known.length + " tracks\n");
		if(quake_CDAudio.cd != null) {
			if(!quake_CDAudio.cd.paused) {
				quake_Console.Print("Currently " + (quake_CDAudio.cd.loop ? "looping" : "playing") + " track " + (quake_CDAudio.playTrack + 2) + "\n");
			}
		}
		quake_Console.Print("Volume is " + quake_CDAudio.cdvolume + "\n");
		break;
	case "loop":
		quake_CDAudio.Play(quake_Q.atoi(quake_Cmd.argv[2]),true);
		break;
	case "off":
		quake_CDAudio.Stop();
		quake_CDAudio.enabled = false;
		break;
	case "on":
		quake_CDAudio.enabled = true;
		break;
	case "pause":
		quake_CDAudio.Pause();
		break;
	case "play":
		quake_CDAudio.Play(quake_Q.atoi(quake_Cmd.argv[2]),false);
		break;
	case "resume":
		quake_CDAudio.Resume();
		break;
	case "stop":
		quake_CDAudio.Stop();
		break;
	}
};
var quake__$CL_Beam = function() {
	this.entity = 0;
	this.model = null;
	this.endtime = 0;
	var this1 = new Float32Array(3);
	this.start = this1;
	var this2 = new Float32Array(3);
	this.end = this2;
};
$hxClasses["quake._CL.Beam"] = quake__$CL_Beam;
quake__$CL_Beam.__name__ = true;
quake__$CL_Beam.prototype = {
	entity: null
	,model: null
	,endtime: null
	,start: null
	,end: null
	,__class__: quake__$CL_Beam
};
var quake__$CL_ClientStatic = function() {
	this.state = 0;
	this.spawnparms = "";
	this.demonum = 0;
	this.message = new quake_MSG(8192);
};
$hxClasses["quake._CL.ClientStatic"] = quake__$CL_ClientStatic;
quake__$CL_ClientStatic.__name__ = true;
quake__$CL_ClientStatic.prototype = {
	state: null
	,spawnparms: null
	,demorecording: null
	,demoplayback: null
	,demonum: null
	,demos: null
	,demoname: null
	,demofile: null
	,demoofs: null
	,demosize: null
	,timedemo: null
	,td_startframe: null
	,td_lastframe: null
	,td_starttime: null
	,message: null
	,netcon: null
	,signon: null
	,forcetrack: null
	,__class__: quake__$CL_ClientStatic
};
var quake_ClientCmd = function() {
	this.upmove = 0.0;
	this.sidemove = 0.0;
	this.forwardmove = 0.0;
};
$hxClasses["quake.ClientCmd"] = quake_ClientCmd;
quake_ClientCmd.__name__ = true;
quake_ClientCmd.prototype = {
	forwardmove: null
	,sidemove: null
	,upmove: null
	,__class__: quake_ClientCmd
};
var quake__$CL_Score = function() {
	this.colors = 0;
	this.frags = 0;
	this.entertime = 0.0;
	this.name = "";
};
$hxClasses["quake._CL.Score"] = quake__$CL_Score;
quake__$CL_Score.__name__ = true;
quake__$CL_Score.prototype = {
	name: null
	,entertime: null
	,frags: null
	,colors: null
	,__class__: quake__$CL_Score
};
var quake__$CL_ClientState = function() {
	this.looptrack = 0;
	this.cdtrack = 0;
	this.viewent = new quake_Entity();
	this.viewentity = 0;
	this.last_received_message = 0.0;
	this.oldtime = 0.0;
	this.completed_time = 0.0;
	this.intermission = 0;
	this.crouch = 0.0;
	this.laststop = 0.0;
	this.driftmove = 0.0;
	this.pitchvel = 0.0;
	this.idealpitch = 0.0;
	var this1 = new Float32Array(3);
	this.punchangle = this1;
	this.cshifts = [[0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0]];
	this.faceanimtime = 0.0;
	this.item_gettime = [0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0];
	this.items = 0;
	this.stats = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];
	this.movemessages = 0;
	this.cmd = new quake_ClientCmd();
	var this11 = new Float32Array(3);
	this.velocity = this11;
	var this12 = new Float32Array(3);
	this.mvelocity1 = this12;
	var this13 = new Float32Array(3);
	this.mvelocity0 = this13;
	var this14 = new Float32Array(3);
	this.mviewangles1 = this14;
	var this15 = new Float32Array(3);
	this.mviewangles0 = this15;
	var this16 = new Float32Array(3);
	this.viewangles = this16;
	this.time = 0.0;
	this.mtime1 = 0.0;
	this.mtime0 = 0.0;
};
$hxClasses["quake._CL.ClientState"] = quake__$CL_ClientState;
quake__$CL_ClientState.__name__ = true;
quake__$CL_ClientState.prototype = {
	mtime0: null
	,mtime1: null
	,time: null
	,viewangles: null
	,mviewangles0: null
	,mviewangles1: null
	,mvelocity0: null
	,mvelocity1: null
	,velocity: null
	,cmd: null
	,movemessages: null
	,stats: null
	,items: null
	,item_gettime: null
	,faceanimtime: null
	,cshifts: null
	,punchangle: null
	,idealpitch: null
	,pitchvel: null
	,driftmove: null
	,laststop: null
	,crouch: null
	,intermission: null
	,completed_time: null
	,oldtime: null
	,last_received_message: null
	,viewentity: null
	,viewent: null
	,cdtrack: null
	,looptrack: null
	,inwater: null
	,paused: null
	,onground: null
	,nodrift: null
	,model_precache: null
	,sound_precache: null
	,maxclients: null
	,scores: null
	,gametype: null
	,levelname: null
	,worldmodel: null
	,viewheight: null
	,__class__: quake__$CL_ClientState
};
var quake__$CL_CShift_$Impl_$ = {};
$hxClasses["quake._CL.CShift_Impl_"] = quake__$CL_CShift_$Impl_$;
quake__$CL_CShift_$Impl_$.__name__ = true;
var quake_MSG = function(capacity,size) {
	if(size == null) {
		size = 0;
	}
	this.overflowed = false;
	this.allowoverflow = false;
	this.data = new ArrayBuffer(capacity);
	this.cursize = size;
};
$hxClasses["quake.MSG"] = quake_MSG;
quake_MSG.__name__ = true;
quake_MSG.BeginReading = function() {
	quake_MSG.readcount = 0;
	quake_MSG.badread = false;
};
quake_MSG.ReadChar = function() {
	if(quake_MSG.readcount >= quake_NET.message.cursize) {
		quake_MSG.badread = true;
		return -1;
	}
	var c = new Int8Array(quake_NET.message.data,quake_MSG.readcount,1)[0];
	++quake_MSG.readcount;
	return c;
};
quake_MSG.ReadByte = function() {
	if(quake_MSG.readcount >= quake_NET.message.cursize) {
		quake_MSG.badread = true;
		return -1;
	}
	var c = new Uint8Array(quake_NET.message.data,quake_MSG.readcount,1)[0];
	++quake_MSG.readcount;
	return c;
};
quake_MSG.ReadShort = function() {
	if(quake_MSG.readcount + 2 > quake_NET.message.cursize) {
		quake_MSG.badread = true;
		return -1;
	}
	var c = new DataView(quake_NET.message.data).getInt16(quake_MSG.readcount,true);
	quake_MSG.readcount += 2;
	return c;
};
quake_MSG.ReadLong = function() {
	if(quake_MSG.readcount + 4 > quake_NET.message.cursize) {
		quake_MSG.badread = true;
		return -1;
	}
	var c = new DataView(quake_NET.message.data).getInt32(quake_MSG.readcount,true);
	quake_MSG.readcount += 4;
	return c;
};
quake_MSG.ReadFloat = function() {
	if(quake_MSG.readcount + 4 > quake_NET.message.cursize) {
		quake_MSG.badread = true;
		return -1;
	}
	var f = new DataView(quake_NET.message.data).getFloat32(quake_MSG.readcount,true);
	quake_MSG.readcount += 4;
	return f;
};
quake_MSG.ReadString = function() {
	var string_b = "";
	var _g = 0;
	while(_g < 2048) {
		var l = _g++;
		var c = quake_MSG.ReadByte();
		if(c <= 0) {
			break;
		}
		string_b += String.fromCharCode(c);
	}
	return string_b;
};
quake_MSG.ReadCoord = function() {
	return quake_MSG.ReadShort() * 0.125;
};
quake_MSG.ReadAngle = function() {
	return quake_MSG.ReadChar() * 1.40625;
};
quake_MSG.ReadVector = function() {
	var x = quake_MSG.ReadShort() * 0.125;
	var y = quake_MSG.ReadShort() * 0.125;
	var z = quake_MSG.ReadShort() * 0.125;
	var this1 = new Float32Array(3);
	var v = this1;
	v[0] = x;
	v[1] = y;
	v[2] = z;
	return v;
};
quake_MSG.prototype = {
	data: null
	,cursize: null
	,allowoverflow: null
	,overflowed: null
	,GetSpace: function(length) {
		if(this.cursize + length > this.data.byteLength) {
			if(!this.allowoverflow) {
				quake_Sys.Error("SZ.GetSpace: overflow without allowoverflow set");
			}
			if(length > this.data.byteLength) {
				quake_Sys.Error("SZ.GetSpace: " + length + " is > full buffer size");
			}
			this.overflowed = true;
			quake_Console.Print("SZ.GetSpace: overflow\n");
			this.cursize = 0;
		}
		var oldsize = this.cursize;
		this.cursize += length;
		return oldsize;
	}
	,Write: function(a,length) {
		new Uint8Array(this.data,this.GetSpace(length),length).set(a.subarray(0,length));
	}
	,WriteChar: function(c) {
		new DataView(this.data).setInt8(this.GetSpace(1),c);
	}
	,WriteByte: function(c) {
		new DataView(this.data).setUint8(this.GetSpace(1),c);
	}
	,WriteShort: function(c) {
		new DataView(this.data).setInt16(this.GetSpace(2),c,true);
	}
	,WriteLong: function(c) {
		new DataView(this.data).setInt32(this.GetSpace(4),c,true);
	}
	,WriteFloat: function(f) {
		new DataView(this.data).setFloat32(this.GetSpace(4),f,true);
	}
	,WriteString: function(s) {
		if(s != null) {
			this.Write(new Uint8Array(quake_Q.strmem(s)),s.length);
		}
		this.WriteChar(0);
	}
	,WriteCoord: function(f) {
		this.WriteShort(f * 8 | 0);
	}
	,WriteAngle: function(f) {
		this.WriteByte((f * 256 / 360 | 0) & 255);
	}
	,Print: function(s) {
		var buf = new Uint8Array(this.data);
		var dest;
		if(this.cursize != 0) {
			if(buf[this.cursize - 1] == 0) {
				dest = this.GetSpace(s.length - 1) - 1;
			} else {
				dest = this.GetSpace(s.length);
			}
		} else {
			dest = this.GetSpace(s.length);
		}
		var _g1 = 0;
		var _g = s.length;
		while(_g1 < _g) {
			var i = _g1++;
			buf[dest + i] = HxOverrides.cca(s,i);
		}
	}
	,__class__: quake_MSG
};
var quake_CL = function() { };
$hxClasses["quake.CL"] = quake_CL;
quake_CL.__name__ = true;
quake_CL.StopPlayback = function() {
	if(!quake_CL.cls.demoplayback) {
		return;
	}
	quake_CL.cls.demoplayback = false;
	quake_CL.cls.demofile = null;
	quake_CL.cls.state = 0;
	if(quake_CL.cls.timedemo) {
		quake_CL.FinishTimeDemo();
	}
};
quake_CL.WriteDemoMessage = function() {
	var len = quake_CL.cls.demoofs + 16 + quake_NET.message.cursize;
	if(quake_CL.cls.demofile.byteLength < len) {
		var src = new Uint8Array(quake_CL.cls.demofile,0,quake_CL.cls.demoofs);
		quake_CL.cls.demofile = new ArrayBuffer(quake_CL.cls.demofile.byteLength + 16384);
		new Uint8Array(quake_CL.cls.demofile).set(src);
	}
	var f = new DataView(quake_CL.cls.demofile,quake_CL.cls.demoofs,16);
	f.setInt32(0,quake_NET.message.cursize,true);
	f.setFloat32(4,quake_CL.state.viewangles[0],true);
	f.setFloat32(8,quake_CL.state.viewangles[1],true);
	f.setFloat32(12,quake_CL.state.viewangles[2],true);
	new Uint8Array(quake_CL.cls.demofile).set(new Uint8Array(quake_NET.message.data,0,quake_NET.message.cursize),quake_CL.cls.demoofs + 16);
	quake_CL.cls.demoofs = len;
};
quake_CL.GetMessage = function() {
	if(quake_CL.cls.demoplayback) {
		if(quake_CL.cls.signon == 4) {
			if(quake_CL.cls.timedemo) {
				if(quake_Host.framecount == quake_CL.cls.td_lastframe) {
					return 0;
				}
				quake_CL.cls.td_lastframe = quake_Host.framecount;
				if(quake_Host.framecount == quake_CL.cls.td_startframe + 1) {
					quake_CL.cls.td_starttime = quake_Host.realtime;
				}
			} else if(quake_CL.state.time <= quake_CL.state.mtime0) {
				return 0;
			}
		}
		if(quake_CL.cls.demoofs + 16 >= quake_CL.cls.demosize) {
			quake_CL.StopPlayback();
			return 0;
		}
		var view = new DataView(quake_CL.cls.demofile);
		quake_NET.message.cursize = view.getUint32(quake_CL.cls.demoofs,true);
		if(quake_NET.message.cursize > 8000) {
			quake_Sys.Error("Demo message > MAX_MSGLEN");
		}
		quake_CL.state.mviewangles1.set(quake_CL.state.mviewangles0);
		var this1 = quake_CL.state.mviewangles0;
		var y = view.getFloat32(quake_CL.cls.demoofs + 8,true);
		var z = view.getFloat32(quake_CL.cls.demoofs + 12,true);
		this1[0] = view.getFloat32(quake_CL.cls.demoofs + 4,true);
		this1[1] = y;
		this1[2] = z;
		quake_CL.cls.demoofs += 16;
		if(quake_CL.cls.demoofs + quake_NET.message.cursize > quake_CL.cls.demosize) {
			quake_CL.StopPlayback();
			return 0;
		}
		var src = new Uint8Array(quake_CL.cls.demofile,quake_CL.cls.demoofs,quake_NET.message.cursize);
		var dest = new Uint8Array(quake_NET.message.data,0,quake_NET.message.cursize);
		var _g1 = 0;
		var _g = quake_NET.message.cursize;
		while(_g1 < _g) {
			var i = _g1++;
			dest[i] = src[i];
		}
		quake_CL.cls.demoofs += quake_NET.message.cursize;
		return 1;
	}
	var r = null;
	while(true) {
		r = quake_NET.GetMessage(quake_CL.cls.netcon);
		if(r != 1 && r != 2) {
			return r;
		}
		if(quake_NET.message.cursize == 1 && new Uint8Array(quake_NET.message.data,0,1)[0] == 1) {
			quake_Console.Print("<-- server to client keepalive\n");
		} else {
			break;
		}
	}
	if(quake_CL.cls.demorecording) {
		quake_CL.WriteDemoMessage();
	}
	return r;
};
quake_CL.Stop_f = function() {
	if(quake_Cmd.client) {
		return;
	}
	if(!quake_CL.cls.demorecording) {
		quake_Console.Print("Not recording a demo.\n");
		return;
	}
	quake_NET.message.cursize = 0;
	quake_NET.message.WriteByte(2);
	quake_CL.WriteDemoMessage();
	if(!quake_COM.WriteFile(quake_CL.cls.demoname,new Uint8Array(quake_CL.cls.demofile),quake_CL.cls.demoofs)) {
		quake_Console.Print("ERROR: couldn't open.\n");
	}
	quake_CL.cls.demofile = null;
	quake_CL.cls.demorecording = false;
	quake_Console.Print("Completed demo\n");
};
quake_CL.Record_f = function() {
	var c = quake_Cmd.argv.length;
	if(c <= 1 || c >= 5) {
		quake_Console.Print("record <demoname> [<map> [cd track]]\n");
		return;
	}
	if(quake_Cmd.argv[1].indexOf("..") != -1) {
		quake_Console.Print("Relative pathnames are not allowed.\n");
		return;
	}
	if(c == 2 && quake_CL.cls.state == 2) {
		quake_Console.Print("Can not record - already connected to server\nClient demo recording must be started before connecting\n");
		return;
	}
	if(c == 4) {
		quake_CL.cls.forcetrack = quake_Q.atoi(quake_Cmd.argv[3]);
		quake_Console.Print("Forcing CD track to " + quake_CL.cls.forcetrack);
	} else {
		quake_CL.cls.forcetrack = -1;
	}
	quake_CL.cls.demoname = quake_COM.DefaultExtension(quake_Cmd.argv[1],".dem");
	if(c >= 3) {
		quake_Cmd.ExecuteString("map " + quake_Cmd.argv[2]);
	}
	quake_Console.Print("recording to " + quake_CL.cls.demoname + ".\n");
	quake_CL.cls.demofile = new ArrayBuffer(16384);
	var track = Std.string(quake_CL.cls.forcetrack) + "\n";
	var dest = new Uint8Array(quake_CL.cls.demofile,0,track.length);
	var _g1 = 0;
	var _g = track.length;
	while(_g1 < _g) {
		var i = _g1++;
		dest[i] = HxOverrides.cca(track,i);
	}
	quake_CL.cls.demoofs = track.length;
	quake_CL.cls.demorecording = true;
};
quake_CL.PlayDemo_f = function() {
	if(quake_Cmd.client) {
		return;
	}
	if(quake_Cmd.argv.length != 2) {
		quake_Console.Print("playdemo <demoname> : plays a demo\n");
		return;
	}
	quake_CL.Disconnect();
	var name = quake_COM.DefaultExtension(quake_Cmd.argv[1],".dem");
	quake_Console.Print("Playing demo from " + name + ".\n");
	var demofile = quake_COM.LoadFile(name);
	if(demofile == null) {
		quake_Console.Print("ERROR: couldn't open.\n");
		quake_CL.cls.demonum = -1;
		quake_SCR.disabled_for_loading = false;
		return;
	}
	quake_CL.cls.demofile = demofile;
	var demofile1 = new Uint8Array(demofile);
	quake_CL.cls.demosize = demofile1.length;
	quake_CL.cls.demoplayback = true;
	quake_CL.cls.state = 2;
	quake_CL.cls.forcetrack = 0;
	var i = 0;
	var neg = false;
	while(i < demofile1.length) {
		var c = demofile1[i];
		if(c == 10) {
			break;
		}
		if(c == 45) {
			neg = true;
		} else {
			quake_CL.cls.forcetrack = quake_CL.cls.forcetrack * 10 + c - 48;
		}
		++i;
	}
	if(neg) {
		quake_CL.cls.forcetrack = -quake_CL.cls.forcetrack;
	}
	quake_CL.cls.demoofs = i + 1;
};
quake_CL.FinishTimeDemo = function() {
	quake_CL.cls.timedemo = false;
	var frames = quake_Host.framecount - quake_CL.cls.td_startframe - 1;
	var time = quake_Host.realtime - quake_CL.cls.td_starttime;
	if(time == 0.0) {
		time = 1.0;
	}
	quake_Console.Print(frames + " frames " + time.toFixed(1) + " seconds " + (frames / time).toFixed(1) + " fps\n");
};
quake_CL.TimeDemo_f = function() {
	if(quake_Cmd.client) {
		return;
	}
	if(quake_Cmd.argv.length != 2) {
		quake_Console.Print("timedemo <demoname> : gets demo speeds\n");
		return;
	}
	quake_CL.PlayDemo_f();
	quake_CL.cls.timedemo = true;
	quake_CL.cls.td_startframe = quake_Host.framecount;
	quake_CL.cls.td_lastframe = -1;
};
quake_CL.KeyDown = function() {
	var b = Reflect.field(quake_CL.kbutton,quake_Cmd.argv[0].substring(1));
	if(b == null) {
		return;
	}
	var b1 = quake_CL.kbuttons[b];
	var k;
	if(quake_Cmd.argv[1] != null) {
		k = quake_Q.atoi(quake_Cmd.argv[1]);
	} else {
		k = -1;
	}
	if(k == b1.down[0] || k == b1.down[1]) {
		return;
	}
	if(b1.down[0] == 0) {
		b1.down[0] = k;
	} else if(b1.down[1] == 0) {
		b1.down[1] = k;
	} else {
		quake_Console.Print("Three keys down for a button!\n");
		return;
	}
	if((b1.state & 1) == 0) {
		b1.state |= 3;
	}
};
quake_CL.KeyUp = function() {
	var b = Reflect.field(quake_CL.kbutton,quake_Cmd.argv[0].substring(1));
	if(b == null) {
		return;
	}
	var b1 = quake_CL.kbuttons[b];
	var k;
	if(quake_Cmd.argv[1] != null) {
		k = quake_Q.atoi(quake_Cmd.argv[1]);
	} else {
		var tmp = b1.down[1] = 0;
		b1.down[0] = tmp;
		b1.state = 4;
		return;
	}
	if(b1.down[0] == k) {
		b1.down[0] = 0;
	} else if(b1.down[1] == k) {
		b1.down[1] = 0;
	} else {
		return;
	}
	if(b1.down[0] != 0 || b1.down[1] != 0) {
		return;
	}
	if((b1.state & 1) != 0) {
		b1.state = b1.state - 1 | 4;
	}
};
quake_CL.MLookUp = function() {
	quake_CL.KeyUp();
	if((quake_CL.kbuttons[quake_CL.kbutton.mlook].state & 1) == 0 && quake_CL.lookspring.value != 0) {
		quake_V.StartPitchDrift();
	}
};
quake_CL.Impulse = function() {
	quake_CL.impulse = quake_Q.atoi(quake_Cmd.argv[1]);
};
quake_CL.KeyState = function(key) {
	var key1 = quake_CL.kbuttons[key];
	var down = key1.state & 1;
	key1.state &= 1;
	if((key1.state & 2) != 0) {
		if((key1.state & 4) != 0) {
			if(down != 0) {
				return 0.75;
			} else {
				return 0.25;
			}
		}
		if(down != 0) {
			return 0.5;
		} else {
			return 0.0;
		}
	}
	if((key1.state & 4) != 0) {
		return 0.0;
	}
	if(down != 0) {
		return 1.0;
	} else {
		return 0.0;
	}
};
quake_CL.AdjustAngles = function() {
	var speed = quake_Host.frametime;
	if((quake_CL.kbuttons[quake_CL.kbutton.speed].state & 1) != 0) {
		speed *= quake_CL.anglespeedkey.value;
	}
	var angles = quake_CL.state.viewangles;
	if((quake_CL.kbuttons[quake_CL.kbutton.strafe].state & 1) == 0) {
		var _g = angles;
		_g[1] += speed * quake_CL.yawspeed.value * (quake_CL.KeyState(quake_CL.kbutton.left) - quake_CL.KeyState(quake_CL.kbutton.right));
		angles[1] = quake__$Vec_Vec_$Impl_$.Anglemod(angles[1]);
	}
	if((quake_CL.kbuttons[quake_CL.kbutton.klook].state & 1) != 0) {
		quake_V.StopPitchDrift();
		var _g1 = angles;
		_g1[0] += speed * quake_CL.pitchspeed.value * (quake_CL.KeyState(quake_CL.kbutton.back) - quake_CL.KeyState(quake_CL.kbutton.forward));
	}
	var up = quake_CL.KeyState(quake_CL.kbutton.lookup);
	var down = quake_CL.KeyState(quake_CL.kbutton.lookdown);
	if(up != 0.0 || down != 0.0) {
		var _g2 = angles;
		_g2[0] += speed * quake_CL.pitchspeed.value * (down - up);
		quake_V.StopPitchDrift();
	}
	if(angles[0] > 80.0) {
		angles[0] = 80.0;
	} else if(angles[0] < -70.0) {
		angles[0] = -70.0;
	}
	if(angles[2] > 50.0) {
		angles[2] = 50.0;
	} else if(angles[2] < -50.0) {
		angles[2] = -50.0;
	}
};
quake_CL.BaseMove = function() {
	if(quake_CL.cls.signon != 4) {
		return;
	}
	quake_CL.AdjustAngles();
	var cmd = quake_CL.state.cmd;
	cmd.sidemove = quake_CL.sidespeed.value * (quake_CL.KeyState(quake_CL.kbutton.moveright) - quake_CL.KeyState(quake_CL.kbutton.moveleft));
	if((quake_CL.kbuttons[quake_CL.kbutton.strafe].state & 1) != 0) {
		cmd.sidemove += quake_CL.sidespeed.value * (quake_CL.KeyState(quake_CL.kbutton.right) - quake_CL.KeyState(quake_CL.kbutton.left));
	}
	cmd.upmove = quake_CL.upspeed.value * (quake_CL.KeyState(quake_CL.kbutton.moveup) - quake_CL.KeyState(quake_CL.kbutton.movedown));
	if((quake_CL.kbuttons[quake_CL.kbutton.klook].state & 1) == 0) {
		cmd.forwardmove = quake_CL.forwardspeed.value * quake_CL.KeyState(quake_CL.kbutton.forward) - quake_CL.backspeed.value * quake_CL.KeyState(quake_CL.kbutton.back);
	} else {
		cmd.forwardmove = 0.0;
	}
	if((quake_CL.kbuttons[quake_CL.kbutton.speed].state & 1) != 0) {
		cmd.forwardmove *= quake_CL.movespeedkey.value;
		cmd.sidemove *= quake_CL.movespeedkey.value;
		cmd.upmove *= quake_CL.movespeedkey.value;
	}
};
quake_CL.SendMove = function() {
	var buf = quake_CL.sendmovebuf;
	buf.cursize = 0;
	buf.WriteByte(3);
	buf.WriteFloat(quake_CL.state.mtime0);
	buf.WriteByte((quake_CL.state.viewangles[0] * 256 / 360 | 0) & 255);
	buf.WriteByte((quake_CL.state.viewangles[1] * 256 / 360 | 0) & 255);
	buf.WriteByte((quake_CL.state.viewangles[2] * 256 / 360 | 0) & 255);
	buf.WriteShort(quake_CL.state.cmd.forwardmove | 0);
	buf.WriteShort(quake_CL.state.cmd.sidemove | 0);
	buf.WriteShort(quake_CL.state.cmd.upmove | 0);
	var bits = 0;
	if((quake_CL.kbuttons[quake_CL.kbutton.attack].state & 3) != 0) {
		++bits;
	}
	quake_CL.kbuttons[quake_CL.kbutton.attack].state &= 5;
	if((quake_CL.kbuttons[quake_CL.kbutton.jump].state & 3) != 0) {
		bits += 2;
	}
	quake_CL.kbuttons[quake_CL.kbutton.jump].state &= 5;
	buf.WriteByte(bits);
	buf.WriteByte(quake_CL.impulse);
	quake_CL.impulse = 0;
	if(quake_CL.cls.demoplayback) {
		return;
	}
	if(++quake_CL.state.movemessages <= 2) {
		return;
	}
	if(quake_NET.SendUnreliableMessage(quake_CL.cls.netcon,buf) == -1) {
		quake_Console.Print("CL.SendMove: lost server connection\n");
		quake_CL.Disconnect();
	}
};
quake_CL.InitInput = function() {
	var commands = ["moveup","movedown","left","right","forward","back","lookup","lookdown","strafe","moveleft","moveright","speed","attack","use","jump","klook"];
	var _g = 0;
	while(_g < commands.length) {
		var cmd = commands[_g];
		++_g;
		quake_Cmd.AddCommand("+" + cmd,quake_CL.KeyDown);
		quake_Cmd.AddCommand("-" + cmd,quake_CL.KeyUp);
	}
	quake_Cmd.AddCommand("impulse",quake_CL.Impulse);
	quake_Cmd.AddCommand("+mlook",quake_CL.KeyDown);
	quake_Cmd.AddCommand("-mlook",quake_CL.MLookUp);
	var _g1 = 0;
	var _g2 = quake_CL.kbutton.num;
	while(_g1 < _g2) {
		var i = _g1++;
		quake_CL.kbuttons[i] = { down : [0,0], state : 0};
	}
};
quake_CL.Rcon_f = function() {
	if(quake_CL.rcon_password.string.length == 0) {
		quake_Console.Print("You must set 'rcon_password' before\nissuing an rcon command.\n");
		return;
	}
	var to = null;
	if(quake_CL.cls.state == 2 && quake_CL.cls.netcon != null) {
		if(quake_NET.drivers[quake_CL.cls.netcon.driver] == quake_NET_$WEBS) {
			to = quake_CL.cls.netcon.address.substring(5);
		}
	}
	if(to == null) {
		if(quake_CL.rcon_address.string.length == 0) {
			quake_Console.Print("You must either be connected,\nor set the 'rcon_address' cvar\nto issue rcon commands\n");
			return;
		}
		to = quake_CL.rcon_address.string;
	}
	var pw;
	try {
		pw = quake_Q.btoa(new Uint8Array(quake_Q.strmem("quake:" + quake_CL.rcon_password.string)));
	} catch( e ) {
		return;
	}
	var message = "";
	var i;
	var _g1 = 1;
	var _g = quake_Cmd.argv.length;
	while(_g1 < _g) {
		var i1 = _g1++;
		message += quake_Cmd.argv[i1] + " ";
	}
	try {
		message = encodeURIComponent(message);
	} catch( e1 ) {
		return;
	}
	var xhr = new XMLHttpRequest();
	xhr.open("HEAD","http://" + to + "/rcon/" + message);
	xhr.setRequestHeader("Authorization","Basic " + pw);
	xhr.send();
};
quake_CL.ClearState = function() {
	if(!quake_SV.server.active) {
		quake_Console.DPrint("Clearing memory\n");
		quake_Mod.ClearAll();
		quake_CL.cls.signon = 0;
	}
	quake_CL.state = new quake__$CL_ClientState();
	quake_CL.static_entities = [];
	quake_CL.cls.message.cursize = 0;
	quake_CL.entities = [];
	quake_CL.dlights = [];
	var _g = 0;
	while(_g < 32) {
		var i = _g++;
		quake_CL.dlights.push(new quake_DLight());
	}
	quake_CL.lightstyle = [];
	var _g1 = 0;
	while(_g1 < 64) {
		var i1 = _g1++;
		quake_CL.lightstyle.push("");
	}
	quake_CL.beams = [];
	var _g2 = 0;
	while(_g2 < 24) {
		var i2 = _g2++;
		quake_CL.beams.push(new quake__$CL_Beam());
	}
};
quake_CL.Disconnect = function() {
	quake_S.StopAllSounds();
	if(quake_CL.cls.demoplayback) {
		quake_CL.StopPlayback();
	} else if(quake_CL.cls.state == 2) {
		if(quake_CL.cls.demorecording) {
			quake_CL.Stop_f();
		}
		quake_Console.DPrint("Sending clc_disconnect\n");
		quake_CL.cls.message.cursize = 0;
		quake_CL.cls.message.WriteByte(2);
		quake_NET.SendUnreliableMessage(quake_CL.cls.netcon,quake_CL.cls.message);
		quake_CL.cls.message.cursize = 0;
		quake_NET.Close(quake_CL.cls.netcon);
		quake_CL.cls.state = 0;
		if(quake_SV.server.active) {
			quake_Host.ShutdownServer(false);
		}
	}
	quake_CL.cls.demoplayback = quake_CL.cls.timedemo = false;
	quake_CL.cls.signon = 0;
};
quake_CL.Connect = function(sock) {
	quake_CL.cls.netcon = sock;
	quake_Console.DPrint("CL.Connect: connected to " + quake_CL.host + "\n");
	quake_CL.cls.demonum = -1;
	quake_CL.cls.state = 2;
	quake_CL.cls.signon = 0;
};
quake_CL.EstablishConnection = function(host) {
	if(quake_CL.cls.demoplayback) {
		return;
	}
	quake_CL.Disconnect();
	quake_CL.host = host;
	var sock = quake_NET.Connect(host);
	if(sock == null) {
		quake_Host.Error("CL.EstablishConnection: connect failed\n");
	}
	quake_CL.Connect(sock);
};
quake_CL.SignonReply = function() {
	quake_Console.DPrint("CL.SignonReply: " + quake_CL.cls.signon + "\n");
	var _g = quake_CL.cls.signon;
	switch(_g) {
	case 1:
		quake_CL.cls.message.WriteByte(4);
		quake_CL.cls.message.WriteString("prespawn");
		break;
	case 2:
		quake_CL.cls.message.WriteByte(4);
		quake_CL.cls.message.WriteString("name \"" + quake_CL.$name.string + "\"\n");
		quake_CL.cls.message.WriteByte(4);
		var col = quake_CL.color.value | 0;
		quake_CL.cls.message.WriteString("color " + (col >> 4) + " " + (col & 15) + "\n");
		quake_CL.cls.message.WriteByte(4);
		quake_CL.cls.message.WriteString("spawn " + quake_CL.cls.spawnparms);
		break;
	case 3:
		quake_CL.cls.message.WriteByte(4);
		quake_CL.cls.message.WriteString("begin");
		break;
	case 4:
		quake_SCR.EndLoadingPlaque();
		break;
	}
};
quake_CL.NextDemo = function() {
	if(quake_CL.cls.demonum == -1) {
		return;
	}
	quake_SCR.BeginLoadingPlaque();
	if(quake_CL.cls.demonum >= quake_CL.cls.demos.length) {
		if(quake_CL.cls.demos.length == 0) {
			quake_Console.Print("No demos listed with startdemos\n");
			quake_CL.cls.demonum = -1;
			return;
		}
		quake_CL.cls.demonum = 0;
	}
	quake_Cmd.text = "playdemo " + quake_CL.cls.demos[quake_CL.cls.demonum++] + "\n" + quake_Cmd.text;
};
quake_CL.PrintEntities_f = function() {
	var _g1 = 0;
	var _g = quake_CL.entities.length;
	while(_g1 < _g) {
		var i = _g1++;
		var ent = quake_CL.entities[i];
		if(i <= 9) {
			quake_Console.Print("  " + i + ":");
		} else if(i <= 99) {
			quake_Console.Print(" " + i + ":");
		} else {
			quake_Console.Print(i + ":");
		}
		if(ent.model == null) {
			quake_Console.Print("EMPTY\n");
			continue;
		}
		quake_Console.Print(ent.model.name + (ent.frame <= 9 ? ": " : ":") + ent.frame + "  (" + ent.origin[0].toFixed(1) + "," + ent.origin[1].toFixed(1) + "," + ent.origin[2].toFixed(1) + ") [" + ent.angles[0].toFixed(1) + " " + ent.angles[1].toFixed(1) + " " + ent.angles[2].toFixed(1) + "]\n");
	}
};
quake_CL.AllocDlight = function(key) {
	var dl = null;
	if(key != 0) {
		var _g = 0;
		var _g1 = quake_CL.dlights;
		while(_g < _g1.length) {
			var light = _g1[_g];
			++_g;
			if(light.key == key) {
				dl = light;
				break;
			}
		}
	}
	if(dl == null) {
		var _g2 = 0;
		var _g11 = quake_CL.dlights;
		while(_g2 < _g11.length) {
			var light1 = _g11[_g2];
			++_g2;
			if(light1.die < quake_CL.state.time) {
				dl = light1;
				break;
			}
		}
		if(dl == null) {
			dl = quake_CL.dlights[0];
		}
	}
	dl.key = key;
	dl.origin.set(quake__$Vec_Vec_$Impl_$.origin);
	dl.radius = 0;
	dl.minlight = 0;
	dl.decay = 0;
	dl.die = 0;
	return dl;
};
quake_CL.DecayLights = function() {
	var time = quake_CL.state.time - quake_CL.state.oldtime;
	var _g = 0;
	var _g1 = quake_CL.dlights;
	while(_g < _g1.length) {
		var dl = _g1[_g];
		++_g;
		if(dl.die < quake_CL.state.time || dl.radius == 0.0) {
			continue;
		}
		dl.radius -= time * dl.decay;
		if(dl.radius < 0.0) {
			dl.radius = 0.0;
		}
	}
};
quake_CL.LerpPoint = function() {
	var f = quake_CL.state.mtime0 - quake_CL.state.mtime1;
	if(f == 0.0 || quake_CL.nolerp.value != 0 || quake_CL.cls.timedemo || quake_SV.server.active) {
		quake_CL.state.time = quake_CL.state.mtime0;
		return 1.0;
	}
	if(f > 0.1) {
		quake_CL.state.mtime1 = quake_CL.state.mtime0 - 0.1;
		f = 0.1;
	}
	var frac = (quake_CL.state.time - quake_CL.state.mtime1) / f;
	if(frac < 0.0) {
		if(frac < -0.01) {
			quake_CL.state.time = quake_CL.state.mtime1;
		}
		return 0.0;
	}
	if(frac > 1.0) {
		if(frac > 1.01) {
			quake_CL.state.time = quake_CL.state.mtime0;
		}
		return 1.0;
	}
	return frac;
};
quake_CL.RelinkEntities = function() {
	var frac = quake_CL.LerpPoint();
	quake_CL.numvisedicts = 0;
	quake_CL.state.velocity[0] = quake_CL.state.mvelocity1[0] + frac * (quake_CL.state.mvelocity0[0] - quake_CL.state.mvelocity1[0]);
	quake_CL.state.velocity[1] = quake_CL.state.mvelocity1[1] + frac * (quake_CL.state.mvelocity0[1] - quake_CL.state.mvelocity1[1]);
	quake_CL.state.velocity[2] = quake_CL.state.mvelocity1[2] + frac * (quake_CL.state.mvelocity0[2] - quake_CL.state.mvelocity1[2]);
	if(quake_CL.cls.demoplayback) {
		var _g = 0;
		while(_g < 3) {
			var i = _g++;
			var d = quake_CL.state.mviewangles0[i] - quake_CL.state.mviewangles1[i];
			if(d > 180.0) {
				d -= 360.0;
			} else if(d < -180.0) {
				d += 360.0;
			}
			quake_CL.state.viewangles[i] = quake_CL.state.mviewangles1[i] + frac * d;
		}
	}
	var bobjrotate = quake__$Vec_Vec_$Impl_$.Anglemod(100.0 * quake_CL.state.time);
	var delta = [];
	var this1 = new Float32Array(3);
	var oldorg = this1;
	var dl;
	var _g1 = 1;
	var _g2 = quake_CL.entities.length;
	while(_g1 < _g2) {
		var i1 = _g1++;
		var ent = quake_CL.entities[i1];
		if(ent.model == null) {
			continue;
		}
		if(ent.msgtime != quake_CL.state.mtime0) {
			ent.model = null;
			continue;
		}
		oldorg[0] = ent.origin[0];
		oldorg[1] = ent.origin[1];
		oldorg[2] = ent.origin[2];
		if(ent.forcelink) {
			ent.origin.set(ent.msg_origins0);
			ent.angles.set(ent.msg_angles0);
		} else {
			var f = frac;
			var _g21 = 0;
			while(_g21 < 3) {
				var j = _g21++;
				delta[j] = ent.msg_origins0[j] - ent.msg_origins1[j];
				if(delta[j] > 100.0 || delta[j] < -100.0) {
					f = 1.0;
				}
			}
			var _g22 = 0;
			while(_g22 < 3) {
				var j1 = _g22++;
				ent.origin[j1] = ent.msg_origins1[j1] + f * delta[j1];
				var d1 = ent.msg_angles0[j1] - ent.msg_angles1[j1];
				if(d1 > 180.0) {
					d1 -= 360.0;
				} else if(d1 < -180.0) {
					d1 += 360.0;
				}
				ent.angles[j1] = ent.msg_angles1[j1] + f * d1;
			}
		}
		if((ent.model.flags & 8) != 0) {
			ent.angles[1] = bobjrotate;
		}
		if((ent.effects & 1) != 0) {
			quake_Render.EntityParticles(ent);
		}
		if((ent.effects & 2) != 0) {
			dl = quake_CL.AllocDlight(i1);
			var this2 = new Float32Array(3);
			var fv = this2;
			quake__$Vec_Vec_$Impl_$.AngleVectors(ent.angles,fv);
			var this3 = dl.origin;
			this3[0] = ent.origin[0] + 18.0 * fv[0];
			this3[1] = ent.origin[1] + 18.0 * fv[1];
			this3[2] = ent.origin[2] + 16.0 + 18.0 * fv[2];
			dl.radius = 200.0 + Math.random() * 32.0;
			dl.minlight = 32.0;
			dl.die = quake_CL.state.time + 0.1;
		}
		if((ent.effects & 4) != 0) {
			dl = quake_CL.AllocDlight(i1);
			var this4 = dl.origin;
			this4[0] = ent.origin[0];
			this4[1] = ent.origin[1];
			this4[2] = ent.origin[2] + 16.0;
			dl.radius = 400.0 + Math.random() * 32.0;
			dl.die = quake_CL.state.time + 0.001;
		}
		if((ent.effects & 8) != 0) {
			dl = quake_CL.AllocDlight(i1);
			var this5 = dl.origin;
			this5[0] = ent.origin[0];
			this5[1] = ent.origin[1];
			this5[2] = ent.origin[2] + 16.0;
			dl.radius = 200.0 + Math.random() * 32.0;
			dl.die = quake_CL.state.time + 0.001;
		}
		if((ent.model.flags & 4) != 0) {
			quake_Render.RocketTrail(oldorg,ent.origin,2);
		} else if((ent.model.flags & 32) != 0) {
			quake_Render.RocketTrail(oldorg,ent.origin,4);
		} else if((ent.model.flags & 16) != 0) {
			quake_Render.RocketTrail(oldorg,ent.origin,3);
		} else if((ent.model.flags & 64) != 0) {
			quake_Render.RocketTrail(oldorg,ent.origin,5);
		} else if((ent.model.flags & 1) != 0) {
			quake_Render.RocketTrail(oldorg,ent.origin,0);
			dl = quake_CL.AllocDlight(i1);
			dl.origin.set(ent.origin);
			dl.radius = 200.0;
			dl.die = quake_CL.state.time + 0.01;
		} else if((ent.model.flags & 2) != 0) {
			quake_Render.RocketTrail(oldorg,ent.origin,1);
		} else if((ent.model.flags & 128) != 0) {
			quake_Render.RocketTrail(oldorg,ent.origin,6);
		}
		ent.forcelink = false;
		if(i1 != quake_CL.state.viewentity || quake_Chase.active.value != 0) {
			quake_CL.visedicts[quake_CL.numvisedicts++] = ent;
		}
	}
};
quake_CL.ReadFromServer = function() {
	quake_CL.state.oldtime = quake_CL.state.time;
	quake_CL.state.time += quake_Host.frametime;
	while(true) {
		var ret = quake_CL.GetMessage();
		if(ret == -1) {
			quake_Host.Error("CL.ReadFromServer: lost server connection");
		}
		if(ret == 0) {
			break;
		}
		quake_CL.state.last_received_message = quake_Host.realtime;
		quake_CL.ParseServerMessage();
		if(quake_CL.cls.state != 2) {
			break;
		}
	}
	if(quake_CL.shownet.value != 0) {
		quake_Console.Print("\n");
	}
	quake_CL.RelinkEntities();
	quake_CL.UpdateTEnts();
};
quake_CL.SendCmd = function() {
	if(quake_CL.cls.state != 2) {
		return;
	}
	if(quake_CL.cls.signon == 4) {
		quake_CL.BaseMove();
		quake_IN.Move();
		quake_CL.SendMove();
	}
	if(quake_CL.cls.demoplayback) {
		quake_CL.cls.message.cursize = 0;
		return;
	}
	if(quake_CL.cls.message.cursize == 0) {
		return;
	}
	if(!quake_NET.CanSendMessage(quake_CL.cls.netcon)) {
		quake_Console.DPrint("CL.SendCmd: can't send\n");
		return;
	}
	if(quake_NET.SendMessage(quake_CL.cls.netcon,quake_CL.cls.message) == -1) {
		quake_Host.Error("CL.SendCmd: lost server connection");
	}
	quake_CL.cls.message.cursize = 0;
};
quake_CL.Init = function() {
	quake_CL.ClearState();
	quake_CL.InitInput();
	quake_CL.InitTEnts();
	quake_CL.$name = quake_Cvar.RegisterVariable("_cl_name","player",true);
	quake_CL.color = quake_Cvar.RegisterVariable("_cl_color","0",true);
	quake_CL.upspeed = quake_Cvar.RegisterVariable("cl_upspeed","200");
	quake_CL.forwardspeed = quake_Cvar.RegisterVariable("cl_forwardspeed","200",true);
	quake_CL.backspeed = quake_Cvar.RegisterVariable("cl_backspeed","200",true);
	quake_CL.sidespeed = quake_Cvar.RegisterVariable("cl_sidespeed","350");
	quake_CL.movespeedkey = quake_Cvar.RegisterVariable("cl_movespeedkey","2.0");
	quake_CL.yawspeed = quake_Cvar.RegisterVariable("cl_yawspeed","140");
	quake_CL.pitchspeed = quake_Cvar.RegisterVariable("cl_pitchspeed","150");
	quake_CL.anglespeedkey = quake_Cvar.RegisterVariable("cl_anglespeedkey","1.5");
	quake_CL.shownet = quake_Cvar.RegisterVariable("cl_shownet","0");
	quake_CL.nolerp = quake_Cvar.RegisterVariable("cl_nolerp","0");
	quake_CL.lookspring = quake_Cvar.RegisterVariable("lookspring","0",true);
	quake_CL.lookstrafe = quake_Cvar.RegisterVariable("lookstrafe","0",true);
	quake_CL.sensitivity = quake_Cvar.RegisterVariable("sensitivity","3",true);
	quake_CL.m_pitch = quake_Cvar.RegisterVariable("m_pitch","0.022",true);
	quake_CL.m_yaw = quake_Cvar.RegisterVariable("m_yaw","0.022",true);
	quake_CL.m_forward = quake_Cvar.RegisterVariable("m_forward","1",true);
	quake_CL.m_side = quake_Cvar.RegisterVariable("m_side","0.8",true);
	quake_CL.rcon_password = quake_Cvar.RegisterVariable("rcon_password","");
	quake_CL.rcon_address = quake_Cvar.RegisterVariable("rcon_address","");
	quake_Cmd.AddCommand("entities",quake_CL.PrintEntities_f);
	quake_Cmd.AddCommand("disconnect",quake_CL.Disconnect);
	quake_Cmd.AddCommand("record",quake_CL.Record_f);
	quake_Cmd.AddCommand("stop",quake_CL.Stop_f);
	quake_Cmd.AddCommand("playdemo",quake_CL.PlayDemo_f);
	quake_Cmd.AddCommand("timedemo",quake_CL.TimeDemo_f);
	quake_Cmd.AddCommand("rcon",quake_CL.Rcon_f);
};
quake_CL.EntityNum = function(num) {
	if(num < quake_CL.entities.length) {
		return quake_CL.entities[num];
	}
	while(quake_CL.entities.length <= num) quake_CL.entities.push(new quake_Entity(num));
	return quake_CL.entities[num];
};
quake_CL.ParseStartSoundPacket = function() {
	var field_mask = quake_MSG.ReadByte();
	var volume = (field_mask & 1) != 0 ? quake_MSG.ReadByte() : 255;
	var attenuation = (field_mask & 2) != 0 ? quake_MSG.ReadByte() * 0.015625 : 1.0;
	var channel = quake_MSG.ReadShort();
	var sound_num = quake_MSG.ReadByte();
	var ent = channel >> 3;
	channel &= 7;
	var x = quake_MSG.ReadShort() * 0.125;
	var y = quake_MSG.ReadShort() * 0.125;
	var z = quake_MSG.ReadShort() * 0.125;
	var this1 = new Float32Array(3);
	var v = this1;
	v[0] = x;
	v[1] = y;
	v[2] = z;
	var pos = v;
	quake_S.StartSound(ent,channel,quake_CL.state.sound_precache[sound_num],pos,volume / 255.0,attenuation);
};
quake_CL.KeepaliveMessage = function() {
	if(quake_SV.server.active || quake_CL.cls.demoplayback) {
		return;
	}
	var oldsize = quake_NET.message.cursize;
	var olddata = new Uint8Array(8192);
	olddata.set(new Uint8Array(quake_NET.message.data,0,oldsize));
	while(true) {
		var ret = quake_CL.GetMessage();
		switch(ret) {
		case 0:
			break;
		case 1:
			quake_Host.Error("CL.KeepaliveMessage: received a message");
			break;
		case 2:
			if(quake_MSG.ReadByte() != 1) {
				quake_Host.Error("CL.KeepaliveMessage: datagram wasn't a nop");
			}
			break;
		default:
			quake_Host.Error("CL.KeepaliveMessage: CL.GetMessage failed");
		}
		if(ret == 0) {
			break;
		}
	}
	quake_NET.message.cursize = oldsize;
	new Uint8Array(quake_NET.message.data,0,oldsize).set(olddata.subarray(0,oldsize));
	var time = new Date().getTime() * 0.001 - quake_Sys.oldtime;
	if(time - quake_CL.lastmsg < 5.0) {
		return;
	}
	quake_CL.lastmsg = time;
	quake_Console.Print("--> client to server keepalive\n");
	quake_CL.cls.message.WriteByte(1);
	quake_NET.SendMessage(quake_CL.cls.netcon,quake_CL.cls.message);
	quake_CL.cls.message.cursize = 0;
};
quake_CL.ParseServerInfo = function() {
	quake_Console.DPrint("Serverinfo packet received.\n");
	quake_CL.ClearState();
	var i = quake_MSG.ReadLong();
	if(i != 15) {
		quake_Console.Print("Server returned version " + i + ", not " + 15 + "\n");
		return;
	}
	quake_CL.state.maxclients = quake_MSG.ReadByte();
	if(quake_CL.state.maxclients <= 0 || quake_CL.state.maxclients > 16) {
		quake_Console.Print("Bad maxclients (" + quake_CL.state.maxclients + ") from server\n");
		return;
	}
	quake_CL.state.scores = [];
	var _g1 = 0;
	var _g = quake_CL.state.maxclients;
	while(_g1 < _g) {
		var i1 = _g1++;
		quake_CL.state.scores[i1] = new quake__$CL_Score();
	}
	quake_CL.state.gametype = quake_MSG.ReadByte();
	quake_CL.state.levelname = quake_MSG.ReadString();
	quake_Console.Print("\n\n\x1D\x1E\x1E\x1E\x1E\x1E\x1E\x1E\x1E\x1E\x1E\x1E\x1E\x1E\x1E\x1E\x1E\x1E\x1E\x1E\x1E\x1E\x1E\x1E\x1E\x1E\x1E\x1E\x1E\x1E\x1E\x1E\x1E\x1E\x1E\x1E\x1F\n\n");
	quake_Console.Print("\x02" + quake_CL.state.levelname + "\n");
	var str;
	var nummodels = 1;
	var model_precache = [];
	while(true) {
		str = quake_MSG.ReadString();
		if(str.length == 0) {
			break;
		}
		model_precache[nummodels++] = str;
	}
	var numsounds = 1;
	var sound_precache = [];
	while(true) {
		str = quake_MSG.ReadString();
		if(str.length == 0) {
			break;
		}
		sound_precache[numsounds++] = str;
	}
	quake_CL.state.model_precache = [];
	var _g11 = 1;
	var _g2 = nummodels;
	while(_g11 < _g2) {
		var i2 = _g11++;
		quake_CL.state.model_precache[i2] = quake_Mod.LoadModel(quake_Mod.FindName(model_precache[i2]),false);
		if(quake_CL.state.model_precache[i2] == null) {
			quake_Console.Print("Model " + model_precache[i2] + " not found\n");
			return;
		}
		quake_CL.KeepaliveMessage();
	}
	quake_CL.state.sound_precache = [];
	var _g12 = 1;
	var _g3 = numsounds;
	while(_g12 < _g3) {
		var i3 = _g12++;
		quake_CL.state.sound_precache[i3] = quake_S.PrecacheSound(sound_precache[i3]);
		quake_CL.KeepaliveMessage();
	}
	quake_CL.state.worldmodel = quake_CL.state.model_precache[1];
	quake_CL.EntityNum(0).model = quake_CL.state.worldmodel;
	quake_Render.NewMap();
	quake_Host.noclip_anglehack = false;
};
quake_CL.ParseUpdate = function(bits) {
	if(quake_CL.cls.signon == 3) {
		quake_CL.cls.signon = 4;
		quake_CL.SignonReply();
	}
	if((bits & 1) != 0) {
		bits += quake_MSG.ReadByte() << 8;
	}
	var ent = quake_CL.EntityNum((bits & 16384) != 0 ? quake_MSG.ReadShort() : quake_MSG.ReadByte());
	var forcelink = ent.msgtime != quake_CL.state.mtime1;
	ent.msgtime = quake_CL.state.mtime0;
	var model = quake_CL.state.model_precache[(bits & 1024) != 0 ? quake_MSG.ReadByte() : ent.baseline.modelindex];
	if(model != ent.model) {
		ent.model = model;
		if(model != null) {
			ent.syncbase = model.random ? Math.random() : 0.0;
		} else {
			forcelink = true;
		}
	}
	ent.frame = (bits & 64) != 0 ? quake_MSG.ReadByte() : ent.baseline.frame;
	ent.colormap = (bits & 2048) != 0 ? quake_MSG.ReadByte() : ent.baseline.colormap;
	if(ent.colormap > quake_CL.state.maxclients) {
		quake_Sys.Error("i >= cl.maxclients");
	}
	ent.skinnum = (bits & 4096) != 0 ? quake_MSG.ReadByte() : ent.baseline.skin;
	ent.effects = (bits & 8192) != 0 ? quake_MSG.ReadByte() : ent.baseline.effects;
	ent.msg_origins1.set(ent.msg_origins0);
	ent.msg_angles1.set(ent.msg_angles0);
	ent.msg_origins0[0] = (bits & 2) != 0 ? quake_MSG.ReadShort() * 0.125 : ent.baseline.origin[0];
	ent.msg_angles0[0] = (bits & 256) != 0 ? quake_MSG.ReadChar() * 1.40625 : ent.baseline.angles[0];
	ent.msg_origins0[1] = (bits & 4) != 0 ? quake_MSG.ReadShort() * 0.125 : ent.baseline.origin[1];
	ent.msg_angles0[1] = (bits & 16) != 0 ? quake_MSG.ReadChar() * 1.40625 : ent.baseline.angles[1];
	ent.msg_origins0[2] = (bits & 8) != 0 ? quake_MSG.ReadShort() * 0.125 : ent.baseline.origin[2];
	ent.msg_angles0[2] = (bits & 512) != 0 ? quake_MSG.ReadChar() * 1.40625 : ent.baseline.angles[2];
	if((bits & 32) != 0) {
		ent.forcelink = true;
	}
	if(forcelink) {
		ent.origin.set(ent.msg_origins0);
		ent.msg_origins1.set(ent.origin);
		ent.angles.set(ent.msg_angles0);
		ent.msg_angles1.set(ent.angles);
		ent.forcelink = true;
	}
};
quake_CL.ParseBaseline = function(ent) {
	ent.baseline.modelindex = quake_MSG.ReadByte();
	ent.baseline.frame = quake_MSG.ReadByte();
	ent.baseline.colormap = quake_MSG.ReadByte();
	ent.baseline.skin = quake_MSG.ReadByte();
	ent.baseline.origin[0] = quake_MSG.ReadShort() * 0.125;
	ent.baseline.angles[0] = quake_MSG.ReadChar() * 1.40625;
	ent.baseline.origin[1] = quake_MSG.ReadShort() * 0.125;
	ent.baseline.angles[1] = quake_MSG.ReadChar() * 1.40625;
	ent.baseline.origin[2] = quake_MSG.ReadShort() * 0.125;
	ent.baseline.angles[2] = quake_MSG.ReadChar() * 1.40625;
};
quake_CL.ParseClientdata = function(bits) {
	var tmp = (bits & 1) != 0 ? quake_MSG.ReadChar() : 22;
	quake_CL.state.viewheight = tmp;
	var tmp1 = (bits & 2) != 0 ? quake_MSG.ReadChar() : 0.0;
	quake_CL.state.idealpitch = tmp1;
	quake_CL.state.mvelocity1.set(quake_CL.state.mvelocity0);
	var _g = 0;
	while(_g < 3) {
		var i = _g++;
		if((bits & 4 << i) != 0) {
			quake_CL.state.punchangle[i] = quake_MSG.ReadChar();
		} else {
			quake_CL.state.punchangle[i] = 0.0;
		}
		if((bits & 32 << i) != 0) {
			quake_CL.state.mvelocity0[i] = quake_MSG.ReadChar() * 16.0;
		} else {
			quake_CL.state.mvelocity0[i] = 0.0;
		}
	}
	var i1 = quake_MSG.ReadLong();
	if(quake_CL.state.items != i1) {
		var _g1 = 0;
		while(_g1 < 32) {
			var j = _g1++;
			if((i1 >>> j & 1) != 0 && (quake_CL.state.items >>> j & 1) == 0) {
				quake_CL.state.item_gettime[j] = quake_CL.state.time;
			}
		}
		quake_CL.state.items = i1;
	}
	quake_CL.state.onground = (bits & 1024) != 0;
	quake_CL.state.inwater = (bits & 2048) != 0;
	quake_CL.state.stats[5] = (bits & 4096) != 0 ? quake_MSG.ReadByte() : 0;
	quake_CL.state.stats[4] = (bits & 8192) != 0 ? quake_MSG.ReadByte() : 0;
	quake_CL.state.stats[2] = (bits & 16384) != 0 ? quake_MSG.ReadByte() : 0;
	quake_CL.state.stats[0] = quake_MSG.ReadShort();
	quake_CL.state.stats[3] = quake_MSG.ReadByte();
	quake_CL.state.stats[6] = quake_MSG.ReadByte();
	quake_CL.state.stats[7] = quake_MSG.ReadByte();
	quake_CL.state.stats[8] = quake_MSG.ReadByte();
	quake_CL.state.stats[9] = quake_MSG.ReadByte();
	if(quake_COM.standard_quake) {
		quake_CL.state.stats[10] = quake_MSG.ReadByte();
	} else {
		quake_CL.state.stats[10] = 1 << quake_MSG.ReadByte();
	}
};
quake_CL.ParseStatic = function() {
	var ent = new quake_Entity();
	quake_CL.static_entities.push(ent);
	quake_CL.ParseBaseline(ent);
	ent.model = quake_CL.state.model_precache[ent.baseline.modelindex];
	ent.frame = ent.baseline.frame;
	ent.skinnum = ent.baseline.skin;
	ent.effects = ent.baseline.effects;
	ent.origin.set(ent.baseline.origin);
	ent.angles.set(ent.baseline.angles);
	quake_Render.currententity = ent;
	var v1 = ent.origin;
	var v2 = ent.model.mins;
	var this1 = new Float32Array(3);
	var v = this1;
	v[0] = v1[0] + v2[0];
	v[1] = v1[1] + v2[1];
	v[2] = v1[2] + v2[2];
	var v11 = ent.origin;
	var v21 = ent.model.maxs;
	var this2 = new Float32Array(3);
	var v3 = this2;
	v3[0] = v11[0] + v21[0];
	v3[1] = v11[1] + v21[1];
	v3[2] = v11[2] + v21[2];
	quake_Render.SplitEntityOnNode(v,v3,quake_CL.state.worldmodel.nodes[0]);
};
quake_CL.ParseStaticSound = function() {
	var x = quake_MSG.ReadShort() * 0.125;
	var y = quake_MSG.ReadShort() * 0.125;
	var z = quake_MSG.ReadShort() * 0.125;
	var this1 = new Float32Array(3);
	var v = this1;
	v[0] = x;
	v[1] = y;
	v[2] = z;
	var org = v;
	var sound_num = quake_MSG.ReadByte();
	var vol = quake_MSG.ReadByte();
	var atten = quake_MSG.ReadByte();
	quake_S.StaticSound(quake_CL.state.sound_precache[sound_num],org,vol / 255.0,atten);
};
quake_CL.Shownet = function(x) {
	if(quake_CL.shownet.value == 2) {
		quake_Console.Print((quake_MSG.readcount <= 99 ? quake_MSG.readcount <= 9 ? "  " : " " : "") + (quake_MSG.readcount - 1) + ":" + x + "\n");
	}
};
quake_CL.ParseServerMessage = function() {
	if(quake_CL.shownet.value == 1) {
		quake_Console.Print(quake_NET.message.cursize + " ");
	} else if(quake_CL.shownet.value == 2) {
		quake_Console.Print("------------------\n");
	}
	quake_CL.state.onground = false;
	quake_MSG.BeginReading();
	while(true) {
		if(quake_MSG.badread) {
			quake_Host.Error("CL.ParseServerMessage: Bad server message");
		}
		var cmd = quake_MSG.ReadByte();
		if(cmd == -1) {
			quake_CL.Shownet("END OF MESSAGE");
			return;
		}
		if((cmd & 128) != 0) {
			quake_CL.Shownet("fast update");
			quake_CL.ParseUpdate(cmd & 127);
			continue;
		}
		quake_CL.Shownet("svc_" + quake_CL.svc_strings[cmd]);
		var _g = cmd;
		switch(_g) {
		case 1:
			continue;
			break;
		case 2:
			quake_Host.EndGame("Server disconnected\n");
			break;
		case 3:
			var i = quake_MSG.ReadByte();
			if(i >= 32) {
				quake_Sys.Error("svc_updatestat: " + i + " is invalid");
			}
			quake_CL.state.stats[i] = quake_MSG.ReadLong();
			continue;
			break;
		case 4:
			var i1 = quake_MSG.ReadLong();
			if(i1 != 15) {
				quake_Host.Error("CL.ParseServerMessage: Server is protocol " + i1 + " instead of " + 15 + "\n");
			}
			continue;
			break;
		case 5:
			quake_CL.state.viewentity = quake_MSG.ReadShort();
			continue;
			break;
		case 6:
			quake_CL.ParseStartSoundPacket();
			continue;
			break;
		case 7:
			quake_CL.state.mtime1 = quake_CL.state.mtime0;
			quake_CL.state.mtime0 = quake_MSG.ReadFloat();
			continue;
			break;
		case 8:
			quake_Console.Print(quake_MSG.ReadString());
			continue;
			break;
		case 9:
			quake_Cmd.text += quake_MSG.ReadString();
			continue;
			break;
		case 10:
			quake_CL.state.viewangles[0] = quake_MSG.ReadChar() * 1.40625;
			quake_CL.state.viewangles[1] = quake_MSG.ReadChar() * 1.40625;
			quake_CL.state.viewangles[2] = quake_MSG.ReadChar() * 1.40625;
			continue;
			break;
		case 11:
			quake_CL.ParseServerInfo();
			quake_SCR.recalc_refdef = true;
			continue;
			break;
		case 12:
			var i2 = quake_MSG.ReadByte();
			if(i2 >= 64) {
				quake_Sys.Error("svc_lightstyle > MAX_LIGHTSTYLES");
			}
			quake_CL.lightstyle[i2] = quake_MSG.ReadString();
			continue;
			break;
		case 13:
			var i3 = quake_MSG.ReadByte();
			if(i3 >= quake_CL.state.maxclients) {
				quake_Host.Error("CL.ParseServerMessage: svc_updatename > MAX_SCOREBOARD");
			}
			quake_CL.state.scores[i3].name = quake_MSG.ReadString();
			continue;
			break;
		case 14:
			var i4 = quake_MSG.ReadByte();
			if(i4 >= quake_CL.state.maxclients) {
				quake_Host.Error("CL.ParseServerMessage: svc_updatefrags > MAX_SCOREBOARD");
			}
			quake_CL.state.scores[i4].frags = quake_MSG.ReadShort();
			continue;
			break;
		case 15:
			quake_CL.ParseClientdata(quake_MSG.ReadShort());
			continue;
			break;
		case 16:
			var i5 = quake_MSG.ReadShort();
			quake_S.StopSound(i5 >> 3,i5 & 7);
			continue;
			break;
		case 17:
			var i6 = quake_MSG.ReadByte();
			if(i6 >= quake_CL.state.maxclients) {
				quake_Host.Error("CL.ParseServerMessage: svc_updatecolors > MAX_SCOREBOARD");
			}
			quake_CL.state.scores[i6].colors = quake_MSG.ReadByte();
			continue;
			break;
		case 18:
			quake_Render.ParseParticleEffect();
			continue;
			break;
		case 19:
			quake_V.ParseDamage();
			continue;
			break;
		case 20:
			quake_CL.ParseStatic();
			continue;
			break;
		case 22:
			quake_CL.ParseBaseline(quake_CL.EntityNum(quake_MSG.ReadShort()));
			continue;
			break;
		case 23:
			quake_CL.ParseTEnt();
			continue;
			break;
		case 24:
			var tmp = quake_MSG.ReadByte();
			quake_CL.state.paused = tmp != 0;
			if(quake_CL.state.paused) {
				quake_CDAudio.Pause();
			} else {
				quake_CDAudio.Resume();
			}
			continue;
			break;
		case 25:
			var i7 = quake_MSG.ReadByte();
			if(i7 <= quake_CL.cls.signon) {
				quake_Host.Error("Received signon " + i7 + " when at " + quake_CL.cls.signon);
			}
			quake_CL.cls.signon = i7;
			quake_CL.SignonReply();
			continue;
			break;
		case 26:
			quake_SCR.CenterPrint(quake_MSG.ReadString());
			continue;
			break;
		case 27:
			++quake_CL.state.stats[14];
			continue;
			break;
		case 28:
			++quake_CL.state.stats[13];
			continue;
			break;
		case 29:
			quake_CL.ParseStaticSound();
			continue;
			break;
		case 30:
			quake_CL.state.intermission = 1;
			quake_CL.state.completed_time = quake_CL.state.time;
			quake_SCR.recalc_refdef = true;
			continue;
			break;
		case 31:
			quake_CL.state.intermission = 2;
			quake_CL.state.completed_time = quake_CL.state.time;
			quake_SCR.recalc_refdef = true;
			quake_SCR.CenterPrint(quake_MSG.ReadString());
			continue;
			break;
		case 32:
			quake_CL.state.cdtrack = quake_MSG.ReadByte();
			quake_MSG.ReadByte();
			if((quake_CL.cls.demoplayback || quake_CL.cls.demorecording) && quake_CL.cls.forcetrack != -1) {
				quake_CDAudio.Play(quake_CL.cls.forcetrack,true);
			} else {
				quake_CDAudio.Play(quake_CL.state.cdtrack,true);
			}
			continue;
			break;
		case 33:
			quake_Cmd.ExecuteString("help");
			continue;
			break;
		case 34:
			quake_CL.state.intermission = 3;
			quake_CL.state.completed_time = quake_CL.state.time;
			quake_SCR.recalc_refdef = true;
			quake_SCR.CenterPrint(quake_MSG.ReadString());
			continue;
			break;
		}
		quake_Host.Error("CL.ParseServerMessage: Illegible server message\n");
	}
};
quake_CL.InitTEnts = function() {
	quake_CL.sfx_wizhit = quake_S.PrecacheSound("wizard/hit.wav");
	quake_CL.sfx_knighthit = quake_S.PrecacheSound("hknight/hit.wav");
	quake_CL.sfx_tink1 = quake_S.PrecacheSound("weapons/tink1.wav");
	quake_CL.sfx_ric1 = quake_S.PrecacheSound("weapons/ric1.wav");
	quake_CL.sfx_ric2 = quake_S.PrecacheSound("weapons/ric2.wav");
	quake_CL.sfx_ric3 = quake_S.PrecacheSound("weapons/ric3.wav");
	quake_CL.sfx_r_exp3 = quake_S.PrecacheSound("weapons/r_exp3.wav");
};
quake_CL.ParseBeam = function(m) {
	var ent = quake_MSG.ReadShort();
	var start_0 = quake_MSG.ReadShort() * 0.125;
	var start_1 = quake_MSG.ReadShort() * 0.125;
	var start_2 = quake_MSG.ReadShort() * 0.125;
	var end_0 = quake_MSG.ReadShort() * 0.125;
	var end_1 = quake_MSG.ReadShort() * 0.125;
	var end_2 = quake_MSG.ReadShort() * 0.125;
	var _g = 0;
	var _g1 = quake_CL.beams;
	while(_g < _g1.length) {
		var b = _g1[_g];
		++_g;
		if(b.entity == ent) {
			b.model = m;
			b.endtime = quake_CL.state.time + 0.2;
			var this1 = b.start;
			this1[0] = start_0;
			this1[1] = start_1;
			this1[2] = start_2;
			var this2 = b.end;
			this2[0] = end_0;
			this2[1] = end_1;
			this2[2] = end_2;
			return;
		}
	}
	var _g2 = 0;
	var _g11 = quake_CL.beams;
	while(_g2 < _g11.length) {
		var b1 = _g11[_g2];
		++_g2;
		if(b1.model == null || b1.endtime >= quake_CL.state.time) {
			b1.entity = ent;
			b1.model = m;
			b1.endtime = quake_CL.state.time + 0.2;
			var this3 = b1.start;
			this3[0] = start_0;
			this3[1] = start_1;
			this3[2] = start_2;
			var this4 = b1.end;
			this4[0] = end_0;
			this4[1] = end_1;
			this4[2] = end_2;
			return;
		}
	}
	quake_Console.Print("beam list overflow!\n");
};
quake_CL.ParseTEnt = function() {
	var type = quake_MSG.ReadByte();
	switch(type) {
	case 5:
		quake_CL.ParseBeam(quake_Mod.LoadModel(quake_Mod.FindName("progs/bolt.mdl"),true));
		return;
	case 6:
		quake_CL.ParseBeam(quake_Mod.LoadModel(quake_Mod.FindName("progs/bolt2.mdl"),true));
		return;
	case 9:
		quake_CL.ParseBeam(quake_Mod.LoadModel(quake_Mod.FindName("progs/bolt3.mdl"),true));
		return;
	case 13:
		quake_CL.ParseBeam(quake_Mod.LoadModel(quake_Mod.FindName("progs/beam.mdl"),true));
		return;
	default:
	}
	var x = quake_MSG.ReadShort() * 0.125;
	var y = quake_MSG.ReadShort() * 0.125;
	var z = quake_MSG.ReadShort() * 0.125;
	var this1 = new Float32Array(3);
	var v = this1;
	v[0] = x;
	v[1] = y;
	v[2] = z;
	var pos = v;
	switch(type) {
	case 0:
		quake_Render.RunParticleEffect(pos,quake__$Vec_Vec_$Impl_$.origin,0,10);
		break;
	case 1:
		quake_Render.RunParticleEffect(pos,quake__$Vec_Vec_$Impl_$.origin,0,20);
		break;
	case 2:
		quake_Render.RunParticleEffect(pos,quake__$Vec_Vec_$Impl_$.origin,0,20);
		break;
	case 3:
		quake_Render.ParticleExplosion(pos);
		var dl = quake_CL.AllocDlight(0);
		dl.origin.set(pos);
		dl.radius = 350.0;
		dl.die = quake_CL.state.time + 0.5;
		dl.decay = 300.0;
		quake_S.StartSound(-1,0,quake_CL.sfx_r_exp3,pos,1.0,1.0);
		break;
	case 4:
		quake_Render.BlobExplosion(pos);
		quake_S.StartSound(-1,0,quake_CL.sfx_r_exp3,pos,1.0,1.0);
		break;
	case 7:
		quake_Render.RunParticleEffect(pos,quake__$Vec_Vec_$Impl_$.origin,20,20);
		quake_S.StartSound(-1,0,quake_CL.sfx_wizhit,pos,1.0,1.0);
		break;
	case 8:
		quake_Render.RunParticleEffect(pos,quake__$Vec_Vec_$Impl_$.origin,226,20);
		quake_S.StartSound(-1,0,quake_CL.sfx_knighthit,pos,1.0,1.0);
		break;
	case 10:
		quake_Render.LavaSplash(pos);
		break;
	case 11:
		quake_Render.TeleportSplash(pos);
		break;
	case 12:
		var colorStart = quake_MSG.ReadByte();
		var colorLength = quake_MSG.ReadByte();
		quake_Render.ParticleExplosion2(pos,colorStart,colorLength);
		var dl1 = quake_CL.AllocDlight(0);
		dl1.origin.set(pos);
		dl1.radius = 350.0;
		dl1.die = quake_CL.state.time + 0.5;
		dl1.decay = 300.0;
		quake_S.StartSound(-1,0,quake_CL.sfx_r_exp3,pos,1.0,1.0);
		break;
	default:
		quake_Sys.Error("CL.ParseTEnt: bad type");
	}
};
quake_CL.NewTempEntity = function() {
	var ent = new quake_Entity();
	quake_CL.temp_entities[quake_CL.num_temp_entities++] = ent;
	quake_CL.visedicts[quake_CL.numvisedicts++] = ent;
	return ent;
};
quake_CL.UpdateTEnts = function() {
	quake_CL.num_temp_entities = 0;
	var dist_0 = 0.0;
	var dist_1 = 0.0;
	var dist_2 = 0.0;
	var org_0 = 0.0;
	var org_1 = 0.0;
	var org_2 = 0.0;
	var _g = 0;
	var _g1 = quake_CL.beams;
	while(_g < _g1.length) {
		var b = _g1[_g];
		++_g;
		if(b.model == null || b.endtime < quake_CL.state.time) {
			continue;
		}
		if(b.entity == quake_CL.state.viewentity) {
			b.start.set(quake_CL.entities[quake_CL.state.viewentity].origin);
		}
		dist_0 = b.end[0] - b.start[0];
		dist_1 = b.end[1] - b.start[1];
		dist_2 = b.end[2] - b.start[2];
		var yaw;
		var pitch;
		if(dist_0 == 0.0 && dist_1 == 0.0) {
			yaw = 0;
			if(dist_2 > 0.0) {
				pitch = 90;
			} else {
				pitch = 270;
			}
		} else {
			yaw = Math.atan2(dist_1,dist_0) * 180.0 / Math.PI | 0;
			if(yaw < 0) {
				yaw += 360;
			}
			pitch = Math.atan2(dist_2,Math.sqrt(dist_0 * dist_0 + dist_1 * dist_1)) * 180.0 / Math.PI | 0;
			if(pitch < 0) {
				pitch += 360;
			}
		}
		org_0 = b.start[0];
		org_1 = b.start[1];
		org_2 = b.start[2];
		var d = Math.sqrt(dist_0 * dist_0 + dist_1 * dist_1 + dist_2 * dist_2);
		if(d != 0.0) {
			dist_0 /= d;
			dist_1 /= d;
			dist_2 /= d;
		}
		while(d > 0.0) {
			var ent = quake_CL.NewTempEntity();
			var this1 = ent.origin;
			this1[0] = org_0;
			this1[1] = org_1;
			this1[2] = org_2;
			ent.model = b.model;
			var this2 = ent.angles;
			var z = Math.random() * 360.0;
			this2[0] = pitch;
			this2[1] = yaw;
			this2[2] = z;
			org_0 += dist_0 * 30.0;
			org_1 += dist_1 * 30.0;
			org_2 += dist_2 * 30.0;
			d -= 30.0;
		}
	}
};
quake_CL.RunParticles = function() {
	var frametime = quake_CL.state.time - quake_CL.state.oldtime;
	var grav = frametime * quake_SV.gravity.value * 0.05;
	var dvel = frametime * 4.0;
	var _g = 0;
	var _g1 = quake_Render.particles;
	while(_g < _g1.length) {
		var p = _g1[_g];
		++_g;
		if(p.die < quake_CL.state.time) {
			continue;
		}
		var _g2 = p.org;
		_g2[0] += p.vel[0] * frametime;
		var _g21 = p.org;
		_g21[1] += p.vel[1] * frametime;
		var _g22 = p.org;
		_g22[2] += p.vel[2] * frametime;
		var _g23 = p.type;
		switch(_g23) {
		case 1:case 2:
			var _g24 = p.vel;
			_g24[2] -= grav;
			break;
		case 3:
			p.ramp += frametime * 5.0;
			if(p.ramp >= 6.0) {
				p.die = -1.0;
			} else {
				p.color = quake_Render.ramp3[Math.floor(p.ramp)];
			}
			var _g25 = p.vel;
			_g25[2] += grav;
			break;
		case 4:
			p.ramp += frametime * 10.0;
			if(p.ramp >= 8.0) {
				p.die = -1.0;
			} else {
				p.color = quake_Render.ramp1[Math.floor(p.ramp)];
			}
			var _g26 = p.vel;
			_g26[0] += p.vel[0] * dvel;
			var _g27 = p.vel;
			_g27[1] += p.vel[1] * dvel;
			var _g28 = p.vel;
			_g28[2] += p.vel[2] * dvel - grav;
			break;
		case 5:
			p.ramp += frametime * 15.0;
			if(p.ramp >= 8.0) {
				p.die = -1.0;
			} else {
				p.color = quake_Render.ramp2[Math.floor(p.ramp)];
			}
			var _g29 = p.vel;
			_g29[0] -= p.vel[0] * frametime;
			var _g210 = p.vel;
			_g210[1] -= p.vel[1] * frametime;
			var _g211 = p.vel;
			_g211[2] -= p.vel[2] * frametime + grav;
			break;
		case 6:
			var _g212 = p.vel;
			_g212[0] += p.vel[0] * dvel;
			var _g213 = p.vel;
			_g213[1] += p.vel[1] * dvel;
			var _g214 = p.vel;
			_g214[2] += p.vel[2] * dvel - grav;
			break;
		case 7:
			var _g215 = p.vel;
			_g215[0] += p.vel[0] * dvel;
			var _g216 = p.vel;
			_g216[1] += p.vel[1] * dvel;
			var _g217 = p.vel;
			_g217[2] -= grav;
			break;
		default:
		}
	}
};
var quake__$COM_SearchPath = function(f) {
	this.filename = f;
	this.pack = [];
};
$hxClasses["quake._COM.SearchPath"] = quake__$COM_SearchPath;
quake__$COM_SearchPath.__name__ = true;
quake__$COM_SearchPath.prototype = {
	filename: null
	,pack: null
	,__class__: quake__$COM_SearchPath
};
var quake__$COM_File = function(info,i) {
	this.name = quake_Q.memstr(new Uint8Array(info,i << 6,56)).toLowerCase();
	this.filepos = new DataView(info).getUint32((i << 6) + 56,true);
	this.filelen = new DataView(info).getUint32((i << 6) + 60,true);
};
$hxClasses["quake._COM.File"] = quake__$COM_File;
quake__$COM_File.__name__ = true;
quake__$COM_File.prototype = {
	name: null
	,filepos: null
	,filelen: null
	,__class__: quake__$COM_File
};
var quake_COM = function() { };
$hxClasses["quake.COM"] = quake_COM;
quake_COM.__name__ = true;
quake_COM.DefaultExtension = function(path,extension) {
	var i = path.length - 1;
	while(i >= 0) {
		var src = HxOverrides.cca(path,i);
		if(src == 47) {
			break;
		}
		if(src == 46) {
			return path;
		}
		--i;
	}
	return path + extension;
};
quake_COM.Parse = function(data) {
	quake_COM.token = "";
	if(data.length == 0) {
		return null;
	}
	var i = 0;
	var c = null;
	var skipwhite = true;
	while(skipwhite) {
		skipwhite = false;
		while(true) {
			if(i >= data.length) {
				return null;
			}
			c = HxOverrides.cca(data,i);
			if(c > 32) {
				break;
			}
			++i;
		}
		if(c == 47 && HxOverrides.cca(data,i + 1) == 47) {
			while(!(i >= data.length || HxOverrides.cca(data,i) == 10)) ++i;
			skipwhite = true;
		}
	}
	if(c == 34) {
		++i;
		while(true) {
			c = HxOverrides.cca(data,i);
			++i;
			if(i >= data.length || c == 34) {
				return data.substring(i);
			}
			quake_COM.token += String.fromCharCode(c);
		}
	}
	while(!(i >= data.length || c <= 32)) {
		quake_COM.token += String.fromCharCode(c);
		++i;
		c = HxOverrides.cca(data,i);
	}
	return data.substring(i);
};
quake_COM.CheckParm = function(parm) {
	var _g1 = 1;
	var _g = quake_COM.argv.length;
	while(_g1 < _g) {
		var i = _g1++;
		if(quake_COM.argv[i] == parm) {
			return i;
		}
	}
	return null;
};
quake_COM.CheckRegistered = function() {
	var h = quake_COM.LoadFile("gfx/pop.lmp");
	if(h == null) {
		quake_Console.Print("Playing shareware version.\n");
		if(quake_COM.modified) {
			quake_Sys.Error("You must have the registered version to use modified games");
		}
		return;
	}
	var check = new Uint8Array(h);
	var pop = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,0,0,0,0,0,0,0,102,0,0,0,0,0,0,102,0,0,0,0,0,0,0,0,0,103,0,0,0,0,102,101,0,0,0,0,0,0,0,0,0,101,102,0,0,99,101,97,0,0,0,0,0,0,0,0,0,97,101,99,0,100,101,97,0,0,0,0,0,0,0,0,0,97,101,100,0,100,101,100,0,0,100,105,105,105,100,0,0,100,101,100,0,99,101,104,98,0,0,100,104,100,0,0,98,104,101,99,0,0,101,103,105,99,0,100,103,100,0,99,105,103,101,0,0,0,98,102,103,105,106,104,103,104,106,105,103,102,98,0,0,0,0,98,101,102,102,102,102,102,102,102,101,98,0,0,0,0,0,0,0,98,99,100,102,100,99,98,0,0,0,0,0,0,0,0,0,0,0,98,102,98,0,0,0,0,0,0,0,0,0,0,0,0,0,97,102,97,0,0,0,0,0,0,0,0,0,0,0,0,0,0,101,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,100,0,0,0,0,0,0,0];
	var _g = 0;
	while(_g < 256) {
		var i = _g++;
		if(check[i] != pop[i]) {
			quake_Sys.Error("Corrupted data file.");
		}
	}
	quake_COM.registered.set("1");
	quake_Console.Print("Playing registered version.\n");
};
quake_COM.InitArgv = function(pargv) {
	quake_COM.cmdline = (pargv.join(" ") + " ").substring(0,256);
	quake_COM.argv = pargv.slice();
	if(quake_COM.CheckParm("-safe") != null) {
		quake_COM.argv = quake_COM.argv.concat(["-nosound","-nocdaudio","-nomouse"]);
	}
	if(quake_COM.CheckParm("-rogue") != null) {
		quake_COM.rogue = true;
		quake_COM.standard_quake = false;
	} else if(quake_COM.CheckParm("-hipnotic") != null) {
		quake_COM.hipnotic = true;
		quake_COM.standard_quake = false;
	}
};
quake_COM.Init = function() {
	if(window.document.location.protocol != "http:" && window.document.location.protocol != "https:") {
		quake_Sys.Error("Protocol is " + window.document.location.protocol + ", not http: or https:");
	}
	var swaptest = new ArrayBuffer(2);
	var swaptestview = new Uint8Array(swaptest);
	swaptestview[0] = 1;
	swaptestview[1] = 0;
	if(new Uint16Array(swaptest)[0] == 1) {
		quake_COM.LittleLong = function(l) {
			return l;
		};
	} else {
		quake_COM.LittleLong = function(l1) {
			return (l1 >>> 24) + ((l1 & 16711680) >>> 8) + ((l1 & 65280) << 8 >>> 0) + (l1 << 24 >>> 0);
		};
	}
	quake_COM.registered = quake_Cvar.RegisterVariable("registered","0");
	quake_Cvar.RegisterVariable("cmdline",quake_COM.cmdline,false,true);
	quake_Cmd.AddCommand("path",quake_COM.Path_f);
	quake_COM.InitFilesystem();
	quake_COM.CheckRegistered();
};
quake_COM.Path_f = function() {
	quake_Console.Print("Current search path:\n");
	var i = quake_COM.searchpaths.length - 1;
	while(i >= 0) {
		var s = quake_COM.searchpaths[i--];
		var j = s.pack.length - 1;
		while(j >= 0) {
			quake_Console.Print(s.filename + "/" + "pak" + j + ".pak (" + s.pack[j].length + " files)\n");
			--j;
		}
		quake_Console.Print(s.filename + "\n");
	}
};
quake_COM.WriteFile = function(filename,data,len) {
	filename = filename.toLowerCase();
	var dest = [];
	var _g1 = 0;
	var _g = len;
	while(_g1 < _g) {
		var i = _g1++;
		dest.push(String.fromCharCode(data[i]));
	}
	try {
		quake_COM.localStorage.setItem("Quake." + quake_COM.searchpaths[quake_COM.searchpaths.length - 1].filename + "/" + filename,dest.join(""));
	} catch( e ) {
		haxe_Log.trace("COM.WriteFile: failed on " + filename + "\n",{ fileName : "Sys.hx", lineNumber : 45, className : "quake.Sys", methodName : "Print"});
		return false;
	}
	haxe_Log.trace("COM.WriteFile: " + filename + "\n",{ fileName : "Sys.hx", lineNumber : 45, className : "quake.Sys", methodName : "Print"});
	return true;
};
quake_COM.WriteTextFile = function(filename,data) {
	filename = filename.toLowerCase();
	try {
		quake_COM.localStorage.setItem("Quake." + quake_COM.searchpaths[quake_COM.searchpaths.length - 1].filename + "/" + filename,data);
	} catch( e ) {
		haxe_Log.trace("COM.WriteTextFile: failed on " + filename + "\n",{ fileName : "Sys.hx", lineNumber : 45, className : "quake.Sys", methodName : "Print"});
		return false;
	}
	haxe_Log.trace("COM.WriteTextFile: " + filename + "\n",{ fileName : "Sys.hx", lineNumber : 45, className : "quake.Sys", methodName : "Print"});
	return true;
};
quake_COM.LoadFile = function(filename) {
	filename = filename.toLowerCase();
	var xhr = new XMLHttpRequest();
	xhr.overrideMimeType("text/plain; charset=x-user-defined");
	quake_Draw.BeginDisc();
	var i = quake_COM.searchpaths.length - 1;
	while(i >= 0) {
		var search = quake_COM.searchpaths[i--];
		var netpath = search.filename + "/" + filename;
		var data = quake_COM.localStorage.getItem("Quake." + netpath);
		if(data != null) {
			haxe_Log.trace("FindFile: " + netpath + "\n",{ fileName : "Sys.hx", lineNumber : 45, className : "quake.Sys", methodName : "Print"});
			quake_Draw.EndDisc();
			return quake_Q.strmem(data);
		}
		var j = search.pack.length - 1;
		while(j >= 0) {
			var pak = search.pack[j];
			var _g = 0;
			while(_g < pak.length) {
				var file = pak[_g];
				++_g;
				if(file.name != filename) {
					continue;
				}
				if(file.filelen == 0) {
					quake_Draw.EndDisc();
					return new ArrayBuffer(0);
				}
				xhr.open("GET",search.filename + "/pak" + j + ".pak",false);
				xhr.setRequestHeader("Range","bytes=" + file.filepos + "-" + (file.filepos + file.filelen - 1));
				xhr.send();
				if(xhr.status >= 200 && xhr.status <= 299 && xhr.responseText.length == file.filelen) {
					haxe_Log.trace("PackFile: " + search.filename + "/pak" + j + ".pak : " + filename + "\n",{ fileName : "Sys.hx", lineNumber : 45, className : "quake.Sys", methodName : "Print"});
					quake_Draw.EndDisc();
					return quake_Q.strmem(xhr.responseText);
				}
				break;
			}
			--j;
		}
		xhr.open("GET",netpath,false);
		xhr.send();
		if(xhr.status >= 200 && xhr.status <= 299) {
			haxe_Log.trace("FindFile: " + netpath + "\n",{ fileName : "Sys.hx", lineNumber : 45, className : "quake.Sys", methodName : "Print"});
			quake_Draw.EndDisc();
			return quake_Q.strmem(xhr.responseText);
		}
	}
	haxe_Log.trace("FindFile: can't find " + filename + "\n",{ fileName : "Sys.hx", lineNumber : 45, className : "quake.Sys", methodName : "Print"});
	quake_Draw.EndDisc();
	return null;
};
quake_COM.LoadTextFile = function(filename) {
	var buf = quake_COM.LoadFile(filename);
	if(buf == null) {
		return null;
	}
	var bufview = new Uint8Array(buf);
	var f_b = "";
	var _g1 = 0;
	var _g = bufview.length;
	while(_g1 < _g) {
		var i = _g1++;
		if(bufview[i] != 13) {
			f_b += String.fromCharCode(bufview[i]);
		}
	}
	return f_b;
};
quake_COM.LoadPackFile = function(packfile) {
	var xhr = new XMLHttpRequest();
	xhr.overrideMimeType("text/plain; charset=x-user-defined");
	xhr.open("GET",packfile,false);
	xhr.setRequestHeader("Range","bytes=0-11");
	xhr.send();
	if(xhr.status <= 199 || xhr.status >= 300 || xhr.responseText.length != 12) {
		return null;
	}
	var header = new DataView(quake_Q.strmem(xhr.responseText));
	if(header.getUint32(0,true) != 1262698832) {
		quake_Sys.Error(packfile + " is not a packfile");
	}
	var dirofs = header.getUint32(4,true);
	var dirlen = header.getUint32(8,true);
	var numpackfiles = dirlen >> 6;
	if(numpackfiles != 339) {
		quake_COM.modified = true;
	}
	var pack = [];
	if(numpackfiles != 0) {
		xhr.open("GET",packfile,false);
		xhr.setRequestHeader("Range","bytes=" + dirofs + "-" + (dirofs + dirlen - 1));
		xhr.send();
		if(xhr.status <= 199 || xhr.status >= 300 || xhr.responseText.length != dirlen) {
			return null;
		}
		var info = quake_Q.strmem(xhr.responseText);
		if(quake_CRC.Block(new Uint8Array(info)) != 32981) {
			quake_COM.modified = true;
		}
		var _g1 = 0;
		var _g = numpackfiles;
		while(_g1 < _g) {
			var i = _g1++;
			pack.push(new quake__$COM_File(info,i));
		}
	}
	quake_Console.Print("Added packfile " + packfile + " (" + numpackfiles + " files)\n");
	return pack;
};
quake_COM.AddGameDirectory = function(dir) {
	var search = new quake__$COM_SearchPath(dir);
	var i = 0;
	while(true) {
		var pak = quake_COM.LoadPackFile(dir + "/" + "pak" + i + ".pak");
		if(pak == null) {
			break;
		}
		search.pack.push(pak);
		++i;
	}
	quake_COM.searchpaths.push(search);
};
quake_COM.InitFilesystem = function() {
	var i = quake_COM.CheckParm("-basedir");
	var search = null;
	if(i != null) {
		search = quake_COM.argv[i + 1];
	}
	if(search != null) {
		quake_COM.AddGameDirectory(search);
	} else {
		quake_COM.AddGameDirectory("id1");
	}
	if(quake_COM.rogue) {
		quake_COM.AddGameDirectory("rogue");
	} else if(quake_COM.hipnotic) {
		quake_COM.AddGameDirectory("hipnotic");
	}
	i = quake_COM.CheckParm("-game");
	if(i != null) {
		search = quake_COM.argv[i + 1];
		if(search != null) {
			quake_COM.modified = true;
			quake_COM.AddGameDirectory(search);
		}
	}
	quake_COM.gamedir = [quake_COM.searchpaths[quake_COM.searchpaths.length - 1]];
};
var quake_CRC = function() { };
$hxClasses["quake.CRC"] = quake_CRC;
quake_CRC.__name__ = true;
quake_CRC.Block = function(start) {
	var crcvalue = 65535;
	var _g1 = 0;
	var _g = start.length;
	while(_g1 < _g) {
		var i = _g1++;
		crcvalue = crcvalue << 8 & 65535 ^ quake_CRC.table[crcvalue >> 8 ^ start[i]];
	}
	return crcvalue;
};
var quake_Chase = function() { };
$hxClasses["quake.Chase"] = quake_Chase;
quake_Chase.__name__ = true;
quake_Chase.Init = function() {
	quake_Chase.back = quake_Cvar.RegisterVariable("chase_back","100");
	quake_Chase.up = quake_Cvar.RegisterVariable("chase_up","16");
	quake_Chase.right = quake_Cvar.RegisterVariable("chase_right","0");
	quake_Chase.active = quake_Cvar.RegisterVariable("chase_active","0");
};
quake_Chase.Update = function() {
	var this1 = new Float32Array(3);
	var forward = this1;
	var this2 = new Float32Array(3);
	var r = this2;
	quake__$Vec_Vec_$Impl_$.AngleVectors(quake_CL.state.viewangles,forward,r);
	var tr = new quake_Trace();
	var org = quake_Render.refdef.vieworg;
	var tmp = quake_CL.state.worldmodel.hulls[0];
	var this3 = new Float32Array(3);
	var v = this3;
	v[0] = org[0] + 4096.0 * forward[0];
	v[1] = org[1] + 4096.0 * forward[1];
	v[2] = org[2] + 4096.0 * forward[2];
	quake_SV.RecursiveHullCheck(tmp,0,0.0,1.0,org,v,tr);
	var stop = tr.endpos;
	var _g = stop;
	_g[2] -= org[2];
	var dist = (stop[0] - org[0]) * forward[0] + (stop[1] - org[1]) * forward[1] + stop[2] * forward[2];
	if(dist < 1.0) {
		dist = 1.0;
	}
	quake_Render.refdef.viewangles[0] = Math.atan(stop[2] / dist) / Math.PI * -180.0;
	var _g1 = org;
	_g1[0] -= forward[0] * quake_Chase.back.value + r[0] * quake_Chase.right.value;
	var _g2 = org;
	_g2[1] -= forward[1] * quake_Chase.back.value + r[1] * quake_Chase.right.value;
	var _g3 = org;
	_g3[2] += quake_Chase.up.value;
};
var quake_Cmd = function() { };
$hxClasses["quake.Cmd"] = quake_Cmd;
quake_Cmd.__name__ = true;
quake_Cmd.Init = function() {
	quake_Cmd.AddCommand("stuffcmds",quake_Cmd.StuffCmds_f);
	quake_Cmd.AddCommand("exec",quake_Cmd.Exec_f);
	quake_Cmd.AddCommand("echo",quake_Cmd.Echo_f);
	quake_Cmd.AddCommand("alias",quake_Cmd.Alias_f);
	quake_Cmd.AddCommand("cmd",quake_Cmd.ForwardToServer);
	quake_Cmd.AddCommand("wait",quake_Cmd.Wait_f);
};
quake_Cmd.AddCommand = function(name,command) {
	var _this = quake_Cvar.vars;
	if(__map_reserved[name] != null ? _this.existsReserved(name) : _this.h.hasOwnProperty(name)) {
		quake_Console.Print("Cmd.AddCommand: " + name + " already defined as a var\n");
		return;
	}
	var _this1 = quake_Cmd.functions;
	if(__map_reserved[name] != null ? _this1.existsReserved(name) : _this1.h.hasOwnProperty(name)) {
		quake_Console.Print("Cmd.AddCommand: " + name + " already defined\n");
	} else {
		var _this2 = quake_Cmd.functions;
		if(__map_reserved[name] != null) {
			_this2.setReserved(name,command);
		} else {
			_this2.h[name] = command;
		}
	}
};
quake_Cmd.CompleteCommand = function(partial) {
	if(partial.length == 0) {
		return null;
	}
	var name = quake_Cmd.functions.keys();
	while(name.hasNext()) {
		var name1 = name.next();
		if(name1.substring(0,partial.length) == partial) {
			return name1;
		}
	}
	return null;
};
quake_Cmd.Execute = function() {
	var line = "";
	var quotes = false;
	while(quake_Cmd.text.length != 0) {
		var c = HxOverrides.cca(quake_Cmd.text,0);
		quake_Cmd.text = quake_Cmd.text.substring(1);
		if(c == 34) {
			quotes = !quotes;
			line += "\"";
			continue;
		}
		if(!quotes && c == 59 || c == 10) {
			if(line.length == 0) {
				continue;
			}
			quake_Cmd.ExecuteString(line);
			if(quake_Cmd.wait) {
				quake_Cmd.wait = false;
				return;
			}
			line = "";
			continue;
		}
		line += String.fromCharCode(c);
	}
	quake_Cmd.text = "";
};
quake_Cmd.ExecuteString = function(text,client) {
	if(client == null) {
		client = false;
	}
	quake_Cmd.client = client;
	quake_Cmd.TokenizeString(text);
	if(quake_Cmd.argv.length == 0) {
		return;
	}
	var name = quake_Cmd.argv[0].toLowerCase();
	var _this = quake_Cmd.functions;
	var f = __map_reserved[name] != null ? _this.getReserved(name) : _this.h[name];
	if(f != null) {
		f();
		return;
	}
	var _this1 = quake_Cmd.alias;
	var a = __map_reserved[name] != null ? _this1.getReserved(name) : _this1.h[name];
	if(a != null) {
		quake_Cmd.text = a + quake_Cmd.text;
		return;
	}
	if(!quake_Cvar.Command()) {
		quake_Console.Print("Unknown command \"" + name + "\"\n");
	}
};
quake_Cmd.ForwardToServer = function() {
	if(quake_CL.cls.state != 2) {
		quake_Console.Print("Can't \"" + quake_Cmd.argv[0] + "\", not connected\n");
		return;
	}
	if(quake_CL.cls.demoplayback == true) {
		return;
	}
	var args = String.fromCharCode(4);
	if(quake_Cmd.argv[0].toLowerCase() != "cmd") {
		args += quake_Cmd.argv[0] + " ";
	}
	if(quake_Cmd.argv.length >= 2) {
		args += quake_Cmd.args;
	} else {
		args += "\n";
	}
	quake_CL.cls.message.WriteString(args);
};
quake_Cmd.StuffCmds_f = function() {
	var s = false;
	var build = "";
	var _g = 0;
	var _g1 = quake_COM.argv;
	while(_g < _g1.length) {
		var arg = _g1[_g];
		++_g;
		var c = HxOverrides.cca(arg,0);
		if(s == true) {
			if(c == 43) {
				build += "\n" + arg.substring(1) + " ";
				continue;
			}
			if(c == 45) {
				s = false;
				build += "\n";
				continue;
			}
			build += arg + " ";
			continue;
		}
		if(c == 43) {
			s = true;
			build += arg.substring(1) + " ";
		}
	}
	if(build.length != 0) {
		quake_Cmd.text = build + "\n" + quake_Cmd.text;
	}
};
quake_Cmd.Exec_f = function() {
	if(quake_Cmd.argv.length != 2) {
		quake_Console.Print("exec <filename> : execute a script file\n");
		return;
	}
	var filename = quake_Cmd.argv[1];
	var f = quake_COM.LoadTextFile(filename);
	if(f == null) {
		quake_Console.Print("couldn't exec " + filename + "\n");
		return;
	}
	quake_Console.Print("execing " + filename + "\n");
	quake_Cmd.text = f + quake_Cmd.text;
};
quake_Cmd.Echo_f = function() {
	var _g1 = 1;
	var _g = quake_Cmd.argv.length;
	while(_g1 < _g) {
		var i = _g1++;
		quake_Console.Print(quake_Cmd.argv[i] + " ");
	}
	quake_Console.Print("\n");
};
quake_Cmd.Alias_f = function() {
	if(quake_Cmd.argv.length <= 1) {
		quake_Console.Print("Current alias commands:\n");
		var name = quake_Cmd.alias.keys();
		while(name.hasNext()) {
			var name1 = name.next();
			var _this = quake_Cmd.alias;
			quake_Console.Print(name1 + " : " + (__map_reserved[name1] != null ? _this.getReserved(name1) : _this.h[name1]) + "\n");
		}
	}
	var name2 = quake_Cmd.argv[1];
	var value = "";
	var _g1 = 2;
	var _g = quake_Cmd.argv.length;
	while(_g1 < _g) {
		var j = _g1++;
		value += quake_Cmd.argv[j];
		if(j != quake_Cmd.argv.length - 1) {
			value += " ";
		}
	}
	var v = value + "\n";
	var _this1 = quake_Cmd.alias;
	if(__map_reserved[name2] != null) {
		_this1.setReserved(name2,v);
	} else {
		_this1.h[name2] = v;
	}
};
quake_Cmd.Wait_f = function() {
	quake_Cmd.wait = true;
};
quake_Cmd.TokenizeString = function(text) {
	quake_Cmd.argv = [];
	while(true) {
		var i = 0;
		while(i < text.length) {
			var c = HxOverrides.cca(text,i);
			if(c > 32 || c == 10) {
				break;
			}
			++i;
		}
		if(quake_Cmd.argv.length == 1) {
			quake_Cmd.args = text.substring(i);
		}
		if(HxOverrides.cca(text,i) == 10 || i >= text.length) {
			return;
		}
		text = quake_COM.Parse(text);
		if(text == null) {
			return;
		}
		quake_Cmd.argv.push(quake_COM.token);
	}
};
var quake__$Console_ConsoleEntry = function(s,t) {
	this.text = s;
	this.time = t;
};
$hxClasses["quake._Console.ConsoleEntry"] = quake__$Console_ConsoleEntry;
quake__$Console_ConsoleEntry.__name__ = true;
quake__$Console_ConsoleEntry.prototype = {
	text: null
	,time: null
	,__class__: quake__$Console_ConsoleEntry
};
var quake_Console = function() { };
$hxClasses["quake.Console"] = quake_Console;
quake_Console.__name__ = true;
quake_Console.Init = function() {
	quake_Console.debuglog = quake_COM.CheckParm("-condebug") != null;
	if(quake_Console.debuglog) {
		quake_COM.WriteTextFile("qconsole.log","");
	}
	quake_Console.Print("Console initialized.\n");
	quake_Console.notifytime = quake_Cvar.RegisterVariable("con_notifytime","3");
	quake_Cmd.AddCommand("toggleconsole",quake_Console.ToggleConsole_f);
	quake_Cmd.AddCommand("messagemode",quake_Console.MessageMode_f);
	quake_Cmd.AddCommand("messagemode2",quake_Console.MessageMode2_f);
	quake_Cmd.AddCommand("clear",quake_Console.Clear_f);
};
quake_Console.ToggleConsole_f = function() {
	quake_SCR.EndLoadingPlaque();
	if(quake_Key.dest == 1) {
		if(quake_CL.cls.state != 2) {
			quake_Menu.Menu_Main_f();
			return;
		}
		quake_Key.dest = 0;
		quake_Key.edit_line = "";
		quake_Key.history_line = quake_Key.lines.length;
		return;
	}
	quake_Key.dest = 1;
};
quake_Console.MessageMode_f = function() {
	quake_Key.dest = 2;
	quake_Key.team_message = false;
};
quake_Console.MessageMode2_f = function() {
	quake_Key.dest = 2;
	quake_Key.team_message = true;
};
quake_Console.Clear_f = function() {
	quake_Console.backscroll = 0;
	quake_Console.current = 0;
	quake_Console.text = [];
};
quake_Console.Print = function(msg) {
	if(quake_Console.debuglog) {
		var data = quake_COM.LoadTextFile("qconsole.log");
		if(data != null) {
			data += msg;
			if(data.length >= 32768) {
				data = data.substring(data.length - 16384);
			}
			quake_COM.WriteTextFile("qconsole.log",data);
		}
	}
	quake_Console.backscroll = 0;
	var mask = 0;
	if(HxOverrides.cca(msg,0) <= 2) {
		mask = 128;
		if(HxOverrides.cca(msg,0) == 1) {
			quake_S.StartSound(quake_CL.state.viewentity,-1,quake_Console.sfx_talk,quake__$Vec_Vec_$Impl_$.origin,1.0,1.0);
		}
		msg = msg.substring(1);
	}
	var _g1 = 0;
	var _g = msg.length;
	while(_g1 < _g) {
		var i = _g1++;
		if(quake_Console.text[quake_Console.current] == null) {
			quake_Console.text[quake_Console.current] = new quake__$Console_ConsoleEntry("",quake_Host.realtime);
		}
		if(HxOverrides.cca(msg,i) == 10) {
			if(quake_Console.text.length >= 1024) {
				quake_Console.text = quake_Console.text.slice(-512);
				quake_Console.current = quake_Console.text.length;
			} else {
				quake_Console.current++;
			}
			continue;
		}
		quake_Console.text[quake_Console.current].text += String.fromCharCode(HxOverrides.cca(msg,i) + mask);
	}
};
quake_Console.DPrint = function(msg) {
	if(quake_Host.developer.value != 0) {
		quake_Console.Print(msg);
	}
};
quake_Console.DrawNotify = function() {
	var width = (quake_VID.width >> 3) - 2;
	var i = quake_Console.text.length - 4;
	var v = 0;
	var _g1 = i < 0 ? 0 : i;
	var _g = quake_Console.text.length;
	while(_g1 < _g) {
		var i1 = _g1++;
		if(quake_Host.realtime - quake_Console.text[i1].time > quake_Console.notifytime.value) {
			continue;
		}
		quake_Draw.String(8,v,quake_Console.text[i1].text.substring(0,width));
		v += 8;
	}
	if(quake_Key.dest == 2) {
		quake_Draw.String(8,v,"say: " + quake_Key.chat_buffer + String.fromCharCode(10 + ((quake_Host.realtime * 4.0 | 0) & 1)));
	}
};
quake_Console.ClearNotify = function() {
	var i = quake_Console.text.length - 4;
	var _g1 = i < 0 ? 0 : i;
	var _g = quake_Console.text.length;
	while(_g1 < _g) {
		var i1 = _g1++;
		quake_Console.text[i1].time = 0.0;
	}
};
quake_Console.DrawConsole = function(lines) {
	if(lines <= 0) {
		return;
	}
	lines = Math.floor(lines * quake_VID.height * 0.005);
	quake_Draw.ConsoleBackground(lines);
	var width = (quake_VID.width >> 3) - 2;
	var y = lines - 16;
	var i = quake_Console.text.length - 1 - quake_Console.backscroll;
	while(i >= 0) {
		if(quake_Console.text[i].text.length == 0) {
			y -= 8;
		} else {
			y -= Math.ceil(quake_Console.text[i].text.length / width) << 3;
		}
		--i;
		if(y <= 0) {
			break;
		}
	}
	var _g1 = i + 1;
	var _g = quake_Console.text.length - quake_Console.backscroll;
	while(_g1 < _g) {
		var i1 = _g1++;
		var txt = quake_Console.text[i1].text;
		var rows = Math.ceil(txt.length / width);
		if(rows == 0) {
			y += 8;
			continue;
		}
		var _g3 = 0;
		var _g2 = rows;
		while(_g3 < _g2) {
			var j = _g3++;
			quake_Draw.String(8,y,HxOverrides.substr(txt,j * width,width));
			y += 8;
		}
	}
	quake_Console.DrawInput(lines);
};
quake_Console.DrawInput = function(vislines) {
	if(quake_Key.dest != 1 && !quake_Console.forcedup) {
		return;
	}
	var text = "]" + quake_Key.edit_line + String.fromCharCode(10 + ((quake_Host.realtime * 4.0 | 0) & 1));
	var width = (quake_VID.width >> 3) - 2;
	if(text.length >= width) {
		text = text.substring(1 + text.length - width);
	}
	quake_Draw.String(8,vislines - 16,text);
};
var quake_Cvar = function(name,value,archive,server) {
	this.name = name;
	this.string = value;
	this.archive = archive;
	this.server = server;
	this.value = quake_Q.atof(value);
};
$hxClasses["quake.Cvar"] = quake_Cvar;
quake_Cvar.__name__ = true;
quake_Cvar.FindVar = function(name) {
	var _this = quake_Cvar.vars;
	if(__map_reserved[name] != null) {
		return _this.getReserved(name);
	} else {
		return _this.h[name];
	}
};
quake_Cvar.CompleteVariable = function(partial) {
	if(partial.length == 0) {
		return null;
	}
	var name = quake_Cvar.vars.keys();
	while(name.hasNext()) {
		var name1 = name.next();
		if(name1.substring(0,partial.length) == partial) {
			return name1;
		}
	}
	return null;
};
quake_Cvar.Set = function(name,value) {
	var _this = quake_Cvar.vars;
	var v = __map_reserved[name] != null ? _this.getReserved(name) : _this.h[name];
	if(v == null) {
		quake_Console.Print("Cvar.Set: variable " + name + " not found\n");
	} else {
		v.set(value);
	}
};
quake_Cvar.RegisterVariable = function(name,value,archive,server) {
	if(server == null) {
		server = false;
	}
	if(archive == null) {
		archive = false;
	}
	var _this = quake_Cvar.vars;
	if(__map_reserved[name] != null ? _this.existsReserved(name) : _this.h.hasOwnProperty(name)) {
		quake_Console.Print("Can't register variable " + name + ", already defined\n");
		return null;
	}
	var this1 = quake_Cvar.vars;
	var v = new quake_Cvar(name,value,archive,server);
	var _this1 = this1;
	if(__map_reserved[name] != null) {
		_this1.setReserved(name,v);
	} else {
		_this1.h[name] = v;
	}
	return v;
};
quake_Cvar.Command = function() {
	var v = quake_Cvar.vars.get(quake_Cmd.argv[0]);
	if(v == null) {
		return false;
	}
	if(quake_Cmd.argv.length <= 1) {
		quake_Console.Print("\"" + v.name + "\" is \"" + v.string + "\"\n");
		return true;
	}
	quake_Cvar.Set(v.name,quake_Cmd.argv[1]);
	return true;
};
quake_Cvar.WriteVariables = function() {
	var f = [];
	var _this = quake_Cvar.vars;
	var v = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
	while(v.hasNext()) {
		var v1 = v.next();
		if(v1.archive) {
			f.push(v1.name + " \"" + v1.string + "\"\n");
		}
	}
	return f.join("");
};
quake_Cvar.prototype = {
	name: null
	,string: null
	,value: null
	,archive: null
	,server: null
	,set: function(s) {
		var changed = this.string != s;
		this.string = s;
		this.value = quake_Q.atof(s);
		if(this.server && changed && quake_SV.server.active) {
			quake_Host.BroadcastPrint("\"" + this.name + "\" changed to \"" + this.string + "\"\n");
		}
	}
	,setValue: function(value) {
		this.set(value.toFixed(6));
	}
	,__class__: quake_Cvar
};
var quake_DLight = function() {
	this.key = 0;
	var this1 = new Float32Array(3);
	this.origin = this1;
	this.radius = 0;
	this.minlight = 0;
	this.decay = 0;
	this.die = 0;
};
$hxClasses["quake.DLight"] = quake_DLight;
quake_DLight.__name__ = true;
quake_DLight.prototype = {
	key: null
	,origin: null
	,radius: null
	,minlight: null
	,decay: null
	,die: null
	,alloc: function(k) {
		this.key = k;
		this.origin.set(quake__$Vec_Vec_$Impl_$.origin);
		this.radius = 0;
		this.minlight = 0;
		this.decay = 0;
		this.die = 0;
	}
	,__class__: quake_DLight
};
var quake_Def = function() { };
$hxClasses["quake.Def"] = quake_Def;
quake_Def.__name__ = true;
var quake_DrawPic = function(buf) {
	if(buf != null) {
		var view = new DataView(buf,0,8);
		this.width = view.getUint32(0,true);
		this.height = view.getUint32(4,true);
		this.data = new Uint8Array(buf,8,this.width * this.height);
		this.texnum = quake_GL.LoadPicTexture(this);
	}
};
$hxClasses["quake.DrawPic"] = quake_DrawPic;
quake_DrawPic.__name__ = true;
quake_DrawPic.prototype = {
	width: null
	,height: null
	,data: null
	,texnum: null
	,translate: null
	,__class__: quake_DrawPic
};
var quake_Draw = function() { };
$hxClasses["quake.Draw"] = quake_Draw;
quake_Draw.__name__ = true;
quake_Draw.CharToConback = function(num,dest) {
	var source = (num >> 4 << 10) + ((num & 15) << 3);
	var _g = 0;
	while(_g < 8) {
		var drawline = _g++;
		var _g1 = 0;
		while(_g1 < 8) {
			var x = _g1++;
			if(quake_Draw.chars[source + x] != 0) {
				quake_Draw.conback.data[dest + x] = 96 + quake_Draw.chars[source + x];
			}
		}
		source += 128;
		dest += 320;
	}
};
quake_Draw.Init = function() {
	quake_Draw.chars = new Uint8Array(quake_W.GetLumpName("CONCHARS"));
	var trans = new ArrayBuffer(65536);
	var trans32 = new Uint32Array(trans);
	var _g = 0;
	while(_g < 16384) {
		var i = _g++;
		if(quake_Draw.chars[i] != 0) {
			trans32[i] = quake_COM.LittleLong(quake_VID.d_8to24table[quake_Draw.chars[i]] + -16777216);
		}
	}
	quake_Draw.char_texture = quake_GL.gl.createTexture();
	quake_GL.Bind(0,quake_Draw.char_texture);
	quake_GL.gl.texImage2D(3553,0,6408,128,128,0,6408,5121,new Uint8Array(trans));
	quake_GL.gl.texParameterf(3553,10241,9729);
	quake_GL.gl.texParameterf(3553,10240,9729);
	quake_Draw.conback = new quake_DrawPic(null);
	var cb = quake_COM.LoadFile("gfx/conback.lmp");
	if(cb == null) {
		quake_Sys.Error("Couldn't load gfx/conback.lmp");
	}
	quake_Draw.conback.width = 320;
	quake_Draw.conback.height = 200;
	quake_Draw.conback.data = new Uint8Array(cb,8,64000);
	var ver = "(HaxeQuake " + null + ") 1.09";
	var _g1 = 0;
	var _g2 = ver.length;
	while(_g1 < _g2) {
		var i1 = _g1++;
		quake_Draw.CharToConback(HxOverrides.cca(ver,i1),59829 - (ver.length - i1 << 3));
	}
	quake_Draw.conback.texnum = quake_GL.LoadPicTexture(quake_Draw.conback);
	quake_Draw.loading = quake_Draw.CachePic("loading");
	quake_Draw.loadingElem = window.document.getElementById("loading");
	quake_Draw.loadingElem.src = quake_Draw.PicToDataURL(quake_Draw.loading);
	var tmp = "url(\"" + quake_Draw.PicToDataURL(new quake_DrawPic(quake_W.GetLumpName("BACKTILE")));
	window.document.body.style.backgroundImage = tmp + "\")";
};
quake_Draw.Character = function(x,y,num) {
	var program = quake_GL.UseProgram(quake_GLPrograms.character);
	quake_GL.Bind(program.tTexture,quake_Draw.char_texture);
	quake_GL.gl.bindBuffer(34962,quake_GL.rect);
	quake_GL.gl.vertexAttribPointer(program.aPoint,2,5126,false,0,0);
	quake_GL.gl.uniform2f(program.uCharacter,num & 15,num >> 4);
	quake_GL.gl.uniform2f(program.uDest,x,y);
	quake_GL.gl.drawArrays(5,0,4);
};
quake_Draw.String = function(x,y,str) {
	var program = quake_GL.UseProgram(quake_GLPrograms.character);
	quake_GL.Bind(program.tTexture,quake_Draw.char_texture);
	quake_GL.gl.bindBuffer(34962,quake_GL.rect);
	quake_GL.gl.vertexAttribPointer(program.aPoint,2,5126,false,0,0);
	var _g1 = 0;
	var _g = str.length;
	while(_g1 < _g) {
		var i = _g1++;
		var num = HxOverrides.cca(str,i);
		quake_GL.gl.uniform2f(program.uCharacter,num & 15,num >> 4);
		quake_GL.gl.uniform2f(program.uDest,x,y);
		quake_GL.gl.drawArrays(5,0,4);
		x += 8;
	}
};
quake_Draw.StringWhite = function(x,y,str) {
	var program = quake_GL.UseProgram(quake_GLPrograms.character);
	quake_GL.Bind(program.tTexture,quake_Draw.char_texture);
	quake_GL.gl.bindBuffer(34962,quake_GL.rect);
	quake_GL.gl.vertexAttribPointer(program.aPoint,2,5126,false,0,0);
	var _g1 = 0;
	var _g = str.length;
	while(_g1 < _g) {
		var i = _g1++;
		var num = HxOverrides.cca(str,i) + 128;
		quake_GL.gl.uniform2f(program.uCharacter,num & 15,num >> 4);
		quake_GL.gl.uniform2f(program.uDest,x,y);
		quake_GL.gl.drawArrays(5,0,4);
		x += 8;
	}
};
quake_Draw.PicFromWad = function(name) {
	return new quake_DrawPic(quake_W.GetLumpName(name));
};
quake_Draw.CachePic = function(path) {
	path = "gfx/" + path + ".lmp";
	var buf = quake_COM.LoadFile(path);
	if(buf == null) {
		quake_Sys.Error("CachePic: failed to load " + path);
	}
	return new quake_DrawPic(buf);
};
quake_Draw.Pic = function(x,y,pic) {
	var program = quake_GL.UseProgram(quake_GLPrograms.pic);
	quake_GL.Bind(program.tTexture,pic.texnum);
	quake_GL.gl.bindBuffer(34962,quake_GL.rect);
	quake_GL.gl.vertexAttribPointer(program.aPoint,2,5126,false,0,0);
	quake_GL.gl.uniform4f(program.uRect,x,y,pic.width,pic.height);
	quake_GL.gl.drawArrays(5,0,4);
};
quake_Draw.PicTranslate = function(x,y,pic,top,bottom) {
	var program = quake_GL.UseProgram(quake_GLPrograms.picTranslate);
	quake_GL.Bind(program.tTexture,pic.texnum);
	quake_GL.Bind(program.tTrans,pic.translate);
	quake_GL.gl.bindBuffer(34962,quake_GL.rect);
	quake_GL.gl.vertexAttribPointer(program.aPoint,2,5126,false,0,0);
	quake_GL.gl.uniform4f(program.uRect,x,y,pic.width,pic.height);
	var p = quake_VID.d_8to24table[top];
	quake_GL.gl.uniform3f(program.uTop,p & 255,p >> 8 & 255,p >> 16);
	p = quake_VID.d_8to24table[bottom];
	quake_GL.gl.uniform3f(program.uBottom,p & 255,p >> 8 & 255,p >> 16);
	quake_GL.gl.drawArrays(5,0,4);
};
quake_Draw.ConsoleBackground = function(lines) {
	var program = quake_GL.UseProgram(quake_GLPrograms.pic);
	quake_GL.Bind(program.tTexture,quake_Draw.conback.texnum);
	quake_GL.gl.bindBuffer(34962,quake_GL.rect);
	quake_GL.gl.vertexAttribPointer(program.aPoint,2,5126,false,0,0);
	quake_GL.gl.uniform4f(program.uRect,0,lines - quake_VID.height,quake_VID.width,quake_VID.height);
	quake_GL.gl.drawArrays(5,0,4);
};
quake_Draw.Fill = function(x,y,w,h,c) {
	var program = quake_GL.UseProgram(quake_GLPrograms.fill);
	quake_GL.gl.bindBuffer(34962,quake_GL.rect);
	quake_GL.gl.vertexAttribPointer(program.aPoint,2,5126,false,0,0);
	quake_GL.gl.uniform4f(program.uRect,x,y,w,h);
	var color = quake_VID.d_8to24table[c];
	quake_GL.gl.uniform4f(program.uColor,color & 255,color >> 8 & 255,color >> 16,1.0);
	quake_GL.gl.drawArrays(5,0,4);
};
quake_Draw.FadeScreen = function() {
	var program = quake_GL.UseProgram(quake_GLPrograms.fill);
	quake_GL.gl.bindBuffer(34962,quake_GL.rect);
	quake_GL.gl.vertexAttribPointer(program.aPoint,2,5126,false,0,0);
	quake_GL.gl.uniform4f(program.uRect,0,0,quake_VID.width,quake_VID.height);
	quake_GL.gl.uniform4f(program.uColor,0.0,0.0,0.0,0.8);
	quake_GL.gl.drawArrays(5,0,4);
};
quake_Draw.BeginDisc = function() {
	if(quake_Draw.loadingElem == null) {
		return;
	}
	quake_Draw.loadingElem.style.left = (quake_VID.width - quake_Draw.loading.width >> 1) + "px";
	quake_Draw.loadingElem.style.top = (quake_VID.height - quake_Draw.loading.height >> 1) + "px";
	quake_Draw.loadingElem.style.display = "inline-block";
};
quake_Draw.EndDisc = function() {
	if(quake_Draw.loadingElem != null) {
		quake_Draw.loadingElem.style.display = "none";
	}
};
quake_Draw.PicToDataURL = function(pic) {
	var canvas = window.document.createElement("canvas");
	canvas.width = pic.width;
	canvas.height = pic.height;
	var ctx = canvas.getContext("2d");
	var data = ctx.createImageData(pic.width,pic.height);
	var trans = new ArrayBuffer(data.data.length);
	var trans32 = new Uint32Array(trans);
	var _g1 = 0;
	var _g = pic.data.length;
	while(_g1 < _g) {
		var i = _g1++;
		trans32[i] = quake_COM.LittleLong(quake_VID.d_8to24table[pic.data[i]] + -16777216);
	}
	data.data.set(new Uint8Array(trans));
	ctx.putImageData(data,0,0);
	return canvas.toDataURL();
};
var quake_ED = function() { };
$hxClasses["quake.ED"] = quake_ED;
quake_ED.__name__ = true;
quake_ED.Alloc = function() {
	var i = quake_SV.svs.maxclients + 1;
	while(i < quake_SV.server.num_edicts) {
		var e = quake_SV.server.edicts[i++];
		if(e.free && (e.freetime < 2.0 || quake_SV.server.time - e.freetime > 0.5)) {
			e.Clear();
			return e;
		}
	}
	if(i == 2048) {
		quake_Sys.Error("ED.Alloc: no free edicts (max_edicts is " + 2048 + ")");
	}
	var e1 = quake_SV.server.edicts[quake_SV.server.num_edicts++];
	e1.Clear();
	return e1;
};
quake_ED.Free = function(ed) {
	quake_SV.UnlinkEdict(ed);
	ed.free = true;
	ed.v.ints[29] = 0;
	ed.v.floats[59] = 0.0;
	ed.v.floats[0] = 0.0;
	ed.v.floats[77] = 0.0;
	ed.v.floats[31] = 0.0;
	ed.v.floats[30] = 0.0;
	ed.v.origin.set(quake__$Vec_Vec_$Impl_$.origin);
	ed.v.angles.set(quake__$Vec_Vec_$Impl_$.origin);
	ed.v.floats[46] = -1.0;
	ed.v.floats[9] = 0.0;
	ed.freetime = quake_SV.server.time;
};
quake_ED.GlobalAtOfs = function(ofs) {
	var _g = 0;
	var _g1 = quake_PR.globaldefs;
	while(_g < _g1.length) {
		var def = _g1[_g];
		++_g;
		if(def.ofs == ofs) {
			return def;
		}
	}
	return null;
};
quake_ED.FieldAtOfs = function(ofs) {
	var _g = 0;
	var _g1 = quake_PR.fielddefs;
	while(_g < _g1.length) {
		var def = _g1[_g];
		++_g;
		if(def.ofs == ofs) {
			return def;
		}
	}
	return null;
};
quake_ED.FindField = function(name) {
	var _g = 0;
	var _g1 = quake_PR.fielddefs;
	while(_g < _g1.length) {
		var def = _g1[_g];
		++_g;
		if(quake_PR.GetString(def.name) == name) {
			return def;
		}
	}
	return null;
};
quake_ED.FindGlobal = function(name) {
	var _g = 0;
	var _g1 = quake_PR.globaldefs;
	while(_g < _g1.length) {
		var def = _g1[_g];
		++_g;
		if(quake_PR.GetString(def.name) == name) {
			return def;
		}
	}
	return null;
};
quake_ED.FindFunction = function(name) {
	var _g1 = 0;
	var _g = quake_PR.functions.length;
	while(_g1 < _g) {
		var i = _g1++;
		if(quake_PR.GetString(quake_PR.functions[i].name) == name) {
			return i;
		}
	}
	return null;
};
quake_ED.Print = function(ed) {
	if(ed.free) {
		quake_Console.Print("FREE\n");
		return;
	}
	quake_Console.Print("\nEDICT " + ed.num + ":\n");
	var _g1 = 1;
	var _g = quake_PR.fielddefs.length;
	while(_g1 < _g) {
		var i = _g1++;
		var d = quake_PR.fielddefs[i];
		var name = quake_PR.GetString(d.name);
		if(HxOverrides.cca(name,name.length - 2) == 95) {
			continue;
		}
		var v = d.ofs;
		if(ed.v.ints[v] == 0) {
			if((d.type & 32767) == 3) {
				if(ed.v.ints[v + 1] == 0 && ed.v.ints[v + 2] == 0) {
					continue;
				}
			} else {
				continue;
			}
		}
		while(name.length <= 14) name += " ";
		quake_Console.Print(name + quake_PR.ValueString(d.type,ed.v.buffer,v) + "\n");
	}
};
quake_ED.PrintEdicts = function() {
	if(!quake_SV.server.active) {
		return;
	}
	quake_Console.Print(quake_SV.server.num_edicts + " entities\n");
	var _g1 = 0;
	var _g = quake_SV.server.num_edicts;
	while(_g1 < _g) {
		var i = _g1++;
		quake_ED.Print(quake_SV.server.edicts[i]);
	}
};
quake_ED.PrintEdict_f = function() {
	if(!quake_SV.server.active) {
		return;
	}
	var i = quake_Q.atoi(quake_Cmd.argv[1]);
	if(i >= 0 && i < quake_SV.server.num_edicts) {
		quake_ED.Print(quake_SV.server.edicts[i]);
	}
};
quake_ED.Count = function() {
	if(!quake_SV.server.active) {
		return;
	}
	var active = 0;
	var models = 0;
	var solid = 0;
	var step = 0;
	var _g1 = 0;
	var _g = quake_SV.server.num_edicts;
	while(_g1 < _g) {
		var i = _g1++;
		var ent = quake_SV.server.edicts[i];
		if(ent.free) {
			continue;
		}
		++active;
		if(ent.v.floats[9] != 0.0) {
			++solid;
		}
		if(ent.v.ints[29] != 0) {
			++models;
		}
		if(ent.v.floats[8] == 4) {
			++step;
		}
	}
	var num_edicts = quake_SV.server.num_edicts;
	quake_Console.Print("num_edicts:" + (num_edicts <= 9 ? "  " : num_edicts <= 99 ? " " : "") + num_edicts + "\n");
	quake_Console.Print("active    :" + (active <= 9 ? "  " : active <= 99 ? " " : "") + active + "\n");
	quake_Console.Print("view      :" + (models <= 9 ? "  " : models <= 99 ? " " : "") + models + "\n");
	quake_Console.Print("touch     :" + (solid <= 9 ? "  " : solid <= 99 ? " " : "") + solid + "\n");
	quake_Console.Print("step      :" + (step <= 9 ? "  " : step <= 99 ? " " : "") + step + "\n");
};
quake_ED.ParseGlobals = function(data) {
	while(true) {
		data = quake_COM.Parse(data);
		if(HxOverrides.cca(quake_COM.token,0) == 125) {
			return;
		}
		if(data == null) {
			quake_Sys.Error("ED.ParseGlobals: EOF without closing brace");
		}
		var keyname = quake_COM.token;
		data = quake_COM.Parse(data);
		if(data == null) {
			quake_Sys.Error("ED.ParseGlobals: EOF without closing brace");
		}
		if(HxOverrides.cca(quake_COM.token,0) == 125) {
			quake_Sys.Error("ED.ParseGlobals: closing brace without data");
		}
		var key = quake_ED.FindGlobal(keyname);
		if(key == null) {
			quake_Console.Print("'" + keyname + "' is not a global\n");
			continue;
		}
		if(!quake_ED.ParseEpair(quake_PR.globals.buffer,key,quake_COM.token)) {
			quake_Host.Error("ED.ParseGlobals: parse error");
		}
	}
};
quake_ED.NewString = function(string) {
	var newstring_b = "";
	var i = 0;
	while(i < string.length) {
		var c = HxOverrides.cca(string,i);
		if(c == 92 && i < string.length - 1) {
			++i;
			newstring_b += String.fromCharCode(HxOverrides.cca(string,i) == 110 ? 10 : 92);
		} else {
			newstring_b += String.fromCharCode(c);
		}
		++i;
	}
	return quake_PR.NewString(newstring_b,string.length + 1);
};
quake_ED.ParseEpair = function(base,key,s) {
	var d_float = new Float32Array(base);
	var d_int = new Int32Array(base);
	var _g = key.type & 32767;
	switch(_g) {
	case 1:
		d_int[key.ofs] = quake_ED.NewString(s);
		return true;
	case 2:
		d_float[key.ofs] = quake_Q.atof(s);
		return true;
	case 3:
		var v = s.split(" ");
		d_float[key.ofs] = quake_Q.atof(v[0]);
		d_float[key.ofs + 1] = quake_Q.atof(v[1]);
		d_float[key.ofs + 2] = quake_Q.atof(v[2]);
		return true;
	case 4:
		d_int[key.ofs] = quake_Q.atoi(s);
		return true;
	case 5:
		var d = quake_ED.FindField(s);
		if(d == null) {
			quake_Console.Print("Can't find field " + s + "\n");
			return false;
		}
		d_int[key.ofs] = d.ofs;
		return true;
	case 6:
		var d1 = quake_ED.FindFunction(s);
		if(d1 == null) {
			quake_Console.Print("Can't find function " + s + "\n");
			return false;
		}
		d_int[key.ofs] = d1;
		break;
	default:
	}
	return true;
};
quake_ED.ParseEdict = function(data,ent) {
	if(ent != quake_SV.server.edicts[0]) {
		var _g1 = 0;
		var _g = quake_PR.entityfields;
		while(_g1 < _g) {
			var i = _g1++;
			ent.v.ints[i] = 0;
		}
	}
	var init = false;
	while(true) {
		data = quake_COM.Parse(data);
		if(HxOverrides.cca(quake_COM.token,0) == 125) {
			break;
		}
		if(data == null) {
			quake_Sys.Error("ED.ParseEdict: EOF without closing brace");
		}
		var anglehack;
		if(quake_COM.token == "angle") {
			quake_COM.token = "angles";
			anglehack = true;
		} else {
			anglehack = false;
			if(quake_COM.token == "light") {
				quake_COM.token = "light_lev";
			}
		}
		var n = quake_COM.token.length;
		while(n > 0) {
			if(HxOverrides.cca(quake_COM.token,n - 1) != 32) {
				break;
			}
			--n;
		}
		var keyname = quake_COM.token.substring(0,n);
		data = quake_COM.Parse(data);
		if(data == null) {
			quake_Sys.Error("ED.ParseEdict: EOF without closing brace");
		}
		if(HxOverrides.cca(quake_COM.token,0) == 125) {
			quake_Sys.Error("ED.ParseEdict: closing brace without data");
		}
		init = true;
		if(HxOverrides.cca(keyname,0) == 95) {
			continue;
		}
		var key = quake_ED.FindField(keyname);
		if(key == null) {
			quake_Console.Print("'" + keyname + "' is not a field\n");
			continue;
		}
		if(anglehack) {
			quake_COM.token = "0 " + quake_COM.token + " 0";
		}
		if(!quake_ED.ParseEpair(ent.v.buffer,key,quake_COM.token)) {
			quake_Host.Error("ED.ParseEdict: parse error");
		}
	}
	if(!init) {
		ent.free = true;
	}
	return data;
};
quake_ED.LoadFromFile = function(data) {
	var ent = null;
	var inhibit = 0;
	quake_PR.globals.floats[31] = quake_SV.server.time;
	while(true) {
		data = quake_COM.Parse(data);
		if(data == null) {
			break;
		}
		if(HxOverrides.cca(quake_COM.token,0) != 123) {
			quake_Sys.Error("ED.LoadFromFile: found " + quake_COM.token + " when expecting {");
		}
		if(ent == null) {
			ent = quake_SV.server.edicts[0];
		} else {
			ent = quake_ED.Alloc();
		}
		data = quake_ED.ParseEdict(data,ent);
		var spawnflags = ent.v.floats[89] | 0;
		if(quake_Host.deathmatch.value != 0) {
			if((spawnflags & 2048) != 0) {
				quake_ED.Free(ent);
				++inhibit;
				continue;
			}
		} else if(quake_Host.current_skill == 0 && (spawnflags & 256) != 0 || quake_Host.current_skill == 1 && (spawnflags & 512) != 0 || quake_Host.current_skill >= 2 && (spawnflags & 1024) != 0) {
			quake_ED.Free(ent);
			++inhibit;
			continue;
		}
		if(ent.v.ints[28] == 0) {
			quake_Console.Print("No classname for:\n");
			quake_ED.Print(ent);
			quake_ED.Free(ent);
			continue;
		}
		var func = quake_ED.FindFunction(quake_PR.GetString(ent.v.ints[28]));
		if(func == null) {
			quake_Console.Print("No spawn function for:\n");
			quake_ED.Print(ent);
			quake_ED.Free(ent);
			continue;
		}
		quake_PR.globals.ints[28] = ent.num;
		quake_PR.ExecuteProgram(func);
	}
	quake_Console.DPrint(inhibit + " entities inhibited\n");
};
var quake_Edict = function(num) {
	this.num = num;
	this.free = false;
	this.area = new quake_EdictLink();
	this.area.ent = this;
	this.leafnums = [];
	this.baseline = new quake_EntityState();
	this.freetime = 0.0;
	this.v = new quake_EdictVars(new ArrayBuffer(quake_PR.entityfields << 2));
};
$hxClasses["quake.Edict"] = quake_Edict;
quake_Edict.__name__ = true;
quake_Edict.prototype = {
	num: null
	,free: null
	,area: null
	,leafnums: null
	,baseline: null
	,freetime: null
	,v: null
	,get_flags: function() {
		return this.v.floats[76] | 0;
	}
	,set_flags: function(v) {
		this.v.floats[76] = v;
		return v;
	}
	,get_items: function() {
		return this.v.floats[58] | 0;
	}
	,set_items: function(v) {
		this.v.floats[58] = v;
		return v;
	}
	,Clear: function() {
		var _g1 = 0;
		var _g = quake_PR.entityfields;
		while(_g1 < _g) {
			var i = _g1++;
			this.v.ints[i] = 0;
		}
		this.free = false;
	}
	,__class__: quake_Edict
};
var quake_EdictLink = function() {
};
$hxClasses["quake.EdictLink"] = quake_EdictLink;
quake_EdictLink.__name__ = true;
quake_EdictLink.prototype = {
	prev: null
	,next: null
	,ent: null
	,__class__: quake_EdictLink
};
var quake_EdictVars = function(buf) {
	this.buffer = buf;
	this.floats = new Float32Array(buf);
	this.ints = new Int32Array(buf);
	this.absmin = new Float32Array(this.buffer,4,3);
	this.absmax = new Float32Array(this.buffer,16,3);
	this.origin = new Float32Array(this.buffer,40,3);
	this.oldorigin = new Float32Array(this.buffer,52,3);
	this.velocity = new Float32Array(this.buffer,64,3);
	this.angles = new Float32Array(this.buffer,76,3);
	this.avelocity = new Float32Array(this.buffer,88,3);
	this.punchangle = new Float32Array(this.buffer,100,3);
	this.mins = new Float32Array(this.buffer,132,3);
	this.maxs = new Float32Array(this.buffer,144,3);
	this.size = new Float32Array(this.buffer,156,3);
	this.view_ofs = new Float32Array(this.buffer,248,3);
	this.v_angle = new Float32Array(this.buffer,280,3);
	this.movedir = new Float32Array(this.buffer,384,3);
};
$hxClasses["quake.EdictVars"] = quake_EdictVars;
quake_EdictVars.__name__ = true;
quake_EdictVars.prototype = {
	absmin: null
	,absmax: null
	,origin: null
	,oldorigin: null
	,velocity: null
	,angles: null
	,avelocity: null
	,punchangle: null
	,mins: null
	,maxs: null
	,size: null
	,view_ofs: null
	,v_angle: null
	,movedir: null
	,buffer: null
	,floats: null
	,ints: null
	,init: function() {
		this.absmin = new Float32Array(this.buffer,4,3);
		this.absmax = new Float32Array(this.buffer,16,3);
		this.origin = new Float32Array(this.buffer,40,3);
		this.oldorigin = new Float32Array(this.buffer,52,3);
		this.velocity = new Float32Array(this.buffer,64,3);
		this.angles = new Float32Array(this.buffer,76,3);
		this.avelocity = new Float32Array(this.buffer,88,3);
		this.punchangle = new Float32Array(this.buffer,100,3);
		this.mins = new Float32Array(this.buffer,132,3);
		this.maxs = new Float32Array(this.buffer,144,3);
		this.size = new Float32Array(this.buffer,156,3);
		this.view_ofs = new Float32Array(this.buffer,248,3);
		this.v_angle = new Float32Array(this.buffer,280,3);
		this.movedir = new Float32Array(this.buffer,384,3);
	}
	,get_modelindex: function() {
		return this.floats[0];
	}
	,set_modelindex: function(value) {
		return this.floats[0] = value;
	}
	,get_ltime: function() {
		return this.floats[7];
	}
	,set_ltime: function(value) {
		return this.floats[7] = value;
	}
	,get_movetype: function() {
		return this.floats[8];
	}
	,set_movetype: function(value) {
		return this.floats[8] = value;
	}
	,get_solid: function() {
		return this.floats[9];
	}
	,set_solid: function(value) {
		return this.floats[9] = value;
	}
	,get_classname: function() {
		return this.ints[28];
	}
	,set_classname: function(value) {
		return this.ints[28] = value;
	}
	,get_model: function() {
		return this.ints[29];
	}
	,set_model: function(value) {
		return this.ints[29] = value;
	}
	,get_frame: function() {
		return this.floats[30];
	}
	,set_frame: function(value) {
		return this.floats[30] = value;
	}
	,get_skin: function() {
		return this.floats[31];
	}
	,set_skin: function(value) {
		return this.floats[31] = value;
	}
	,get_effects: function() {
		return this.floats[32];
	}
	,set_effects: function(value) {
		return this.floats[32] = value;
	}
	,get_touch: function() {
		return this.ints[42];
	}
	,set_touch: function(value) {
		return this.ints[42] = value;
	}
	,get_use: function() {
		return this.ints[43];
	}
	,set_use: function(value) {
		return this.ints[43] = value;
	}
	,get_think: function() {
		return this.ints[44];
	}
	,set_think: function(value) {
		return this.ints[44] = value;
	}
	,get_blocked: function() {
		return this.ints[45];
	}
	,set_blocked: function(value) {
		return this.ints[45] = value;
	}
	,get_nextthink: function() {
		return this.floats[46];
	}
	,set_nextthink: function(value) {
		return this.floats[46] = value;
	}
	,get_groundentity: function() {
		return this.ints[47];
	}
	,set_groundentity: function(value) {
		return this.ints[47] = value;
	}
	,get_health: function() {
		return this.floats[48];
	}
	,set_health: function(value) {
		return this.floats[48] = value;
	}
	,get_frags: function() {
		return this.floats[49];
	}
	,set_frags: function(value) {
		return this.floats[49] = value;
	}
	,get_weapon: function() {
		return this.floats[50];
	}
	,set_weapon: function(value) {
		return this.floats[50] = value;
	}
	,get_weaponmodel: function() {
		return this.ints[51];
	}
	,set_weaponmodel: function(value) {
		return this.ints[51] = value;
	}
	,get_weaponframe: function() {
		return this.floats[52];
	}
	,set_weaponframe: function(value) {
		return this.floats[52] = value;
	}
	,get_currentammo: function() {
		return this.floats[53];
	}
	,set_currentammo: function(value) {
		return this.floats[53] = value;
	}
	,get_ammo_shells: function() {
		return this.floats[54];
	}
	,set_ammo_shells: function(value) {
		return this.floats[54] = value;
	}
	,get_ammo_nails: function() {
		return this.floats[55];
	}
	,set_ammo_nails: function(value) {
		return this.floats[55] = value;
	}
	,get_ammo_rockets: function() {
		return this.floats[56];
	}
	,set_ammo_rockets: function(value) {
		return this.floats[56] = value;
	}
	,get_ammo_cells: function() {
		return this.floats[57];
	}
	,set_ammo_cells: function(value) {
		return this.floats[57] = value;
	}
	,get_items: function() {
		return this.floats[58];
	}
	,set_items: function(value) {
		return this.floats[58] = value;
	}
	,get_takedamage: function() {
		return this.floats[59];
	}
	,set_takedamage: function(value) {
		return this.floats[59] = value;
	}
	,get_chain: function() {
		return this.ints[60];
	}
	,set_chain: function(value) {
		return this.ints[60] = value;
	}
	,get_deadflag: function() {
		return this.floats[61];
	}
	,set_deadflag: function(value) {
		return this.floats[61] = value;
	}
	,get_button0: function() {
		return this.floats[65];
	}
	,set_button0: function(value) {
		return this.floats[65] = value;
	}
	,get_button1: function() {
		return this.floats[66];
	}
	,set_button1: function(value) {
		return this.floats[66] = value;
	}
	,get_button2: function() {
		return this.floats[67];
	}
	,set_button2: function(value) {
		return this.floats[67] = value;
	}
	,get_impulse: function() {
		return this.floats[68];
	}
	,set_impulse: function(value) {
		return this.floats[68] = value;
	}
	,get_fixangle: function() {
		return this.floats[69];
	}
	,set_fixangle: function(value) {
		return this.floats[69] = value;
	}
	,get_idealpitch: function() {
		return this.floats[73];
	}
	,set_idealpitch: function(value) {
		return this.floats[73] = value;
	}
	,get_netname: function() {
		return this.ints[74];
	}
	,set_netname: function(value) {
		return this.ints[74] = value;
	}
	,get_enemy: function() {
		return this.ints[75];
	}
	,set_enemy: function(value) {
		return this.ints[75] = value;
	}
	,get_flags: function() {
		return this.floats[76];
	}
	,set_flags: function(value) {
		return this.floats[76] = value;
	}
	,get_colormap: function() {
		return this.floats[77];
	}
	,set_colormap: function(value) {
		return this.floats[77] = value;
	}
	,get_team: function() {
		return this.floats[78];
	}
	,set_team: function(value) {
		return this.floats[78] = value;
	}
	,get_max_health: function() {
		return this.floats[79];
	}
	,set_max_health: function(value) {
		return this.floats[79] = value;
	}
	,get_teleport_time: function() {
		return this.floats[80];
	}
	,set_teleport_time: function(value) {
		return this.floats[80] = value;
	}
	,get_armortype: function() {
		return this.floats[81];
	}
	,set_armortype: function(value) {
		return this.floats[81] = value;
	}
	,get_armorvalue: function() {
		return this.floats[82];
	}
	,set_armorvalue: function(value) {
		return this.floats[82] = value;
	}
	,get_waterlevel: function() {
		return this.floats[83];
	}
	,set_waterlevel: function(value) {
		return this.floats[83] = value;
	}
	,get_watertype: function() {
		return this.floats[84];
	}
	,set_watertype: function(value) {
		return this.floats[84] = value;
	}
	,get_ideal_yaw: function() {
		return this.floats[85];
	}
	,set_ideal_yaw: function(value) {
		return this.floats[85] = value;
	}
	,get_yaw_speed: function() {
		return this.floats[86];
	}
	,set_yaw_speed: function(value) {
		return this.floats[86] = value;
	}
	,get_aiment: function() {
		return this.ints[87];
	}
	,set_aiment: function(value) {
		return this.ints[87] = value;
	}
	,get_goalentity: function() {
		return this.ints[88];
	}
	,set_goalentity: function(value) {
		return this.ints[88] = value;
	}
	,get_spawnflags: function() {
		return this.floats[89];
	}
	,set_spawnflags: function(value) {
		return this.floats[89] = value;
	}
	,get_target: function() {
		return this.ints[90];
	}
	,set_target: function(value) {
		return this.ints[90] = value;
	}
	,get_targetname: function() {
		return this.ints[91];
	}
	,set_targetname: function(value) {
		return this.ints[91] = value;
	}
	,get_dmg_take: function() {
		return this.floats[92];
	}
	,set_dmg_take: function(value) {
		return this.floats[92] = value;
	}
	,get_dmg_save: function() {
		return this.floats[93];
	}
	,set_dmg_save: function(value) {
		return this.floats[93] = value;
	}
	,get_dmg_inflictor: function() {
		return this.ints[94];
	}
	,set_dmg_inflictor: function(value) {
		return this.ints[94] = value;
	}
	,get_owner: function() {
		return this.ints[95];
	}
	,set_owner: function(value) {
		return this.ints[95] = value;
	}
	,get_message: function() {
		return this.ints[99];
	}
	,set_message: function(value) {
		return this.ints[99] = value;
	}
	,get_sounds: function() {
		return this.floats[100];
	}
	,set_sounds: function(value) {
		return this.floats[100] = value;
	}
	,get_noise: function() {
		return this.ints[101];
	}
	,set_noise: function(value) {
		return this.ints[101] = value;
	}
	,get_noise1: function() {
		return this.ints[102];
	}
	,set_noise1: function(value) {
		return this.ints[102] = value;
	}
	,get_noise2: function() {
		return this.ints[103];
	}
	,set_noise2: function(value) {
		return this.ints[103] = value;
	}
	,get_noise3: function() {
		return this.ints[104];
	}
	,set_noise3: function(value) {
		return this.ints[104] = value;
	}
	,get_ammo_shells1: function() {
		return this.floats[quake_EdictVars.ammo_shells1_ofs];
	}
	,set_ammo_shells1: function(value) {
		return this.floats[quake_EdictVars.ammo_shells1_ofs] = value;
	}
	,get_ammo_nails1: function() {
		return this.floats[quake_EdictVars.ammo_nails1_ofs];
	}
	,set_ammo_nails1: function(value) {
		return this.floats[quake_EdictVars.ammo_nails1_ofs] = value;
	}
	,get_ammo_lava_nails: function() {
		return this.floats[quake_EdictVars.ammo_lava_nails_ofs];
	}
	,set_ammo_lava_nails: function(value) {
		return this.floats[quake_EdictVars.ammo_lava_nails_ofs] = value;
	}
	,get_ammo_rockets1: function() {
		return this.floats[quake_EdictVars.ammo_rockets1_ofs];
	}
	,set_ammo_rockets1: function(value) {
		return this.floats[quake_EdictVars.ammo_rockets1_ofs] = value;
	}
	,get_ammo_multi_rockets: function() {
		return this.floats[quake_EdictVars.ammo_multi_rockets_ofs];
	}
	,set_ammo_multi_rockets: function(value) {
		return this.floats[quake_EdictVars.ammo_multi_rockets_ofs] = value;
	}
	,get_ammo_cells1: function() {
		return this.floats[quake_EdictVars.ammo_cells1_ofs];
	}
	,set_ammo_cells1: function(value) {
		return this.floats[quake_EdictVars.ammo_cells1_ofs] = value;
	}
	,get_ammo_plasma: function() {
		return this.floats[quake_EdictVars.ammo_plasma_ofs];
	}
	,set_ammo_plasma: function(value) {
		return this.floats[quake_EdictVars.ammo_plasma_ofs] = value;
	}
	,get_gravity: function() {
		return this.floats[quake_EdictVars.gravity_ofs];
	}
	,set_gravity: function(value) {
		return this.floats[quake_EdictVars.gravity_ofs] = value;
	}
	,get_items2: function() {
		return this.floats[quake_EdictVars.items2_ofs];
	}
	,set_items2: function(value) {
		return this.floats[quake_EdictVars.items2_ofs] = value;
	}
	,__class__: quake_EdictVars
};
var quake_Entity = function(n) {
	if(n == null) {
		n = -1;
	}
	this.baseline = new quake_EntityState();
	this.dlightbits = 0;
	this.dlightframe = 0;
	this.visframe = 0;
	this.update_type = 0;
	this.effects = 0;
	this.msgtime = 0.0;
	this.skinnum = 0;
	this.syncbase = 0.0;
	this.frame = 0;
	var this1 = new Float32Array(3);
	this.msg_origins1 = this1;
	var this11 = new Float32Array(3);
	this.msg_origins0 = this11;
	var this12 = new Float32Array(3);
	this.origin = this12;
	var this13 = new Float32Array(3);
	this.msg_angles1 = this13;
	var this14 = new Float32Array(3);
	this.msg_angles0 = this14;
	var this15 = new Float32Array(3);
	this.angles = this15;
	this.leafs = [];
	this.num = n;
};
$hxClasses["quake.Entity"] = quake_Entity;
quake_Entity.__name__ = true;
quake_Entity.prototype = {
	leafs: null
	,model: null
	,angles: null
	,msg_angles0: null
	,msg_angles1: null
	,origin: null
	,msg_origins0: null
	,msg_origins1: null
	,frame: null
	,syncbase: null
	,colormap: null
	,num: null
	,skinnum: null
	,msgtime: null
	,forcelink: null
	,effects: null
	,update_type: null
	,visframe: null
	,dlightframe: null
	,dlightbits: null
	,baseline: null
	,__class__: quake_Entity
};
var quake_EntityState = function() {
	this.effects = 0;
	this.skin = 0;
	this.colormap = 0;
	this.frame = 0;
	this.modelindex = 0;
	var this1 = new Float32Array(3);
	this.angles = this1;
	var this11 = new Float32Array(3);
	this.origin = this11;
};
$hxClasses["quake.EntityState"] = quake_EntityState;
quake_EntityState.__name__ = true;
quake_EntityState.prototype = {
	origin: null
	,angles: null
	,modelindex: null
	,frame: null
	,colormap: null
	,skin: null
	,effects: null
	,__class__: quake_EntityState
};
var quake__$GL_GLModeSetting = function(min,max) {
	this.min = min;
	this.max = max;
};
$hxClasses["quake._GL.GLModeSetting"] = quake__$GL_GLModeSetting;
quake__$GL_GLModeSetting.__name__ = true;
quake__$GL_GLModeSetting.prototype = {
	min: null
	,max: null
	,__class__: quake__$GL_GLModeSetting
};
var quake_GLTexture = function(id,w,h) {
	this.texnum = quake_GL.gl.createTexture();
	this.identifier = id;
	this.width = w;
	this.height = h;
};
$hxClasses["quake.GLTexture"] = quake_GLTexture;
quake_GLTexture.__name__ = true;
quake_GLTexture.prototype = {
	texnum: null
	,identifier: null
	,width: null
	,height: null
	,__class__: quake_GLTexture
};
var quake_GL = function() { };
$hxClasses["quake.GL"] = quake_GL;
quake_GL.__name__ = true;
quake_GL.Bind = function(target,texnum) {
	if(quake_GL.currenttextures.h[target] != texnum) {
		if(quake_GL.activetexture != target) {
			quake_GL.activetexture = target;
			quake_GL.gl.activeTexture(33984 + target);
		}
		quake_GL.currenttextures.h[target] = texnum;
		quake_GL.gl.bindTexture(3553,texnum);
	}
};
quake_GL.TextureMode_f = function() {
	if(quake_Cmd.argv.length <= 1) {
		var name = quake_GL.modes.keys();
		while(name.hasNext()) {
			var name1 = name.next();
			var _this = quake_GL.modes;
			var mode = __map_reserved[name1] != null ? _this.getReserved(name1) : _this.h[name1];
			if(quake_GL.filter_min == mode.min) {
				quake_Console.Print(name1 + "\n");
				return;
			}
		}
		quake_Console.Print("current filter is unknown???\n");
		return;
	}
	var name2 = quake_Cmd.argv[1].toUpperCase();
	var _this1 = quake_GL.modes;
	var mode1 = __map_reserved[name2] != null ? _this1.getReserved(name2) : _this1.h[name2];
	if(mode1 == null) {
		quake_Console.Print("bad filter name\n");
		return;
	}
	quake_GL.filter_min = mode1.min;
	quake_GL.filter_max = mode1.max;
	var _g = 0;
	var _g1 = quake_GL.textures;
	while(_g < _g1.length) {
		var tex = _g1[_g];
		++_g;
		quake_GL.Bind(0,tex.texnum);
		quake_GL.gl.texParameterf(3553,10241,quake_GL.filter_min);
		quake_GL.gl.texParameterf(3553,10240,quake_GL.filter_max);
	}
};
quake_GL.Set2D = function() {
	quake_GL.gl.viewport(0,0,quake_VID.width * quake_SCR.devicePixelRatio | 0,quake_VID.height * quake_SCR.devicePixelRatio | 0);
	quake_GL.UnbindProgram();
	var _g = 0;
	var _g1 = quake_GL.programs;
	while(_g < _g1.length) {
		var program = _g1[_g];
		++_g;
		program.gl.useProgram(program.program);
		program.setOrtho(quake_GL.ortho);
	}
	quake_GL.gl.disable(2929);
	quake_GL.gl.enable(3042);
};
quake_GL.ResampleTexture = function(data,inwidth,inheight,outwidth,outheight) {
	var outdata = new ArrayBuffer(outwidth * outheight);
	var out = new Uint8Array(outdata);
	var xstep = inwidth / outwidth;
	var ystep = inheight / outheight;
	var src;
	var dest = 0;
	var y;
	var _g1 = 0;
	var _g = outheight;
	while(_g1 < _g) {
		var i = _g1++;
		src = Math.floor(i * ystep) * inwidth;
		var _g3 = 0;
		var _g2 = outwidth;
		while(_g3 < _g2) {
			var j = _g3++;
			out[dest + j] = data[src + Math.floor(j * xstep)];
		}
		dest += outwidth;
	}
	return out;
};
quake_GL.Upload = function(data,width,height) {
	var scaled_width = width;
	var scaled_height = height;
	if((width & width - 1) != 0 || (height & height - 1) != 0) {
		--scaled_width;
		scaled_width |= scaled_width >> 1;
		scaled_width |= scaled_width >> 2;
		scaled_width |= scaled_width >> 4;
		scaled_width |= scaled_width >> 8;
		scaled_width |= scaled_width >> 16;
		++scaled_width;
		--scaled_height;
		scaled_height |= scaled_height >> 1;
		scaled_height |= scaled_height >> 2;
		scaled_height |= scaled_height >> 4;
		scaled_height |= scaled_height >> 8;
		scaled_height |= scaled_height >> 16;
		++scaled_height;
	}
	if(scaled_width > quake_GL.maxtexturesize) {
		scaled_width = quake_GL.maxtexturesize;
	}
	if(scaled_height > quake_GL.maxtexturesize) {
		scaled_height = quake_GL.maxtexturesize;
	}
	if(scaled_width != width || scaled_height != height) {
		data = quake_GL.ResampleTexture(data,width,height,scaled_width,scaled_height);
	}
	var trans = new ArrayBuffer(scaled_width * scaled_height << 2);
	var trans32 = new Uint32Array(trans);
	var i = scaled_width * scaled_height - 1;
	while(i >= 0) {
		trans32[i] = quake_COM.LittleLong(quake_VID.d_8to24table[data[i]] + -16777216);
		if(data[i] >= 224) {
			trans32[i] &= 16777215;
		}
		--i;
	}
	quake_GL.gl.texImage2D(3553,0,6408,scaled_width,scaled_height,0,6408,5121,new Uint8Array(trans));
	quake_GL.gl.generateMipmap(3553);
	quake_GL.gl.texParameterf(3553,10241,quake_GL.filter_min);
	quake_GL.gl.texParameterf(3553,10240,quake_GL.filter_max);
};
quake_GL.LoadTexture = function(identifier,width,height,data) {
	if(identifier.length != 0) {
		var _g = 0;
		var _g1 = quake_GL.textures;
		while(_g < _g1.length) {
			var glt = _g1[_g];
			++_g;
			if(glt.identifier == identifier) {
				if(width != glt.width || height != glt.height) {
					quake_Sys.Error("GL.LoadTexture: cache mismatch");
				}
				return glt;
			}
		}
	}
	var scaled_width = width;
	var scaled_height = height;
	if((width & width - 1) != 0 || (height & height - 1) != 0) {
		--scaled_width;
		scaled_width |= scaled_width >> 1;
		scaled_width |= scaled_width >> 2;
		scaled_width |= scaled_width >> 4;
		scaled_width |= scaled_width >> 8;
		scaled_width |= scaled_width >> 16;
		++scaled_width;
		--scaled_height;
		scaled_height |= scaled_height >> 1;
		scaled_height |= scaled_height >> 2;
		scaled_height |= scaled_height >> 4;
		scaled_height |= scaled_height >> 8;
		scaled_height |= scaled_height >> 16;
		++scaled_height;
	}
	if(scaled_width > quake_GL.maxtexturesize) {
		scaled_width = quake_GL.maxtexturesize;
	}
	if(scaled_height > quake_GL.maxtexturesize) {
		scaled_height = quake_GL.maxtexturesize;
	}
	scaled_width >>= quake_GL.picmip.value | 0;
	if(scaled_width == 0) {
		scaled_width = 1;
	}
	scaled_height >>= quake_GL.picmip.value | 0;
	if(scaled_height == 0) {
		scaled_height = 1;
	}
	if(scaled_width != width || scaled_height != height) {
		data = quake_GL.ResampleTexture(data,width,height,scaled_width,scaled_height);
	}
	var glt1 = new quake_GLTexture(identifier,width,height);
	quake_GL.Bind(0,glt1.texnum);
	quake_GL.Upload(data,scaled_width,scaled_height);
	quake_GL.textures.push(glt1);
	return glt1;
};
quake_GL.LoadPicTexture = function(pic) {
	var data = pic.data;
	var scaled_width = pic.width;
	var scaled_height = pic.height;
	if((pic.width & pic.width - 1) != 0 || (pic.height & pic.height - 1) != 0) {
		--scaled_width;
		scaled_width |= scaled_width >> 1;
		scaled_width |= scaled_width >> 2;
		scaled_width |= scaled_width >> 4;
		scaled_width |= scaled_width >> 8;
		scaled_width |= scaled_width >> 16;
		++scaled_width;
		--scaled_height;
		scaled_height |= scaled_height >> 1;
		scaled_height |= scaled_height >> 2;
		scaled_height |= scaled_height >> 4;
		scaled_height |= scaled_height >> 8;
		scaled_height |= scaled_height >> 16;
		++scaled_height;
	}
	if(scaled_width > quake_GL.maxtexturesize) {
		scaled_width = quake_GL.maxtexturesize;
	}
	if(scaled_height > quake_GL.maxtexturesize) {
		scaled_height = quake_GL.maxtexturesize;
	}
	if(scaled_width != pic.width || scaled_height != pic.height) {
		data = quake_GL.ResampleTexture(data,pic.width,pic.height,scaled_width,scaled_height);
	}
	var texnum = quake_GL.gl.createTexture();
	quake_GL.Bind(0,texnum);
	var trans = new ArrayBuffer(scaled_width * scaled_height << 2);
	var trans32 = new Uint32Array(trans);
	var i = scaled_width * scaled_height - 1;
	while(i >= 0) {
		if(data[i] != 255) {
			trans32[i] = quake_COM.LittleLong(quake_VID.d_8to24table[data[i]] + -16777216);
		}
		--i;
	}
	quake_GL.gl.texImage2D(3553,0,6408,scaled_width,scaled_height,0,6408,5121,new Uint8Array(trans));
	quake_GL.gl.texParameterf(3553,10241,9729);
	quake_GL.gl.texParameterf(3553,10240,9729);
	return texnum;
};
quake_GL.AddProgram = function(program) {
	quake_GL.programs.push(program);
	return program;
};
quake_GL.UseProgram = function(program) {
	if(quake_GL.currentProgram == program) {
		return program;
	}
	if(quake_GL.currentProgram != null) {
		quake_GL.currentProgram.unbind();
	}
	quake_GL.currentProgram = program;
	program.gl.useProgram(program.program);
	program.bind();
	return program;
};
quake_GL.UnbindProgram = function() {
	if(quake_GL.currentProgram == null) {
		return;
	}
	quake_GL.currentProgram.unbind();
	quake_GL.currentProgram = null;
};
quake_GL.RotationMatrix = function(pitch,yaw,roll) {
	pitch *= Math.PI / -180.0;
	yaw *= Math.PI / 180.0;
	roll *= Math.PI / 180.0;
	var sp = Math.sin(pitch);
	var cp = Math.cos(pitch);
	var sy = Math.sin(yaw);
	var cy = Math.cos(yaw);
	var sr = Math.sin(roll);
	var cr = Math.cos(roll);
	return [cy * cp,sy * cp,-sp,-sy * cr + cy * sp * sr,cy * cr + sy * sp * sr,cp * sr,-sy * -sr + cy * sp * cr,cy * -sr + sy * sp * cr,cp * cr];
};
quake_GL.Init = function() {
	quake_VID.mainwindow = window.document.getElementById("mainwindow");
	try {
		quake_GL.gl = quake_VID.mainwindow.getContext("webgl");
		if(quake_GL.gl == null) {
			quake_VID.mainwindow.getContext("experimental-webgl");
		}
	} catch( e ) {
	}
	if(quake_GL.gl == null) {
		quake_Sys.Error("Unable to initialize WebGL. Your browser may not support it.");
	}
	quake_GL.maxtexturesize = quake_GL.gl.getParameter(3379);
	quake_GL.gl.clearColor(0.0,0.0,0.0,0.0);
	quake_GL.gl.cullFace(1028);
	quake_GL.gl.blendFuncSeparate(770,771,1,1);
	var _g = new haxe_ds_StringMap();
	var value = new quake__$GL_GLModeSetting(9728,9728);
	if(__map_reserved["GL_NEAREST"] != null) {
		_g.setReserved("GL_NEAREST",value);
	} else {
		_g.h["GL_NEAREST"] = value;
	}
	var value1 = new quake__$GL_GLModeSetting(9729,9729);
	if(__map_reserved["GL_LINEAR"] != null) {
		_g.setReserved("GL_LINEAR",value1);
	} else {
		_g.h["GL_LINEAR"] = value1;
	}
	var value2 = new quake__$GL_GLModeSetting(9984,9728);
	if(__map_reserved["GL_NEAREST_MIPMAP_NEAREST"] != null) {
		_g.setReserved("GL_NEAREST_MIPMAP_NEAREST",value2);
	} else {
		_g.h["GL_NEAREST_MIPMAP_NEAREST"] = value2;
	}
	var value3 = new quake__$GL_GLModeSetting(9985,9729);
	if(__map_reserved["GL_LINEAR_MIPMAP_NEAREST"] != null) {
		_g.setReserved("GL_LINEAR_MIPMAP_NEAREST",value3);
	} else {
		_g.h["GL_LINEAR_MIPMAP_NEAREST"] = value3;
	}
	var value4 = new quake__$GL_GLModeSetting(9986,9728);
	if(__map_reserved["GL_NEAREST_MIPMAP_LINEAR"] != null) {
		_g.setReserved("GL_NEAREST_MIPMAP_LINEAR",value4);
	} else {
		_g.h["GL_NEAREST_MIPMAP_LINEAR"] = value4;
	}
	var value5 = new quake__$GL_GLModeSetting(9987,9729);
	if(__map_reserved["GL_LINEAR_MIPMAP_LINEAR"] != null) {
		_g.setReserved("GL_LINEAR_MIPMAP_LINEAR",value5);
	} else {
		_g.h["GL_LINEAR_MIPMAP_LINEAR"] = value5;
	}
	quake_GL.modes = _g;
	var _this = quake_GL.modes;
	var defaultMode = __map_reserved["GL_LINEAR_MIPMAP_NEAREST"] != null ? _this.getReserved("GL_LINEAR_MIPMAP_NEAREST") : _this.h["GL_LINEAR_MIPMAP_NEAREST"];
	quake_GL.filter_min = defaultMode.min;
	quake_GL.filter_max = defaultMode.max;
	quake_GL.picmip = quake_Cvar.RegisterVariable("gl_picmip","0");
	quake_Cmd.AddCommand("gl_texturemode",quake_GL.TextureMode_f);
	quake_GL.rect = quake_GL.gl.createBuffer();
	quake_GL.gl.bindBuffer(34962,quake_GL.rect);
	quake_GL.gl.bufferData(34962,new Float32Array([0,0,0,1,1,0,1,1]),35044);
	quake_VID.mainwindow.style.display = "inline-block";
	quake_GLPrograms.init(quake_GL.gl);
};
var quake_GLProgram = function(gl,srcVert,srcFrag) {
	this.gl = gl;
	this.program = gl.createProgram();
	var vsh = gl.createShader(35633);
	gl.shaderSource(vsh,srcVert);
	gl.compileShader(vsh);
	if(!gl.getShaderParameter(vsh,35713)) {
		quake_Sys.Error("Error compiling shader: " + gl.getShaderInfoLog(vsh));
	}
	var fsh = gl.createShader(35632);
	gl.shaderSource(fsh,srcFrag);
	gl.compileShader(fsh);
	if(!gl.getShaderParameter(fsh,35713)) {
		quake_Sys.Error("Error compiling shader: " + gl.getShaderInfoLog(fsh));
	}
	gl.attachShader(this.program,vsh);
	gl.attachShader(this.program,fsh);
	gl.linkProgram(this.program);
	if(!gl.getProgramParameter(this.program,35714)) {
		quake_Sys.Error("Error linking program: " + gl.getProgramInfoLog(this.program));
	}
	gl.useProgram(this.program);
};
$hxClasses["quake.GLProgram"] = quake_GLProgram;
quake_GLProgram.__name__ = true;
quake_GLProgram.prototype = {
	gl: null
	,program: null
	,'use': function() {
		this.gl.useProgram(this.program);
	}
	,bind: function() {
	}
	,unbind: function() {
	}
	,setOrtho: function(ortho) {
	}
	,setGamma: function(gamma) {
	}
	,setViewOrigin: function(v) {
	}
	,setViewAngles: function(v) {
	}
	,setPerspective: function(v) {
	}
	,__class__: quake_GLProgram
};
var quake_PCharacter = function(gl) {
	quake_GLProgram.call(this,gl,"uniform vec2 uCharacter;\nuniform vec2 uDest;\nuniform mat4 uOrtho;\nattribute vec2 aPoint;\nvarying vec2 vTexCoord;\nvoid main(void)\n{\n    gl_Position = uOrtho * vec4(aPoint * 8.0 + uDest, 0.0, 1.0);\n    vTexCoord = (aPoint + uCharacter) * 0.0625;\n}\n","precision mediump float;\nuniform sampler2D tTexture;\nvarying vec2 vTexCoord;\nvoid main(void)\n{\n    gl_FragColor = texture2D(tTexture, vTexCoord);\n}\n");
	this.uCharacter = this.gl.getUniformLocation(this.program,"uCharacter");
	this.uDest = this.gl.getUniformLocation(this.program,"uDest");
	this.uOrtho = this.gl.getUniformLocation(this.program,"uOrtho");
	this.aPoint = this.gl.getAttribLocation(this.program,"aPoint");
	this.tTexture = 0;
	this.gl.uniform1i(this.gl.getUniformLocation(this.program,"tTexture"),0);
};
$hxClasses["quake.PCharacter"] = quake_PCharacter;
quake_PCharacter.__name__ = true;
quake_PCharacter.__super__ = quake_GLProgram;
quake_PCharacter.prototype = $extend(quake_GLProgram.prototype,{
	uCharacter: null
	,uDest: null
	,uOrtho: null
	,aPoint: null
	,tTexture: null
	,setOrtho: function(ortho) {
		this.gl.uniformMatrix4fv(this.uOrtho,false,ortho);
	}
	,bind: function() {
		this.gl.enableVertexAttribArray(this.aPoint);
	}
	,unbind: function() {
		this.gl.disableVertexAttribArray(this.aPoint);
	}
	,__class__: quake_PCharacter
});
var quake_PFill = function(gl) {
	quake_GLProgram.call(this,gl,"uniform vec4 uRect;\nuniform mat4 uOrtho;\nattribute vec2 aPoint;\nvoid main(void)\n{\n    gl_Position = uOrtho * vec4(uRect.xy + uRect.zw * aPoint, 0.0, 1.0);\n}\n","precision mediump float;\nuniform vec4 uColor;\nvoid main(void)\n{\n    gl_FragColor = vec4(uColor.rgb * (1.0 / 255.0), uColor.a);\n}\n");
	this.uRect = this.gl.getUniformLocation(this.program,"uRect");
	this.uOrtho = this.gl.getUniformLocation(this.program,"uOrtho");
	this.uColor = this.gl.getUniformLocation(this.program,"uColor");
	this.aPoint = this.gl.getAttribLocation(this.program,"aPoint");
};
$hxClasses["quake.PFill"] = quake_PFill;
quake_PFill.__name__ = true;
quake_PFill.__super__ = quake_GLProgram;
quake_PFill.prototype = $extend(quake_GLProgram.prototype,{
	uRect: null
	,uOrtho: null
	,uColor: null
	,aPoint: null
	,setOrtho: function(ortho) {
		this.gl.uniformMatrix4fv(this.uOrtho,false,ortho);
	}
	,bind: function() {
		this.gl.enableVertexAttribArray(this.aPoint);
	}
	,unbind: function() {
		this.gl.disableVertexAttribArray(this.aPoint);
	}
	,__class__: quake_PFill
});
var quake_PPic = function(gl) {
	quake_GLProgram.call(this,gl,"uniform vec4 uRect;\nuniform mat4 uOrtho;\nattribute vec2 aPoint;\nvarying vec2 vTexCoord;\nvoid main(void)\n{\n    gl_Position = uOrtho * vec4(uRect.xy + uRect.zw * aPoint.xy, 0.0, 1.0);\n    vTexCoord = aPoint;\n}\n","precision mediump float;\nuniform sampler2D tTexture;\nvarying vec2 vTexCoord;\nvoid main(void)\n{\n    gl_FragColor = texture2D(tTexture, vTexCoord);\n}\n");
	this.uRect = this.gl.getUniformLocation(this.program,"uRect");
	this.uOrtho = this.gl.getUniformLocation(this.program,"uOrtho");
	this.aPoint = this.gl.getAttribLocation(this.program,"aPoint");
	this.tTexture = 0;
	this.gl.uniform1i(this.gl.getUniformLocation(this.program,"tTexture"),0);
};
$hxClasses["quake.PPic"] = quake_PPic;
quake_PPic.__name__ = true;
quake_PPic.__super__ = quake_GLProgram;
quake_PPic.prototype = $extend(quake_GLProgram.prototype,{
	uRect: null
	,uOrtho: null
	,aPoint: null
	,tTexture: null
	,setOrtho: function(ortho) {
		this.gl.uniformMatrix4fv(this.uOrtho,false,ortho);
	}
	,bind: function() {
		this.gl.enableVertexAttribArray(this.aPoint);
	}
	,unbind: function() {
		this.gl.disableVertexAttribArray(this.aPoint);
	}
	,__class__: quake_PPic
});
var quake_PPicTranslate = function(gl) {
	quake_GLProgram.call(this,gl,"uniform vec4 uRect;\nuniform mat4 uOrtho;\nattribute vec2 aPoint;\nvarying vec2 vTexCoord;\nvoid main(void)\n{\n    gl_Position = uOrtho * vec4(uRect.xy + uRect.zw * aPoint.xy, 0.0, 1.0);\n    vTexCoord = aPoint;\n}\n","precision mediump float;\nuniform vec3 uTop;\nuniform vec3 uBottom;\nuniform sampler2D tTexture;\nuniform sampler2D tTrans;\nvarying vec2 vTexCoord;\nvoid main(void)\n{\n    vec4 texture = texture2D(tTexture, vTexCoord);\n    vec4 trans = texture2D(tTrans, vTexCoord);\n    gl_FragColor = vec4(mix(mix(texture.rgb, uTop * (1.0 / 191.25) * trans.x, trans.y), uBottom * (1.0 / 191.25) * trans.z, trans.w), texture.a);\n}\n");
	this.uRect = this.gl.getUniformLocation(this.program,"uRect");
	this.uOrtho = this.gl.getUniformLocation(this.program,"uOrtho");
	this.uTop = this.gl.getUniformLocation(this.program,"uTop");
	this.uBottom = this.gl.getUniformLocation(this.program,"uBottom");
	this.aPoint = this.gl.getAttribLocation(this.program,"aPoint");
	this.tTexture = 0;
	this.gl.uniform1i(this.gl.getUniformLocation(this.program,"tTexture"),0);
	this.tTrans = 1;
	this.gl.uniform1i(this.gl.getUniformLocation(this.program,"tTrans"),1);
};
$hxClasses["quake.PPicTranslate"] = quake_PPicTranslate;
quake_PPicTranslate.__name__ = true;
quake_PPicTranslate.__super__ = quake_GLProgram;
quake_PPicTranslate.prototype = $extend(quake_GLProgram.prototype,{
	uRect: null
	,uOrtho: null
	,uTop: null
	,uBottom: null
	,aPoint: null
	,tTexture: null
	,tTrans: null
	,setOrtho: function(ortho) {
		this.gl.uniformMatrix4fv(this.uOrtho,false,ortho);
	}
	,bind: function() {
		this.gl.enableVertexAttribArray(this.aPoint);
	}
	,unbind: function() {
		this.gl.disableVertexAttribArray(this.aPoint);
	}
	,__class__: quake_PPicTranslate
});
var quake_PParticle = function(gl) {
	quake_GLProgram.call(this,gl,"uniform vec3 uOrigin;\nuniform vec3 uViewOrigin;\nuniform mat3 uViewAngles;\nuniform mat4 uPerspective;\nuniform float uScale;\nattribute vec2 aPoint;\nvarying vec2 vCoord;\nvoid main(void)\n{\n    vec2 point = (aPoint - 0.5) * uScale;\n    vec3 position = vec3(point.x, 0.0, point.y) + uViewAngles * (uOrigin - uViewOrigin);\n    gl_Position = uPerspective * vec4(position.xz, -position.y, 1.0);\n    vCoord = vec2(aPoint.x - 0.5, 0.5 - aPoint.y) * 2.0;\n}\n","precision mediump float;\nuniform float uGamma;\nuniform vec3 uColor;\nvarying vec2 vCoord;\nvoid main(void)\n{\n    gl_FragColor = vec4(uColor * (1.0 / 255.0), 1.0 - smoothstep(0.75, 1.0, length(vCoord)));\n    gl_FragColor.r = pow(gl_FragColor.r, uGamma);\n    gl_FragColor.g = pow(gl_FragColor.g, uGamma);\n    gl_FragColor.b = pow(gl_FragColor.b, uGamma);\n}\n");
	this.uOrigin = this.gl.getUniformLocation(this.program,"uOrigin");
	this.uViewOrigin = this.gl.getUniformLocation(this.program,"uViewOrigin");
	this.uViewAngles = this.gl.getUniformLocation(this.program,"uViewAngles");
	this.uPerspective = this.gl.getUniformLocation(this.program,"uPerspective");
	this.uScale = this.gl.getUniformLocation(this.program,"uScale");
	this.uGamma = this.gl.getUniformLocation(this.program,"uGamma");
	this.uColor = this.gl.getUniformLocation(this.program,"uColor");
	this.aPoint = this.gl.getAttribLocation(this.program,"aPoint");
};
$hxClasses["quake.PParticle"] = quake_PParticle;
quake_PParticle.__name__ = true;
quake_PParticle.__super__ = quake_GLProgram;
quake_PParticle.prototype = $extend(quake_GLProgram.prototype,{
	uOrigin: null
	,uViewOrigin: null
	,uViewAngles: null
	,uPerspective: null
	,uScale: null
	,uGamma: null
	,uColor: null
	,aPoint: null
	,setViewOrigin: function(v) {
		this.gl.uniform3fv(this.uViewOrigin,v);
	}
	,setViewAngles: function(v) {
		this.gl.uniformMatrix3fv(this.uViewAngles,false,v);
	}
	,setPerspective: function(v) {
		this.gl.uniformMatrix4fv(this.uPerspective,false,v);
	}
	,setGamma: function(gamma) {
		this.gl.uniform1f(this.uGamma,gamma);
	}
	,bind: function() {
		this.gl.enableVertexAttribArray(this.aPoint);
	}
	,unbind: function() {
		this.gl.disableVertexAttribArray(this.aPoint);
	}
	,__class__: quake_PParticle
});
var quake_IPAlias = function() { };
$hxClasses["quake.IPAlias"] = quake_IPAlias;
quake_IPAlias.__name__ = true;
quake_IPAlias.prototype = {
	uOrigin: null
	,uAngles: null
	,uViewOrigin: null
	,uViewAngles: null
	,uPerspective: null
	,uLightVec: null
	,uGamma: null
	,uAmbientLight: null
	,uShadeLight: null
	,aPoint: null
	,aLightNormal: null
	,aTexCoord: null
	,tTexture: null
	,__class__: quake_IPAlias
};
var quake_PAlias = function(gl) {
	quake_GLProgram.call(this,gl,"uniform vec3 uOrigin;\nuniform mat3 uAngles;\nuniform vec3 uViewOrigin;\nuniform mat3 uViewAngles;\nuniform mat4 uPerspective;\nuniform vec3 uLightVec;\nattribute vec3 aPoint;\nattribute vec3 aLightNormal;\nattribute vec2 aTexCoord;\nvarying vec2 vTexCoord;\nvarying float vLightDot;\nvoid main(void)\n{\n    vec3 position = uViewAngles * (uAngles * aPoint.xyz + uOrigin - uViewOrigin);\n    gl_Position = uPerspective * vec4(position.xz, -position.y, 1.0);\n    vTexCoord = aTexCoord;\n    vLightDot = dot(aLightNormal, uLightVec);\n}\n","precision mediump float;\nuniform float uGamma;\nuniform float uAmbientLight;\nuniform float uShadeLight;\nuniform sampler2D tTexture;\nvarying vec2 vTexCoord;\nvarying float vLightDot;\nvoid main(void)\n{\n    vec4 texture = texture2D(tTexture, vTexCoord);\n    gl_FragColor = vec4(texture.rgb * mix(1.0, vLightDot * uShadeLight + uAmbientLight, texture.a), 1.0);\n    gl_FragColor.r = pow(gl_FragColor.r, uGamma);\n    gl_FragColor.g = pow(gl_FragColor.g, uGamma);\n    gl_FragColor.b = pow(gl_FragColor.b, uGamma);\n}\n");
	this.uOrigin = this.gl.getUniformLocation(this.program,"uOrigin");
	this.uAngles = this.gl.getUniformLocation(this.program,"uAngles");
	this.uViewOrigin = this.gl.getUniformLocation(this.program,"uViewOrigin");
	this.uViewAngles = this.gl.getUniformLocation(this.program,"uViewAngles");
	this.uPerspective = this.gl.getUniformLocation(this.program,"uPerspective");
	this.uLightVec = this.gl.getUniformLocation(this.program,"uLightVec");
	this.uGamma = this.gl.getUniformLocation(this.program,"uGamma");
	this.uAmbientLight = this.gl.getUniformLocation(this.program,"uAmbientLight");
	this.uShadeLight = this.gl.getUniformLocation(this.program,"uShadeLight");
	this.aPoint = this.gl.getAttribLocation(this.program,"aPoint");
	this.aLightNormal = this.gl.getAttribLocation(this.program,"aLightNormal");
	this.aTexCoord = this.gl.getAttribLocation(this.program,"aTexCoord");
	this.tTexture = 0;
	this.gl.uniform1i(this.gl.getUniformLocation(this.program,"tTexture"),0);
};
$hxClasses["quake.PAlias"] = quake_PAlias;
quake_PAlias.__name__ = true;
quake_PAlias.__interfaces__ = [quake_IPAlias];
quake_PAlias.__super__ = quake_GLProgram;
quake_PAlias.prototype = $extend(quake_GLProgram.prototype,{
	uOrigin: null
	,uAngles: null
	,uViewOrigin: null
	,uViewAngles: null
	,uPerspective: null
	,uLightVec: null
	,uGamma: null
	,uAmbientLight: null
	,uShadeLight: null
	,aPoint: null
	,aLightNormal: null
	,aTexCoord: null
	,tTexture: null
	,setViewOrigin: function(v) {
		this.gl.uniform3fv(this.uViewOrigin,v);
	}
	,setViewAngles: function(v) {
		this.gl.uniformMatrix3fv(this.uViewAngles,false,v);
	}
	,setPerspective: function(v) {
		this.gl.uniformMatrix4fv(this.uPerspective,false,v);
	}
	,setGamma: function(gamma) {
		this.gl.uniform1f(this.uGamma,gamma);
	}
	,bind: function() {
		this.gl.enableVertexAttribArray(this.aPoint);
		this.gl.enableVertexAttribArray(this.aLightNormal);
		this.gl.enableVertexAttribArray(this.aTexCoord);
	}
	,unbind: function() {
		this.gl.disableVertexAttribArray(this.aPoint);
		this.gl.disableVertexAttribArray(this.aLightNormal);
		this.gl.disableVertexAttribArray(this.aTexCoord);
	}
	,__class__: quake_PAlias
});
var quake_PBrush = function(gl) {
	quake_GLProgram.call(this,gl,"uniform vec3 uOrigin;\nuniform mat3 uAngles;\nuniform vec3 uViewOrigin;\nuniform mat3 uViewAngles;\nuniform mat4 uPerspective;\nattribute vec3 aPoint;\nattribute vec4 aTexCoord;\nattribute vec4 aLightStyle;\nvarying vec4 vTexCoord;\nvarying vec4 vLightStyle;\nvoid main(void)\n{\n    vec3 position = uViewAngles * (uAngles * aPoint + uOrigin - uViewOrigin);\n    gl_Position = uPerspective * vec4(position.xz, -position.y, 1.0);\n    vTexCoord = aTexCoord;\n    vLightStyle = aLightStyle;\n}\n","precision mediump float;\nuniform float uGamma;\nuniform sampler2D tTexture;\nuniform sampler2D tLightmap;\nuniform sampler2D tDlight;\nuniform sampler2D tLightStyle;\nvarying vec4 vTexCoord;\nvarying vec4 vLightStyle;\nvoid main(void)\n{\n    vec4 texture = texture2D(tTexture, vTexCoord.xy);\n    gl_FragColor = vec4(texture.rgb *\n        mix(1.0, dot(texture2D(tLightmap, vTexCoord.zw), vec4(\n            texture2D(tLightStyle, vec2(vLightStyle.x, 0.0)).a,\n            texture2D(tLightStyle, vec2(vLightStyle.y, 0.0)).a,\n            texture2D(tLightStyle, vec2(vLightStyle.z, 0.0)).a,\n            texture2D(tLightStyle, vec2(vLightStyle.w, 0.0)).a)\n        * 43.828125) + texture2D(tDlight, vTexCoord.zw).a, texture.a), 1.0);\n    gl_FragColor.r = pow(gl_FragColor.r, uGamma);\n    gl_FragColor.g = pow(gl_FragColor.g, uGamma);\n    gl_FragColor.b = pow(gl_FragColor.b, uGamma);\n}");
	this.uOrigin = this.gl.getUniformLocation(this.program,"uOrigin");
	this.uAngles = this.gl.getUniformLocation(this.program,"uAngles");
	this.uViewOrigin = this.gl.getUniformLocation(this.program,"uViewOrigin");
	this.uViewAngles = this.gl.getUniformLocation(this.program,"uViewAngles");
	this.uPerspective = this.gl.getUniformLocation(this.program,"uPerspective");
	this.uGamma = this.gl.getUniformLocation(this.program,"uGamma");
	this.aPoint = this.gl.getAttribLocation(this.program,"aPoint");
	this.aTexCoord = this.gl.getAttribLocation(this.program,"aTexCoord");
	this.aLightStyle = this.gl.getAttribLocation(this.program,"aLightStyle");
	this.tTexture = 0;
	this.gl.uniform1i(this.gl.getUniformLocation(this.program,"tTexture"),0);
	this.tLightmap = 1;
	this.gl.uniform1i(this.gl.getUniformLocation(this.program,"tLightmap"),1);
	this.tDlight = 2;
	this.gl.uniform1i(this.gl.getUniformLocation(this.program,"tDlight"),2);
	this.tLightStyle = 3;
	this.gl.uniform1i(this.gl.getUniformLocation(this.program,"tLightStyle"),3);
};
$hxClasses["quake.PBrush"] = quake_PBrush;
quake_PBrush.__name__ = true;
quake_PBrush.__super__ = quake_GLProgram;
quake_PBrush.prototype = $extend(quake_GLProgram.prototype,{
	uOrigin: null
	,uAngles: null
	,uViewOrigin: null
	,uViewAngles: null
	,uPerspective: null
	,uGamma: null
	,aPoint: null
	,aTexCoord: null
	,aLightStyle: null
	,tTexture: null
	,tLightmap: null
	,tDlight: null
	,tLightStyle: null
	,setViewOrigin: function(v) {
		this.gl.uniform3fv(this.uViewOrigin,v);
	}
	,setViewAngles: function(v) {
		this.gl.uniformMatrix3fv(this.uViewAngles,false,v);
	}
	,setPerspective: function(v) {
		this.gl.uniformMatrix4fv(this.uPerspective,false,v);
	}
	,setGamma: function(gamma) {
		this.gl.uniform1f(this.uGamma,gamma);
	}
	,bind: function() {
		this.gl.enableVertexAttribArray(this.aPoint);
		this.gl.enableVertexAttribArray(this.aTexCoord);
		this.gl.enableVertexAttribArray(this.aLightStyle);
	}
	,unbind: function() {
		this.gl.disableVertexAttribArray(this.aPoint);
		this.gl.disableVertexAttribArray(this.aTexCoord);
		this.gl.disableVertexAttribArray(this.aLightStyle);
	}
	,__class__: quake_PBrush
});
var quake_PDlight = function(gl) {
	quake_GLProgram.call(this,gl,"uniform vec3 uOrigin;\nuniform vec3 uViewOrigin;\nuniform mat3 uViewAngles;\nuniform mat4 uPerspective;\nuniform float uRadius;\nattribute vec3 aPoint;\nvarying float vAlpha;\nvoid main(void)\n{\n    vec3 position = aPoint * 0.35 * uRadius + uViewAngles * (uOrigin - uViewOrigin);\n    gl_Position = uPerspective * vec4(position.xz, -position.y, 1.0);\n    vAlpha = aPoint.y * -0.2;\n}\n","precision mediump float;\nuniform float uGamma;\nvarying float vAlpha;\nvoid main(void)\n{\n    gl_FragColor = vec4(pow(1.0, uGamma), pow(0.5, uGamma), 0.0, vAlpha);\n}\n");
	this.uOrigin = this.gl.getUniformLocation(this.program,"uOrigin");
	this.uViewOrigin = this.gl.getUniformLocation(this.program,"uViewOrigin");
	this.uViewAngles = this.gl.getUniformLocation(this.program,"uViewAngles");
	this.uPerspective = this.gl.getUniformLocation(this.program,"uPerspective");
	this.uRadius = this.gl.getUniformLocation(this.program,"uRadius");
	this.uGamma = this.gl.getUniformLocation(this.program,"uGamma");
	this.aPoint = this.gl.getAttribLocation(this.program,"aPoint");
};
$hxClasses["quake.PDlight"] = quake_PDlight;
quake_PDlight.__name__ = true;
quake_PDlight.__super__ = quake_GLProgram;
quake_PDlight.prototype = $extend(quake_GLProgram.prototype,{
	uOrigin: null
	,uViewOrigin: null
	,uViewAngles: null
	,uPerspective: null
	,uRadius: null
	,uGamma: null
	,aPoint: null
	,setViewOrigin: function(v) {
		this.gl.uniform3fv(this.uViewOrigin,v);
	}
	,setViewAngles: function(v) {
		this.gl.uniformMatrix3fv(this.uViewAngles,false,v);
	}
	,setPerspective: function(v) {
		this.gl.uniformMatrix4fv(this.uPerspective,false,v);
	}
	,setGamma: function(gamma) {
		this.gl.uniform1f(this.uGamma,gamma);
	}
	,bind: function() {
		this.gl.enableVertexAttribArray(this.aPoint);
	}
	,unbind: function() {
		this.gl.disableVertexAttribArray(this.aPoint);
	}
	,__class__: quake_PDlight
});
var quake_PPlayer = function(gl) {
	quake_GLProgram.call(this,gl,"uniform vec3 uOrigin;\nuniform mat3 uAngles;\nuniform vec3 uViewOrigin;\nuniform mat3 uViewAngles;\nuniform mat4 uPerspective;\nuniform vec3 uLightVec;\nattribute vec3 aPoint;\nattribute vec3 aLightNormal;\nattribute vec2 aTexCoord;\nvarying vec2 vTexCoord;\nvarying float vLightDot;\nvoid main(void)\n{\n    vec3 position = uViewAngles * (uAngles * aPoint.xyz + uOrigin - uViewOrigin);\n    gl_Position = uPerspective * vec4(position.xz, -position.y, 1.0);\n    vTexCoord = aTexCoord;\n    vLightDot = dot(aLightNormal, uLightVec);\n}\n","precision mediump float;\nuniform float uGamma;\nuniform float uAmbientLight;\nuniform float uShadeLight;\nuniform vec3 uTop;\nuniform vec3 uBottom;\nuniform sampler2D tTexture;\nuniform sampler2D tPlayer;\nvarying vec2 vTexCoord;\nvarying float vLightDot;\nvoid main(void)\n{\n    vec4 texture = texture2D(tTexture, vTexCoord);\n    vec4 player = texture2D(tPlayer, vTexCoord);\n    gl_FragColor = vec4(\n        mix(mix(texture.rgb, uTop * (1.0 / 191.25) * player.x, player.y), uBottom * (1.0 / 191.25) * player.z, player.w)\n        * mix(1.0, vLightDot * uShadeLight + uAmbientLight, texture.a), 1.0);\n    gl_FragColor.r = pow(gl_FragColor.r, uGamma);\n    gl_FragColor.g = pow(gl_FragColor.g, uGamma);\n    gl_FragColor.b = pow(gl_FragColor.b, uGamma);\n}\n");
	this.uOrigin = this.gl.getUniformLocation(this.program,"uOrigin");
	this.uAngles = this.gl.getUniformLocation(this.program,"uAngles");
	this.uViewOrigin = this.gl.getUniformLocation(this.program,"uViewOrigin");
	this.uViewAngles = this.gl.getUniformLocation(this.program,"uViewAngles");
	this.uPerspective = this.gl.getUniformLocation(this.program,"uPerspective");
	this.uLightVec = this.gl.getUniformLocation(this.program,"uLightVec");
	this.uGamma = this.gl.getUniformLocation(this.program,"uGamma");
	this.uAmbientLight = this.gl.getUniformLocation(this.program,"uAmbientLight");
	this.uShadeLight = this.gl.getUniformLocation(this.program,"uShadeLight");
	this.uTop = this.gl.getUniformLocation(this.program,"uTop");
	this.uBottom = this.gl.getUniformLocation(this.program,"uBottom");
	this.aPoint = this.gl.getAttribLocation(this.program,"aPoint");
	this.aLightNormal = this.gl.getAttribLocation(this.program,"aLightNormal");
	this.aTexCoord = this.gl.getAttribLocation(this.program,"aTexCoord");
	this.tTexture = 0;
	this.gl.uniform1i(this.gl.getUniformLocation(this.program,"tTexture"),0);
	this.tPlayer = 1;
	this.gl.uniform1i(this.gl.getUniformLocation(this.program,"tPlayer"),1);
};
$hxClasses["quake.PPlayer"] = quake_PPlayer;
quake_PPlayer.__name__ = true;
quake_PPlayer.__interfaces__ = [quake_IPAlias];
quake_PPlayer.__super__ = quake_GLProgram;
quake_PPlayer.prototype = $extend(quake_GLProgram.prototype,{
	uOrigin: null
	,uAngles: null
	,uViewOrigin: null
	,uViewAngles: null
	,uPerspective: null
	,uLightVec: null
	,uGamma: null
	,uAmbientLight: null
	,uShadeLight: null
	,uTop: null
	,uBottom: null
	,aPoint: null
	,aLightNormal: null
	,aTexCoord: null
	,tTexture: null
	,tPlayer: null
	,setViewOrigin: function(v) {
		this.gl.uniform3fv(this.uViewOrigin,v);
	}
	,setViewAngles: function(v) {
		this.gl.uniformMatrix3fv(this.uViewAngles,false,v);
	}
	,setPerspective: function(v) {
		this.gl.uniformMatrix4fv(this.uPerspective,false,v);
	}
	,setGamma: function(gamma) {
		this.gl.uniform1f(this.uGamma,gamma);
	}
	,bind: function() {
		this.gl.enableVertexAttribArray(this.aPoint);
		this.gl.enableVertexAttribArray(this.aLightNormal);
		this.gl.enableVertexAttribArray(this.aTexCoord);
	}
	,unbind: function() {
		this.gl.disableVertexAttribArray(this.aPoint);
		this.gl.disableVertexAttribArray(this.aLightNormal);
		this.gl.disableVertexAttribArray(this.aTexCoord);
	}
	,__class__: quake_PPlayer
});
var quake_IPSprite = function() { };
$hxClasses["quake.IPSprite"] = quake_IPSprite;
quake_IPSprite.__name__ = true;
quake_IPSprite.prototype = {
	uRect: null
	,uOrigin: null
	,uViewOrigin: null
	,uViewAngles: null
	,uPerspective: null
	,uGamma: null
	,aPoint: null
	,tTexture: null
	,__class__: quake_IPSprite
};
var quake_PSprite = function(gl) {
	quake_GLProgram.call(this,gl,"uniform vec4 uRect;\nuniform vec3 uOrigin;\nuniform vec3 uViewOrigin;\nuniform mat3 uViewAngles;\nuniform mat4 uPerspective;\nattribute vec2 aPoint;\nvarying vec2 vTexCoord;\nvoid main(void)\n{\n    vec2 point = uRect.xy + uRect.zw * aPoint;\n    vec3 position = vec3(point.x, 0.0, point.y) + uViewAngles * (uOrigin - uViewOrigin);\n    gl_Position = uPerspective * vec4(position.xz, -position.y, 1.0);\n    vTexCoord = vec2(aPoint.x, -aPoint.y);\n}\n","precision mediump float;\nuniform float uGamma;\nuniform sampler2D tTexture;\nvarying vec2 vTexCoord;\nvoid main(void)\n{\n    gl_FragColor = texture2D(tTexture, vTexCoord);\n    gl_FragColor.r = pow(gl_FragColor.r, uGamma);\n    gl_FragColor.g = pow(gl_FragColor.g, uGamma);\n    gl_FragColor.b = pow(gl_FragColor.b, uGamma);\n}\n");
	this.uRect = this.gl.getUniformLocation(this.program,"uRect");
	this.uOrigin = this.gl.getUniformLocation(this.program,"uOrigin");
	this.uViewOrigin = this.gl.getUniformLocation(this.program,"uViewOrigin");
	this.uViewAngles = this.gl.getUniformLocation(this.program,"uViewAngles");
	this.uPerspective = this.gl.getUniformLocation(this.program,"uPerspective");
	this.uGamma = this.gl.getUniformLocation(this.program,"uGamma");
	this.aPoint = this.gl.getAttribLocation(this.program,"aPoint");
	this.tTexture = 0;
	this.gl.uniform1i(this.gl.getUniformLocation(this.program,"tTexture"),0);
};
$hxClasses["quake.PSprite"] = quake_PSprite;
quake_PSprite.__name__ = true;
quake_PSprite.__interfaces__ = [quake_IPSprite];
quake_PSprite.__super__ = quake_GLProgram;
quake_PSprite.prototype = $extend(quake_GLProgram.prototype,{
	uRect: null
	,uOrigin: null
	,uViewOrigin: null
	,uViewAngles: null
	,uPerspective: null
	,uGamma: null
	,aPoint: null
	,tTexture: null
	,setViewOrigin: function(v) {
		this.gl.uniform3fv(this.uViewOrigin,v);
	}
	,setViewAngles: function(v) {
		this.gl.uniformMatrix3fv(this.uViewAngles,false,v);
	}
	,setPerspective: function(v) {
		this.gl.uniformMatrix4fv(this.uPerspective,false,v);
	}
	,setGamma: function(gamma) {
		this.gl.uniform1f(this.uGamma,gamma);
	}
	,bind: function() {
		this.gl.enableVertexAttribArray(this.aPoint);
	}
	,unbind: function() {
		this.gl.disableVertexAttribArray(this.aPoint);
	}
	,__class__: quake_PSprite
});
var quake_PSpriteOriented = function(gl) {
	quake_GLProgram.call(this,gl,"uniform vec4 uRect;\nuniform vec3 uOrigin;\nuniform mat3 uAngles;\nuniform vec3 uViewOrigin;\nuniform mat3 uViewAngles;\nuniform mat4 uPerspective;\nattribute vec2 aPoint;\nvarying vec2 vTexCoord;\nvoid main(void)\n{\n    vec2 point = uRect.xy + uRect.zw * aPoint;\n    vec3 position = uViewAngles * (uAngles * vec3(point.x, 0.0, point.y) + uOrigin - uViewOrigin);\n    gl_Position = uPerspective * vec4(position.xz, -position.y, 1.0);\n    vTexCoord = vec2(aPoint.x, -aPoint.y);\n}\n","precision mediump float;\nuniform float uGamma;\nuniform sampler2D tTexture;\nvarying vec2 vTexCoord;\nvoid main(void)\n{\n    gl_FragColor = texture2D(tTexture, vTexCoord);\n    gl_FragColor.r = pow(gl_FragColor.r, uGamma);\n    gl_FragColor.g = pow(gl_FragColor.g, uGamma);\n    gl_FragColor.b = pow(gl_FragColor.b, uGamma);\n}\n");
	this.uRect = this.gl.getUniformLocation(this.program,"uRect");
	this.uOrigin = this.gl.getUniformLocation(this.program,"uOrigin");
	this.uAngles = this.gl.getUniformLocation(this.program,"uAngles");
	this.uViewOrigin = this.gl.getUniformLocation(this.program,"uViewOrigin");
	this.uViewAngles = this.gl.getUniformLocation(this.program,"uViewAngles");
	this.uPerspective = this.gl.getUniformLocation(this.program,"uPerspective");
	this.uGamma = this.gl.getUniformLocation(this.program,"uGamma");
	this.aPoint = this.gl.getAttribLocation(this.program,"aPoint");
	this.tTexture = 0;
	this.gl.uniform1i(this.gl.getUniformLocation(this.program,"tTexture"),0);
};
$hxClasses["quake.PSpriteOriented"] = quake_PSpriteOriented;
quake_PSpriteOriented.__name__ = true;
quake_PSpriteOriented.__interfaces__ = [quake_IPSprite];
quake_PSpriteOriented.__super__ = quake_GLProgram;
quake_PSpriteOriented.prototype = $extend(quake_GLProgram.prototype,{
	uRect: null
	,uOrigin: null
	,uAngles: null
	,uViewOrigin: null
	,uViewAngles: null
	,uPerspective: null
	,uGamma: null
	,aPoint: null
	,tTexture: null
	,setViewOrigin: function(v) {
		this.gl.uniform3fv(this.uViewOrigin,v);
	}
	,setViewAngles: function(v) {
		this.gl.uniformMatrix3fv(this.uViewAngles,false,v);
	}
	,setPerspective: function(v) {
		this.gl.uniformMatrix4fv(this.uPerspective,false,v);
	}
	,setGamma: function(gamma) {
		this.gl.uniform1f(this.uGamma,gamma);
	}
	,bind: function() {
		this.gl.enableVertexAttribArray(this.aPoint);
	}
	,unbind: function() {
		this.gl.disableVertexAttribArray(this.aPoint);
	}
	,__class__: quake_PSpriteOriented
});
var quake_PTurbulent = function(gl) {
	quake_GLProgram.call(this,gl,"uniform vec3 uOrigin;\nuniform mat3 uAngles;\nuniform vec3 uViewOrigin;\nuniform mat3 uViewAngles;\nuniform mat4 uPerspective;\nattribute vec3 aPoint;\nattribute vec2 aTexCoord;\nvarying vec2 vTexCoord;\nvoid main(void)\n{\n    vec3 position = uViewAngles * (uAngles * aPoint + uOrigin - uViewOrigin);\n    gl_Position = uPerspective * vec4(position.xz, -position.y, 1.0);\n    vTexCoord = aTexCoord;\n}\n","precision mediump float;\nuniform float uGamma;\nuniform float uTime;\nuniform sampler2D tTexture;\nvarying vec2 vTexCoord;\nvoid main(void)\n{\n    gl_FragColor = vec4(texture2D(tTexture, vTexCoord + vec2(sin(vTexCoord.t * 3.141593 + uTime), sin(vTexCoord.s * 3.141593 + uTime)) * 0.125).rgb, 1.0);\n    gl_FragColor.r = pow(gl_FragColor.r, uGamma);\n    gl_FragColor.g = pow(gl_FragColor.g, uGamma);\n    gl_FragColor.b = pow(gl_FragColor.b, uGamma);\n}\n");
	this.uOrigin = this.gl.getUniformLocation(this.program,"uOrigin");
	this.uAngles = this.gl.getUniformLocation(this.program,"uAngles");
	this.uViewOrigin = this.gl.getUniformLocation(this.program,"uViewOrigin");
	this.uViewAngles = this.gl.getUniformLocation(this.program,"uViewAngles");
	this.uPerspective = this.gl.getUniformLocation(this.program,"uPerspective");
	this.uGamma = this.gl.getUniformLocation(this.program,"uGamma");
	this.uTime = this.gl.getUniformLocation(this.program,"uTime");
	this.aPoint = this.gl.getAttribLocation(this.program,"aPoint");
	this.aTexCoord = this.gl.getAttribLocation(this.program,"aTexCoord");
	this.tTexture = 0;
	this.gl.uniform1i(this.gl.getUniformLocation(this.program,"tTexture"),0);
};
$hxClasses["quake.PTurbulent"] = quake_PTurbulent;
quake_PTurbulent.__name__ = true;
quake_PTurbulent.__super__ = quake_GLProgram;
quake_PTurbulent.prototype = $extend(quake_GLProgram.prototype,{
	uOrigin: null
	,uAngles: null
	,uViewOrigin: null
	,uViewAngles: null
	,uPerspective: null
	,uGamma: null
	,uTime: null
	,aPoint: null
	,aTexCoord: null
	,tTexture: null
	,setViewOrigin: function(v) {
		this.gl.uniform3fv(this.uViewOrigin,v);
	}
	,setViewAngles: function(v) {
		this.gl.uniformMatrix3fv(this.uViewAngles,false,v);
	}
	,setPerspective: function(v) {
		this.gl.uniformMatrix4fv(this.uPerspective,false,v);
	}
	,setGamma: function(gamma) {
		this.gl.uniform1f(this.uGamma,gamma);
	}
	,bind: function() {
		this.gl.enableVertexAttribArray(this.aPoint);
		this.gl.enableVertexAttribArray(this.aTexCoord);
	}
	,unbind: function() {
		this.gl.disableVertexAttribArray(this.aPoint);
		this.gl.disableVertexAttribArray(this.aTexCoord);
	}
	,__class__: quake_PTurbulent
});
var quake_PWarp = function(gl) {
	quake_GLProgram.call(this,gl,"uniform vec4 uRect;\nuniform mat4 uOrtho;\nattribute vec2 aPoint;\nvarying vec2 vTexCoord;\nvoid main(void)\n{\n    gl_Position = uOrtho * vec4(uRect.x + uRect.z * aPoint.x, uRect.y + uRect.w * aPoint.y, 0.0, 1.0);\n    vTexCoord = vec2(aPoint.x, 1.0 - aPoint.y);\n}\n","precision mediump float;\nuniform float uTime;\nuniform sampler2D tTexture;\nvarying vec2 vTexCoord;\nvoid main(void)\n{\n    gl_FragColor = texture2D(tTexture, vTexCoord + vec2(sin(vTexCoord.t * 15.70796 + uTime) * 0.003125, sin(vTexCoord.s * 9.817477 + uTime) * 0.005));\n}\n");
	this.uRect = this.gl.getUniformLocation(this.program,"uRect");
	this.uOrtho = this.gl.getUniformLocation(this.program,"uOrtho");
	this.uTime = this.gl.getUniformLocation(this.program,"uTime");
	this.aPoint = this.gl.getAttribLocation(this.program,"aPoint");
	this.tTexture = 0;
	this.gl.uniform1i(this.gl.getUniformLocation(this.program,"tTexture"),0);
};
$hxClasses["quake.PWarp"] = quake_PWarp;
quake_PWarp.__name__ = true;
quake_PWarp.__super__ = quake_GLProgram;
quake_PWarp.prototype = $extend(quake_GLProgram.prototype,{
	uRect: null
	,uOrtho: null
	,uTime: null
	,aPoint: null
	,tTexture: null
	,setOrtho: function(ortho) {
		this.gl.uniformMatrix4fv(this.uOrtho,false,ortho);
	}
	,bind: function() {
		this.gl.enableVertexAttribArray(this.aPoint);
	}
	,unbind: function() {
		this.gl.disableVertexAttribArray(this.aPoint);
	}
	,__class__: quake_PWarp
});
var quake_PSky = function(gl) {
	quake_GLProgram.call(this,gl,"uniform mat3 uViewAngles;\nuniform mat4 uPerspective;\nuniform vec3 uScale;\nattribute vec3 aPoint;\nvarying vec2 vTexCoord;\nvoid main(void)\n{\n    vec3 position = uViewAngles * (aPoint * uScale * 18918.0);\n    gl_Position = uPerspective * vec4(position.xz, -position.y, 1.0);\n    vTexCoord = aPoint.xy * uScale.xy * 1.5;\n}\n","precision mediump float;\nuniform float uGamma;\nuniform vec2 uTime;\nuniform sampler2D tSolid;\nuniform sampler2D tAlpha;\nvarying vec2 vTexCoord;\nvoid main(void)\n{\n    vec4 alpha = texture2D(tAlpha, vTexCoord + uTime.x);\n    gl_FragColor = vec4(mix(texture2D(tSolid, vTexCoord + uTime.y).rgb, alpha.rgb, alpha.a), 1.0);\n    gl_FragColor.r = pow(gl_FragColor.r, uGamma);\n    gl_FragColor.g = pow(gl_FragColor.g, uGamma);\n    gl_FragColor.b = pow(gl_FragColor.b, uGamma);\n}\n");
	this.uViewAngles = this.gl.getUniformLocation(this.program,"uViewAngles");
	this.uPerspective = this.gl.getUniformLocation(this.program,"uPerspective");
	this.uScale = this.gl.getUniformLocation(this.program,"uScale");
	this.uGamma = this.gl.getUniformLocation(this.program,"uGamma");
	this.uTime = this.gl.getUniformLocation(this.program,"uTime");
	this.aPoint = this.gl.getAttribLocation(this.program,"aPoint");
	this.tSolid = 0;
	this.gl.uniform1i(this.gl.getUniformLocation(this.program,"tSolid"),0);
	this.tAlpha = 1;
	this.gl.uniform1i(this.gl.getUniformLocation(this.program,"tAlpha"),1);
};
$hxClasses["quake.PSky"] = quake_PSky;
quake_PSky.__name__ = true;
quake_PSky.__super__ = quake_GLProgram;
quake_PSky.prototype = $extend(quake_GLProgram.prototype,{
	uViewAngles: null
	,uPerspective: null
	,uScale: null
	,uGamma: null
	,uTime: null
	,aPoint: null
	,tSolid: null
	,tAlpha: null
	,setViewAngles: function(v) {
		this.gl.uniformMatrix3fv(this.uViewAngles,false,v);
	}
	,setPerspective: function(v) {
		this.gl.uniformMatrix4fv(this.uPerspective,false,v);
	}
	,setGamma: function(gamma) {
		this.gl.uniform1f(this.uGamma,gamma);
	}
	,bind: function() {
		this.gl.enableVertexAttribArray(this.aPoint);
	}
	,unbind: function() {
		this.gl.disableVertexAttribArray(this.aPoint);
	}
	,__class__: quake_PSky
});
var quake_PSkyChain = function(gl) {
	quake_GLProgram.call(this,gl,"uniform vec3 uViewOrigin;\nuniform mat3 uViewAngles;\nuniform mat4 uPerspective;\nattribute vec3 aPoint;\nvoid main(void)\n{\n    vec3 position = uViewAngles * (aPoint - uViewOrigin);\n    gl_Position = uPerspective * vec4(position.xz, -position.y, 1.0);\n}\n","precision mediump float;\nvoid main(void)\n{\n}\n");
	this.uViewOrigin = this.gl.getUniformLocation(this.program,"uViewOrigin");
	this.uViewAngles = this.gl.getUniformLocation(this.program,"uViewAngles");
	this.uPerspective = this.gl.getUniformLocation(this.program,"uPerspective");
	this.aPoint = this.gl.getAttribLocation(this.program,"aPoint");
};
$hxClasses["quake.PSkyChain"] = quake_PSkyChain;
quake_PSkyChain.__name__ = true;
quake_PSkyChain.__super__ = quake_GLProgram;
quake_PSkyChain.prototype = $extend(quake_GLProgram.prototype,{
	uViewOrigin: null
	,uViewAngles: null
	,uPerspective: null
	,aPoint: null
	,setViewOrigin: function(v) {
		this.gl.uniform3fv(this.uViewOrigin,v);
	}
	,setViewAngles: function(v) {
		this.gl.uniformMatrix3fv(this.uViewAngles,false,v);
	}
	,setPerspective: function(v) {
		this.gl.uniformMatrix4fv(this.uPerspective,false,v);
	}
	,bind: function() {
		this.gl.enableVertexAttribArray(this.aPoint);
	}
	,unbind: function() {
		this.gl.disableVertexAttribArray(this.aPoint);
	}
	,__class__: quake_PSkyChain
});
var quake_GLPrograms = function() { };
$hxClasses["quake.GLPrograms"] = quake_GLPrograms;
quake_GLPrograms.__name__ = true;
quake_GLPrograms.add = function(p) {
	quake_GL.programs.push(p);
	return p;
};
quake_GLPrograms.init = function(gl) {
	var p = new quake_PCharacter(gl);
	quake_GL.programs.push(p);
	quake_GLPrograms.character = p;
	var p1 = new quake_PFill(gl);
	quake_GL.programs.push(p1);
	quake_GLPrograms.fill = p1;
	var p2 = new quake_PPic(gl);
	quake_GL.programs.push(p2);
	quake_GLPrograms.pic = p2;
	var p3 = new quake_PPicTranslate(gl);
	quake_GL.programs.push(p3);
	quake_GLPrograms.picTranslate = p3;
	var p4 = new quake_PParticle(gl);
	quake_GL.programs.push(p4);
	quake_GLPrograms.particle = p4;
	var p5 = new quake_PAlias(gl);
	quake_GL.programs.push(p5);
	quake_GLPrograms.alias = p5;
	var p6 = new quake_PBrush(gl);
	quake_GL.programs.push(p6);
	quake_GLPrograms.brush = p6;
	var p7 = new quake_PDlight(gl);
	quake_GL.programs.push(p7);
	quake_GLPrograms.dlight = p7;
	var p8 = new quake_PPlayer(gl);
	quake_GL.programs.push(p8);
	quake_GLPrograms.player = p8;
	var p9 = new quake_PSprite(gl);
	quake_GL.programs.push(p9);
	quake_GLPrograms.sprite = p9;
	var p10 = new quake_PSpriteOriented(gl);
	quake_GL.programs.push(p10);
	quake_GLPrograms.spriteOriented = p10;
	var p11 = new quake_PTurbulent(gl);
	quake_GL.programs.push(p11);
	quake_GLPrograms.turbulent = p11;
	var p12 = new quake_PWarp(gl);
	quake_GL.programs.push(p12);
	quake_GLPrograms.warp = p12;
	var p13 = new quake_PSky(gl);
	quake_GL.programs.push(p13);
	quake_GLPrograms.sky = p13;
	var p14 = new quake_PSkyChain(gl);
	quake_GL.programs.push(p14);
	quake_GLPrograms.skyChain = p14;
};
var quake_GlobalVars = function(buf) {
	this.buffer = buf;
	this.floats = new Float32Array(buf);
	this.ints = new Int32Array(buf);
	this.v_forward = new Float32Array(this.buffer,236,3);
	this.v_up = new Float32Array(this.buffer,248,3);
	this.v_right = new Float32Array(this.buffer,260,3);
	this.trace_endpos = new Float32Array(this.buffer,284,3);
	this.trace_plane_normal = new Float32Array(this.buffer,296,3);
};
$hxClasses["quake.GlobalVars"] = quake_GlobalVars;
quake_GlobalVars.__name__ = true;
quake_GlobalVars.prototype = {
	v_forward: null
	,v_up: null
	,v_right: null
	,trace_endpos: null
	,trace_plane_normal: null
	,buffer: null
	,floats: null
	,ints: null
	,init: function() {
		this.v_forward = new Float32Array(this.buffer,236,3);
		this.v_up = new Float32Array(this.buffer,248,3);
		this.v_right = new Float32Array(this.buffer,260,3);
		this.trace_endpos = new Float32Array(this.buffer,284,3);
		this.trace_plane_normal = new Float32Array(this.buffer,296,3);
	}
	,SetReturnVector: function(v) {
		this.floats[1] = v[0];
		this.floats[1 + 1] = v[1];
		this.floats[1 + 2] = v[2];
	}
	,SetReturnFloat: function(f) {
		this.floats[1] = f;
	}
	,SetReturnInt: function(i) {
		this.ints[1] = i;
	}
	,GetVector: function(ofs) {
		var x = this.floats[ofs];
		var y = this.floats[ofs + 1];
		var z = this.floats[ofs + 2];
		var this1 = new Float32Array(3);
		var v = this1;
		v[0] = x;
		v[1] = y;
		v[2] = z;
		return v;
	}
	,GetFloat: function(ofs) {
		return this.floats[ofs];
	}
	,GetInt: function(ofs) {
		return this.ints[ofs];
	}
	,GetParms: function() {
		return [this.floats[43],this.floats[44],this.floats[45],this.floats[46],this.floats[47],this.floats[48],this.floats[49],this.floats[50],this.floats[51],this.floats[52],this.floats[53],this.floats[54],this.floats[55],this.floats[56],this.floats[57],this.floats[58]];
	}
	,SetParms: function(values) {
		this.floats[43] = values[0];
		this.floats[44] = values[1];
		this.floats[45] = values[2];
		this.floats[46] = values[3];
		this.floats[47] = values[4];
		this.floats[48] = values[5];
		this.floats[49] = values[6];
		this.floats[50] = values[7];
		this.floats[51] = values[8];
		this.floats[52] = values[9];
		this.floats[53] = values[10];
		this.floats[54] = values[11];
		this.floats[55] = values[12];
		this.floats[56] = values[13];
		this.floats[57] = values[14];
		this.floats[58] = values[15];
	}
	,get_self: function() {
		return this.ints[28];
	}
	,set_self: function(value) {
		return this.ints[28] = value;
	}
	,get_other: function() {
		return this.ints[29];
	}
	,set_other: function(value) {
		return this.ints[29] = value;
	}
	,get_world: function() {
		return this.ints[30];
	}
	,set_world: function(value) {
		return this.ints[30] = value;
	}
	,get_time: function() {
		return this.floats[31];
	}
	,set_time: function(value) {
		return this.floats[31] = value;
	}
	,get_frametime: function() {
		return this.floats[32];
	}
	,set_frametime: function(value) {
		return this.floats[32] = value;
	}
	,get_force_retouch: function() {
		return this.floats[33];
	}
	,set_force_retouch: function(value) {
		return this.floats[33] = value;
	}
	,get_mapname: function() {
		return this.ints[34];
	}
	,set_mapname: function(value) {
		return this.ints[34] = value;
	}
	,get_deathmatch: function() {
		return this.floats[35];
	}
	,set_deathmatch: function(value) {
		return this.floats[35] = value;
	}
	,get_coop: function() {
		return this.floats[36];
	}
	,set_coop: function(value) {
		return this.floats[36] = value;
	}
	,get_teamplay: function() {
		return this.floats[37];
	}
	,set_teamplay: function(value) {
		return this.floats[37] = value;
	}
	,get_serverflags: function() {
		return this.floats[38];
	}
	,set_serverflags: function(value) {
		return this.floats[38] = value;
	}
	,get_total_secrets: function() {
		return this.floats[39];
	}
	,set_total_secrets: function(value) {
		return this.floats[39] = value;
	}
	,get_total_monsters: function() {
		return this.floats[40];
	}
	,set_total_monsters: function(value) {
		return this.floats[40] = value;
	}
	,get_found_secrets: function() {
		return this.floats[41];
	}
	,set_found_secrets: function(value) {
		return this.floats[41] = value;
	}
	,get_killed_monsters: function() {
		return this.floats[42];
	}
	,set_killed_monsters: function(value) {
		return this.floats[42] = value;
	}
	,get_parms: function() {
		return this.floats[43];
	}
	,set_parms: function(value) {
		return this.floats[43] = value;
	}
	,get_parms1: function() {
		return this.floats[44];
	}
	,set_parms1: function(value) {
		return this.floats[44] = value;
	}
	,get_parms2: function() {
		return this.floats[45];
	}
	,set_parms2: function(value) {
		return this.floats[45] = value;
	}
	,get_parms3: function() {
		return this.floats[46];
	}
	,set_parms3: function(value) {
		return this.floats[46] = value;
	}
	,get_parms4: function() {
		return this.floats[47];
	}
	,set_parms4: function(value) {
		return this.floats[47] = value;
	}
	,get_parms5: function() {
		return this.floats[48];
	}
	,set_parms5: function(value) {
		return this.floats[48] = value;
	}
	,get_parms6: function() {
		return this.floats[49];
	}
	,set_parms6: function(value) {
		return this.floats[49] = value;
	}
	,get_parms7: function() {
		return this.floats[50];
	}
	,set_parms7: function(value) {
		return this.floats[50] = value;
	}
	,get_parms8: function() {
		return this.floats[51];
	}
	,set_parms8: function(value) {
		return this.floats[51] = value;
	}
	,get_parms9: function() {
		return this.floats[52];
	}
	,set_parms9: function(value) {
		return this.floats[52] = value;
	}
	,get_parms10: function() {
		return this.floats[53];
	}
	,set_parms10: function(value) {
		return this.floats[53] = value;
	}
	,get_parms11: function() {
		return this.floats[54];
	}
	,set_parms11: function(value) {
		return this.floats[54] = value;
	}
	,get_parms12: function() {
		return this.floats[55];
	}
	,set_parms12: function(value) {
		return this.floats[55] = value;
	}
	,get_parms13: function() {
		return this.floats[56];
	}
	,set_parms13: function(value) {
		return this.floats[56] = value;
	}
	,get_parms14: function() {
		return this.floats[57];
	}
	,set_parms14: function(value) {
		return this.floats[57] = value;
	}
	,get_parms15: function() {
		return this.floats[58];
	}
	,set_parms15: function(value) {
		return this.floats[58] = value;
	}
	,get_trace_allsolid: function() {
		return this.floats[68];
	}
	,set_trace_allsolid: function(value) {
		return this.floats[68] = value;
	}
	,get_trace_startsolid: function() {
		return this.floats[69];
	}
	,set_trace_startsolid: function(value) {
		return this.floats[69] = value;
	}
	,get_trace_fraction: function() {
		return this.floats[70];
	}
	,set_trace_fraction: function(value) {
		return this.floats[70] = value;
	}
	,get_trace_plane_dist: function() {
		return this.floats[77];
	}
	,set_trace_plane_dist: function(value) {
		return this.floats[77] = value;
	}
	,get_trace_ent: function() {
		return this.ints[78];
	}
	,set_trace_ent: function(value) {
		return this.ints[78] = value;
	}
	,get_trace_inopen: function() {
		return this.floats[79];
	}
	,set_trace_inopen: function(value) {
		return this.floats[79] = value;
	}
	,get_trace_inwater: function() {
		return this.floats[80];
	}
	,set_trace_inwater: function(value) {
		return this.floats[80] = value;
	}
	,get_msg_entity: function() {
		return this.ints[81];
	}
	,set_msg_entity: function(value) {
		return this.ints[81] = value;
	}
	,get_main: function() {
		return this.ints[82];
	}
	,set_main: function(value) {
		return this.ints[82] = value;
	}
	,get_StartFrame: function() {
		return this.ints[83];
	}
	,set_StartFrame: function(value) {
		return this.ints[83] = value;
	}
	,get_PlayerPreThink: function() {
		return this.ints[84];
	}
	,set_PlayerPreThink: function(value) {
		return this.ints[84] = value;
	}
	,get_PlayerPostThink: function() {
		return this.ints[85];
	}
	,set_PlayerPostThink: function(value) {
		return this.ints[85] = value;
	}
	,get_ClientKill: function() {
		return this.ints[86];
	}
	,set_ClientKill: function(value) {
		return this.ints[86] = value;
	}
	,get_ClientConnect: function() {
		return this.ints[87];
	}
	,set_ClientConnect: function(value) {
		return this.ints[87] = value;
	}
	,get_PutClientInServer: function() {
		return this.ints[88];
	}
	,set_PutClientInServer: function(value) {
		return this.ints[88] = value;
	}
	,get_ClientDisconnect: function() {
		return this.ints[89];
	}
	,set_ClientDisconnect: function(value) {
		return this.ints[89] = value;
	}
	,get_SetNewParms: function() {
		return this.ints[90];
	}
	,set_SetNewParms: function(value) {
		return this.ints[90] = value;
	}
	,get_SetChangeParms: function() {
		return this.ints[91];
	}
	,set_SetChangeParms: function(value) {
		return this.ints[91] = value;
	}
	,__class__: quake_GlobalVars
};
var quake_HClient = function() {
	this.num = 0;
	this.message = new quake_MSG(8000);
	this.message.allowoverflow = true;
	this.colors = 0;
	this.old_frags = 0;
};
$hxClasses["quake.HClient"] = quake_HClient;
quake_HClient.__name__ = true;
quake_HClient.prototype = {
	active: null
	,spawned: null
	,sendsignon: null
	,dropasap: null
	,message: null
	,netconnection: null
	,edict: null
	,old_frags: null
	,num: null
	,colors: null
	,spawn_parms: null
	,last_message: null
	,cmd: null
	,wishdir: null
	,ping_times: null
	,num_pings: null
	,__class__: quake_HClient
};
var quake_Host = function() { };
$hxClasses["quake.Host"] = quake_Host;
quake_Host.__name__ = true;
quake_Host.EndGame = function(message) {
	quake_Console.DPrint("Host.EndGame: " + message + "\n");
	if(quake_CL.cls.demonum != -1) {
		quake_CL.NextDemo();
	} else {
		quake_CL.Disconnect();
	}
	throw new js__$Boot_HaxeError("Host.abortserver");
};
quake_Host.Error = function(error) {
	if(quake_Host.inerror) {
		quake_Sys.Error("Host.Error: recursively entered");
	}
	quake_Host.inerror = true;
	quake_SCR.EndLoadingPlaque();
	quake_Console.Print("Host.Error: " + error + "\n");
	if(quake_SV.server.active) {
		quake_Host.ShutdownServer(false);
	}
	quake_CL.Disconnect();
	quake_CL.cls.demonum = -1;
	quake_Host.inerror = false;
	throw new Error("Host.abortserver");
};
quake_Host.FindMaxClients = function() {
	quake_SV.svs.maxclients = quake_SV.svs.maxclientslimit = 1;
	quake_CL.cls.state = 0;
	quake_SV.svs.clients = [new quake_HClient()];
	quake_Host.deathmatch.setValue(0);
};
quake_Host.InitLocal = function() {
	quake_Host.InitCommands();
	quake_Host.framerate = quake_Cvar.RegisterVariable("host_framerate","0");
	quake_Host.speeds = quake_Cvar.RegisterVariable("host_speeds","0");
	quake_Host.ticrate = quake_Cvar.RegisterVariable("sys_ticrate","0.05");
	quake_Host.serverprofile = quake_Cvar.RegisterVariable("serverprofile","0");
	quake_Host.fraglimit = quake_Cvar.RegisterVariable("fraglimit","0",false,true);
	quake_Host.timelimit = quake_Cvar.RegisterVariable("timelimit","0",false,true);
	quake_Host.teamplay = quake_Cvar.RegisterVariable("teamplay","0",false,true);
	quake_Host.samelevel = quake_Cvar.RegisterVariable("samelevel","0");
	quake_Host.noexit = quake_Cvar.RegisterVariable("noexit","0",false,true);
	quake_Host.skill = quake_Cvar.RegisterVariable("skill","1");
	quake_Host.developer = quake_Cvar.RegisterVariable("developer","0");
	quake_Host.deathmatch = quake_Cvar.RegisterVariable("deathmatch","0");
	quake_Host.coop = quake_Cvar.RegisterVariable("coop","0");
	quake_Host.pausable = quake_Cvar.RegisterVariable("pausable","1");
	quake_Host.temp1 = quake_Cvar.RegisterVariable("temp1","0");
	quake_Host.FindMaxClients();
};
quake_Host.ClientPrint = function(string) {
	quake_Host.client.message.WriteByte(8);
	quake_Host.client.message.WriteString(string);
};
quake_Host.BroadcastPrint = function(string) {
	var _g1 = 0;
	var _g = quake_SV.svs.maxclients;
	while(_g1 < _g) {
		var i = _g1++;
		var client = quake_SV.svs.clients[i];
		if(!client.active || !client.spawned) {
			continue;
		}
		client.message.WriteByte(8);
		client.message.WriteString(string);
	}
};
quake_Host.DropClient = function(crash) {
	var client = quake_Host.client;
	if(!crash) {
		if(quake_NET.CanSendMessage(client.netconnection)) {
			client.message.WriteByte(2);
			quake_NET.SendMessage(client.netconnection,client.message);
		}
		if(client.edict != null && client.spawned) {
			var saveSelf = quake_PR.globals.ints[28];
			quake_PR.globals.ints[28] = client.edict.num;
			quake_PR.ExecuteProgram(quake_PR.globals.ints[89]);
			quake_PR.globals.ints[28] = saveSelf;
		}
		haxe_Log.trace("Client " + quake_PR.GetString(quake_PR.netnames + (client.num << 5)) + " removed\n",{ fileName : "Sys.hx", lineNumber : 45, className : "quake.Sys", methodName : "Print"});
	}
	quake_NET.Close(client.netconnection);
	client.netconnection = null;
	client.active = false;
	quake_SV.SetClientName(client,"");
	client.old_frags = -999999;
	--quake_NET.activeconnections;
	var num = client.num;
	var _g1 = 0;
	var _g = quake_SV.svs.maxclients;
	while(_g1 < _g) {
		var i = _g1++;
		var client1 = quake_SV.svs.clients[i];
		if(!client1.active) {
			continue;
		}
		client1.message.WriteByte(13);
		client1.message.WriteByte(num);
		client1.message.WriteByte(0);
		client1.message.WriteByte(14);
		client1.message.WriteByte(num);
		client1.message.WriteShort(0);
		client1.message.WriteByte(17);
		client1.message.WriteByte(num);
		client1.message.WriteByte(0);
	}
};
quake_Host.ShutdownServer = function(crash) {
	if(!quake_SV.server.active) {
		return;
	}
	quake_SV.server.active = false;
	if(quake_CL.cls.state == 2) {
		quake_CL.Disconnect();
	}
	var start = new Date().getTime() * 0.001 - quake_Sys.oldtime;
	var count = 0;
	while(true) {
		var _g1 = 0;
		var _g = quake_SV.svs.maxclients;
		while(_g1 < _g) {
			var i = _g1++;
			quake_Host.client = quake_SV.svs.clients[i];
			if(!quake_Host.client.active || quake_Host.client.message.cursize == 0) {
				continue;
			}
			if(quake_NET.CanSendMessage(quake_Host.client.netconnection)) {
				quake_NET.SendMessage(quake_Host.client.netconnection,quake_Host.client.message);
				quake_Host.client.message.cursize = 0;
				continue;
			}
			quake_NET.GetMessage(quake_Host.client.netconnection);
			++count;
		}
		if(new Date().getTime() * 0.001 - quake_Sys.oldtime - start > 3.0) {
			break;
		}
		if(!(count != 0)) {
			break;
		}
	}
	var buf = new quake_MSG(4,1);
	new Uint8Array(buf.data)[0] = 2;
	count = quake_NET.SendToAll(buf);
	if(count != 0) {
		quake_Console.Print("Host.ShutdownServer: NET.SendToAll failed for " + count + " clients\n");
	}
	var _g11 = 0;
	var _g2 = quake_SV.svs.maxclients;
	while(_g11 < _g2) {
		var i1 = _g11++;
		quake_Host.client = quake_SV.svs.clients[i1];
		if(quake_Host.client.active) {
			quake_Host.DropClient(crash);
		}
	}
};
quake_Host.WriteConfiguration = function() {
	quake_COM.WriteTextFile("config.cfg",quake_Key.WriteBindings() + quake_Cvar.WriteVariables());
};
quake_Host.ServerFrame = function() {
	quake_PR.globals.floats[32] = quake_Host.frametime;
	quake_SV.server.datagram.cursize = 0;
	quake_SV.CheckForNewClients();
	quake_SV.RunClients();
	if(!quake_SV.server.paused && (quake_SV.svs.maxclients >= 2 || quake_Key.dest == 0)) {
		quake_SV.Physics();
	}
	quake_SV.SendClientMessages();
};
quake_Host._Frame = function() {
	Math.random();
	quake_Host.realtime = new Date().getTime() * 0.001 - quake_Sys.oldtime;
	quake_Host.frametime = quake_Host.realtime - quake_Host.oldrealtime;
	quake_Host.oldrealtime = quake_Host.realtime;
	if(quake_Host.framerate.value > 0) {
		quake_Host.frametime = quake_Host.framerate.value;
	} else if(quake_Host.frametime > 0.1) {
		quake_Host.frametime = 0.1;
	} else if(quake_Host.frametime < 0.001) {
		quake_Host.frametime = 0.001;
	}
	if(quake_CL.cls.state == 1) {
		quake_NET.CheckForResend();
		quake_SCR.UpdateScreen();
		return;
	}
	var time1 = null;
	var time2 = null;
	var pass1;
	var pass2;
	var pass3;
	var tot;
	quake_Cmd.Execute();
	quake_CL.SendCmd();
	if(quake_SV.server.active) {
		quake_Host.ServerFrame();
	}
	if(quake_CL.cls.state == 2) {
		quake_CL.ReadFromServer();
	}
	if(quake_Host.speeds.value != 0) {
		time1 = new Date().getTime() * 0.001 - quake_Sys.oldtime;
	}
	quake_SCR.UpdateScreen();
	quake_CL.RunParticles();
	if(quake_Host.speeds.value != 0) {
		time2 = new Date().getTime() * 0.001 - quake_Sys.oldtime;
	}
	if(quake_CL.cls.signon == 4) {
		quake_S.Update(quake_Render.refdef.vieworg,quake_Render.vpn,quake_Render.vright,quake_Render.vup);
		quake_CL.DecayLights();
	} else {
		quake_S.Update(quake__$Vec_Vec_$Impl_$.origin,quake__$Vec_Vec_$Impl_$.origin,quake__$Vec_Vec_$Impl_$.origin,quake__$Vec_Vec_$Impl_$.origin);
	}
	quake_CDAudio.Update();
	if(quake_Host.speeds.value != 0) {
		pass1 = (time1 - quake_Host.time3) * 1000.0;
		quake_Host.time3 = new Date().getTime() * 0.001 - quake_Sys.oldtime;
		pass2 = (time2 - time1) * 1000.0;
		pass3 = (quake_Host.time3 - time2) * 1000.0;
		tot = Math.floor(pass1 + pass2 + pass3);
		quake_Console.Print((tot <= 99 ? tot <= 9 ? "  " : " " : "") + tot + " tot " + (pass1 < 100.0 ? pass1 < 10.0 ? "  " : " " : "") + Math.floor(pass1) + " server " + (pass2 < 100.0 ? pass2 < 10.0 ? "  " : " " : "") + Math.floor(pass2) + " gfx " + (pass3 < 100.0 ? pass3 < 10.0 ? "  " : " " : "") + Math.floor(pass3) + " snd\n");
	}
	if(quake_Host.startdemos) {
		quake_CL.NextDemo();
		quake_Host.startdemos = false;
	}
	++quake_Host.framecount;
};
quake_Host.Frame = function() {
	if(quake_Host.serverprofile.value == 0) {
		quake_Host._Frame();
		return;
	}
	var time1 = new Date().getTime() * 0.001 - quake_Sys.oldtime;
	quake_Host._Frame();
	quake_Host.timetotal += new Date().getTime() * 0.001 - quake_Sys.oldtime - time1;
	if(++quake_Host.timecount <= 999) {
		return;
	}
	var m = quake_Host.timetotal * 1000.0 / quake_Host.timecount | 0;
	quake_Host.timecount = 0;
	quake_Host.timetotal = 0.0;
	var c = 0;
	var _g1 = 0;
	var _g = quake_SV.svs.maxclients;
	while(_g1 < _g) {
		var i = _g1++;
		if(quake_SV.svs.clients[i].active) {
			++c;
		}
	}
	quake_Console.Print("serverprofile: " + (c <= 9 ? " " : "") + c + " clients " + (m <= 9 ? " " : "") + m + " msec\n");
};
quake_Host.Init = function() {
	quake_Host.oldrealtime = new Date().getTime() * 0.001 - quake_Sys.oldtime;
	quake_Cmd.Init();
	quake_V.Init();
	quake_Chase.Init();
	quake_COM.Init();
	quake_Host.InitLocal();
	quake_W.LoadWadFile("gfx.wad");
	quake_Key.Init();
	quake_Console.Init();
	quake_PR.Init();
	quake_Mod.Init();
	quake_NET.Init();
	quake_SV.Init();
	quake_Console.Print("Exe: 12:39:20 Aug  7 2014\n");
	quake_VID.Init();
	quake_Draw.Init();
	quake_SCR.Init();
	quake_Render.Init();
	quake_S.Init();
	quake_Menu.Init();
	quake_CDAudio.Init();
	quake_Sbar.Init();
	quake_CL.Init();
	quake_IN.Init();
	quake_Cmd.text = "exec quake.rc\n" + quake_Cmd.text;
	quake_Host.initialized = true;
	haxe_Log.trace("======Quake Initialized======\n",{ fileName : "Sys.hx", lineNumber : 45, className : "quake.Sys", methodName : "Print"});
};
quake_Host.Shutdown = function() {
	if(quake_Host.isdown) {
		haxe_Log.trace("recursive shutdown\n",{ fileName : "Sys.hx", lineNumber : 45, className : "quake.Sys", methodName : "Print"});
		return;
	}
	quake_Host.isdown = true;
	quake_COM.WriteTextFile("config.cfg",quake_Key.WriteBindings() + quake_Cvar.WriteVariables());
	quake_CDAudio.Stop();
	quake_NET.Shutdown();
	quake_S.StopAllSounds();
	quake_IN.Shutdown();
};
quake_Host.Quit_f = function() {
	if(quake_Key.dest != 1) {
		quake_Menu.Menu_Quit_f();
		return;
	}
	quake_Sys.Quit();
};
quake_Host.Status_f = function() {
	var print;
	if(!quake_Cmd.client) {
		if(!quake_SV.server.active) {
			quake_Cmd.ForwardToServer();
			return;
		}
		print = quake_Console.Print;
	} else {
		print = quake_Host.ClientPrint;
	}
	print("host:    " + quake_NET.hostname.string + "\n");
	print("version: 1.09\n");
	print("map:     " + quake_PR.GetString(quake_PR.globals.ints[34]) + "\n");
	print("players: " + quake_NET.activeconnections + " active (" + quake_SV.svs.maxclients + " max)\n\n");
	var _g1 = 0;
	var _g = quake_SV.svs.maxclients;
	while(_g1 < _g) {
		var i = _g1++;
		var client = quake_SV.svs.clients[i];
		if(!client.active) {
			continue;
		}
		var frags = client.edict.v.floats[49].toFixed(0);
		if(frags.length == 1) {
			frags = "  " + frags;
		} else if(frags.length == 2) {
			frags = " " + frags;
		}
		var seconds = quake_NET.time - client.netconnection.connecttime | 0;
		var minutes = seconds / 60 | 0;
		var hours;
		if(minutes != 0) {
			seconds -= minutes * 60;
			hours = minutes / 60 | 0;
			if(hours != 0) {
				minutes -= hours * 60;
			}
		} else {
			hours = 0;
		}
		var str = "#" + (i + 1) + " ";
		if(i <= 8) {
			str += " ";
		}
		str += quake_PR.GetString(quake_PR.netnames + (client.num << 5));
		while(str.length <= 21) str += " ";
		str += frags + "  ";
		if(hours <= 9) {
			str += " ";
		}
		str += hours + ":";
		if(minutes <= 9) {
			str += "0";
		}
		str += minutes + ":";
		if(seconds <= 9) {
			str += "0";
		}
		print(str + seconds + "\n");
		print("   " + client.netconnection.address + "\n");
	}
};
quake_Host.God_f = function() {
	if(!quake_Cmd.client) {
		quake_Cmd.ForwardToServer();
		return;
	}
	if(quake_PR.globals.floats[35] != 0) {
		return;
	}
	var v = (quake_SV.player.v.floats[76] | 0) ^ 64;
	quake_SV.player.v.floats[76] = v;
	if(((quake_SV.player.v.floats[76] | 0) & 64) == 0) {
		quake_Host.ClientPrint("godmode OFF\n");
	} else {
		quake_Host.ClientPrint("godmode ON\n");
	}
};
quake_Host.Notarget_f = function() {
	if(!quake_Cmd.client) {
		quake_Cmd.ForwardToServer();
		return;
	}
	if(quake_PR.globals.floats[35] != 0) {
		return;
	}
	var v = (quake_SV.player.v.floats[76] | 0) ^ 128;
	quake_SV.player.v.floats[76] = v;
	if(((quake_SV.player.v.floats[76] | 0) & 128) == 0) {
		quake_Host.ClientPrint("notarget OFF\n");
	} else {
		quake_Host.ClientPrint("notarget ON\n");
	}
};
quake_Host.Noclip_f = function() {
	if(!quake_Cmd.client) {
		quake_Cmd.ForwardToServer();
		return;
	}
	if(quake_PR.globals.floats[35] != 0) {
		return;
	}
	if(quake_SV.player.v.floats[8] != 8) {
		quake_Host.noclip_anglehack = true;
		quake_SV.player.v.floats[8] = 8;
		quake_Host.ClientPrint("noclip ON\n");
		return;
	}
	quake_Host.noclip_anglehack = false;
	quake_SV.player.v.floats[8] = 3;
	quake_Host.ClientPrint("noclip OFF\n");
};
quake_Host.Fly_f = function() {
	if(!quake_Cmd.client) {
		quake_Cmd.ForwardToServer();
		return;
	}
	if(quake_PR.globals.floats[35] != 0) {
		return;
	}
	if(quake_SV.player.v.floats[8] != 5) {
		quake_SV.player.v.floats[8] = 5;
		quake_Host.ClientPrint("flymode ON\n");
		return;
	}
	quake_SV.player.v.floats[8] = 3;
	quake_Host.ClientPrint("flymode OFF\n");
};
quake_Host.Ping_f = function() {
	if(!quake_Cmd.client) {
		quake_Cmd.ForwardToServer();
		return;
	}
	quake_Host.ClientPrint("Client ping times:\n");
	var _g1 = 0;
	var _g = quake_SV.svs.maxclients;
	while(_g1 < _g) {
		var i = _g1++;
		var client = quake_SV.svs.clients[i];
		if(!client.active) {
			continue;
		}
		var total = 0.0;
		var _g2 = 0;
		while(_g2 < 16) {
			var j = _g2++;
			total += client.ping_times[j];
		}
		var total1 = (total * 62.5).toFixed(0);
		if(total1.length == 1) {
			total1 = "   " + total1;
		} else if(total1.length == 2) {
			total1 = "  " + total1;
		} else if(total1.length == 3) {
			total1 = " " + total1;
		}
		quake_Host.ClientPrint(total1 + " " + quake_PR.GetString(quake_PR.netnames + (client.num << 5)) + "\n");
	}
};
quake_Host.Map_f = function() {
	if(quake_Cmd.argv.length <= 1) {
		quake_Console.Print("USAGE: map <map>\n");
		return;
	}
	if(quake_Cmd.client) {
		return;
	}
	quake_CL.cls.demonum = -1;
	quake_CL.Disconnect();
	quake_Host.ShutdownServer(false);
	quake_Key.dest = 0;
	quake_SCR.BeginLoadingPlaque();
	quake_SV.svs.serverflags = 0;
	quake_SV.SpawnServer(quake_Cmd.argv[1]);
	if(!quake_SV.server.active) {
		return;
	}
	quake_CL.cls.spawnparms = "";
	var _g1 = 2;
	var _g = quake_Cmd.argv.length;
	while(_g1 < _g) {
		var i = _g1++;
		quake_CL.cls.spawnparms += quake_Cmd.argv[i] + " ";
	}
	quake_Cmd.ExecuteString("connect local");
};
quake_Host.Changelevel_f = function() {
	if(quake_Cmd.argv.length != 2) {
		quake_Console.Print("changelevel <levelname> : continue game on a new level\n");
		return;
	}
	if(!quake_SV.server.active || quake_CL.cls.demoplayback) {
		quake_Console.Print("Only the server may changelevel\n");
		return;
	}
	quake_SV.SaveSpawnparms();
	quake_SV.SpawnServer(quake_Cmd.argv[1]);
};
quake_Host.Restart_f = function() {
	if(!quake_CL.cls.demoplayback && quake_SV.server.active && !quake_Cmd.client) {
		quake_SV.SpawnServer(quake_PR.GetString(quake_PR.globals.ints[34]));
	}
};
quake_Host.Reconnect_f = function() {
	quake_SCR.BeginLoadingPlaque();
	quake_CL.cls.signon = 0;
};
quake_Host.Connect_f = function() {
	quake_CL.cls.demonum = -1;
	if(quake_CL.cls.demoplayback) {
		quake_CL.StopPlayback();
		quake_CL.Disconnect();
	}
	quake_CL.EstablishConnection(quake_Cmd.argv[1]);
	quake_CL.cls.signon = 0;
};
quake_Host.SavegameComment = function() {
	var _this_r = new RegExp("\\s","gm".split("u").join(""));
	var text = quake_CL.state.levelname.replace(_this_r,"_");
	var _g = quake_CL.state.levelname.length;
	while(_g < 22) {
		var i = _g++;
		text += "_";
	}
	text += "kills:";
	var kills = Std.string(quake_CL.state.stats[14]);
	if(kills.length == 2) {
		text += "_";
	} else if(kills.length == 1) {
		text += "__";
	}
	text += kills + "/";
	kills = Std.string(quake_CL.state.stats[12]);
	if(kills.length == 2) {
		text += "_";
	} else if(kills.length == 1) {
		text += "__";
	}
	text += kills;
	return text + "____";
};
quake_Host.Savegame_f = function() {
	if(quake_Cmd.client) {
		return;
	}
	if(!quake_SV.server.active) {
		quake_Console.Print("Not playing a local game.\n");
		return;
	}
	if(quake_CL.state.intermission != 0) {
		quake_Console.Print("Can't save in intermission.\n");
		return;
	}
	if(quake_SV.svs.maxclients != 1) {
		quake_Console.Print("Can't save multiplayer games.\n");
		return;
	}
	if(quake_Cmd.argv.length != 2) {
		quake_Console.Print("save <savename> : save a game\n");
		return;
	}
	if(quake_Cmd.argv[1].indexOf("..") != -1) {
		quake_Console.Print("Relative pathnames are not allowed.\n");
		return;
	}
	var client = quake_SV.svs.clients[0];
	if(client.active) {
		if(client.edict.v.floats[48] <= 0.0) {
			quake_Console.Print("Can't savegame with a dead player\n");
			return;
		}
	}
	var f = ["5\n" + quake_Host.SavegameComment() + "\n"];
	var _g = 0;
	while(_g < 16) {
		var i = _g++;
		f.push(client.spawn_parms[i].toFixed(6) + "\n");
	}
	f.push(quake_Host.current_skill + "\n" + quake_PR.GetString(quake_PR.globals.ints[34]) + "\n" + quake_SV.server.time.toFixed(6) + "\n");
	var _g1 = 0;
	var _g11 = quake_SV.server.lightstyles;
	while(_g1 < _g11.length) {
		var ls = _g11[_g1];
		++_g1;
		if(ls.length != 0) {
			f.push(ls + "\n");
		} else {
			f.push("m\n");
		}
	}
	f.push("{\n");
	var _g2 = 0;
	var _g12 = quake_PR.globaldefs;
	while(_g2 < _g12.length) {
		var def = _g12[_g2];
		++_g2;
		var type = def.type;
		if((type & 32768) == 0) {
			continue;
		}
		var type1 = type & 32767;
		if(type1 != 1 && type1 != 2 && type1 != 4) {
			continue;
		}
		f.push("\"" + quake_PR.GetString(def.name) + "\" \"" + quake_PR.UglyValueString(type1,quake_PR.globals.buffer,def.ofs) + "\"\n");
	}
	f.push("}\n");
	var _g13 = 0;
	var _g3 = quake_SV.server.num_edicts;
	while(_g13 < _g3) {
		var i1 = _g13++;
		var ed = quake_SV.server.edicts[i1];
		if(ed.free) {
			f.push("{\n}\n");
			continue;
		}
		f.push("{\n");
		var _g21 = 0;
		var _g31 = quake_PR.fielddefs;
		while(_g21 < _g31.length) {
			var def1 = _g31[_g21];
			++_g21;
			var name = quake_PR.GetString(def1.name);
			if(HxOverrides.cca(name,name.length - 2) == 95) {
				continue;
			}
			var type2 = def1.type & 32767;
			var v = def1.ofs;
			if(ed.v.ints[v] == 0) {
				if(type2 == 3) {
					if(ed.v.ints[v + 1] == 0 && ed.v.ints[v + 2] == 0) {
						continue;
					}
				} else {
					continue;
				}
			}
			f.push("\"" + name + "\" \"" + quake_PR.UglyValueString(type2,ed.v.buffer,def1.ofs) + "\"\n");
		}
		f.push("}\n");
	}
	var name1 = quake_COM.DefaultExtension(quake_Cmd.argv[1],".sav");
	quake_Console.Print("Saving game to " + name1 + "...\n");
	if(quake_COM.WriteTextFile(name1,f.join(""))) {
		quake_Console.Print("done.\n");
	} else {
		quake_Console.Print("ERROR: couldn't open.\n");
	}
};
quake_Host.Loadgame_f = function() {
	if(quake_Cmd.client) {
		return;
	}
	if(quake_Cmd.argv.length != 2) {
		quake_Console.Print("load <savename> : load a game\n");
		return;
	}
	quake_CL.cls.demonum = -1;
	var name = quake_COM.DefaultExtension(quake_Cmd.argv[1],".sav");
	quake_Console.Print("Loading game from " + name + "...\n");
	var f = quake_COM.LoadTextFile(name);
	if(f == null) {
		quake_Console.Print("ERROR: couldn't open.\n");
		return;
	}
	var f1 = f.split("\n");
	var tfloat = parseFloat(f1[0]);
	if(tfloat != 5) {
		quake_Console.Print("Savegame is version " + tfloat + ", not 5\n");
		return;
	}
	var spawn_parms = [];
	var _g = 0;
	while(_g < 16) {
		var i = _g++;
		spawn_parms[i] = parseFloat(f1[2 + i]);
	}
	quake_Host.current_skill = parseFloat(f1[18]) + 0.1 | 0;
	quake_Host.skill.setValue(quake_Host.current_skill);
	var time = parseFloat(f1[20]);
	quake_CL.Disconnect();
	quake_SV.SpawnServer(f1[19]);
	if(!quake_SV.server.active) {
		quake_Console.Print("Couldn't load map\n");
		return;
	}
	quake_SV.server.paused = true;
	quake_SV.server.loadgame = true;
	var _g1 = 0;
	while(_g1 < 64) {
		var i1 = _g1++;
		quake_SV.server.lightstyles[i1] = f1[21 + i1];
	}
	if(f1[85] != "{") {
		quake_Sys.Error("First token isn't a brace");
	}
	var i2 = 86;
	while(i2 < f1.length) {
		if(f1[i2] == "}") {
			++i2;
			break;
		}
		var token = f1[i2].split("\"");
		var keyname = token[1];
		var key = quake_ED.FindGlobal(keyname);
		++i2;
		if(key == null) {
			quake_Console.Print("'" + keyname + "' is not a global\n");
			continue;
		}
		if(!quake_ED.ParseEpair(quake_PR.globals.buffer,key,token[3])) {
			quake_Host.Error("Host.Loadgame_f: parse error");
		}
	}
	f1.push("");
	var entnum = 0;
	var data = f1.slice(i2).join("\n");
	while(true) {
		data = quake_COM.Parse(data);
		if(data == null) {
			break;
		}
		if(HxOverrides.cca(quake_COM.token,0) != 123) {
			quake_Sys.Error("Host.Loadgame_f: found " + quake_COM.token + " when expecting {");
		}
		var ent = quake_SV.server.edicts[entnum++];
		var _g11 = 0;
		var _g2 = quake_PR.entityfields;
		while(_g11 < _g2) {
			var j = _g11++;
			ent.v.ints[j] = 0;
		}
		ent.free = false;
		data = quake_ED.ParseEdict(data,ent);
		if(!ent.free) {
			quake_SV.LinkEdict(ent,false);
		}
	}
	quake_SV.server.num_edicts = entnum;
	quake_SV.server.time = time;
	var client = quake_SV.svs.clients[0];
	client.spawn_parms = [];
	var _g3 = 0;
	while(_g3 < 16) {
		var i3 = _g3++;
		client.spawn_parms[i3] = spawn_parms[i3];
	}
	quake_CL.EstablishConnection("local");
	quake_Host.Reconnect_f();
};
quake_Host.Name_f = function() {
	if(quake_Cmd.argv.length <= 1) {
		quake_Console.Print("\"name\" is \"" + quake_CL.$name.string + "\"\n");
		return;
	}
	var newName;
	if(quake_Cmd.argv.length == 2) {
		newName = quake_Cmd.argv[1].substring(0,15);
	} else {
		newName = quake_Cmd.args.substring(0,15);
	}
	if(!quake_Cmd.client) {
		quake_CL.$name.set(newName);
		if(quake_CL.cls.state == 2) {
			quake_Cmd.ForwardToServer();
		}
		return;
	}
	var name = quake_PR.GetString(quake_PR.netnames + (quake_Host.client.num << 5));
	if(name.length != 0 && name != "unconnected" && name != newName) {
		quake_Console.Print(name + " renamed to " + newName + "\n");
	}
	quake_SV.SetClientName(quake_Host.client,newName);
	var msg = quake_SV.server.reliable_datagram;
	msg.WriteByte(13);
	msg.WriteByte(quake_Host.client.num);
	msg.WriteString(newName);
};
quake_Host.Version_f = function() {
	quake_Console.Print("Version 1.09\n");
	quake_Console.Print("Exe: 12:39:20 Aug  7 2014\n");
};
quake_Host.Say = function(teamonly) {
	if(!quake_Cmd.client) {
		quake_Cmd.ForwardToServer();
		return;
	}
	if(quake_Cmd.argv.length <= 1) {
		return;
	}
	var save = quake_Host.client;
	var p = quake_Cmd.args;
	if(HxOverrides.cca(p,0) == 34) {
		p = p.substring(1,p.length - 1);
	}
	var text = "\x01" + quake_PR.GetString(quake_PR.netnames + (save.num << 5)) + ": ";
	var i = 62 - text.length;
	if(p.length > i) {
		p = p.substring(0,i);
	}
	text += p + "\n";
	var _g1 = 0;
	var _g = quake_SV.svs.maxclients;
	while(_g1 < _g) {
		var i1 = _g1++;
		var client = quake_SV.svs.clients[i1];
		if(!client.active || !client.spawned) {
			continue;
		}
		if(quake_Host.teamplay.value != 0 && teamonly && client.edict.v.floats[78] != save.edict.v.floats[78]) {
			continue;
		}
		quake_Host.client = client;
		quake_Host.ClientPrint(text);
	}
	quake_Host.client = save;
	haxe_Log.trace(text.substring(1),{ fileName : "Sys.hx", lineNumber : 45, className : "quake.Sys", methodName : "Print"});
};
quake_Host.Say_Team_f = function() {
	quake_Host.Say(true);
};
quake_Host.Tell_f = function() {
	if(!quake_Cmd.client) {
		quake_Cmd.ForwardToServer();
		return;
	}
	if(quake_Cmd.argv.length <= 2) {
		return;
	}
	var text = quake_PR.GetString(quake_PR.netnames + (quake_Host.client.num << 5)) + ": ";
	var p = quake_Cmd.args;
	if(HxOverrides.cca(p,0) == 34) {
		p = p.substring(1,p.length - 1);
	}
	var i = 62 - text.length;
	if(p.length > i) {
		p = p.substring(0,i);
	}
	text += p + "\n";
	var save = quake_Host.client;
	var _g1 = 0;
	var _g = quake_SV.svs.maxclients;
	while(_g1 < _g) {
		var i1 = _g1++;
		var client = quake_SV.svs.clients[i1];
		if(!client.active || !client.spawned) {
			continue;
		}
		if(quake_PR.GetString(quake_PR.netnames + (client.num << 5)).toLowerCase() != quake_Cmd.argv[1].toLowerCase()) {
			continue;
		}
		quake_Host.client = client;
		quake_Host.ClientPrint(text);
		break;
	}
	quake_Host.client = save;
};
quake_Host.Color_f = function() {
	if(quake_Cmd.argv.length <= 1) {
		var col = quake_CL.color.value | 0;
		quake_Console.Print("\"color\" is \"" + (col >> 4) + " " + (col & 15) + "\"\ncolor <0-13> [0-13]\n");
		return;
	}
	var top;
	var bottom;
	if(quake_Cmd.argv.length == 2) {
		bottom = (quake_Q.atoi(quake_Cmd.argv[1]) & 15) >>> 0;
		top = bottom;
	} else {
		top = (quake_Q.atoi(quake_Cmd.argv[1]) & 15) >>> 0;
		bottom = (quake_Q.atoi(quake_Cmd.argv[2]) & 15) >>> 0;
	}
	if(top >= 14) {
		top = 13;
	}
	if(bottom >= 14) {
		bottom = 13;
	}
	var playercolor = (top << 4) + bottom;
	if(!quake_Cmd.client) {
		quake_CL.color.setValue(playercolor);
		if(quake_CL.cls.state == 2) {
			quake_Cmd.ForwardToServer();
		}
		return;
	}
	quake_Host.client.colors = playercolor;
	quake_Host.client.edict.v.floats[78] = bottom + 1;
	var msg = quake_SV.server.reliable_datagram;
	msg.WriteByte(17);
	msg.WriteByte(quake_Host.client.num);
	msg.WriteByte(playercolor);
};
quake_Host.Kill_f = function() {
	if(!quake_Cmd.client) {
		quake_Cmd.ForwardToServer();
		return;
	}
	if(quake_SV.player.v.floats[48] <= 0.0) {
		quake_Host.ClientPrint("Can't suicide -- already dead!\n");
		return;
	}
	quake_PR.globals.floats[31] = quake_SV.server.time;
	quake_PR.globals.ints[28] = quake_SV.player.num;
	quake_PR.ExecuteProgram(quake_PR.globals.ints[86]);
};
quake_Host.Pause_f = function() {
	if(!quake_Cmd.client) {
		quake_Cmd.ForwardToServer();
		return;
	}
	if(quake_Host.pausable.value == 0) {
		quake_Host.ClientPrint("Pause not allowed.\n");
		return;
	}
	quake_SV.server.paused = !quake_SV.server.paused;
	quake_Host.BroadcastPrint(quake_PR.GetString(quake_PR.netnames + (quake_Host.client.num << 5)) + (quake_SV.server.paused ? " paused the game\n" : " unpaused the game\n"));
	quake_SV.server.reliable_datagram.WriteByte(24);
	quake_SV.server.reliable_datagram.WriteByte(quake_SV.server.paused ? 1 : 0);
};
quake_Host.PreSpawn_f = function() {
	if(!quake_Cmd.client) {
		quake_Console.Print("prespawn is not valid from the console\n");
		return;
	}
	var client = quake_Host.client;
	if(client.spawned) {
		quake_Console.Print("prespawn not valid -- already spawned\n");
		return;
	}
	client.message.Write(new Uint8Array(quake_SV.server.signon.data),quake_SV.server.signon.cursize);
	client.message.WriteByte(25);
	client.message.WriteByte(2);
	client.sendsignon = true;
};
quake_Host.Spawn_f = function() {
	if(!quake_Cmd.client) {
		quake_Console.Print("spawn is not valid from the console\n");
		return;
	}
	var client = quake_Host.client;
	if(client.spawned) {
		quake_Console.Print("Spawn not valid -- already spawned\n");
		return;
	}
	var ent = client.edict;
	if(quake_SV.server.loadgame) {
		quake_SV.server.paused = false;
	} else {
		var _g1 = 0;
		var _g = quake_PR.entityfields;
		while(_g1 < _g) {
			var i = _g1++;
			ent.v.ints[i] = 0;
		}
		ent.v.floats[77] = ent.num;
		ent.v.floats[78] = (client.colors & 15) + 1;
		ent.v.ints[74] = quake_PR.netnames + (client.num << 5);
		var _this = quake_PR.globals;
		var values = client.spawn_parms;
		_this.floats[43] = values[0];
		_this.floats[44] = values[1];
		_this.floats[45] = values[2];
		_this.floats[46] = values[3];
		_this.floats[47] = values[4];
		_this.floats[48] = values[5];
		_this.floats[49] = values[6];
		_this.floats[50] = values[7];
		_this.floats[51] = values[8];
		_this.floats[52] = values[9];
		_this.floats[53] = values[10];
		_this.floats[54] = values[11];
		_this.floats[55] = values[12];
		_this.floats[56] = values[13];
		_this.floats[57] = values[14];
		_this.floats[58] = values[15];
		quake_PR.globals.floats[31] = quake_SV.server.time;
		quake_PR.globals.ints[28] = ent.num;
		quake_PR.ExecuteProgram(quake_PR.globals.ints[87]);
		if(new Date().getTime() * 0.001 - quake_Sys.oldtime - client.netconnection.connecttime <= quake_SV.server.time) {
			haxe_Log.trace(quake_PR.GetString(quake_PR.netnames + (client.num << 5)) + " entered the game\n",{ fileName : "Sys.hx", lineNumber : 45, className : "quake.Sys", methodName : "Print"});
		}
		quake_PR.ExecuteProgram(quake_PR.globals.ints[88]);
	}
	var message = client.message;
	message.cursize = 0;
	message.WriteByte(7);
	message.WriteFloat(quake_SV.server.time);
	var _g11 = 0;
	var _g2 = quake_SV.svs.maxclients;
	while(_g11 < _g2) {
		var i1 = _g11++;
		client = quake_SV.svs.clients[i1];
		message.WriteByte(13);
		message.WriteByte(i1);
		message.WriteString(quake_PR.GetString(quake_PR.netnames + (client.num << 5)));
		message.WriteByte(14);
		message.WriteByte(i1);
		message.WriteShort(client.old_frags);
		message.WriteByte(17);
		message.WriteByte(i1);
		message.WriteByte(client.colors);
	}
	var _g3 = 0;
	while(_g3 < 64) {
		var i2 = _g3++;
		message.WriteByte(12);
		message.WriteByte(i2);
		message.WriteString(quake_SV.server.lightstyles[i2]);
	}
	message.WriteByte(3);
	message.WriteByte(11);
	message.WriteLong(quake_PR.globals.floats[39] | 0);
	message.WriteByte(3);
	message.WriteByte(12);
	message.WriteLong(quake_PR.globals.floats[40] | 0);
	message.WriteByte(3);
	message.WriteByte(13);
	message.WriteLong(quake_PR.globals.floats[41] | 0);
	message.WriteByte(3);
	message.WriteByte(14);
	message.WriteLong(quake_PR.globals.floats[42] | 0);
	message.WriteByte(10);
	message.WriteByte((ent.v.angles[0] * 256 / 360 | 0) & 255);
	message.WriteByte((ent.v.angles[1] * 256 / 360 | 0) & 255);
	message.WriteByte((0. | 0) & 255);
	quake_SV.WriteClientdataToMessage(ent,message);
	message.WriteByte(25);
	message.WriteByte(3);
	quake_Host.client.sendsignon = true;
};
quake_Host.Begin_f = function() {
	if(!quake_Cmd.client) {
		quake_Console.Print("begin is not valid from the console\n");
		return;
	}
	quake_Host.client.spawned = true;
};
quake_Host.Kick_f = function() {
	if(!quake_Cmd.client) {
		if(!quake_SV.server.active) {
			quake_Cmd.ForwardToServer();
			return;
		}
	} else if(quake_PR.globals.floats[35] != 0.0) {
		return;
	}
	if(quake_Cmd.argv.length <= 1) {
		return;
	}
	var save = quake_Host.client;
	var s = quake_Cmd.argv[1].toLowerCase();
	var i;
	var byNumber = null;
	if(quake_Cmd.argv.length >= 3 && s == "#") {
		i = quake_Q.atoi(quake_Cmd.argv[2]) - 1;
		if(i < 0 || i >= quake_SV.svs.maxclients) {
			return;
		}
		if(!quake_SV.svs.clients[i].active) {
			return;
		}
		quake_Host.client = quake_SV.svs.clients[i];
		byNumber = true;
	} else {
		i = 0;
		while(i < quake_SV.svs.maxclients) {
			quake_Host.client = quake_SV.svs.clients[i];
			if(!quake_Host.client.active) {
				++i;
				continue;
			}
			if(quake_PR.GetString(quake_PR.netnames + (quake_Host.client.num << 5)).toLowerCase() == s) {
				break;
			}
			++i;
		}
	}
	if(i >= quake_SV.svs.maxclients) {
		quake_Host.client = save;
		return;
	}
	if(quake_Host.client == save) {
		return;
	}
	var who;
	if(!quake_Cmd.client) {
		who = quake_CL.$name.string;
	} else {
		if(quake_Host.client == save) {
			return;
		}
		who = quake_PR.GetString(quake_PR.netnames + (save.num << 5));
	}
	var message = null;
	if(quake_Cmd.argv.length >= 3) {
		message = quake_COM.Parse(quake_Cmd.args);
	}
	if(message != null) {
		var p = 0;
		if(byNumber) {
			++p;
			while(p < message.length) {
				if(HxOverrides.cca(message,p) != 32) {
					break;
				}
				++p;
			}
			p += quake_Cmd.argv[2].length;
		}
		while(p < message.length) {
			if(HxOverrides.cca(message,p) != 32) {
				break;
			}
			++p;
		}
		quake_Host.ClientPrint("Kicked by " + who + ": " + message.substring(p) + "\n");
	} else {
		quake_Host.ClientPrint("Kicked by " + who + "\n");
	}
	quake_Host.DropClient(false);
	quake_Host.client = save;
};
quake_Host.Give_f = function() {
	if(!quake_Cmd.client) {
		quake_Cmd.ForwardToServer();
		return;
	}
	if(quake_PR.globals.floats[35] != 0) {
		return;
	}
	if(quake_Cmd.argv.length <= 1) {
		return;
	}
	var t = HxOverrides.cca(quake_Cmd.argv[1],0);
	var ent = quake_SV.player;
	if(t >= 48 && t <= 57) {
		if(!quake_COM.hipnotic) {
			if(t >= 50) {
				var _g = ent;
				var v = _g.v.floats[58] | 0 | quake_Def.it.shotgun << t - 50;
				_g.v.floats[58] = v;
			}
			return;
		}
		if(t == 54) {
			if(HxOverrides.cca(quake_Cmd.argv[1],1) == 97) {
				var _g1 = ent;
				var v1 = _g1.v.floats[58] | 0 | quake_Def.hit.proximity_gun;
				_g1.v.floats[58] = v1;
			} else {
				var _g2 = ent;
				var v2 = _g2.v.floats[58] | 0 | quake_Def.it.grenade_launcher;
				_g2.v.floats[58] = v2;
			}
			return;
		}
		if(t == 57) {
			var _g3 = ent;
			var v3 = _g3.v.floats[58] | 0 | quake_Def.hit.laser_cannon;
			_g3.v.floats[58] = v3;
		} else if(t == 48) {
			var _g4 = ent;
			var v4 = _g4.v.floats[58] | 0 | quake_Def.hit.mjolnir;
			_g4.v.floats[58] = v4;
		} else if(t >= 50) {
			var _g5 = ent;
			var v5 = _g5.v.floats[58] | 0 | quake_Def.it.shotgun << t - 50;
			_g5.v.floats[58] = v5;
		}
		return;
	}
	var v6 = quake_Q.atoi(quake_Cmd.argv[2]);
	if(t == 104) {
		ent.v.floats[48] = v6;
		return;
	}
	if(!quake_COM.rogue) {
		switch(t) {
		case 99:
			ent.v.floats[57] = v6;
			break;
		case 110:
			ent.v.floats[55] = v6;
			break;
		case 114:
			ent.v.floats[56] = v6;
			break;
		case 115:
			ent.v.floats[54] = v6;
			break;
		}
		return;
	}
	switch(t) {
	case 99:
		if(quake_EdictVars.ammo_cells1_ofs != null) {
			ent.v.floats[quake_EdictVars.ammo_cells1_ofs] = v6;
			if(ent.v.floats[50] <= quake_Def.it.lightning) {
				ent.v.floats[57] = v6;
			}
		}
		break;
	case 108:
		if(quake_EdictVars.ammo_lava_nails_ofs != null) {
			ent.v.floats[quake_EdictVars.ammo_lava_nails_ofs] = v6;
			if(ent.v.floats[50] > quake_Def.it.lightning) {
				ent.v.floats[55] = v6;
			}
		}
		break;
	case 109:
		if(quake_EdictVars.ammo_multi_rockets_ofs != null) {
			ent.v.floats[quake_EdictVars.ammo_multi_rockets_ofs] = v6;
			if(ent.v.floats[50] > quake_Def.it.lightning) {
				ent.v.floats[56] = v6;
			}
		}
		break;
	case 110:
		if(quake_EdictVars.ammo_nails1_ofs != null) {
			ent.v.floats[quake_EdictVars.ammo_nails1_ofs] = v6;
			if(ent.v.floats[50] <= quake_Def.it.lightning) {
				ent.v.floats[55] = v6;
			}
		}
		break;
	case 112:
		if(quake_EdictVars.ammo_plasma_ofs != null) {
			ent.v.floats[quake_EdictVars.ammo_plasma_ofs] = v6;
			if(ent.v.floats[50] > quake_Def.it.lightning) {
				ent.v.floats[57] = v6;
			}
		}
		break;
	case 114:
		if(quake_EdictVars.ammo_rockets1_ofs != null) {
			ent.v.floats[quake_EdictVars.ammo_rockets1_ofs] = v6;
			if(ent.v.floats[50] <= quake_Def.it.lightning) {
				ent.v.floats[56] = v6;
			}
		}
		break;
	case 115:
		if(quake_EdictVars.ammo_shells1_ofs != null) {
			ent.v.floats[quake_EdictVars.ammo_shells1_ofs] = v6;
		}
		ent.v.floats[54] = v6;
		break;
	}
};
quake_Host.FindViewthing = function() {
	if(quake_SV.server.active) {
		var _g1 = 0;
		var _g = quake_SV.server.num_edicts;
		while(_g1 < _g) {
			var i = _g1++;
			var e = quake_SV.server.edicts[i];
			if(quake_PR.GetString(e.v.ints[28]) == "viewthing") {
				return e;
			}
		}
	}
	quake_Console.Print("No viewthing on map\n");
	return null;
};
quake_Host.Viewmodel_f = function() {
	if(quake_Cmd.argv.length != 2) {
		return;
	}
	var ent = quake_Host.FindViewthing();
	if(ent == null) {
		return;
	}
	var m = quake_Mod.LoadModel(quake_Mod.FindName(quake_Cmd.argv[1]),false);
	if(m == null) {
		quake_Console.Print("Can't load " + quake_Cmd.argv[1] + "\n");
		return;
	}
	ent.v.floats[30] = 0.0;
	quake_CL.state.model_precache[ent.v.floats[0] | 0] = m;
};
quake_Host.Viewframe_f = function() {
	var ent = quake_Host.FindViewthing();
	if(ent == null) {
		return;
	}
	var m = quake_CL.state.model_precache[ent.v.floats[0] | 0];
	var f = quake_Q.atoi(quake_Cmd.argv[1]);
	if(f >= m.frames.length) {
		f = m.frames.length - 1;
	}
	ent.v.floats[30] = f;
};
quake_Host.Viewnext_f = function() {
	var ent = quake_Host.FindViewthing();
	if(ent == null) {
		return;
	}
	var m = quake_CL.state.model_precache[ent.v.floats[0] | 0];
	var f = (ent.v.floats[30] | 0) + 1;
	if(f >= m.frames.length) {
		f = m.frames.length - 1;
	}
	ent.v.floats[30] = f;
	quake_Console.Print("frame " + f + ": " + m.frames[f].name + "\n");
};
quake_Host.Viewprev_f = function() {
	var ent = quake_Host.FindViewthing();
	if(ent == null) {
		return;
	}
	var m = quake_CL.state.model_precache[ent.v.floats[0] | 0];
	var f = (ent.v.floats[30] | 0) - 1;
	if(f < 0) {
		f = 0;
	}
	ent.v.floats[30] = f;
	quake_Console.Print("frame " + f + ": " + m.frames[f].name + "\n");
};
quake_Host.Startdemos_f = function() {
	quake_Console.Print(quake_Cmd.argv.length - 1 + " demo(s) in loop\n");
	quake_CL.cls.demos = [];
	var _g1 = 1;
	var _g = quake_Cmd.argv.length;
	while(_g1 < _g) {
		var i = _g1++;
		quake_CL.cls.demos[i - 1] = quake_Cmd.argv[i];
	}
	if(quake_CL.cls.demonum != -1 && !quake_CL.cls.demoplayback) {
		quake_CL.cls.demonum = 0;
		if(quake_Host.framecount != 0) {
			quake_CL.NextDemo();
		} else {
			quake_Host.startdemos = true;
		}
	} else {
		quake_CL.cls.demonum = -1;
	}
};
quake_Host.Demos_f = function() {
	if(quake_CL.cls.demonum == -1) {
		quake_CL.cls.demonum = 1;
	}
	quake_CL.Disconnect();
	quake_CL.NextDemo();
};
quake_Host.Stopdemo_f = function() {
	if(!quake_CL.cls.demoplayback) {
		return;
	}
	quake_CL.StopPlayback();
	quake_CL.Disconnect();
};
quake_Host.InitCommands = function() {
	quake_Cmd.AddCommand("status",quake_Host.Status_f);
	quake_Cmd.AddCommand("quit",quake_Host.Quit_f);
	quake_Cmd.AddCommand("god",quake_Host.God_f);
	quake_Cmd.AddCommand("notarget",quake_Host.Notarget_f);
	quake_Cmd.AddCommand("fly",quake_Host.Fly_f);
	quake_Cmd.AddCommand("map",quake_Host.Map_f);
	quake_Cmd.AddCommand("restart",quake_Host.Restart_f);
	quake_Cmd.AddCommand("changelevel",quake_Host.Changelevel_f);
	quake_Cmd.AddCommand("connect",quake_Host.Connect_f);
	quake_Cmd.AddCommand("reconnect",quake_Host.Reconnect_f);
	quake_Cmd.AddCommand("name",quake_Host.Name_f);
	quake_Cmd.AddCommand("noclip",quake_Host.Noclip_f);
	quake_Cmd.AddCommand("version",quake_Host.Version_f);
	quake_Cmd.AddCommand("say",function() {
		quake_Host.Say(false);
	});
	quake_Cmd.AddCommand("say_team",quake_Host.Say_Team_f);
	quake_Cmd.AddCommand("tell",quake_Host.Tell_f);
	quake_Cmd.AddCommand("color",quake_Host.Color_f);
	quake_Cmd.AddCommand("kill",quake_Host.Kill_f);
	quake_Cmd.AddCommand("pause",quake_Host.Pause_f);
	quake_Cmd.AddCommand("spawn",quake_Host.Spawn_f);
	quake_Cmd.AddCommand("begin",quake_Host.Begin_f);
	quake_Cmd.AddCommand("prespawn",quake_Host.PreSpawn_f);
	quake_Cmd.AddCommand("kick",quake_Host.Kick_f);
	quake_Cmd.AddCommand("ping",quake_Host.Ping_f);
	quake_Cmd.AddCommand("load",quake_Host.Loadgame_f);
	quake_Cmd.AddCommand("save",quake_Host.Savegame_f);
	quake_Cmd.AddCommand("give",quake_Host.Give_f);
	quake_Cmd.AddCommand("startdemos",quake_Host.Startdemos_f);
	quake_Cmd.AddCommand("demos",quake_Host.Demos_f);
	quake_Cmd.AddCommand("stopdemo",quake_Host.Stopdemo_f);
	quake_Cmd.AddCommand("viewmodel",quake_Host.Viewmodel_f);
	quake_Cmd.AddCommand("viewframe",quake_Host.Viewframe_f);
	quake_Cmd.AddCommand("viewnext",quake_Host.Viewnext_f);
	quake_Cmd.AddCommand("viewprev",quake_Host.Viewprev_f);
	quake_Cmd.AddCommand("mcache",quake_Mod.Print);
};
var quake__$IN_StdMouseHandler = function() { };
$hxClasses["quake._IN.StdMouseHandler"] = quake__$IN_StdMouseHandler;
quake__$IN_StdMouseHandler.__name__ = true;
quake__$IN_StdMouseHandler.attach = function() {
	if(quake_VID.mainwindow.requestPointerLock != null) {
		quake_VID.mainwindow.onclick = quake__$IN_StdMouseHandler.onclick;
		window.document.onmousemove = quake__$IN_StdMouseHandler.onmousemove;
		window.document.onpointerlockchange = quake__$IN_StdMouseHandler.onpointerlockchange;
		return quake__$IN_StdMouseHandler.detach;
	}
	return null;
};
quake__$IN_StdMouseHandler.detach = function() {
	quake_VID.mainwindow.onclick = null;
	window.document.onmousemove = null;
	window.document.onpointerlockchange = null;
};
quake__$IN_StdMouseHandler.onclick = function() {
	if(window.document.pointerLockElement != quake_VID.mainwindow) {
		quake_VID.mainwindow.requestPointerLock();
	}
};
quake__$IN_StdMouseHandler.onmousemove = function(e) {
	if(window.document.pointerLockElement != quake_VID.mainwindow) {
		return;
	}
	quake_IN.mouse_x += e.movementX;
	quake_IN.mouse_y += e.movementY;
};
quake__$IN_StdMouseHandler.onpointerlockchange = function() {
	if(window.document.pointerLockElement == quake_VID.mainwindow) {
		return;
	}
	quake_Key.Event(27,true);
	quake_Key.Event(27,false);
};
var quake__$IN_MozMouseHandler = function() { };
$hxClasses["quake._IN.MozMouseHandler"] = quake__$IN_MozMouseHandler;
quake__$IN_MozMouseHandler.__name__ = true;
quake__$IN_MozMouseHandler.attach = function() {
	if(quake_VID.mainwindow.mozRequestPointerLock != null) {
		quake_VID.mainwindow.onclick = quake__$IN_MozMouseHandler.onclick;
		window.document.onmousemove = quake__$IN_MozMouseHandler.onmousemove;
		window.document.onmozpointerlockchange = quake__$IN_MozMouseHandler.onmozpointerlockchange;
		return quake__$IN_MozMouseHandler.detach;
	}
	return null;
};
quake__$IN_MozMouseHandler.detach = function() {
	quake_VID.mainwindow.onclick = null;
	window.document.onmousemove = null;
	window.document.onmozpointerlockchange = null;
};
quake__$IN_MozMouseHandler.onclick = function() {
	if(window.document.mozPointerLockElement != quake_VID.mainwindow) {
		quake_VID.mainwindow.mozRequestPointerLock();
	}
};
quake__$IN_MozMouseHandler.onmousemove = function(e) {
	if(window.document.mozPointerLockElement != quake_VID.mainwindow) {
		return;
	}
	quake_IN.mouse_x += e.mozMovementX;
	quake_IN.mouse_y += e.mozMovementY;
};
quake__$IN_MozMouseHandler.onmozpointerlockchange = function() {
	if(window.document.mozPointerLockElement == quake_VID.mainwindow) {
		return;
	}
	quake_Key.Event(27,true);
	quake_Key.Event(27,false);
};
var quake__$IN_WebkitMouseHandler = function() { };
$hxClasses["quake._IN.WebkitMouseHandler"] = quake__$IN_WebkitMouseHandler;
quake__$IN_WebkitMouseHandler.__name__ = true;
quake__$IN_WebkitMouseHandler.attach = function() {
	if(quake_VID.mainwindow.webkitRequestPointerLock != null) {
		quake_VID.mainwindow.onclick = quake__$IN_WebkitMouseHandler.onclick;
		window.document.onmousemove = quake__$IN_WebkitMouseHandler.onmousemove;
		window.document.onwebkitpointerlockchange = quake__$IN_WebkitMouseHandler.onwebkitpointerlockchange;
		return quake__$IN_WebkitMouseHandler.detach;
	}
	return null;
};
quake__$IN_WebkitMouseHandler.detach = function() {
	quake_VID.mainwindow.onclick = null;
	window.document.onmousemove = null;
	window.document.onwebkitpointerlockchange = null;
};
quake__$IN_WebkitMouseHandler.onclick = function() {
	if(window.document.webkitPointerLockElement != quake_VID.mainwindow) {
		quake_VID.mainwindow.webkitRequestPointerLock();
	}
};
quake__$IN_WebkitMouseHandler.onmousemove = function(e) {
	if(window.document.webkitPointerLockElement != quake_VID.mainwindow) {
		return;
	}
	quake_IN.mouse_x += e.webkitMovementX;
	quake_IN.mouse_y += e.webkitMovementY;
};
quake__$IN_WebkitMouseHandler.onwebkitpointerlockchange = function() {
	if(window.document.webkitPointerLockElement == quake_VID.mainwindow) {
		return;
	}
	quake_Key.Event(27,true);
	quake_Key.Event(27,false);
};
var quake_IN = function() { };
$hxClasses["quake.IN"] = quake_IN;
quake_IN.__name__ = true;
quake_IN.Init = function() {
	quake_IN.m_filter = quake_Cvar.RegisterVariable("m_filter","1");
	if(quake_COM.CheckParm("-nomouse") != null) {
		return;
	}
	quake_IN.detachMouseHandler = quake_IN.attachMouseHandler();
	if(quake_IN.detachMouseHandler != null) {
		quake_IN.mouse_avail = true;
	}
};
quake_IN.attachMouseHandler = function() {
	var detach = quake__$IN_StdMouseHandler.attach();
	if(detach == null) {
		detach = quake__$IN_MozMouseHandler.attach();
	}
	if(detach == null) {
		detach = quake__$IN_WebkitMouseHandler.attach();
	}
	return detach;
};
quake_IN.Shutdown = function() {
	if(quake_IN.detachMouseHandler != null) {
		quake_IN.detachMouseHandler();
	}
};
quake_IN.Move = function() {
	if(!quake_IN.mouse_avail) {
		return;
	}
	var mouse_x;
	var mouse_y;
	if(quake_IN.m_filter.value != 0) {
		mouse_x = (quake_IN.mouse_x + quake_IN.old_mouse_x) * 0.5;
		mouse_y = (quake_IN.mouse_y + quake_IN.old_mouse_y) * 0.5;
	} else {
		mouse_x = quake_IN.mouse_x;
		mouse_y = quake_IN.mouse_y;
	}
	quake_IN.old_mouse_x = quake_IN.mouse_x;
	quake_IN.old_mouse_y = quake_IN.mouse_y;
	mouse_x *= quake_CL.sensitivity.value;
	mouse_y *= quake_CL.sensitivity.value;
	var strafe = quake_CL.kbuttons[quake_CL.kbutton.strafe].state & 1;
	var mlook = quake_CL.kbuttons[quake_CL.kbutton.mlook].state & 1;
	var angles = quake_CL.state.viewangles;
	if(strafe != 0 || quake_CL.lookstrafe.value != 0 && mlook != 0) {
		quake_CL.state.cmd.sidemove += quake_CL.m_side.value * mouse_x;
	} else {
		var _g = angles;
		_g[1] -= quake_CL.m_yaw.value * mouse_x;
	}
	if(mlook != 0) {
		quake_V.StopPitchDrift();
	}
	if(mlook != 0 && strafe == 0) {
		var _g1 = angles;
		_g1[0] += quake_CL.m_pitch.value * mouse_y;
		if(angles[0] > 80.0) {
			angles[0] = 80.0;
		} else if(angles[0] < -70.0) {
			angles[0] = -70.0;
		}
	} else if(strafe != 0 && quake_Host.noclip_anglehack) {
		quake_CL.state.cmd.upmove -= quake_CL.m_forward.value * mouse_y;
	} else {
		quake_CL.state.cmd.forwardmove -= quake_CL.m_forward.value * mouse_y;
	}
	quake_IN.mouse_x = quake_IN.mouse_y = 0;
};
quake_IN.applyMouseMovement = function(x,y) {
	quake_IN.mouse_x += x;
	quake_IN.mouse_y += y;
};
quake_IN.exitPointerLock = function() {
	quake_Key.Event(27,true);
	quake_Key.Event(27,false);
};
var quake_Key = function() { };
$hxClasses["quake.Key"] = quake_Key;
quake_Key.__name__ = true;
quake_Key.ProcessConsole = function(key) {
	if(key == 13) {
		quake_Cmd.text += quake_Key.edit_line + "\n";
		quake_Console.Print("]" + quake_Key.edit_line + "\n");
		quake_Key.lines.push(quake_Key.edit_line);
		quake_Key.edit_line = "";
		quake_Key.history_line = quake_Key.lines.length;
		return;
	}
	if(key == 9) {
		var cmd = quake_Cmd.CompleteCommand(quake_Key.edit_line);
		if(cmd == null) {
			cmd = quake_Cvar.CompleteVariable(quake_Key.edit_line);
		}
		if(cmd == null) {
			return;
		}
		quake_Key.edit_line = cmd + " ";
		return;
	}
	if(key == 127 || key == 130) {
		if(quake_Key.edit_line.length > 0) {
			quake_Key.edit_line = quake_Key.edit_line.substring(0,quake_Key.edit_line.length - 1);
		}
		return;
	}
	if(key == 128) {
		if(--quake_Key.history_line < 0) {
			quake_Key.history_line = 0;
		}
		quake_Key.edit_line = quake_Key.lines[quake_Key.history_line];
		return;
	}
	if(key == 129) {
		if(quake_Key.history_line >= quake_Key.lines.length) {
			return;
		}
		if(++quake_Key.history_line >= quake_Key.lines.length) {
			quake_Key.history_line = quake_Key.lines.length;
			quake_Key.edit_line = "";
			return;
		}
		quake_Key.edit_line = quake_Key.lines[quake_Key.history_line];
		return;
	}
	if(key == 150) {
		quake_Console.backscroll += 2;
		if(quake_Console.backscroll > quake_Console.text.length) {
			quake_Console.backscroll = quake_Console.text.length;
		}
		return;
	}
	if(key == 149) {
		quake_Console.backscroll -= 2;
		if(quake_Console.backscroll < 0) {
			quake_Console.backscroll = 0;
		}
		return;
	}
	if(key == 151) {
		quake_Console.backscroll = quake_Console.text.length - 10;
		if(quake_Console.backscroll < 0) {
			quake_Console.backscroll = 0;
		}
		return;
	}
	if(key == 152) {
		quake_Console.backscroll = 0;
		return;
	}
	if(key < 32 || key > 127) {
		return;
	}
	quake_Key.edit_line += String.fromCharCode(key);
};
quake_Key.Message = function(key) {
	if(key == 13) {
		if(quake_Key.team_message) {
			quake_Cmd.text += "say_team \"" + quake_Key.chat_buffer + "\"\n";
		} else {
			quake_Cmd.text += "say \"" + quake_Key.chat_buffer + "\"\n";
		}
		quake_Key.dest = 0;
		quake_Key.chat_buffer = "";
		return;
	}
	if(key == 27) {
		quake_Key.dest = 0;
		quake_Key.chat_buffer = "";
		return;
	}
	if(key < 32 || key > 127) {
		return;
	}
	if(key == 127) {
		if(quake_Key.chat_buffer.length != 0) {
			quake_Key.chat_buffer = quake_Key.chat_buffer.substring(0,quake_Key.chat_buffer.length - 1);
		}
		return;
	}
	if(quake_Key.chat_buffer.length >= 31) {
		return;
	}
	quake_Key.chat_buffer = quake_Key.chat_buffer + String.fromCharCode(key);
};
quake_Key.StringToKeynum = function(str) {
	if(str.length == 1) {
		return HxOverrides.cca(str,0);
	}
	str = str.toUpperCase();
	var _g = 0;
	var _g1 = quake_Key.names;
	while(_g < _g1.length) {
		var k = _g1[_g];
		++_g;
		if(k.name == str) {
			return k.keynum;
		}
	}
	return null;
};
quake_Key.KeynumToString = function(keynum) {
	if(keynum > 32 && keynum < 127) {
		return String.fromCharCode(keynum);
	}
	var _g = 0;
	var _g1 = quake_Key.names;
	while(_g < _g1.length) {
		var k = _g1[_g];
		++_g;
		if(k.keynum == keynum) {
			return k.name;
		}
	}
	return "<UNKNOWN KEYNUM>";
};
quake_Key.Unbind_f = function() {
	if(quake_Cmd.argv.length != 2) {
		quake_Console.Print("unbind <key> : remove commands from a key\n");
		return;
	}
	var b = quake_Key.StringToKeynum(quake_Cmd.argv[1]);
	if(b == null) {
		quake_Console.Print("\"" + quake_Cmd.argv[1] + "\" isn't a valid key\n");
		return;
	}
	quake_Key.bindings[b] = null;
};
quake_Key.Unbindall_f = function() {
	quake_Key.bindings = [];
};
quake_Key.Bind_f = function() {
	var c = quake_Cmd.argv.length;
	if(c != 2 && c != 3) {
		quake_Console.Print("bind <key> [command] : attach a command to a key\n");
		return;
	}
	var b = quake_Key.StringToKeynum(quake_Cmd.argv[1]);
	if(b == null) {
		quake_Console.Print("\"" + quake_Cmd.argv[1] + "\" isn't a valid key\n");
		return;
	}
	if(c == 2) {
		if(quake_Key.bindings[b] != null) {
			quake_Console.Print("\"" + quake_Cmd.argv[1] + "\" = \"" + quake_Key.bindings[b] + "\"\n");
		} else {
			quake_Console.Print("\"" + quake_Cmd.argv[1] + "\" is not bound\n");
		}
		return;
	}
	var cmd = quake_Cmd.argv[2];
	var _g1 = 3;
	var _g = c;
	while(_g1 < _g) {
		var i = _g1++;
		cmd += " " + quake_Cmd.argv[i];
	}
	quake_Key.bindings[b] = cmd;
};
quake_Key.WriteBindings = function() {
	var f_b = "";
	var _g1 = 0;
	var _g = quake_Key.bindings.length;
	while(_g1 < _g) {
		var i = _g1++;
		var b = quake_Key.bindings[i];
		if(b != null) {
			f_b += Std.string("bind \"" + quake_Key.KeynumToString(i) + "\" \"" + b + "\"\n");
		}
	}
	return f_b;
};
quake_Key.Init = function() {
	var _g = 32;
	while(_g < 128) {
		var i = _g++;
		quake_Key.consolekeys[i] = true;
	}
	quake_Key.consolekeys[13] = true;
	quake_Key.consolekeys[9] = true;
	quake_Key.consolekeys[130] = true;
	quake_Key.consolekeys[131] = true;
	quake_Key.consolekeys[128] = true;
	quake_Key.consolekeys[129] = true;
	quake_Key.consolekeys[127] = true;
	quake_Key.consolekeys[151] = true;
	quake_Key.consolekeys[152] = true;
	quake_Key.consolekeys[150] = true;
	quake_Key.consolekeys[149] = true;
	quake_Key.consolekeys[134] = true;
	quake_Key.consolekeys[96] = false;
	quake_Key.consolekeys[126] = false;
	var _g1 = 0;
	while(_g1 < 256) {
		var i1 = _g1++;
		quake_Key.shift[i1] = i1;
	}
	var _g2 = 97;
	while(_g2 < 123) {
		var i2 = _g2++;
		quake_Key.shift[i2] = i2 - 32;
	}
	quake_Key.shift[49] = 33;
	quake_Key.shift[50] = 64;
	quake_Key.shift[51] = 35;
	quake_Key.shift[52] = 36;
	quake_Key.shift[53] = 37;
	quake_Key.shift[54] = 94;
	quake_Key.shift[55] = 38;
	quake_Key.shift[56] = 42;
	quake_Key.shift[57] = 40;
	quake_Key.shift[48] = 41;
	quake_Key.shift[45] = 95;
	quake_Key.shift[61] = 43;
	quake_Key.shift[43] = 60;
	quake_Key.shift[46] = 62;
	quake_Key.shift[47] = 63;
	quake_Key.shift[59] = 58;
	quake_Key.shift[39] = 34;
	quake_Key.shift[91] = 123;
	quake_Key.shift[93] = 125;
	quake_Key.shift[96] = 126;
	quake_Key.shift[92] = 124;
	quake_Cmd.AddCommand("bind",quake_Key.Bind_f);
	quake_Cmd.AddCommand("unbind",quake_Key.Unbind_f);
	quake_Cmd.AddCommand("unbindall",quake_Key.Unbindall_f);
};
quake_Key.Event = function(key,down) {
	if(quake_CL.cls.state == 1) {
		return;
	}
	if(down) {
		if(key != 127 && key != 255 && quake_Key.down[key]) {
			return;
		}
		if(key >= 200 && quake_Key.bindings[key] == null) {
			quake_Console.Print(quake_Key.KeynumToString(key) + " is unbound, hit F4 to set.\n");
		}
	}
	quake_Key.down[key] = down;
	if(key == 134) {
		quake_Key.shift_down = down;
	}
	if(key == 27) {
		if(!down) {
			return;
		}
		if(quake_Key.dest == 2) {
			quake_Key.Message(key);
		} else if(quake_Key.dest == 3) {
			quake_Menu.Keydown(key);
		} else {
			quake_Menu.ToggleMenu_f();
		}
		return;
	}
	var kb;
	if(!down) {
		kb = quake_Key.bindings[key];
		if(kb != null) {
			if(HxOverrides.cca(kb,0) == 43) {
				quake_Cmd.text += "-" + kb.substring(1) + " " + key + "\n";
			}
		}
		if(quake_Key.shift[key] != key) {
			kb = quake_Key.bindings[quake_Key.shift[key]];
			if(kb != null) {
				if(HxOverrides.cca(kb,0) == 43) {
					quake_Cmd.text += "-" + kb.substring(1) + " " + key + "\n";
				}
			}
		}
		return;
	}
	if(quake_CL.cls.demoplayback && quake_Key.consolekeys[key] && quake_Key.dest == 0) {
		quake_Menu.ToggleMenu_f();
		return;
	}
	if(quake_Key.dest == 3 && (key == 27 || key >= 135 && key <= 146) || quake_Key.dest == 1 && !quake_Key.consolekeys[key] || quake_Key.dest == 0 && (!quake_Console.forcedup || !quake_Key.consolekeys[key])) {
		kb = quake_Key.bindings[key];
		if(kb != null) {
			if(HxOverrides.cca(kb,0) == 43) {
				quake_Cmd.text += kb + " " + key + "\n";
			} else {
				quake_Cmd.text += kb + "\n";
			}
		}
		return;
	}
	if(quake_Key.shift_down) {
		key = quake_Key.shift[key];
	}
	if(quake_Key.dest == 2) {
		quake_Key.Message(key);
	} else if(quake_Key.dest == 3) {
		quake_Menu.Keydown(key);
	} else {
		quake_Key.ProcessConsole(key);
	}
};
var quake_Menu = function() { };
$hxClasses["quake.Menu"] = quake_Menu;
quake_Menu.__name__ = true;
quake_Menu.DrawCharacter = function(cx,line,num) {
	quake_Draw.Character(cx + (quake_VID.width >> 1) - 160,line + (quake_VID.height >> 1) - 100,num);
};
quake_Menu.Print = function(cx,cy,str) {
	quake_Draw.StringWhite(cx + (quake_VID.width >> 1) - 160,cy + (quake_VID.height >> 1) - 100,str);
};
quake_Menu.PrintWhite = function(cx,cy,str) {
	quake_Draw.String(cx + (quake_VID.width >> 1) - 160,cy + (quake_VID.height >> 1) - 100,str);
};
quake_Menu.DrawPic = function(x,y,pic) {
	quake_Draw.Pic(x + (quake_VID.width >> 1) - 160,y + (quake_VID.height >> 1) - 100,pic);
};
quake_Menu.DrawPicTranslate = function(x,y,pic,top,bottom) {
	quake_Draw.PicTranslate(x + (quake_VID.width >> 1) - 160,y + (quake_VID.height >> 1) - 100,pic,top,bottom);
};
quake_Menu.DrawTextBox = function(x,y,width,lines) {
	var cx;
	var cy = y;
	quake_Menu.DrawPic(x,cy,quake_Menu.box_tl);
	var _g1 = 0;
	var _g = lines;
	while(_g1 < _g) {
		var n = _g1++;
		quake_Menu.DrawPic(x,cy += 8,quake_Menu.box_ml);
	}
	quake_Menu.DrawPic(x,cy + 8,quake_Menu.box_bl);
	cx = x + 8;
	var p;
	while(width > 0) {
		cy = y;
		quake_Menu.DrawPic(cx,y,quake_Menu.box_tm);
		p = quake_Menu.box_mm;
		var _g11 = 0;
		var _g2 = lines;
		while(_g11 < _g2) {
			var n1 = _g11++;
			quake_Menu.DrawPic(cx,cy += 8,p);
			if(n1 == 0) {
				p = quake_Menu.box_mm2;
			}
		}
		quake_Menu.DrawPic(cx,cy + 8,quake_Menu.box_bm);
		width -= 2;
		cx += 16;
	}
	cy = y;
	quake_Menu.DrawPic(cx,cy,quake_Menu.box_tr);
	var _g12 = 0;
	var _g3 = lines;
	while(_g12 < _g3) {
		var n2 = _g12++;
		quake_Menu.DrawPic(cx,cy += 8,quake_Menu.box_mr);
	}
	quake_Menu.DrawPic(cx,cy + 8,quake_Menu.box_br);
};
quake_Menu.ToggleMenu_f = function() {
	quake_Menu.entersound = true;
	if(quake_Key.dest == 3) {
		if(quake_Menu.state != 1) {
			quake_Menu.Menu_Main_f();
			return;
		}
		quake_Key.dest = 0;
		quake_Menu.state = 0;
		return;
	}
	quake_Menu.Menu_Main_f();
};
quake_Menu.Menu_Main_f = function() {
	if(quake_Key.dest != 3) {
		quake_Menu.save_demonum = quake_CL.cls.demonum;
		quake_CL.cls.demonum = -1;
	}
	quake_Key.dest = 3;
	quake_Menu.state = 1;
	quake_Menu.entersound = true;
};
quake_Menu.Main_Draw = function() {
	quake_Menu.DrawPic(16,4,quake_Menu.qplaque);
	quake_Menu.DrawPic(160 - (quake_Menu.ttl_main.width >> 1),4,quake_Menu.ttl_main);
	quake_Menu.DrawPic(72,32,quake_Menu.mainmenu);
	quake_Menu.DrawPic(54,32 + quake_Menu.main_cursor * 20,quake_Menu.menudot[Math.floor(quake_Host.realtime * 10.0) % 6]);
};
quake_Menu.Main_Key = function(k) {
	switch(k) {
	case 13:
		quake_Menu.entersound = true;
		var _g = quake_Menu.main_cursor;
		switch(_g) {
		case 0:
			quake_Menu.Menu_SinglePlayer_f();
			break;
		case 1:
			quake_Menu.Menu_MultiPlayer_f();
			break;
		case 2:
			quake_Menu.Menu_Options_f();
			break;
		case 3:
			quake_Menu.Menu_Help_f();
			break;
		case 4:
			quake_Menu.Menu_Quit_f();
			break;
		}
		break;
	case 27:
		quake_Key.dest = 0;
		quake_Menu.state = 0;
		quake_CL.cls.demonum = quake_Menu.save_demonum;
		if(quake_CL.cls.demonum != -1 && !quake_CL.cls.demoplayback && quake_CL.cls.state != 2) {
			quake_CL.NextDemo();
		}
		break;
	case 128:
		quake_S.StartSound(quake_CL.state.viewentity,-1,quake_Menu.sfx_menu1,quake__$Vec_Vec_$Impl_$.origin,1.0,1.0);
		if(--quake_Menu.main_cursor < 0) {
			quake_Menu.main_cursor = 4;
		}
		break;
	case 129:
		quake_S.StartSound(quake_CL.state.viewentity,-1,quake_Menu.sfx_menu1,quake__$Vec_Vec_$Impl_$.origin,1.0,1.0);
		if(++quake_Menu.main_cursor >= 5) {
			quake_Menu.main_cursor = 0;
		}
		break;
	default:
	}
};
quake_Menu.Menu_SinglePlayer_f = function() {
	quake_Key.dest = 3;
	quake_Menu.state = 2;
	quake_Menu.entersound = true;
};
quake_Menu.SinglePlayer_Draw = function() {
	quake_Menu.DrawPic(16,4,quake_Menu.qplaque);
	quake_Menu.DrawPic(160 - (quake_Menu.ttl_sgl.width >> 1),4,quake_Menu.ttl_sgl);
	quake_Menu.DrawPic(72,32,quake_Menu.sp_menu);
	quake_Menu.DrawPic(54,32 + quake_Menu.singleplayer_cursor * 20,quake_Menu.menudot[Math.floor(quake_Host.realtime * 10.0) % 6]);
};
quake_Menu.SinglePlayer_Key = function(k) {
	switch(k) {
	case 13:
		quake_Menu.entersound = true;
		var _g = quake_Menu.singleplayer_cursor;
		switch(_g) {
		case 0:
			if(quake_SV.server.active) {
				if(!window.confirm("Are you sure you want to start a new game?")) {
					return;
				}
				quake_Cmd.text += "disconnect\n";
			}
			quake_Key.dest = 0;
			quake_Cmd.text += "maxplayers 1\nmap start\n";
			break;
		case 1:
			quake_Menu.Menu_Load_f();
			break;
		case 2:
			quake_Menu.Menu_Save_f();
			break;
		}
		break;
	case 27:
		quake_Menu.Menu_Main_f();
		break;
	case 128:
		quake_S.StartSound(quake_CL.state.viewentity,-1,quake_Menu.sfx_menu1,quake__$Vec_Vec_$Impl_$.origin,1.0,1.0);
		if(--quake_Menu.singleplayer_cursor < 0) {
			quake_Menu.singleplayer_cursor = 2;
		}
		break;
	case 129:
		quake_S.StartSound(quake_CL.state.viewentity,-1,quake_Menu.sfx_menu1,quake__$Vec_Vec_$Impl_$.origin,1.0,1.0);
		if(++quake_Menu.singleplayer_cursor >= 3) {
			quake_Menu.singleplayer_cursor = 0;
		}
		break;
	default:
	}
};
quake_Menu.ScanSaves = function() {
	var searchpaths = quake_COM.searchpaths;
	var search = "Quake." + quake_COM.gamedir[0].filename + "/s";
	quake_COM.searchpaths = quake_COM.gamedir;
	var _g1 = 0;
	var _g = quake_Menu.max_savegames;
	while(_g1 < _g) {
		var i = _g1++;
		var f = quake_Menu.localStorage.getItem(search + i + ".sav");
		if(f != null) {
			quake_Menu.removable[i] = true;
		} else {
			quake_Menu.removable[i] = false;
			f = quake_COM.LoadTextFile("s" + i + ".sav");
			if(f == null) {
				quake_Menu.filenames[i] = "--- UNUSED SLOT ---";
				quake_Menu.loadable[i] = false;
				continue;
			}
		}
		var version = 0;
		while(version < f.length) {
			var c = HxOverrides.cca(f,version++);
			if(c == 10) {
				break;
			}
		}
		var name = [];
		var _g2 = 0;
		while(_g2 < 40) {
			var j = _g2++;
			var c1 = HxOverrides.cca(f,version + j);
			if(c1 == 13) {
				break;
			}
			if(c1 == 95) {
				name[j] = " ";
			} else {
				name[j] = String.fromCharCode(c1);
			}
		}
		quake_Menu.filenames[i] = name.join("");
		quake_Menu.loadable[i] = true;
	}
	quake_COM.searchpaths = searchpaths;
};
quake_Menu.Menu_Load_f = function() {
	quake_Menu.entersound = true;
	quake_Menu.state = 3;
	quake_Key.dest = 3;
	quake_Menu.ScanSaves();
};
quake_Menu.Menu_Save_f = function() {
	if(!quake_SV.server.active || quake_CL.state.intermission != 0 || quake_SV.svs.maxclients != 1) {
		return;
	}
	quake_Menu.entersound = true;
	quake_Menu.state = 4;
	quake_Key.dest = 3;
	quake_Menu.ScanSaves();
};
quake_Menu.Load_Draw = function() {
	quake_Menu.DrawPic(160 - (quake_Menu.p_load.width >> 1),4,quake_Menu.p_load);
	var _g1 = 0;
	var _g = quake_Menu.max_savegames;
	while(_g1 < _g) {
		var i = _g1++;
		quake_Menu.Print(16,32 + (i << 3),quake_Menu.filenames[i]);
	}
	quake_Menu.DrawCharacter(8,32 + (quake_Menu.load_cursor << 3),12 + ((quake_Host.realtime * 4 | 0) & 1));
};
quake_Menu.Save_Draw = function() {
	quake_Menu.DrawPic(160 - (quake_Menu.p_save.width >> 1),4,quake_Menu.p_save);
	var _g1 = 0;
	var _g = quake_Menu.max_savegames;
	while(_g1 < _g) {
		var i = _g1++;
		quake_Menu.Print(16,32 + (i << 3),quake_Menu.filenames[i]);
	}
	quake_Menu.DrawCharacter(8,32 + (quake_Menu.load_cursor << 3),12 + ((quake_Host.realtime * 4 | 0) & 1));
};
quake_Menu.Load_Key = function(k) {
	switch(k) {
	case 13:
		quake_S.StartSound(quake_CL.state.viewentity,-1,quake_Menu.sfx_menu2,quake__$Vec_Vec_$Impl_$.origin,1.0,1.0);
		if(!quake_Menu.loadable[quake_Menu.load_cursor]) {
			return;
		}
		quake_Menu.state = 0;
		quake_Key.dest = 0;
		quake_SCR.BeginLoadingPlaque();
		quake_Cmd.text += "load s" + quake_Menu.load_cursor + "\n";
		break;
	case 27:
		quake_Menu.Menu_SinglePlayer_f();
		break;
	case 129:case 131:
		quake_S.StartSound(quake_CL.state.viewentity,-1,quake_Menu.sfx_menu1,quake__$Vec_Vec_$Impl_$.origin,1.0,1.0);
		if(++quake_Menu.load_cursor >= quake_Menu.max_savegames) {
			quake_Menu.load_cursor = 0;
		}
		return;
	case 128:case 130:
		quake_S.StartSound(quake_CL.state.viewentity,-1,quake_Menu.sfx_menu1,quake__$Vec_Vec_$Impl_$.origin,1.0,1.0);
		if(--quake_Menu.load_cursor < 0) {
			quake_Menu.load_cursor = quake_Menu.max_savegames - 1;
		}
		break;
	case 148:
		if(!quake_Menu.removable[quake_Menu.load_cursor]) {
			return;
		}
		if(!window.confirm("Delete selected game?")) {
			return;
		}
		quake_Menu.localStorage.removeItem("Quake." + quake_COM.gamedir[0].filename + "/s" + quake_Menu.load_cursor + ".sav");
		quake_Menu.ScanSaves();
		break;
	default:
	}
};
quake_Menu.Save_Key = function(k) {
	switch(k) {
	case 13:
		quake_Menu.state = 0;
		quake_Key.dest = 0;
		quake_Cmd.text += "save s" + quake_Menu.load_cursor + "\n";
		break;
	case 27:
		quake_Menu.Menu_SinglePlayer_f();
		break;
	case 129:case 131:
		quake_S.StartSound(quake_CL.state.viewentity,-1,quake_Menu.sfx_menu1,quake__$Vec_Vec_$Impl_$.origin,1.0,1.0);
		if(++quake_Menu.load_cursor >= quake_Menu.max_savegames) {
			quake_Menu.load_cursor = 0;
		}
		break;
	case 128:case 130:
		quake_S.StartSound(quake_CL.state.viewentity,-1,quake_Menu.sfx_menu1,quake__$Vec_Vec_$Impl_$.origin,1.0,1.0);
		if(--quake_Menu.load_cursor < 0) {
			quake_Menu.load_cursor = quake_Menu.max_savegames - 1;
		}
		break;
	case 148:
		if(!quake_Menu.removable[quake_Menu.load_cursor]) {
			return;
		}
		if(!window.confirm("Delete selected game?")) {
			return;
		}
		quake_Menu.localStorage.removeItem("Quake." + quake_COM.gamedir[0].filename + "/s" + quake_Menu.load_cursor + ".sav");
		quake_Menu.ScanSaves();
		break;
	default:
	}
};
quake_Menu.Menu_MultiPlayer_f = function() {
	quake_Key.dest = 3;
	quake_Menu.state = 5;
	quake_Menu.entersound = true;
	quake_Menu.multiplayer_myname = quake_CL.$name.string;
	quake_Menu.multiplayer_top = quake_Menu.multiplayer_oldtop = (quake_CL.color.value | 0) >> 4;
	quake_Menu.multiplayer_bottom = quake_Menu.multiplayer_oldbottom = (quake_CL.color.value | 0) & 15;
};
quake_Menu.MultiPlayer_Draw = function() {
	quake_Menu.DrawPic(16,4,quake_Menu.qplaque);
	quake_Menu.DrawPic(160 - (quake_Menu.p_multi.width >> 1),4,quake_Menu.p_multi);
	quake_Menu.Print(64,40,"Join game at:");
	quake_Menu.DrawTextBox(72,48,22,1);
	quake_Menu.Print(80,56,quake_Menu.multiplayer_joinname.substring(quake_Menu.multiplayer_joinname.length - 21));
	quake_Menu.Print(64,72,"Your name");
	quake_Menu.DrawTextBox(160,64,16,1);
	quake_Menu.Print(168,72,quake_Menu.multiplayer_myname);
	quake_Menu.Print(64,96,"Shirt color");
	quake_Menu.Print(64,120,"Pants color");
	quake_Menu.DrawTextBox(64,148,14,1);
	quake_Menu.Print(72,156,"Accept Changes");
	quake_Menu.DrawPic(160,80,quake_Menu.bigbox);
	quake_Menu.DrawPicTranslate(172,88,quake_Menu.menuplyr,(quake_Menu.multiplayer_top << 4) + (quake_Menu.multiplayer_top >= 8 ? 4 : 11),(quake_Menu.multiplayer_bottom << 4) + (quake_Menu.multiplayer_bottom >= 8 ? 4 : 11));
	quake_Menu.DrawCharacter(56,quake_Menu.multiplayer_cursor_table[quake_Menu.multiplayer_cursor],12 + ((quake_Host.realtime * 4 | 0) & 1));
	if(quake_Menu.multiplayer_cursor == 0) {
		quake_Menu.DrawCharacter(quake_Menu.multiplayer_joinname.length <= 20 ? 80 + (quake_Menu.multiplayer_joinname.length << 3) : 248,56,10 + ((quake_Host.realtime * 4 | 0) & 1));
	} else if(quake_Menu.multiplayer_cursor == 1) {
		quake_Menu.DrawCharacter(168 + (quake_Menu.multiplayer_myname.length << 3),72,10 + ((quake_Host.realtime * 4 | 0) & 1));
	}
	if(!quake_NET_$WEBS.available) {
		quake_Menu.PrintWhite(52,172,"No Communications Available");
	}
};
quake_Menu.MultiPlayer_Key = function(k) {
	if(k == 27) {
		quake_Menu.Menu_Main_f();
	}
	switch(k) {
	case 13:
		var _g = quake_Menu.multiplayer_cursor;
		switch(_g) {
		case 0:
			quake_S.StartSound(quake_CL.state.viewentity,-1,quake_Menu.sfx_menu2,quake__$Vec_Vec_$Impl_$.origin,1.0,1.0);
			if(!quake_NET_$WEBS.available) {
				return;
			}
			quake_Key.dest = 0;
			quake_Menu.state = 0;
			quake_Cmd.text += "connect \"";
			if(quake_Menu.multiplayer_joinname.substring(0,5) != "ws://") {
				quake_Cmd.text += "ws://";
			}
			quake_Cmd.text += quake_Menu.multiplayer_joinname + "\"\n";
			break;
		case 2:
			quake_S.StartSound(quake_CL.state.viewentity,-1,quake_Menu.sfx_menu3,quake__$Vec_Vec_$Impl_$.origin,1.0,1.0);
			if(quake_Menu.multiplayer_top <= 12) {
				++quake_Menu.multiplayer_top;
			} else {
				quake_Menu.multiplayer_top = 0;
			}
			break;
		case 3:
			quake_S.StartSound(quake_CL.state.viewentity,-1,quake_Menu.sfx_menu3,quake__$Vec_Vec_$Impl_$.origin,1.0,1.0);
			if(quake_Menu.multiplayer_bottom <= 12) {
				++quake_Menu.multiplayer_bottom;
			} else {
				quake_Menu.multiplayer_bottom = 0;
			}
			break;
		case 4:
			if(quake_CL.$name.string != quake_Menu.multiplayer_myname) {
				quake_Cmd.text += "name \"" + quake_Menu.multiplayer_myname + "\"\n";
			}
			if(quake_Menu.multiplayer_top != quake_Menu.multiplayer_oldtop || quake_Menu.multiplayer_bottom != quake_Menu.multiplayer_oldbottom) {
				quake_Menu.multiplayer_oldtop = quake_Menu.multiplayer_top;
				quake_Menu.multiplayer_oldbottom = quake_Menu.multiplayer_bottom;
				quake_Cmd.text += "color " + quake_Menu.multiplayer_top + " " + quake_Menu.multiplayer_bottom + "\n";
			}
			quake_Menu.entersound = true;
			break;
		}
		break;
	case 127:
		if(quake_Menu.multiplayer_cursor == 0) {
			if(quake_Menu.multiplayer_joinname.length != 0) {
				quake_Menu.multiplayer_joinname = quake_Menu.multiplayer_joinname.substring(0,quake_Menu.multiplayer_joinname.length - 1);
			}
			return;
		}
		if(quake_Menu.multiplayer_cursor == 1) {
			if(quake_Menu.multiplayer_myname.length != 0) {
				quake_Menu.multiplayer_myname = quake_Menu.multiplayer_myname.substring(0,quake_Menu.multiplayer_myname.length - 1);
			}
		}
		return;
	case 128:
		quake_S.StartSound(quake_CL.state.viewentity,-1,quake_Menu.sfx_menu1,quake__$Vec_Vec_$Impl_$.origin,1.0,1.0);
		if(--quake_Menu.multiplayer_cursor < 0) {
			quake_Menu.multiplayer_cursor = 4;
		}
		return;
	case 129:
		quake_S.StartSound(quake_CL.state.viewentity,-1,quake_Menu.sfx_menu1,quake__$Vec_Vec_$Impl_$.origin,1.0,1.0);
		if(++quake_Menu.multiplayer_cursor >= 5) {
			quake_Menu.multiplayer_cursor = 0;
		}
		return;
	case 130:
		if(quake_Menu.multiplayer_cursor == 2) {
			if(--quake_Menu.multiplayer_top < 0) {
				quake_Menu.multiplayer_top = 13;
			}
			quake_S.StartSound(quake_CL.state.viewentity,-1,quake_Menu.sfx_menu3,quake__$Vec_Vec_$Impl_$.origin,1.0,1.0);
		} else if(quake_Menu.multiplayer_cursor == 3) {
			if(--quake_Menu.multiplayer_bottom < 0) {
				quake_Menu.multiplayer_bottom = 13;
			}
			quake_S.StartSound(quake_CL.state.viewentity,-1,quake_Menu.sfx_menu3,quake__$Vec_Vec_$Impl_$.origin,1.0,1.0);
		}
		return;
	case 131:
		if(quake_Menu.multiplayer_cursor == 2) {
			if(quake_Menu.multiplayer_top <= 12) {
				++quake_Menu.multiplayer_top;
			} else {
				quake_Menu.multiplayer_top = 0;
			}
		} else if(quake_Menu.multiplayer_cursor == 3) {
			if(quake_Menu.multiplayer_bottom <= 12) {
				++quake_Menu.multiplayer_bottom;
			} else {
				quake_Menu.multiplayer_bottom = 0;
			}
		} else {
			return;
		}
		quake_S.StartSound(quake_CL.state.viewentity,-1,quake_Menu.sfx_menu3,quake__$Vec_Vec_$Impl_$.origin,1.0,1.0);
		return;
	default:
	}
	if(k < 32 || k > 127) {
		return;
	}
	if(quake_Menu.multiplayer_cursor == 0) {
		quake_Menu.multiplayer_joinname += String.fromCharCode(k);
		return;
	}
	if(quake_Menu.multiplayer_cursor == 1) {
		if(quake_Menu.multiplayer_myname.length <= 14) {
			quake_Menu.multiplayer_myname += String.fromCharCode(k);
		}
	}
};
quake_Menu.Menu_Options_f = function() {
	quake_Key.dest = 3;
	quake_Menu.state = 6;
	quake_Menu.entersound = true;
};
quake_Menu.AdjustSliders = function(dir) {
	quake_S.StartSound(quake_CL.state.viewentity,-1,quake_Menu.sfx_menu3,quake__$Vec_Vec_$Impl_$.origin,1.0,1.0);
	var _g = quake_Menu.options_cursor;
	switch(_g) {
	case 3:
		quake_SCR.viewsize.value += dir * 10;
		if(quake_SCR.viewsize.value < 30) {
			quake_SCR.viewsize.value = 30;
		} else if(quake_SCR.viewsize.value > 120) {
			quake_SCR.viewsize.value = 120;
		}
		quake_SCR.viewsize.setValue(quake_SCR.viewsize.value);
		return;
	case 4:
		quake_V.gamma.value -= dir * 0.05;
		if(quake_V.gamma.value < 0.5) {
			quake_V.gamma.value = 0.5;
		} else if(quake_V.gamma.value > 1.0) {
			quake_V.gamma.value = 1.0;
		}
		quake_V.gamma.setValue(quake_V.gamma.value);
		return;
	case 5:
		quake_CL.sensitivity.value += dir * 0.5;
		if(quake_CL.sensitivity.value < 1.0) {
			quake_CL.sensitivity.value = 1.0;
		} else if(quake_CL.sensitivity.value > 11.0) {
			quake_CL.sensitivity.value = 11.0;
		}
		quake_CL.sensitivity.setValue(quake_CL.sensitivity.value);
		return;
	case 6:
		quake_S.bgmvolume.value += dir * 0.1;
		if(quake_S.bgmvolume.value < 0.0) {
			quake_S.bgmvolume.value = 0.0;
		} else if(quake_S.bgmvolume.value > 1.0) {
			quake_S.bgmvolume.value = 1.0;
		}
		quake_S.bgmvolume.setValue(quake_S.bgmvolume.value);
		return;
	case 7:
		quake_S.volume.value += dir * 0.1;
		if(quake_S.volume.value < 0.0) {
			quake_S.volume.value = 0.0;
		} else if(quake_S.volume.value > 1.0) {
			quake_S.volume.value = 1.0;
		}
		quake_S.volume.setValue(quake_S.volume.value);
		return;
	case 8:
		if(quake_CL.forwardspeed.value > 200.0) {
			quake_CL.forwardspeed.setValue(200);
			quake_CL.backspeed.setValue(200);
			return;
		}
		quake_CL.forwardspeed.setValue(400);
		quake_CL.backspeed.setValue(400);
		return;
	case 9:
		quake_CL.m_pitch.setValue(-quake_CL.m_pitch.value);
		return;
	case 10:
		quake_CL.lookspring.setValue(quake_CL.lookspring.value != 0 ? 0 : 1);
		return;
	case 11:
		quake_CL.lookstrafe.setValue(quake_CL.lookstrafe.value != 0 ? 0 : 1);
		break;
	}
};
quake_Menu.DrawSlider = function(x,y,range) {
	if(range < 0) {
		range = 0;
	} else if(range > 1) {
		range = 1;
	}
	quake_Menu.DrawCharacter(x - 8,y,128);
	quake_Menu.DrawCharacter(x,y,129);
	quake_Menu.DrawCharacter(x + 8,y,129);
	quake_Menu.DrawCharacter(x + 16,y,129);
	quake_Menu.DrawCharacter(x + 24,y,129);
	quake_Menu.DrawCharacter(x + 32,y,129);
	quake_Menu.DrawCharacter(x + 40,y,129);
	quake_Menu.DrawCharacter(x + 48,y,129);
	quake_Menu.DrawCharacter(x + 56,y,129);
	quake_Menu.DrawCharacter(x + 64,y,129);
	quake_Menu.DrawCharacter(x + 72,y,129);
	quake_Menu.DrawCharacter(x + 80,y,130);
	quake_Menu.DrawCharacter(x + Math.floor(72 * range),y,131);
};
quake_Menu.Options_Draw = function() {
	quake_Menu.DrawPic(16,4,quake_Menu.qplaque);
	quake_Menu.DrawPic(160 - (quake_Menu.p_option.width >> 1),4,quake_Menu.p_option);
	quake_Menu.Print(48,32,"Customize controls");
	quake_Menu.Print(88,40,"Go to console");
	quake_Menu.Print(56,48,"Reset to defaults");
	quake_Menu.Print(104,56,"Screen size");
	quake_Menu.DrawSlider(220,56,(quake_SCR.viewsize.value - 30) / 90);
	quake_Menu.Print(112,64,"Brightness");
	quake_Menu.DrawSlider(220,64,(1.0 - quake_V.gamma.value) * 2.0);
	quake_Menu.Print(104,72,"Mouse Speed");
	quake_Menu.DrawSlider(220,72,(quake_CL.sensitivity.value - 1) / 10);
	quake_Menu.Print(72,80,"CD Music Volume");
	quake_Menu.DrawSlider(220,80,quake_S.bgmvolume.value);
	quake_Menu.Print(96,88,"Sound Volume");
	quake_Menu.DrawSlider(220,88,quake_S.volume.value);
	quake_Menu.Print(112,96,"Always Run");
	quake_Menu.Print(220,96,quake_CL.forwardspeed.value > 200.0 ? "on" : "off");
	quake_Menu.Print(96,104,"Invert Mouse");
	quake_Menu.Print(220,104,quake_CL.m_pitch.value < 0.0 ? "on" : "off");
	quake_Menu.Print(112,112,"Lookspring");
	quake_Menu.Print(220,112,quake_CL.lookspring.value != 0 ? "on" : "off");
	quake_Menu.Print(112,120,"Lookstrafe");
	quake_Menu.Print(220,120,quake_CL.lookstrafe.value != 0 ? "on" : "off");
	quake_Menu.DrawCharacter(200,32 + (quake_Menu.options_cursor << 3),12 + ((quake_Host.realtime * 4 | 0) & 1));
};
quake_Menu.Options_Key = function(k) {
	switch(k) {
	case 13:
		quake_Menu.entersound = true;
		var _g = quake_Menu.options_cursor;
		switch(_g) {
		case 0:
			quake_Menu.Menu_Keys_f();
			return;
		case 1:
			quake_Menu.state = 0;
			quake_Console.ToggleConsole_f();
			return;
		case 2:
			quake_Cmd.text += "exec default.cfg\n";
			return;
		default:
			quake_Menu.AdjustSliders(1);
		}
		return;
	case 27:
		quake_Menu.Menu_Main_f();
		return;
	case 128:
		quake_S.StartSound(quake_CL.state.viewentity,-1,quake_Menu.sfx_menu1,quake__$Vec_Vec_$Impl_$.origin,1.0,1.0);
		if(--quake_Menu.options_cursor < 0) {
			quake_Menu.options_cursor = 11;
		}
		return;
	case 129:
		quake_S.StartSound(quake_CL.state.viewentity,-1,quake_Menu.sfx_menu1,quake__$Vec_Vec_$Impl_$.origin,1.0,1.0);
		if(++quake_Menu.options_cursor >= 12) {
			quake_Menu.options_cursor = 0;
		}
		return;
	case 130:
		quake_Menu.AdjustSliders(-1);
		return;
	case 131:
		quake_Menu.AdjustSliders(1);
		break;
	default:
	}
};
quake_Menu.Menu_Keys_f = function() {
	quake_Key.dest = 3;
	quake_Menu.state = 7;
	quake_Menu.entersound = true;
};
quake_Menu.FindKeysForCommand = function(command) {
	var twokeys = [];
	var _g1 = 0;
	var _g = quake_Key.bindings.length;
	while(_g1 < _g) {
		var i = _g1++;
		if(quake_Key.bindings[i] == command) {
			twokeys.push(i);
			if(twokeys.length == 2) {
				return twokeys;
			}
		}
	}
	return twokeys;
};
quake_Menu.UnbindCommand = function(command) {
	var _g1 = 0;
	var _g = quake_Key.bindings.length;
	while(_g1 < _g) {
		var i = _g1++;
		if(quake_Key.bindings[i] == command) {
			quake_Key.bindings[i] = null;
		}
	}
};
quake_Menu.Keys_Draw = function() {
	quake_Menu.DrawPic(160 - (quake_Menu.ttl_cstm.width >> 1),4,quake_Menu.ttl_cstm);
	if(quake_Menu.bind_grab) {
		quake_Menu.Print(12,32,"Press a key or button for this action");
		quake_Menu.DrawCharacter(130,48 + (quake_Menu.keys_cursor << 3),61);
	} else {
		quake_Menu.Print(18,32,"Enter to change, backspace to clear");
		quake_Menu.DrawCharacter(130,48 + (quake_Menu.keys_cursor << 3),12 + ((quake_Host.realtime * 4 | 0) & 1));
	}
	var y = 48;
	var _g1 = 0;
	var _g = quake_Menu.bindnames.length;
	while(_g1 < _g) {
		var i = _g1++;
		quake_Menu.Print(16,y,quake_Menu.bindnames[i][1]);
		var keys = quake_Menu.FindKeysForCommand(quake_Menu.bindnames[i][0]);
		if(keys[0] == null) {
			quake_Menu.Print(140,y,"???");
		} else {
			var name = quake_Key.KeynumToString(keys[0]);
			if(keys[1] != null) {
				name += " or " + quake_Key.KeynumToString(keys[1]);
			}
			quake_Menu.Print(140,y,name);
		}
		y += 8;
	}
};
quake_Menu.Keys_Key = function(k) {
	if(quake_Menu.bind_grab) {
		quake_S.StartSound(quake_CL.state.viewentity,-1,quake_Menu.sfx_menu1,quake__$Vec_Vec_$Impl_$.origin,1.0,1.0);
		if(k != 27 && k != 96) {
			quake_Cmd.text = "bind \"" + quake_Key.KeynumToString(k) + "\" \"" + quake_Menu.bindnames[quake_Menu.keys_cursor][0] + "\"\n" + quake_Cmd.text;
		}
		quake_Menu.bind_grab = false;
		return;
	}
	switch(k) {
	case 13:
		quake_S.StartSound(quake_CL.state.viewentity,-1,quake_Menu.sfx_menu2,quake__$Vec_Vec_$Impl_$.origin,1.0,1.0);
		if(quake_Menu.FindKeysForCommand(quake_Menu.bindnames[quake_Menu.keys_cursor][0])[1] != null) {
			quake_Menu.UnbindCommand(quake_Menu.bindnames[quake_Menu.keys_cursor][0]);
		}
		quake_Menu.bind_grab = true;
		break;
	case 27:
		quake_Menu.Menu_Options_f();
		break;
	case 127:case 148:
		quake_S.StartSound(quake_CL.state.viewentity,-1,quake_Menu.sfx_menu2,quake__$Vec_Vec_$Impl_$.origin,1.0,1.0);
		quake_Menu.UnbindCommand(quake_Menu.bindnames[quake_Menu.keys_cursor][0]);
		break;
	case 129:case 131:
		quake_S.StartSound(quake_CL.state.viewentity,-1,quake_Menu.sfx_menu1,quake__$Vec_Vec_$Impl_$.origin,1.0,1.0);
		if(++quake_Menu.keys_cursor >= quake_Menu.bindnames.length) {
			quake_Menu.keys_cursor = 0;
		}
		break;
	case 128:case 130:
		quake_S.StartSound(quake_CL.state.viewentity,-1,quake_Menu.sfx_menu1,quake__$Vec_Vec_$Impl_$.origin,1.0,1.0);
		if(--quake_Menu.keys_cursor < 0) {
			quake_Menu.keys_cursor = quake_Menu.bindnames.length - 1;
		}
		break;
	default:
	}
};
quake_Menu.Menu_Help_f = function() {
	quake_Key.dest = 3;
	quake_Menu.state = 8;
	quake_Menu.entersound = true;
	quake_Menu.help_page = 0;
};
quake_Menu.Help_Draw = function() {
	quake_Menu.DrawPic(0,0,quake_Menu.help_pages[quake_Menu.help_page]);
};
quake_Menu.Help_Key = function(k) {
	switch(k) {
	case 27:
		quake_Menu.Menu_Main_f();
		return;
	case 128:
		break;
	case 129:
		break;
	case 130:
		quake_Menu.entersound = true;
		if(--quake_Menu.help_page < 0) {
			quake_Menu.help_page = 5;
		}
		break;
	case 131:
		quake_Menu.entersound = true;
		if(++quake_Menu.help_page >= 6) {
			quake_Menu.help_page = 0;
		}
		return;
	default:
	}
};
quake_Menu.Menu_Quit_f = function() {
	if(quake_Menu.state == 9) {
		return;
	}
	quake_Menu.wasInMenus = quake_Key.dest == 3;
	quake_Key.dest = 3;
	quake_Menu.quit_prevstate = quake_Menu.state;
	quake_Menu.state = 9;
	quake_Menu.entersound = true;
	quake_Menu.msgNumber = Math.floor(Math.random() * quake_Menu.quitMessage.length);
};
quake_Menu.Quit_Draw = function() {
	if(quake_Menu.wasInMenus) {
		quake_Menu.state = quake_Menu.quit_prevstate;
		quake_Menu.recursiveDraw = true;
		quake_Menu.DrawMenu();
		quake_Menu.state = 9;
	}
	quake_Menu.DrawTextBox(56,76,24,4);
	quake_Menu.Print(64,84,quake_Menu.quitMessage[quake_Menu.msgNumber][0]);
	quake_Menu.Print(64,92,quake_Menu.quitMessage[quake_Menu.msgNumber][1]);
	quake_Menu.Print(64,100,quake_Menu.quitMessage[quake_Menu.msgNumber][2]);
	quake_Menu.Print(64,108,quake_Menu.quitMessage[quake_Menu.msgNumber][3]);
};
quake_Menu.Quit_Key = function(k) {
	switch(k) {
	case 27:case 110:
		if(quake_Menu.wasInMenus) {
			quake_Menu.state = quake_Menu.quit_prevstate;
			quake_Menu.entersound = true;
		} else {
			quake_Key.dest = 0;
			quake_Menu.state = 0;
		}
		break;
	case 121:
		quake_Key.dest = 1;
		quake_Host.Quit_f();
		break;
	default:
	}
};
quake_Menu.Init = function() {
	quake_Cmd.AddCommand("togglemenu",quake_Menu.ToggleMenu_f);
	quake_Cmd.AddCommand("menu_main",quake_Menu.Menu_Main_f);
	quake_Cmd.AddCommand("menu_singleplayer",quake_Menu.Menu_SinglePlayer_f);
	quake_Cmd.AddCommand("menu_load",quake_Menu.Menu_Load_f);
	quake_Cmd.AddCommand("menu_save",quake_Menu.Menu_Save_f);
	quake_Cmd.AddCommand("menu_multiplayer",quake_Menu.Menu_MultiPlayer_f);
	quake_Cmd.AddCommand("menu_setup",quake_Menu.Menu_MultiPlayer_f);
	quake_Cmd.AddCommand("menu_options",quake_Menu.Menu_Options_f);
	quake_Cmd.AddCommand("menu_keys",quake_Menu.Menu_Keys_f);
	quake_Cmd.AddCommand("help",quake_Menu.Menu_Help_f);
	quake_Cmd.AddCommand("menu_quit",quake_Menu.Menu_Quit_f);
	quake_Menu.sfx_menu1 = quake_S.PrecacheSound("misc/menu1.wav");
	quake_Menu.sfx_menu2 = quake_S.PrecacheSound("misc/menu2.wav");
	quake_Menu.sfx_menu3 = quake_S.PrecacheSound("misc/menu3.wav");
	quake_Menu.box_tl = quake_Draw.CachePic("box_tl");
	quake_Menu.box_ml = quake_Draw.CachePic("box_ml");
	quake_Menu.box_bl = quake_Draw.CachePic("box_bl");
	quake_Menu.box_tm = quake_Draw.CachePic("box_tm");
	quake_Menu.box_mm = quake_Draw.CachePic("box_mm");
	quake_Menu.box_mm2 = quake_Draw.CachePic("box_mm2");
	quake_Menu.box_bm = quake_Draw.CachePic("box_bm");
	quake_Menu.box_tr = quake_Draw.CachePic("box_tr");
	quake_Menu.box_mr = quake_Draw.CachePic("box_mr");
	quake_Menu.box_br = quake_Draw.CachePic("box_br");
	quake_Menu.qplaque = quake_Draw.CachePic("qplaque");
	quake_Menu.menudot = [quake_Draw.CachePic("menudot1"),quake_Draw.CachePic("menudot2"),quake_Draw.CachePic("menudot3"),quake_Draw.CachePic("menudot4"),quake_Draw.CachePic("menudot5"),quake_Draw.CachePic("menudot6")];
	quake_Menu.ttl_main = quake_Draw.CachePic("ttl_main");
	quake_Menu.mainmenu = quake_Draw.CachePic("mainmenu");
	quake_Menu.ttl_sgl = quake_Draw.CachePic("ttl_sgl");
	quake_Menu.sp_menu = quake_Draw.CachePic("sp_menu");
	quake_Menu.p_load = quake_Draw.CachePic("p_load");
	quake_Menu.p_save = quake_Draw.CachePic("p_save");
	quake_Menu.p_multi = quake_Draw.CachePic("p_multi");
	quake_Menu.bigbox = quake_Draw.CachePic("bigbox");
	quake_Menu.menuplyr = quake_Draw.CachePic("menuplyr");
	var buf = quake_COM.LoadFile("gfx/menuplyr.lmp");
	var data = quake_GL.ResampleTexture(quake_Menu.menuplyr.data,quake_Menu.menuplyr.width,quake_Menu.menuplyr.height,64,64);
	var trans = new Uint8Array(new ArrayBuffer(16384));
	var _g = 0;
	while(_g < 4096) {
		var i = _g++;
		var p = data[i];
		if(p >> 4 == 1) {
			trans[i << 2] = (p & 15) * 17;
			trans[(i << 2) + 1] = 255;
		} else if(p >> 4 == 6) {
			trans[(i << 2) + 2] = (p & 15) * 17;
			trans[(i << 2) + 3] = 255;
		}
	}
	quake_Menu.menuplyr.translate = quake_GL.gl.createTexture();
	quake_GL.Bind(0,quake_Menu.menuplyr.translate);
	quake_GL.gl.texImage2D(3553,0,6408,64,64,0,6408,5121,trans);
	quake_GL.gl.texParameterf(3553,10241,9729);
	quake_GL.gl.texParameterf(3553,10240,9729);
	quake_Menu.p_option = quake_Draw.CachePic("p_option");
	quake_Menu.ttl_cstm = quake_Draw.CachePic("ttl_cstm");
	quake_Menu.help_pages = [quake_Draw.CachePic("help0"),quake_Draw.CachePic("help1"),quake_Draw.CachePic("help2"),quake_Draw.CachePic("help3"),quake_Draw.CachePic("help4"),quake_Draw.CachePic("help5")];
};
quake_Menu.DrawMenu = function() {
	if(quake_Menu.state == 0 || quake_Key.dest != 3) {
		return;
	}
	if(!quake_Menu.recursiveDraw) {
		if(quake_SCR.con_current != 0) {
			quake_Draw.ConsoleBackground(quake_VID.height);
		} else {
			quake_Draw.FadeScreen();
		}
	} else {
		quake_Menu.recursiveDraw = false;
	}
	var _g = quake_Menu.state;
	switch(_g) {
	case 0:
		break;
	case 1:
		quake_Menu.Main_Draw();
		break;
	case 2:
		quake_Menu.SinglePlayer_Draw();
		break;
	case 3:
		quake_Menu.Load_Draw();
		break;
	case 4:
		quake_Menu.Save_Draw();
		break;
	case 5:
		quake_Menu.MultiPlayer_Draw();
		break;
	case 6:
		quake_Menu.Options_Draw();
		break;
	case 7:
		quake_Menu.Keys_Draw();
		break;
	case 8:
		quake_Menu.Help_Draw();
		break;
	case 9:
		quake_Menu.Quit_Draw();
		break;
	}
	if(quake_Menu.entersound) {
		quake_S.StartSound(quake_CL.state.viewentity,-1,quake_Menu.sfx_menu2,quake__$Vec_Vec_$Impl_$.origin,1.0,1.0);
		quake_Menu.entersound = false;
	}
};
quake_Menu.Keydown = function(key) {
	var _g = quake_Menu.state;
	switch(_g) {
	case 0:
		break;
	case 1:
		quake_Menu.Main_Key(key);
		break;
	case 2:
		quake_Menu.SinglePlayer_Key(key);
		break;
	case 3:
		quake_Menu.Load_Key(key);
		break;
	case 4:
		quake_Menu.Save_Key(key);
		break;
	case 5:
		quake_Menu.MultiPlayer_Key(key);
		break;
	case 6:
		quake_Menu.Options_Key(key);
		break;
	case 7:
		quake_Menu.Keys_Key(key);
		break;
	case 8:
		quake_Menu.Help_Key(key);
		break;
	case 9:
		quake_Menu.Quit_Key(key);
		break;
	}
};
var quake_MModel = function(name) {
	this.name = name;
	this.needload = true;
};
$hxClasses["quake.MModel"] = quake_MModel;
quake_MModel.__name__ = true;
quake_MModel.prototype = {
	flags: null
	,oriented: null
	,numframes: null
	,frames: null
	,boundingradius: null
	,player: null
	,numtris: null
	,cmds: null
	,numskins: null
	,skins: null
	,type: null
	,mins: null
	,maxs: null
	,radius: null
	,submodel: null
	,submodels: null
	,lightdata: null
	,chains: null
	,textures: null
	,waterchain: null
	,skychain: null
	,leafs: null
	,numfaces: null
	,faces: null
	,firstface: null
	,marksurfaces: null
	,texinfo: null
	,name: null
	,vertexes: null
	,edges: null
	,surfedges: null
	,visdata: null
	,random: null
	,nodes: null
	,hulls: null
	,entities: null
	,needload: null
	,scale: null
	,scale_origin: null
	,skinwidth: null
	,skinheight: null
	,numverts: null
	,width: null
	,height: null
	,planes: null
	,clipnodes: null
	,origin: null
	,__class__: quake_MModel
};
var quake_MFrame = function(g) {
	this.group = g;
};
$hxClasses["quake.MFrame"] = quake_MFrame;
quake_MFrame.__name__ = true;
quake_MFrame.prototype = {
	name: null
	,group: null
	,frames: null
	,interval: null
	,origin: null
	,width: null
	,height: null
	,texturenum: null
	,cmdofs: null
	,bboxmin: null
	,bboxmax: null
	,v: null
	,__class__: quake_MFrame
};
var quake_Mod = function() { };
$hxClasses["quake.Mod"] = quake_Mod;
quake_Mod.__name__ = true;
quake_Mod.Init = function() {
	quake_Mod_$Brush.Init();
	quake_Mod_$Alias.Init();
};
quake_Mod.ClearAll = function() {
	var _g1 = 0;
	var _g = quake_Mod.known.length;
	while(_g1 < _g) {
		var i = _g1++;
		var mod = quake_Mod.known[i];
		if(mod.type != 0) {
			continue;
		}
		if(mod.cmds != null) {
			quake_GL.gl.deleteBuffer(mod.cmds);
		}
		quake_Mod.known[i] = new quake_MModel(mod.name);
	}
};
quake_Mod.FindName = function(name) {
	if(name.length == 0) {
		quake_Sys.Error("Mod.FindName: NULL name");
	}
	var _g = 0;
	var _g1 = quake_Mod.known;
	while(_g < _g1.length) {
		var mod = _g1[_g];
		++_g;
		if(mod == null) {
			continue;
		}
		if(mod.name == name) {
			return mod;
		}
	}
	var _g11 = 0;
	var _g2 = quake_Mod.known.length + 1;
	while(_g11 < _g2) {
		var i = _g11++;
		if(quake_Mod.known[i] != null) {
			continue;
		}
		return quake_Mod.known[i] = new quake_MModel(name);
	}
	return null;
};
quake_Mod.LoadModel = function(mod,crash) {
	if(!mod.needload) {
		return mod;
	}
	var buf = quake_COM.LoadFile(mod.name);
	if(buf == null) {
		if(crash) {
			quake_Sys.Error("Mod.LoadModel: " + mod.name + " not found");
		}
		return null;
	}
	mod.needload = false;
	var view = new DataView(buf);
	var _g = view.getUint32(0,true);
	switch(_g) {
	case 1330660425:
		quake_Mod_$Alias.LoadAliasModel(mod,view);
		break;
	case 1347634249:
		quake_Mod_$Sprite.LoadSpriteModel(mod,view);
		break;
	default:
		quake_Mod_$Brush.LoadBrushModel(mod,view);
	}
	return mod;
};
quake_Mod.ForName = function(name,crash) {
	return quake_Mod.LoadModel(quake_Mod.FindName(name),crash);
};
quake_Mod.Print = function() {
	quake_Console.Print("Cached models:\n");
	var _g = 0;
	var _g1 = quake_Mod.known;
	while(_g < _g1.length) {
		var mod = _g1[_g];
		++_g;
		quake_Console.Print(mod.name + "\n");
	}
};
var quake__$Mod_$Alias_STVert = function(onseam,s,t) {
	this.onseam = onseam;
	this.s = s;
	this.t = t;
};
$hxClasses["quake._Mod_Alias.STVert"] = quake__$Mod_$Alias_STVert;
quake__$Mod_$Alias_STVert.__name__ = true;
quake__$Mod_$Alias_STVert.prototype = {
	onseam: null
	,s: null
	,t: null
	,__class__: quake__$Mod_$Alias_STVert
};
var quake__$Mod_$Alias_Triangle = function(facesfront,vertindex) {
	this.facesfront = facesfront;
	this.vertindex = vertindex;
};
$hxClasses["quake._Mod_Alias.Triangle"] = quake__$Mod_$Alias_Triangle;
quake__$Mod_$Alias_Triangle.__name__ = true;
quake__$Mod_$Alias_Triangle.prototype = {
	facesfront: null
	,vertindex: null
	,__class__: quake__$Mod_$Alias_Triangle
};
var quake_Trivert = function(v,lightnormalindex) {
	this.v = v;
	this.lightnormalindex = lightnormalindex;
};
$hxClasses["quake.Trivert"] = quake_Trivert;
quake_Trivert.__name__ = true;
quake_Trivert.prototype = {
	v: null
	,lightnormalindex: null
	,__class__: quake_Trivert
};
var quake_Skin = function(g) {
	this.group = g;
};
$hxClasses["quake.Skin"] = quake_Skin;
quake_Skin.__name__ = true;
quake_Skin.prototype = {
	group: null
	,skins: null
	,interval: null
	,texturenum: null
	,playertexture: null
	,__class__: quake_Skin
};
var quake_Mod_$Alias = function() { };
$hxClasses["quake.Mod_Alias"] = quake_Mod_$Alias;
quake_Mod_$Alias.__name__ = true;
quake_Mod_$Alias.Init = function() {
	quake_Mod_$Alias.filledcolor = 0;
	var _g = 0;
	while(_g < 256) {
		var i = _g++;
		if(quake_VID.d_8to24table[i] == 0) {
			quake_Mod_$Alias.filledcolor = i;
			break;
		}
	}
};
quake_Mod_$Alias.LoadAliasModel = function(loadmodel,model) {
	var version = model.getUint32(4,true);
	if(version != 6) {
		quake_Sys.Error(loadmodel.name + " has wrong version number (" + version + " should be " + 6 + ")");
	}
	loadmodel.type = 2;
	loadmodel.player = loadmodel.name == "progs/player.mdl";
	var x = model.getFloat32(8,true);
	var y = model.getFloat32(12,true);
	var z = model.getFloat32(16,true);
	var this1 = new Float32Array(3);
	var v = this1;
	v[0] = x;
	v[1] = y;
	v[2] = z;
	loadmodel.scale = v;
	var x1 = model.getFloat32(20,true);
	var y1 = model.getFloat32(24,true);
	var z1 = model.getFloat32(28,true);
	var this2 = new Float32Array(3);
	var v1 = this2;
	v1[0] = x1;
	v1[1] = y1;
	v1[2] = z1;
	loadmodel.scale_origin = v1;
	loadmodel.boundingradius = model.getFloat32(32,true);
	loadmodel.numskins = model.getUint32(48,true);
	if(loadmodel.numskins == 0) {
		quake_Sys.Error("model " + loadmodel.name + " has no skins");
	}
	loadmodel.skinwidth = model.getUint32(52,true);
	loadmodel.skinheight = model.getUint32(56,true);
	loadmodel.numverts = model.getUint32(60,true);
	if(loadmodel.numverts == 0) {
		quake_Sys.Error("model " + loadmodel.name + " has no vertices");
	}
	loadmodel.numtris = model.getUint32(64,true);
	if(loadmodel.numtris == 0) {
		quake_Sys.Error("model " + loadmodel.name + " has no triangles");
	}
	loadmodel.numframes = model.getUint32(68,true);
	if(loadmodel.numframes == 0) {
		quake_Sys.Error("model " + loadmodel.name + " has no frames");
	}
	loadmodel.random = model.getUint32(72,true) == 1;
	loadmodel.flags = model.getUint32(76,true);
	var this3 = new Float32Array(3);
	var v2 = this3;
	v2[0] = -16.0;
	v2[1] = -16.0;
	v2[2] = -16.0;
	loadmodel.mins = v2;
	var this4 = new Float32Array(3);
	var v3 = this4;
	v3[0] = 16.0;
	v3[1] = 16.0;
	v3[2] = 16.0;
	loadmodel.maxs = v3;
	var inmodel = quake_Mod_$Alias.LoadAllSkins(loadmodel,model,84);
	var stverts = [];
	var _g1 = 0;
	var _g = loadmodel.numverts;
	while(_g1 < _g) {
		var i = _g1++;
		stverts.push(new quake__$Mod_$Alias_STVert(model.getUint32(inmodel,true) != 0,model.getUint32(inmodel + 4,true),model.getUint32(inmodel + 8,true)));
		inmodel += 12;
	}
	var triangles = [];
	var _g11 = 0;
	var _g2 = loadmodel.numtris;
	while(_g11 < _g2) {
		var i1 = _g11++;
		triangles.push(new quake__$Mod_$Alias_Triangle(model.getUint32(inmodel,true) != 0,[model.getUint32(inmodel + 4,true),model.getUint32(inmodel + 8,true),model.getUint32(inmodel + 12,true)]));
		inmodel += 16;
	}
	quake_Mod_$Alias.LoadAllFrames(loadmodel,model,inmodel);
	var cmds = [];
	var _g12 = 0;
	var _g3 = loadmodel.numtris;
	while(_g12 < _g3) {
		var i2 = _g12++;
		var triangle = triangles[i2];
		if(triangle.facesfront) {
			var vert = stverts[triangle.vertindex[0]];
			cmds.push((vert.s + 0.5) / loadmodel.skinwidth);
			cmds.push((vert.t + 0.5) / loadmodel.skinheight);
			vert = stverts[triangle.vertindex[1]];
			cmds.push((vert.s + 0.5) / loadmodel.skinwidth);
			cmds.push((vert.t + 0.5) / loadmodel.skinheight);
			vert = stverts[triangle.vertindex[2]];
			cmds.push((vert.s + 0.5) / loadmodel.skinwidth);
			cmds.push((vert.t + 0.5) / loadmodel.skinheight);
			continue;
		}
		var _g21 = 0;
		while(_g21 < 3) {
			var j = _g21++;
			var vert1 = stverts[triangle.vertindex[j]];
			if(vert1.onseam) {
				cmds.push((vert1.s + loadmodel.skinwidth / 2 + 0.5) / loadmodel.skinwidth);
			} else {
				cmds.push((vert1.s + 0.5) / loadmodel.skinwidth);
			}
			cmds.push((vert1.t + 0.5) / loadmodel.skinheight);
		}
	}
	var group;
	var frame;
	var _g13 = 0;
	var _g4 = loadmodel.numframes;
	while(_g13 < _g4) {
		var i3 = _g13++;
		group = loadmodel.frames[i3];
		if(group.group) {
			var _g31 = 0;
			var _g22 = group.frames.length;
			while(_g31 < _g22) {
				var j1 = _g31++;
				frame = group.frames[j1];
				frame.cmdofs = cmds.length << 2;
				var _g5 = 0;
				var _g41 = loadmodel.numtris;
				while(_g5 < _g41) {
					var k = _g5++;
					var triangle1 = triangles[k];
					var _g6 = 0;
					while(_g6 < 3) {
						var l = _g6++;
						var vert2 = frame.v[triangle1.vertindex[l]];
						if(vert2.lightnormalindex >= 162) {
							quake_Sys.Error("lightnormalindex >= NUMVERTEXNORMALS");
						}
						cmds.push(vert2.v[0] * loadmodel.scale[0] + loadmodel.scale_origin[0]);
						cmds.push(vert2.v[1] * loadmodel.scale[1] + loadmodel.scale_origin[1]);
						cmds.push(vert2.v[2] * loadmodel.scale[2] + loadmodel.scale_origin[2]);
						cmds.push(quake_Render.avertexnormals[vert2.lightnormalindex * 3]);
						cmds.push(quake_Render.avertexnormals[vert2.lightnormalindex * 3 + 1]);
						cmds.push(quake_Render.avertexnormals[vert2.lightnormalindex * 3 + 2]);
					}
				}
			}
			continue;
		}
		frame = group;
		frame.cmdofs = cmds.length << 2;
		var _g32 = 0;
		var _g23 = loadmodel.numtris;
		while(_g32 < _g23) {
			var j2 = _g32++;
			var triangle2 = triangles[j2];
			var _g42 = 0;
			while(_g42 < 3) {
				var k1 = _g42++;
				var vert3 = frame.v[triangle2.vertindex[k1]];
				if(vert3.lightnormalindex >= 162) {
					quake_Sys.Error("lightnormalindex >= NUMVERTEXNORMALS");
				}
				cmds.push(vert3.v[0] * loadmodel.scale[0] + loadmodel.scale_origin[0]);
				cmds.push(vert3.v[1] * loadmodel.scale[1] + loadmodel.scale_origin[1]);
				cmds.push(vert3.v[2] * loadmodel.scale[2] + loadmodel.scale_origin[2]);
				cmds.push(quake_Render.avertexnormals[vert3.lightnormalindex * 3]);
				cmds.push(quake_Render.avertexnormals[vert3.lightnormalindex * 3 + 1]);
				cmds.push(quake_Render.avertexnormals[vert3.lightnormalindex * 3 + 2]);
			}
		}
	}
	loadmodel.cmds = quake_GL.gl.createBuffer();
	quake_GL.gl.bindBuffer(34962,loadmodel.cmds);
	quake_GL.gl.bufferData(34962,new Float32Array(cmds),35044);
};
quake_Mod_$Alias.LoadAllSkins = function(loadmodel,model,inmodel) {
	loadmodel.skins = [];
	var skinsize = loadmodel.skinwidth * loadmodel.skinheight;
	var _g1 = 0;
	var _g = loadmodel.numskins;
	while(_g1 < _g) {
		var i = _g1++;
		inmodel += 4;
		if(model.getUint32(inmodel - 4,true) == 0) {
			var skin = new Uint8Array(model.buffer,inmodel,skinsize);
			quake_Mod_$Alias.FloodFillSkin(loadmodel,skin);
			var g = new quake_Skin(false);
			g.texturenum = quake_GL.LoadTexture(loadmodel.name + "_" + i,loadmodel.skinwidth,loadmodel.skinheight,skin);
			loadmodel.skins[i] = g;
			if(loadmodel.player) {
				quake_Mod_$Alias.TranslatePlayerSkin(loadmodel,new Uint8Array(model.buffer,inmodel,skinsize),loadmodel.skins[i]);
			}
			inmodel += skinsize;
		} else {
			var group = new quake_Skin(true);
			var numskins = model.getUint32(inmodel,true);
			inmodel += 4;
			var _g3 = 0;
			var _g2 = numskins;
			while(_g3 < _g2) {
				var j = _g3++;
				var s = new quake_Skin(false);
				s.interval = model.getFloat32(inmodel,true);
				if(s.interval <= 0.0) {
					quake_Sys.Error("Mod.LoadAllSkins: interval<=0");
				}
				group.skins[j] = s;
				inmodel += 4;
			}
			var _g31 = 0;
			var _g21 = numskins;
			while(_g31 < _g21) {
				var j1 = _g31++;
				var skin1 = new Uint8Array(model.buffer,inmodel,skinsize);
				quake_Mod_$Alias.FloodFillSkin(loadmodel,skin1);
				group.skins[j1].texturenum = quake_GL.LoadTexture(loadmodel.name + "_" + i + "_" + j1,loadmodel.skinwidth,loadmodel.skinheight,skin1);
				if(loadmodel.player) {
					quake_Mod_$Alias.TranslatePlayerSkin(loadmodel,new Uint8Array(model.buffer,inmodel,skinsize),group.skins[j1]);
				}
				inmodel += skinsize;
			}
			loadmodel.skins[i] = group;
		}
	}
	return inmodel;
};
quake_Mod_$Alias.LoadAllFrames = function(loadmodel,model,inmodel) {
	loadmodel.frames = [];
	var _g1 = 0;
	var _g = loadmodel.numframes;
	while(_g1 < _g) {
		var i = _g1++;
		inmodel += 4;
		if(model.getUint32(inmodel - 4,true) == 0) {
			var frame = new quake_MFrame(false);
			frame.group = false;
			frame.bboxmin = [model.getUint8(inmodel),model.getUint8(inmodel + 1),model.getUint8(inmodel + 2)];
			frame.bboxmax = [model.getUint8(inmodel + 4),model.getUint8(inmodel + 5),model.getUint8(inmodel + 6)];
			frame.name = quake_Q.memstr(new Uint8Array(model.buffer,inmodel + 8,16));
			frame.v = [];
			inmodel += 24;
			var _g3 = 0;
			var _g2 = loadmodel.numverts;
			while(_g3 < _g2) {
				var j = _g3++;
				frame.v[j] = new quake_Trivert([model.getUint8(inmodel),model.getUint8(inmodel + 1),model.getUint8(inmodel + 2)],model.getUint8(inmodel + 3));
				inmodel += 4;
			}
			loadmodel.frames[i] = frame;
		} else {
			var group = new quake_MFrame(true);
			group.bboxmin = [model.getUint8(inmodel + 4),model.getUint8(inmodel + 5),model.getUint8(inmodel + 6)];
			group.bboxmax = [model.getUint8(inmodel + 8),model.getUint8(inmodel + 9),model.getUint8(inmodel + 10)];
			group.frames = [];
			var numframes = model.getUint32(inmodel,true);
			inmodel += 12;
			var _g31 = 0;
			var _g21 = numframes;
			while(_g31 < _g21) {
				var j1 = _g31++;
				var f = new quake_MFrame(false);
				f.interval = model.getFloat32(inmodel,true);
				group.frames[j1] = f;
				if(group.frames[j1].interval <= 0.0) {
					quake_Sys.Error("Mod.LoadAllFrames: interval<=0");
				}
				inmodel += 4;
			}
			var _g32 = 0;
			var _g22 = numframes;
			while(_g32 < _g22) {
				var j2 = _g32++;
				var frame1 = group.frames[j2];
				frame1.bboxmin = [model.getUint8(inmodel),model.getUint8(inmodel + 1),model.getUint8(inmodel + 2)];
				frame1.bboxmax = [model.getUint8(inmodel + 4),model.getUint8(inmodel + 5),model.getUint8(inmodel + 6)];
				frame1.name = quake_Q.memstr(new Uint8Array(model.buffer,inmodel + 8,16));
				frame1.v = [];
				inmodel += 24;
				var _g5 = 0;
				var _g4 = loadmodel.numverts;
				while(_g5 < _g4) {
					var k = _g5++;
					frame1.v[k] = new quake_Trivert([model.getUint8(inmodel),model.getUint8(inmodel + 1),model.getUint8(inmodel + 2)],model.getUint8(inmodel + 3));
					inmodel += 4;
				}
			}
			loadmodel.frames[i] = group;
		}
	}
};
quake_Mod_$Alias.FloodFillSkin = function(loadmodel,skin) {
	var fillcolor = skin[0];
	if(fillcolor == quake_Mod_$Alias.filledcolor) {
		return;
	}
	var width = loadmodel.skinwidth;
	var height = loadmodel.skinheight;
	var lifo = [[0,0]];
	var sp = 1;
	while(sp > 0) {
		var cur = lifo[--sp];
		var x = cur[0];
		var y = cur[1];
		skin[y * width + x] = quake_Mod_$Alias.filledcolor;
		if(x > 0) {
			if(skin[y * width + x - 1] == fillcolor) {
				lifo[sp++] = [x - 1,y];
			}
		}
		if(x < width - 1) {
			if(skin[y * width + x + 1] == fillcolor) {
				lifo[sp++] = [x + 1,y];
			}
		}
		if(y > 0) {
			if(skin[(y - 1) * width + x] == fillcolor) {
				lifo[sp++] = [x,y - 1];
			}
		}
		if(y < height - 1) {
			if(skin[(y + 1) * width + x] == fillcolor) {
				lifo[sp++] = [x,y + 1];
			}
		}
	}
};
quake_Mod_$Alias.TranslatePlayerSkin = function(loadmodel,data,skin) {
	if(loadmodel.skinwidth != 512 || loadmodel.skinheight != 256) {
		data = quake_GL.ResampleTexture(data,loadmodel.skinwidth,loadmodel.skinheight,512,256);
	}
	var out = new Uint8Array(new ArrayBuffer(524288));
	var _g1 = 0;
	var _g = 131072;
	while(_g1 < _g) {
		var i = _g1++;
		var original = data[i];
		if(original >> 4 == 1) {
			out[i << 2] = (original & 15) * 17;
			out[(i << 2) + 1] = 255;
		} else if(original >> 4 == 6) {
			out[(i << 2) + 2] = (original & 15) * 17;
			out[(i << 2) + 3] = 255;
		}
	}
	skin.playertexture = quake_GL.gl.createTexture();
	quake_GL.Bind(0,skin.playertexture);
	quake_GL.gl.texImage2D(3553,0,6408,512,256,0,6408,5121,out);
	quake_GL.gl.generateMipmap(3553);
	quake_GL.gl.texParameteri(3553,10241,quake_GL.filter_min);
	quake_GL.gl.texParameteri(3553,10240,quake_GL.filter_max);
};
var quake_Hull = function() {
};
$hxClasses["quake.Hull"] = quake_Hull;
quake_Hull.__name__ = true;
quake_Hull.prototype = {
	clipnodes: null
	,planes: null
	,firstclipnode: null
	,lastclipnode: null
	,clip_mins: null
	,clip_maxs: null
	,__class__: quake_Hull
};
var quake_ClipNode = function() {
};
$hxClasses["quake.ClipNode"] = quake_ClipNode;
quake_ClipNode.__name__ = true;
quake_ClipNode.prototype = {
	planenum: null
	,child0: null
	,child1: null
	,__class__: quake_ClipNode
};
var quake_Surface = function() {
};
$hxClasses["quake.Surface"] = quake_Surface;
quake_Surface.__name__ = true;
quake_Surface.prototype = {
	extents: null
	,texturemins: null
	,light_s: null
	,light_t: null
	,dlightframe: null
	,dlightbits: null
	,plane: null
	,texinfo: null
	,sky: null
	,turbulent: null
	,lightofs: null
	,styles: null
	,texture: null
	,verts: null
	,numedges: null
	,firstedge: null
	,__class__: quake_Surface
};
var quake_Node = function() {
};
$hxClasses["quake.Node"] = quake_Node;
quake_Node.__name__ = true;
quake_Node.prototype = {
	contents: null
	,plane: null
	,num: null
	,parent: null
	,child0: null
	,child1: null
	,numfaces: null
	,firstface: null
	,visframe: null
	,markvisframe: null
	,skychain: null
	,waterchain: null
	,mins: null
	,maxs: null
	,cmds: null
	,nummarksurfaces: null
	,firstmarksurface: null
	,planenum: null
	,__class__: quake_Node
};
var quake_Leaf = function() {
	quake_Node.call(this);
};
$hxClasses["quake.Leaf"] = quake_Leaf;
quake_Leaf.__name__ = true;
quake_Leaf.__super__ = quake_Node;
quake_Leaf.prototype = $extend(quake_Node.prototype,{
	visofs: null
	,ambient_level: null
	,__class__: quake_Leaf
});
var quake_Texinfo = function(v,t,f) {
	this.vecs = v;
	this.texture = t;
	this.flags = f;
};
$hxClasses["quake.Texinfo"] = quake_Texinfo;
quake_Texinfo.__name__ = true;
quake_Texinfo.prototype = {
	texture: null
	,vecs: null
	,flags: null
	,__class__: quake_Texinfo
};
var quake_MTexture = function() {
};
$hxClasses["quake.MTexture"] = quake_MTexture;
quake_MTexture.__name__ = true;
quake_MTexture.prototype = {
	name: null
	,width: null
	,height: null
	,anim_base: null
	,anim_frame: null
	,anims: null
	,alternate_anims: null
	,sky: null
	,turbulent: null
	,texturenum: null
	,__class__: quake_MTexture
};
var quake__$Mod_$Brush_LumpOffsets = function() { };
$hxClasses["quake._Mod_Brush.LumpOffsets"] = quake__$Mod_$Brush_LumpOffsets;
quake__$Mod_$Brush_LumpOffsets.__name__ = true;
var quake_Mod_$Brush = function() { };
$hxClasses["quake.Mod_Brush"] = quake_Mod_$Brush;
quake_Mod_$Brush.__name__ = true;
quake_Mod_$Brush.Init = function() {
	quake_Mod_$Brush.novis = [];
	var _g = 0;
	while(_g < 1024) {
		var i = _g++;
		quake_Mod_$Brush.novis.push(255);
	}
};
quake_Mod_$Brush.PointInLeaf = function(p,model) {
	if(model == null || model.nodes == null) {
		quake_Sys.Error("Mod.PointInLeaf: bad model");
	}
	var node = model.nodes[0];
	while(true) {
		if(node.contents < 0) {
			return node;
		}
		var plane = node.plane;
		var v2 = plane.normal;
		if(p[0] * v2[0] + p[1] * v2[1] + p[2] * v2[2] - plane.dist > 0) {
			node = node.child0;
		} else {
			node = node.child1;
		}
	}
};
quake_Mod_$Brush.LeafPVS = function(leaf,model) {
	if(leaf == model.leafs[0]) {
		return quake_Mod_$Brush.novis;
	}
	return quake_Mod_$Brush.DecompressVis(leaf.visofs,model);
};
quake_Mod_$Brush.DecompressVis = function(i,model) {
	var decompressed = [];
	var out = 0;
	var row = model.leafs.length + 7 >> 3;
	if(model.visdata == null) {
		while(row >= 0) {
			decompressed[out++] = 255;
			--row;
		}
		return decompressed;
	}
	var out1 = 0;
	while(out1 < row) {
		if(model.visdata[i] != 0) {
			decompressed[out1++] = model.visdata[i++];
			continue;
		}
		var c = model.visdata[i + 1];
		while(c > 0) {
			decompressed[out1++] = 0;
			--c;
		}
		i += 2;
	}
	return decompressed;
};
quake_Mod_$Brush.LoadBrushModel = function(loadmodel,data) {
	var version = data.getUint32(0,true);
	if(version != 29) {
		quake_Sys.Error("Mod.LoadBrushModel: " + loadmodel.name + " has wrong version number (" + version + " should be " + 29 + ")");
	}
	loadmodel.type = 0;
	quake_Mod_$Brush.LoadVertexes(loadmodel,data);
	quake_Mod_$Brush.LoadEdges(loadmodel,data);
	quake_Mod_$Brush.LoadSurfedges(loadmodel,data);
	quake_Mod_$Brush.LoadTextures(loadmodel,data);
	quake_Mod_$Brush.LoadLighting(loadmodel,data);
	quake_Mod_$Brush.LoadPlanes(loadmodel,data);
	quake_Mod_$Brush.LoadTexinfo(loadmodel,data);
	quake_Mod_$Brush.LoadFaces(loadmodel,data);
	quake_Mod_$Brush.LoadMarksurfaces(loadmodel,data);
	quake_Mod_$Brush.LoadVisibility(loadmodel,data);
	quake_Mod_$Brush.LoadLeafs(loadmodel,data);
	quake_Mod_$Brush.LoadNodes(loadmodel,data);
	quake_Mod_$Brush.LoadClipnodes(loadmodel,data);
	quake_Mod_$Brush.MakeHull0(loadmodel);
	quake_Mod_$Brush.LoadEntities(loadmodel,data);
	quake_Mod_$Brush.LoadSubmodels(loadmodel,data);
	var mins_0 = 0.0;
	var mins_1 = 0.0;
	var mins_2 = 0.0;
	var maxs_0 = 0.0;
	var maxs_1 = 0.0;
	var maxs_2 = 0.0;
	var _g = 0;
	var _g1 = loadmodel.vertexes;
	while(_g < _g1.length) {
		var vert = _g1[_g];
		++_g;
		if(vert[0] < mins_0) {
			mins_0 = vert[0];
		} else if(vert[0] > maxs_0) {
			maxs_0 = vert[0];
		}
		if(vert[1] < mins_1) {
			mins_1 = vert[1];
		} else if(vert[1] > maxs_1) {
			maxs_1 = vert[1];
		}
		if(vert[2] < mins_2) {
			mins_2 = vert[2];
		} else if(vert[2] > maxs_2) {
			maxs_2 = vert[2];
		}
	}
	var x = Math.max(Math.abs(mins_0),Math.abs(maxs_0));
	var y = Math.max(Math.abs(mins_1),Math.abs(maxs_1));
	var z = Math.max(Math.abs(mins_2),Math.abs(maxs_2));
	var this1 = new Float32Array(3);
	var v = this1;
	v[0] = x;
	v[1] = y;
	v[2] = z;
	var v1 = v;
	loadmodel.radius = Math.sqrt(v1[0] * v1[0] + v1[1] * v1[1] + v1[2] * v1[2]);
};
quake_Mod_$Brush.LoadVertexes = function(loadmodel,view) {
	var fileofs = view.getUint32(28,true);
	var filelen = view.getUint32(32,true);
	if(filelen % 12 != 0) {
		quake_Sys.Error("Mod.LoadVisibility: funny lump size in " + loadmodel.name);
	}
	var count = filelen / 12 | 0;
	loadmodel.vertexes = [];
	var _g1 = 0;
	var _g = count;
	while(_g1 < _g) {
		var i = _g1++;
		var loadmodel1 = loadmodel.vertexes;
		var x = view.getFloat32(fileofs,true);
		var y = view.getFloat32(fileofs + 4,true);
		var z = view.getFloat32(fileofs + 8,true);
		var this1 = new Float32Array(3);
		var v = this1;
		v[0] = x;
		v[1] = y;
		v[2] = z;
		loadmodel1[i] = v;
		fileofs += 12;
	}
};
quake_Mod_$Brush.LoadEdges = function(loadmodel,view) {
	var fileofs = view.getUint32(100,true);
	var filelen = view.getUint32(104,true);
	if((filelen & 3) != 0) {
		quake_Sys.Error("Mod.LoadEdges: funny lump size in " + loadmodel.name);
	}
	var count = filelen >> 2;
	loadmodel.edges = [];
	var _g1 = 0;
	var _g = count;
	while(_g1 < _g) {
		var i = _g1++;
		loadmodel.edges[i] = [view.getUint16(fileofs,true),view.getUint16(fileofs + 2,true)];
		fileofs += 4;
	}
};
quake_Mod_$Brush.LoadSurfedges = function(loadmodel,view) {
	var fileofs = view.getUint32(108,true);
	var filelen = view.getUint32(112,true);
	var count = filelen >> 2;
	loadmodel.surfedges = [];
	var _g1 = 0;
	var _g = count;
	while(_g1 < _g) {
		var i = _g1++;
		loadmodel.surfedges[i] = view.getInt32(fileofs + (i << 2),true);
	}
};
quake_Mod_$Brush.LoadTextures = function(loadmodel,view) {
	var fileofs = view.getUint32(20,true);
	loadmodel.textures = [];
	var nummiptex = view.getUint32(fileofs,true);
	var dataofs = fileofs + 4;
	var _g1 = 0;
	var _g = nummiptex;
	while(_g1 < _g) {
		var i = _g1++;
		var miptexofs = view.getInt32(dataofs,true);
		dataofs += 4;
		if(miptexofs == -1) {
			loadmodel.textures[i] = quake_Render.notexture_mip;
			continue;
		}
		miptexofs += fileofs;
		var tx = new quake_MTexture();
		tx.name = quake_Q.memstr(new Uint8Array(view.buffer,miptexofs,16));
		tx.width = view.getUint32(miptexofs + 16,true);
		tx.height = view.getUint32(miptexofs + 20,true);
		if(tx.name.substring(0,3).toLowerCase() == "sky") {
			quake_Render.InitSky(new Uint8Array(view.buffer,miptexofs + view.getUint32(miptexofs + 24,true),32768));
			tx.texturenum = quake_Render.solidskytexture;
			quake_Render.skytexturenum = i;
			tx.sky = true;
		} else {
			var glt = quake_GL.LoadTexture(tx.name,tx.width,tx.height,new Uint8Array(view.buffer,miptexofs + view.getUint32(miptexofs + 24,true),tx.width * tx.height));
			tx.texturenum = glt.texnum;
			if(HxOverrides.cca(tx.name,0) == 42) {
				tx.turbulent = true;
			}
		}
		loadmodel.textures[i] = tx;
	}
	var _g11 = 0;
	var _g2 = nummiptex;
	while(_g11 < _g2) {
		var i1 = _g11++;
		var tx1 = loadmodel.textures[i1];
		if(HxOverrides.cca(tx1.name,0) != 43) {
			continue;
		}
		if(HxOverrides.cca(tx1.name,1) != 48) {
			continue;
		}
		var name = tx1.name.substring(2);
		tx1.anims = [i1];
		tx1.alternate_anims = [];
		var _g3 = 0;
		var _g21 = nummiptex;
		while(_g3 < _g21) {
			var j = _g3++;
			var tx2 = loadmodel.textures[j];
			if(HxOverrides.cca(tx2.name,0) != 43) {
				continue;
			}
			if(tx2.name.substring(2) != name) {
				continue;
			}
			var num = HxOverrides.cca(tx2.name,1);
			if(num == 48) {
				continue;
			}
			if(num >= 49 && num <= 57) {
				tx1.anims[num - 48] = j;
				tx2.anim_base = i1;
				tx2.anim_frame = num - 48;
				continue;
			}
			if(num >= 97) {
				num -= 32;
			}
			if(num >= 65 && num <= 74) {
				tx1.alternate_anims[num - 65] = j;
				tx2.anim_base = i1;
				tx2.anim_frame = num - 65;
				continue;
			}
			quake_Sys.Error("Bad animating texture " + tx1.name);
		}
		var _g31 = 0;
		var _g22 = tx1.anims.length;
		while(_g31 < _g22) {
			var j1 = _g31++;
			if(tx1.anims[j1] == null) {
				quake_Sys.Error("Missing frame " + j1 + " of " + tx1.name);
			}
		}
		var _g32 = 0;
		var _g23 = tx1.alternate_anims.length;
		while(_g32 < _g23) {
			var j2 = _g32++;
			if(tx1.alternate_anims[j2] == null) {
				quake_Sys.Error("Missing frame " + j2 + " of " + tx1.name);
			}
		}
		loadmodel.textures[i1] = tx1;
	}
	loadmodel.textures.push(quake_Render.notexture_mip);
};
quake_Mod_$Brush.LoadLighting = function(loadmodel,view) {
	var fileofs = view.getUint32(68,true);
	var filelen = view.getUint32(72,true);
	if(filelen == 0) {
		return;
	}
	loadmodel.lightdata = new Uint8Array(view.buffer.slice(fileofs,fileofs + filelen));
};
quake_Mod_$Brush.LoadPlanes = function(loadmodel,view) {
	var fileofs = view.getUint32(12,true);
	var filelen = view.getUint32(16,true);
	if(filelen % 20 != 0) {
		quake_Sys.Error("Mod.LoadPlanes: funny lump size in " + loadmodel.name);
	}
	var count = filelen / 20 | 0;
	loadmodel.planes = [];
	var _g1 = 0;
	var _g = count;
	while(_g1 < _g) {
		var i = _g1++;
		var out = new quake_Plane();
		var this1 = out.normal;
		var y = view.getFloat32(fileofs + 4,true);
		var z = view.getFloat32(fileofs + 8,true);
		this1[0] = view.getFloat32(fileofs,true);
		this1[1] = y;
		this1[2] = z;
		out.dist = view.getFloat32(fileofs + 12,true);
		out.type = view.getUint32(fileofs + 16,true);
		out.signbits = 0;
		if(out.normal[0] < 0) {
			++out.signbits;
		}
		if(out.normal[1] < 0) {
			out.signbits += 2;
		}
		if(out.normal[2] < 0) {
			out.signbits += 4;
		}
		loadmodel.planes[i] = out;
		fileofs += 20;
	}
};
quake_Mod_$Brush.LoadTexinfo = function(loadmodel,view) {
	var fileofs = view.getUint32(52,true);
	var filelen = view.getUint32(56,true);
	if(filelen % 40 != 0) {
		quake_Sys.Error("Mod.LoadTexinfo: funny lump size in " + loadmodel.name);
	}
	var count = filelen / 40 | 0;
	loadmodel.texinfo = [];
	var _g1 = 0;
	var _g = count;
	while(_g1 < _g) {
		var i = _g1++;
		var out = new quake_Texinfo([[view.getFloat32(fileofs,true),view.getFloat32(fileofs + 4,true),view.getFloat32(fileofs + 8,true),view.getFloat32(fileofs + 12,true)],[view.getFloat32(fileofs + 16,true),view.getFloat32(fileofs + 20,true),view.getFloat32(fileofs + 24,true),view.getFloat32(fileofs + 28,true)]],view.getUint32(fileofs + 32,true),view.getUint32(fileofs + 36,true));
		if(out.texture >= loadmodel.textures.length) {
			out.texture = loadmodel.textures.length - 1;
			out.flags = 0;
		}
		loadmodel.texinfo[i] = out;
		fileofs += 40;
	}
};
quake_Mod_$Brush.LoadFaces = function(loadmodel,view) {
	var fileofs = view.getUint32(60,true);
	var filelen = view.getUint32(64,true);
	if(filelen % 20 != 0) {
		quake_Sys.Error("Mod.LoadFaces: funny lump size in " + loadmodel.name);
	}
	var count = filelen / 20 | 0;
	loadmodel.firstface = 0;
	loadmodel.numfaces = count;
	loadmodel.faces = [];
	var _g1 = 0;
	var _g = count;
	while(_g1 < _g) {
		var i = _g1++;
		var styles = new Uint8Array(view.buffer,fileofs + 12,4);
		var out = new quake_Surface();
		out.plane = loadmodel.planes[view.getUint16(fileofs,true)];
		out.firstedge = view.getUint16(fileofs + 4,true);
		out.numedges = view.getUint16(fileofs + 8,true);
		out.texinfo = view.getUint16(fileofs + 10,true);
		out.styles = [];
		out.lightofs = view.getInt32(fileofs + 16,true);
		if(styles[0] != 255) {
			out.styles[0] = styles[0];
		}
		if(styles[1] != 255) {
			out.styles[1] = styles[1];
		}
		if(styles[2] != 255) {
			out.styles[2] = styles[2];
		}
		if(styles[3] != 255) {
			out.styles[3] = styles[3];
		}
		var mins_0 = 999999.0;
		var mins_1 = 999999.0;
		var maxs_0 = -99999.0;
		var maxs_1 = -99999.0;
		var tex = loadmodel.texinfo[out.texinfo];
		out.texture = tex.texture;
		var _g3 = 0;
		var _g2 = out.numedges;
		while(_g3 < _g2) {
			var j = _g3++;
			var e = loadmodel.surfedges[out.firstedge + j];
			var v;
			if(e >= 0) {
				v = loadmodel.vertexes[loadmodel.edges[e][0]];
			} else {
				v = loadmodel.vertexes[loadmodel.edges[-e][1]];
			}
			var a = tex.vecs[0];
			var this1 = new Float32Array(3);
			var v1 = this1;
			v1[0] = a[0];
			v1[1] = a[1];
			v1[2] = a[2];
			var v2 = v1;
			var val = v[0] * v2[0] + v[1] * v2[1] + v[2] * v2[2] + tex.vecs[0][3];
			if(val < mins_0) {
				mins_0 = val;
			}
			if(val > maxs_0) {
				maxs_0 = val;
			}
			var a1 = tex.vecs[1];
			var this2 = new Float32Array(3);
			var v3 = this2;
			v3[0] = a1[0];
			v3[1] = a1[1];
			v3[2] = a1[2];
			var v21 = v3;
			val = v[0] * v21[0] + v[1] * v21[1] + v[2] * v21[2] + tex.vecs[1][3];
			if(val < mins_1) {
				mins_1 = val;
			}
			if(val > maxs_1) {
				maxs_1 = val;
			}
		}
		out.texturemins = [Math.floor(mins_0 / 16) * 16,Math.floor(mins_1 / 16) * 16];
		out.extents = [Math.ceil(maxs_0 / 16) * 16 - out.texturemins[0],Math.ceil(maxs_1 / 16) * 16 - out.texturemins[1]];
		if(loadmodel.textures[tex.texture].turbulent) {
			out.turbulent = true;
		} else if(loadmodel.textures[tex.texture].sky) {
			out.sky = true;
		}
		loadmodel.faces[i] = out;
		fileofs += 20;
	}
};
quake_Mod_$Brush.LoadMarksurfaces = function(loadmodel,view) {
	var fileofs = view.getUint32(92,true);
	var filelen = view.getUint32(96,true);
	var count = filelen >> 1;
	loadmodel.marksurfaces = [];
	var _g1 = 0;
	var _g = count;
	while(_g1 < _g) {
		var i = _g1++;
		var j = view.getUint16(fileofs + (i << 1),true);
		if(j > loadmodel.faces.length) {
			quake_Sys.Error("Mod.LoadMarksurfaces: bad surface number");
		}
		loadmodel.marksurfaces[i] = j;
	}
};
quake_Mod_$Brush.LoadVisibility = function(loadmodel,view) {
	var fileofs = view.getUint32(36,true);
	var filelen = view.getUint32(40,true);
	if(filelen == 0) {
		return;
	}
	loadmodel.visdata = new Uint8Array(view.buffer.slice(fileofs,fileofs + filelen));
};
quake_Mod_$Brush.LoadLeafs = function(loadmodel,view) {
	var fileofs = view.getUint32(84,true);
	var filelen = view.getUint32(88,true);
	if(filelen % 28 != 0) {
		quake_Sys.Error("Mod.LoadLeafs: funny lump size in " + loadmodel.name);
	}
	var count = filelen / 28 | 0;
	loadmodel.leafs = [];
	var _g1 = 0;
	var _g = count;
	while(_g1 < _g) {
		var i = _g1++;
		var out = new quake_Leaf();
		out.num = i;
		out.contents = view.getInt32(fileofs,true);
		out.visofs = view.getInt32(fileofs + 4,true);
		var x = view.getInt16(fileofs + 8,true);
		var y = view.getInt16(fileofs + 10,true);
		var z = view.getInt16(fileofs + 12,true);
		var this1 = new Float32Array(3);
		var v = this1;
		v[0] = x;
		v[1] = y;
		v[2] = z;
		out.mins = v;
		var x1 = view.getInt16(fileofs + 14,true);
		var y1 = view.getInt16(fileofs + 16,true);
		var z1 = view.getInt16(fileofs + 18,true);
		var this2 = new Float32Array(3);
		var v1 = this2;
		v1[0] = x1;
		v1[1] = y1;
		v1[2] = z1;
		out.maxs = v1;
		out.firstmarksurface = view.getUint16(fileofs + 20,true);
		out.nummarksurfaces = view.getUint16(fileofs + 22,true);
		out.ambient_level = [view.getUint8(fileofs + 24),view.getUint8(fileofs + 25),view.getUint8(fileofs + 26),view.getUint8(fileofs + 27)];
		out.cmds = [];
		out.skychain = 0;
		out.waterchain = 0;
		loadmodel.leafs.push(out);
		fileofs += 28;
	}
};
quake_Mod_$Brush.LoadNodes = function(loadmodel,view) {
	var fileofs = view.getUint32(44,true);
	var filelen = view.getUint32(48,true);
	if(filelen == 0 || filelen % 24 != 0) {
		quake_Sys.Error("Mod.LoadNodes: funny lump size in " + loadmodel.name);
	}
	var count = filelen / 24 | 0;
	loadmodel.nodes = [];
	var this1 = new Array(count);
	var children = this1;
	var _g1 = 0;
	var _g = count;
	while(_g1 < _g) {
		var i = _g1++;
		var n = loadmodel.nodes[i] = new quake_Node();
		n.num = i;
		n.contents = 0;
		n.planenum = view.getUint32(fileofs,true);
		children[i] = [view.getInt16(fileofs + 4,true),view.getInt16(fileofs + 6,true)];
		var x = view.getInt16(fileofs + 8,true);
		var y = view.getInt16(fileofs + 10,true);
		var z = view.getInt16(fileofs + 12,true);
		var this2 = new Float32Array(3);
		var v = this2;
		v[0] = x;
		v[1] = y;
		v[2] = z;
		n.mins = v;
		var x1 = view.getInt16(fileofs + 14,true);
		var y1 = view.getInt16(fileofs + 16,true);
		var z1 = view.getInt16(fileofs + 18,true);
		var this3 = new Float32Array(3);
		var v1 = this3;
		v1[0] = x1;
		v1[1] = y1;
		v1[2] = z1;
		n.maxs = v1;
		n.firstface = view.getUint16(fileofs + 20,true);
		n.numfaces = view.getUint16(fileofs + 22,true);
		n.cmds = [];
		fileofs += 24;
	}
	var _g11 = 0;
	var _g2 = count;
	while(_g11 < _g2) {
		var i1 = _g11++;
		var out = loadmodel.nodes[i1];
		out.plane = loadmodel.planes[out.planenum];
		var children1 = children[i1];
		if(children1[0] >= 0) {
			out.child0 = loadmodel.nodes[children1[0]];
		} else {
			out.child0 = loadmodel.leafs[-1 - children1[0]];
		}
		if(children1[1] >= 0) {
			out.child1 = loadmodel.nodes[children1[1]];
		} else {
			out.child1 = loadmodel.leafs[-1 - children1[1]];
		}
	}
	quake_Mod_$Brush.SetParent(loadmodel.nodes[0],null);
};
quake_Mod_$Brush.SetParent = function(node,parent) {
	node.parent = parent;
	if(node.contents < 0) {
		return;
	}
	quake_Mod_$Brush.SetParent(node.child0,node);
	quake_Mod_$Brush.SetParent(node.child1,node);
};
quake_Mod_$Brush.LoadClipnodes = function(loadmodel,view) {
	var fileofs = view.getUint32(76,true);
	var filelen = view.getUint32(80,true);
	var count = filelen >> 3;
	loadmodel.clipnodes = [];
	loadmodel.hulls = [];
	var loadmodel1 = loadmodel.hulls;
	var h = new quake_Hull();
	h.clipnodes = loadmodel.clipnodes;
	h.firstclipnode = 0;
	h.lastclipnode = count - 1;
	h.planes = loadmodel.planes;
	var this1 = new Float32Array(3);
	var v = this1;
	v[0] = -16.0;
	v[1] = -16.0;
	v[2] = -24.0;
	h.clip_mins = v;
	var this2 = new Float32Array(3);
	var v1 = this2;
	v1[0] = 16.0;
	v1[1] = 16.0;
	v1[2] = 32.0;
	h.clip_maxs = v1;
	loadmodel1[1] = h;
	var loadmodel2 = loadmodel.hulls;
	var h1 = new quake_Hull();
	h1.clipnodes = loadmodel.clipnodes;
	h1.firstclipnode = 0;
	h1.lastclipnode = count - 1;
	h1.planes = loadmodel.planes;
	var this3 = new Float32Array(3);
	var v2 = this3;
	v2[0] = -32.0;
	v2[1] = -32.0;
	v2[2] = -24.0;
	h1.clip_mins = v2;
	var this4 = new Float32Array(3);
	var v3 = this4;
	v3[0] = 32.0;
	v3[1] = 32.0;
	v3[2] = 64.0;
	h1.clip_maxs = v3;
	loadmodel2[2] = h1;
	var _g1 = 0;
	var _g = count;
	while(_g1 < _g) {
		var i = _g1++;
		var n = new quake_ClipNode();
		n.planenum = view.getUint32(fileofs,true);
		n.child0 = view.getInt16(fileofs + 4,true);
		n.child1 = view.getInt16(fileofs + 6,true);
		loadmodel.clipnodes.push(n);
		fileofs += 8;
	}
};
quake_Mod_$Brush.MakeHull0 = function(loadmodel) {
	var clipnodes = [];
	var h = new quake_Hull();
	h.clipnodes = clipnodes;
	h.lastclipnode = loadmodel.nodes.length - 1;
	h.planes = loadmodel.planes;
	var this1 = new Float32Array(3);
	h.clip_mins = this1;
	var this2 = new Float32Array(3);
	h.clip_maxs = this2;
	var hull = h;
	var _g1 = 0;
	var _g = loadmodel.nodes.length;
	while(_g1 < _g) {
		var i = _g1++;
		var node = loadmodel.nodes[i];
		var out = new quake_ClipNode();
		out.planenum = node.planenum;
		var child = node.child0;
		out.child0 = child.contents < 0 ? child.contents : child.num;
		child = node.child1;
		out.child1 = child.contents < 0 ? child.contents : child.num;
		clipnodes[i] = out;
	}
	loadmodel.hulls[0] = hull;
};
quake_Mod_$Brush.LoadEntities = function(loadmodel,view) {
	var fileofs = view.getUint32(4,true);
	var filelen = view.getUint32(8,true);
	loadmodel.entities = quake_Q.memstr(new Uint8Array(view.buffer,fileofs,filelen));
};
quake_Mod_$Brush.LoadSubmodels = function(loadmodel,view) {
	var fileofs = view.getUint32(116,true);
	var filelen = view.getUint32(120,true);
	var count = filelen >> 6;
	if(count == 0) {
		quake_Sys.Error("Mod.LoadSubmodels: funny lump size in " + loadmodel.name);
	}
	loadmodel.submodels = [];
	var x = view.getFloat32(fileofs,true) - 1.0;
	var y = view.getFloat32(fileofs + 4,true) - 1.0;
	var z = view.getFloat32(fileofs + 8,true) - 1.0;
	var this1 = new Float32Array(3);
	var v = this1;
	v[0] = x;
	v[1] = y;
	v[2] = z;
	loadmodel.mins = v;
	var x1 = view.getFloat32(fileofs + 12,true) + 1.0;
	var y1 = view.getFloat32(fileofs + 16,true) + 1.0;
	var z1 = view.getFloat32(fileofs + 20,true) + 1.0;
	var this2 = new Float32Array(3);
	var v1 = this2;
	v1[0] = x1;
	v1[1] = y1;
	v1[2] = z1;
	loadmodel.maxs = v1;
	loadmodel.hulls[0].firstclipnode = view.getUint32(fileofs + 36,true);
	loadmodel.hulls[1].firstclipnode = view.getUint32(fileofs + 40,true);
	loadmodel.hulls[2].firstclipnode = view.getUint32(fileofs + 44,true);
	fileofs += 64;
	var clipnodes = loadmodel.hulls[0].clipnodes;
	var _g1 = 1;
	var _g = count;
	while(_g1 < _g) {
		var i = _g1++;
		var out = quake_Mod.FindName("*" + i);
		out.needload = false;
		out.type = 0;
		out.submodel = true;
		var x2 = view.getFloat32(fileofs,true) - 1.0;
		var y2 = view.getFloat32(fileofs + 4,true) - 1.0;
		var z2 = view.getFloat32(fileofs + 8,true) - 1.0;
		var this3 = new Float32Array(3);
		var v2 = this3;
		v2[0] = x2;
		v2[1] = y2;
		v2[2] = z2;
		out.mins = v2;
		var x3 = view.getFloat32(fileofs + 12,true) + 1.0;
		var y3 = view.getFloat32(fileofs + 16,true) + 1.0;
		var z3 = view.getFloat32(fileofs + 20,true) + 1.0;
		var this4 = new Float32Array(3);
		var v3 = this4;
		v3[0] = x3;
		v3[1] = y3;
		v3[2] = z3;
		out.maxs = v3;
		var x4 = view.getFloat32(fileofs + 24,true);
		var y4 = view.getFloat32(fileofs + 28,true);
		var z4 = view.getFloat32(fileofs + 32,true);
		var this5 = new Float32Array(3);
		var v4 = this5;
		v4[0] = x4;
		v4[1] = y4;
		v4[2] = z4;
		out.origin = v4;
		var h = new quake_Hull();
		h.clipnodes = clipnodes;
		h.firstclipnode = view.getUint32(fileofs + 36,true);
		h.lastclipnode = loadmodel.nodes.length - 1;
		h.planes = loadmodel.planes;
		var this6 = new Float32Array(3);
		h.clip_mins = this6;
		var this7 = new Float32Array(3);
		h.clip_maxs = this7;
		var h1 = new quake_Hull();
		h1.clipnodes = loadmodel.clipnodes;
		h1.firstclipnode = view.getUint32(fileofs + 40,true);
		h1.lastclipnode = loadmodel.clipnodes.length - 1;
		h1.planes = loadmodel.planes;
		var this8 = new Float32Array(3);
		var v5 = this8;
		v5[0] = -16.0;
		v5[1] = -16.0;
		v5[2] = -24.0;
		h1.clip_mins = v5;
		var this9 = new Float32Array(3);
		var v6 = this9;
		v6[0] = 16.0;
		v6[1] = 16.0;
		v6[2] = 32.0;
		h1.clip_maxs = v6;
		var h2 = new quake_Hull();
		h2.clipnodes = loadmodel.clipnodes;
		h2.firstclipnode = view.getUint32(fileofs + 44,true);
		h2.lastclipnode = loadmodel.clipnodes.length - 1;
		h2.planes = loadmodel.planes;
		var this10 = new Float32Array(3);
		var v7 = this10;
		v7[0] = -32.0;
		v7[1] = -32.0;
		v7[2] = -24.0;
		h2.clip_mins = v7;
		var this11 = new Float32Array(3);
		var v8 = this11;
		v8[0] = 32.0;
		v8[1] = 32.0;
		v8[2] = 64.0;
		h2.clip_maxs = v8;
		out.hulls = [h,h1,h2];
		out.textures = loadmodel.textures;
		out.lightdata = loadmodel.lightdata;
		out.faces = loadmodel.faces;
		out.firstface = view.getUint32(fileofs + 56,true);
		out.numfaces = view.getUint32(fileofs + 60,true);
		loadmodel.submodels[i - 1] = out;
		fileofs += 64;
	}
};
var quake_Mod_$Sprite = function() { };
$hxClasses["quake.Mod_Sprite"] = quake_Mod_$Sprite;
quake_Mod_$Sprite.__name__ = true;
quake_Mod_$Sprite.LoadSpriteModel = function(loadmodel,model) {
	var version = model.getUint32(4,true);
	if(version != 1) {
		quake_Sys.Error(loadmodel.name + " has wrong version number (" + version + " should be " + 1 + ")");
	}
	loadmodel.type = 1;
	loadmodel.oriented = model.getUint32(8,true) == 3;
	loadmodel.boundingradius = model.getFloat32(12,true);
	loadmodel.width = model.getUint32(16,true);
	loadmodel.height = model.getUint32(20,true);
	loadmodel.numframes = model.getUint32(24,true);
	if(loadmodel.numframes == 0) {
		quake_Sys.Error("model " + loadmodel.name + " has no frames");
	}
	loadmodel.random = model.getUint32(32,true) == 1;
	var x = loadmodel.width * -0.5;
	var y = loadmodel.width * -0.5;
	var z = loadmodel.height * -0.5;
	var this1 = new Float32Array(3);
	var v = this1;
	v[0] = x;
	v[1] = y;
	v[2] = z;
	loadmodel.mins = v;
	var x1 = loadmodel.width * 0.5;
	var y1 = loadmodel.width * 0.5;
	var z1 = loadmodel.height * 0.5;
	var this2 = new Float32Array(3);
	var v1 = this2;
	v1[0] = x1;
	v1[1] = y1;
	v1[2] = z1;
	loadmodel.maxs = v1;
	loadmodel.frames = [];
	var inframe = 36;
	var frame;
	var group;
	var numframes;
	var _g1 = 0;
	var _g = loadmodel.numframes;
	while(_g1 < _g) {
		var i = _g1++;
		inframe += 4;
		if(model.getUint32(inframe - 4,true) == 0) {
			frame = new quake_MFrame(false);
			loadmodel.frames[i] = frame;
			inframe = quake_Mod_$Sprite.LoadSpriteFrame(loadmodel.name + "_" + i,model,inframe,frame);
		} else {
			group = new quake_MFrame(true);
			group.frames = [];
			loadmodel.frames[i] = group;
			numframes = model.getUint32(inframe,true);
			inframe += 4;
			var _g3 = 0;
			var _g2 = numframes;
			while(_g3 < _g2) {
				var j = _g3++;
				var f = new quake_MFrame(false);
				f.interval = model.getFloat32(inframe,true);
				group.frames[j] = f;
				if(group.frames[j].interval <= 0.0) {
					quake_Sys.Error("Mod.LoadSpriteModel: interval<=0");
				}
				inframe += 4;
			}
			var _g31 = 0;
			var _g21 = numframes;
			while(_g31 < _g21) {
				var j1 = _g31++;
				inframe = quake_Mod_$Sprite.LoadSpriteFrame(loadmodel.name + "_" + i + "_" + j1,model,inframe,group.frames[j1]);
			}
		}
	}
};
quake_Mod_$Sprite.LoadSpriteFrame = function(identifier,model,inframe,frame) {
	frame.origin = [model.getInt32(inframe,true),-model.getInt32(inframe + 4,true)];
	frame.width = model.getUint32(inframe + 8,true);
	frame.height = model.getUint32(inframe + 12,true);
	var size = frame.width * frame.height;
	var _g = 0;
	var _g1 = quake_GL.textures;
	while(_g < _g1.length) {
		var glt = _g1[_g];
		++_g;
		if(glt.identifier == identifier) {
			if(frame.width != glt.width || frame.height != glt.height) {
				quake_Sys.Error("Mod.LoadSpriteFrame: cache mismatch");
			}
			frame.texturenum = glt.texnum;
			return inframe + 16 + frame.width * frame.height;
		}
	}
	var data = new Uint8Array(model.buffer,inframe + 16,size);
	var scaled_width = frame.width;
	var scaled_height = frame.height;
	if((frame.width & frame.width - 1) != 0 || (frame.height & frame.height - 1) != 0) {
		--scaled_width;
		scaled_width |= scaled_width >> 1;
		scaled_width |= scaled_width >> 2;
		scaled_width |= scaled_width >> 4;
		scaled_width |= scaled_width >> 8;
		scaled_width |= scaled_width >> 16;
		++scaled_width;
		--scaled_height;
		scaled_height |= scaled_height >> 1;
		scaled_height |= scaled_height >> 2;
		scaled_height |= scaled_height >> 4;
		scaled_height |= scaled_height >> 8;
		scaled_height |= scaled_height >> 16;
		++scaled_height;
	}
	if(scaled_width > quake_GL.maxtexturesize) {
		scaled_width = quake_GL.maxtexturesize;
	}
	if(scaled_height > quake_GL.maxtexturesize) {
		scaled_height = quake_GL.maxtexturesize;
	}
	if(scaled_width != frame.width || scaled_height != frame.height) {
		size = scaled_width * scaled_height;
		data = quake_GL.ResampleTexture(data,frame.width,frame.height,scaled_width,scaled_height);
	}
	var trans = new ArrayBuffer(size << 2);
	var trans32 = new Uint32Array(trans);
	var _g11 = 0;
	var _g2 = size;
	while(_g11 < _g2) {
		var i = _g11++;
		if(data[i] != 255) {
			trans32[i] = quake_COM.LittleLong(quake_VID.d_8to24table[data[i]] + -16777216);
		}
	}
	var glt1 = new quake_GLTexture(identifier,frame.width,frame.height);
	quake_GL.Bind(0,glt1.texnum);
	quake_GL.gl.texImage2D(3553,0,6408,scaled_width,scaled_height,0,6408,5121,new Uint8Array(trans));
	quake_GL.gl.generateMipmap(3553);
	quake_GL.gl.texParameterf(3553,10241,quake_GL.filter_min);
	quake_GL.gl.texParameterf(3553,10240,quake_GL.filter_max);
	quake_GL.textures.push(glt1);
	frame.texturenum = glt1.texnum;
	return inframe + 16 + frame.width * frame.height;
};
var quake_NETSocketBase = function(address) {
	this.connecttime = quake_NET.time;
	this.lastMessageTime = quake_NET.time;
	this.driver = quake_NET.driverlevel;
	this.address = address;
};
$hxClasses["quake.NETSocketBase"] = quake_NETSocketBase;
quake_NETSocketBase.__name__ = true;
quake_NETSocketBase.prototype = {
	disconnected: null
	,address: null
	,connecttime: null
	,lastMessageTime: null
	,driver: null
	,__class__: quake_NETSocketBase
};
var quake_INETSocket = function() { };
$hxClasses["quake.INETSocket"] = quake_INETSocket;
quake_INETSocket.__name__ = true;
quake_INETSocket.prototype = {
	disconnected: null
	,driver: null
	,lastMessageTime: null
	,connecttime: null
	,address: null
	,Close: null
	,GetMessage: null
	,SendMessage: null
	,SendUnreliableMessage: null
	,CanSendMessage: null
	,__class__: quake_INETSocket
};
var quake_NET = function() { };
$hxClasses["quake.NET"] = quake_NET;
quake_NET.__name__ = true;
quake_NET.AddNewSocket = function(sock) {
	var i = 0;
	while(i < quake_NET.activeSockets.length) {
		if(quake_NET.activeSockets[i].disconnected) {
			break;
		}
		++i;
	}
	quake_NET.activeSockets[i] = sock;
};
quake_NET.Connect = function(host) {
	quake_NET.time = new Date().getTime() * 0.001 - quake_Sys.oldtime;
	if(host == "local") {
		quake_NET.driverlevel = 0;
		return quake_NET_$Loop.Connect(host);
	}
	var _g1 = 1;
	var _g = quake_NET.drivers.length;
	while(_g1 < _g) {
		var i = _g1++;
		quake_NET.driverlevel = i;
		var dfunc = quake_NET.drivers[quake_NET.driverlevel];
		if(!dfunc.initialized) {
			continue;
		}
		var ret = dfunc.Connect(host);
		if(ret == 0) {
			quake_CL.cls.state = 1;
			quake_Console.Print("trying...\n");
			quake_NET.start_time = quake_NET.time;
			quake_NET.reps = 0;
			throw new js__$Boot_HaxeError("NET.Connect");
		}
		if(ret != null) {
			return ret;
		}
	}
	return null;
};
quake_NET.CheckForResend = function() {
	quake_NET.time = new Date().getTime() * 0.001 - quake_Sys.oldtime;
	var dfunc = quake_NET.drivers[quake_NET.newsocket.driver];
	if(quake_NET.reps <= 2) {
		if(quake_NET.time - quake_NET.start_time >= 2.5 * (quake_NET.reps + 1)) {
			quake_Console.Print("still trying...\n");
			++quake_NET.reps;
		}
	} else if(quake_NET.reps == 3) {
		if(quake_NET.time - quake_NET.start_time >= 10.0) {
			quake_NET.Close(quake_NET.newsocket);
			quake_CL.cls.state = 0;
			quake_Console.Print("No Response\n");
			quake_Host.Error("NET.CheckForResend: connect failed\n");
		}
	}
	var ret = dfunc.CheckForResend();
	if(ret == 1) {
		quake_NET.newsocket.disconnected = false;
		quake_CL.Connect(quake_NET.newsocket);
	} else if(ret == -1) {
		quake_NET.newsocket.disconnected = false;
		quake_NET.Close(quake_NET.newsocket);
		quake_CL.cls.state = 0;
		quake_Console.Print("Network Error\n");
		quake_Host.Error("NET.CheckForResend: connect failed\n");
	}
};
quake_NET.CheckNewConnections = function() {
	quake_NET.time = new Date().getTime() * 0.001 - quake_Sys.oldtime;
	var _g1 = 0;
	var _g = quake_NET.drivers.length;
	while(_g1 < _g) {
		var i = _g1++;
		quake_NET.driverlevel = i;
		var dfunc = quake_NET.drivers[quake_NET.driverlevel];
		if(!dfunc.initialized) {
			continue;
		}
		var ret = dfunc.CheckNewConnections();
		if(ret != null) {
			return ret;
		}
	}
	return null;
};
quake_NET.Close = function(sock) {
	if(sock == null) {
		return;
	}
	if(sock.disconnected) {
		return;
	}
	quake_NET.time = new Date().getTime() * 0.001 - quake_Sys.oldtime;
	sock.Close();
	sock.disconnected = true;
};
quake_NET.GetMessage = function(sock) {
	if(sock == null) {
		return -1;
	}
	if(sock.disconnected) {
		quake_Console.Print("NET.GetMessage: disconnected socket\n");
		return -1;
	}
	quake_NET.time = new Date().getTime() * 0.001 - quake_Sys.oldtime;
	var ret = sock.GetMessage();
	if(sock.driver != 0) {
		if(ret == 0) {
			if(quake_NET.time - sock.lastMessageTime > quake_NET.messagetimeout.value) {
				quake_NET.Close(sock);
				return -1;
			}
		} else if(ret > 0) {
			sock.lastMessageTime = quake_NET.time;
		}
	}
	return ret;
};
quake_NET.SendMessage = function(sock,data) {
	if(sock == null) {
		return -1;
	}
	if(sock.disconnected) {
		quake_Console.Print("NET.SendMessage: disconnected socket\n");
		return -1;
	}
	quake_NET.time = new Date().getTime() * 0.001 - quake_Sys.oldtime;
	return sock.SendMessage(data);
};
quake_NET.SendUnreliableMessage = function(sock,data) {
	if(sock == null) {
		return -1;
	}
	if(sock.disconnected) {
		quake_Console.Print("NET.SendUnreliableMessage: disconnected socket\n");
		return -1;
	}
	quake_NET.time = new Date().getTime() * 0.001 - quake_Sys.oldtime;
	return sock.SendUnreliableMessage(data);
};
quake_NET.CanSendMessage = function(sock) {
	if(sock == null) {
		return false;
	}
	if(sock.disconnected) {
		return false;
	}
	quake_NET.time = new Date().getTime() * 0.001 - quake_Sys.oldtime;
	return sock.CanSendMessage();
};
quake_NET.SendToAll = function(data) {
	var count = 0;
	var state1 = [];
	var state2 = [];
	var _g1 = 0;
	var _g = quake_SV.svs.maxclients;
	while(_g1 < _g) {
		var i = _g1++;
		quake_Host.client = quake_SV.svs.clients[i];
		if(quake_Host.client.netconnection == null) {
			continue;
		}
		if(!quake_Host.client.active) {
			state1[i] = state2[i] = true;
			continue;
		}
		if(quake_Host.client.netconnection.driver == 0) {
			quake_NET.SendMessage(quake_Host.client.netconnection,data);
			state1[i] = state2[i] = true;
			continue;
		}
		++count;
		state1[i] = state2[i] = false;
	}
	var start = new Date().getTime() * 0.001 - quake_Sys.oldtime;
	while(count != 0) {
		count = 0;
		var _g11 = 0;
		var _g2 = quake_SV.svs.maxclients;
		while(_g11 < _g2) {
			var i1 = _g11++;
			quake_Host.client = quake_SV.svs.clients[i1];
			if(!state1[i1]) {
				if(quake_NET.CanSendMessage(quake_Host.client.netconnection)) {
					state1[i1] = true;
					quake_NET.SendMessage(quake_Host.client.netconnection,data);
				} else {
					quake_NET.GetMessage(quake_Host.client.netconnection);
				}
				++count;
				continue;
			}
			if(!state2[i1]) {
				if(quake_NET.CanSendMessage(quake_Host.client.netconnection)) {
					state2[i1] = true;
				} else {
					quake_NET.GetMessage(quake_Host.client.netconnection);
				}
				++count;
			}
		}
		if(new Date().getTime() * 0.001 - quake_Sys.oldtime - start > 5.0) {
			return count;
		}
	}
	return count;
};
quake_NET.Init = function() {
	quake_NET.time = new Date().getTime() * 0.001 - quake_Sys.oldtime;
	quake_NET.messagetimeout = quake_Cvar.RegisterVariable("net_messagetimeout","300");
	quake_NET.hostname = quake_Cvar.RegisterVariable("hostname","UNNAMED");
	quake_NET.drivers = [quake_NET_$Loop,quake_NET_$WEBS];
	var _g1 = 0;
	var _g = quake_NET.drivers.length;
	while(_g1 < _g) {
		var i = _g1++;
		quake_NET.driverlevel = i;
		quake_NET.drivers[quake_NET.driverlevel].initialized = quake_NET.drivers[quake_NET.driverlevel].Init();
	}
};
quake_NET.Shutdown = function() {
	quake_NET.time = new Date().getTime() * 0.001 - quake_Sys.oldtime;
	var _g1 = 0;
	var _g = quake_NET.activeSockets.length;
	while(_g1 < _g) {
		var i = _g1++;
		quake_NET.Close(quake_NET.activeSockets[i]);
	}
};
var quake__$NET_$Loop_LoopNETSocket = function(address) {
	quake_NETSocketBase.call(this,address);
	this.receiveMessage = new Uint8Array(new ArrayBuffer(8192));
};
$hxClasses["quake._NET_Loop.LoopNETSocket"] = quake__$NET_$Loop_LoopNETSocket;
quake__$NET_$Loop_LoopNETSocket.__name__ = true;
quake__$NET_$Loop_LoopNETSocket.__interfaces__ = [quake_INETSocket];
quake__$NET_$Loop_LoopNETSocket.__super__ = quake_NETSocketBase;
quake__$NET_$Loop_LoopNETSocket.prototype = $extend(quake_NETSocketBase.prototype,{
	receiveMessage: null
	,receiveMessageLength: null
	,canSend: null
	,other_side: null
	,Close: function() {
		if(this.other_side != null) {
			this.other_side.other_side = null;
		}
		this.receiveMessageLength = 0;
		this.canSend = false;
		if(this == quake_NET_$Loop.client) {
			quake_NET_$Loop.client = null;
		} else {
			quake_NET_$Loop.server = null;
		}
	}
	,GetMessage: function() {
		if(this.receiveMessageLength == 0) {
			return 0;
		}
		var ret = this.receiveMessage[0];
		var length = this.receiveMessage[1] + (this.receiveMessage[2] << 8);
		if(length > quake_NET.message.data.byteLength) {
			quake_Sys.Error("GetMessage: overflow");
		}
		quake_NET.message.cursize = length;
		new Uint8Array(quake_NET.message.data).set(this.receiveMessage.subarray(3,length + 3));
		this.receiveMessageLength -= length;
		if(this.receiveMessageLength >= 4) {
			var _g1 = 0;
			var _g = this.receiveMessageLength;
			while(_g1 < _g) {
				var i = _g1++;
				this.receiveMessage[i] = this.receiveMessage[length + 3 + i];
			}
		}
		this.receiveMessageLength -= 3;
		if(this.other_side != null && ret == 1) {
			this.other_side.canSend = true;
		}
		return ret;
	}
	,SendMessage: function(data) {
		if(this.other_side == null) {
			return -1;
		}
		var bufferLength = this.other_side.receiveMessageLength;
		this.other_side.receiveMessageLength += data.cursize + 3;
		if(this.other_side.receiveMessageLength > 8192) {
			quake_Sys.Error("SendMessage: overflow");
		}
		var buffer = this.other_side.receiveMessage;
		buffer[bufferLength] = 1;
		buffer[bufferLength + 1] = data.cursize & 255;
		buffer[bufferLength + 2] = data.cursize >> 8;
		buffer.set(new Uint8Array(data.data,0,data.cursize),bufferLength + 3);
		this.canSend = false;
		return 1;
	}
	,SendUnreliableMessage: function(data) {
		if(this.other_side == null) {
			return -1;
		}
		var bufferLength = this.other_side.receiveMessageLength;
		this.other_side.receiveMessageLength += data.cursize + 3;
		if(this.other_side.receiveMessageLength > 8192) {
			quake_Sys.Error("SendMessage: overflow");
		}
		var buffer = this.other_side.receiveMessage;
		buffer[bufferLength] = 2;
		buffer[bufferLength + 1] = data.cursize & 255;
		buffer[bufferLength + 2] = data.cursize >> 8;
		buffer.set(new Uint8Array(data.data,0,data.cursize),bufferLength + 3);
		return 1;
	}
	,CanSendMessage: function() {
		if(this.other_side != null) {
			return this.canSend;
		}
		return false;
	}
	,__class__: quake__$NET_$Loop_LoopNETSocket
});
var quake_NET_$Loop = function() { };
$hxClasses["quake.NET_Loop"] = quake_NET_$Loop;
quake_NET_$Loop.__name__ = true;
quake_NET_$Loop.Init = function() {
	return true;
};
quake_NET_$Loop.Connect = function(host) {
	if(host != "local") {
		return null;
	}
	quake_NET_$Loop.localconnectpending = true;
	if(quake_NET_$Loop.client == null) {
		quake_NET_$Loop.client = new quake__$NET_$Loop_LoopNETSocket("localhost");
	}
	quake_NET_$Loop.client.receiveMessageLength = 0;
	quake_NET_$Loop.client.canSend = true;
	if(quake_NET_$Loop.server == null) {
		quake_NET_$Loop.server = new quake__$NET_$Loop_LoopNETSocket("LOCAL");
	}
	quake_NET_$Loop.server.receiveMessageLength = 0;
	quake_NET_$Loop.server.canSend = true;
	quake_NET_$Loop.client.other_side = quake_NET_$Loop.server;
	quake_NET_$Loop.server.other_side = quake_NET_$Loop.client;
	quake_NET.AddNewSocket(quake_NET_$Loop.client);
	quake_NET.AddNewSocket(quake_NET_$Loop.server);
	return quake_NET_$Loop.client;
};
quake_NET_$Loop.CheckNewConnections = function() {
	if(!quake_NET_$Loop.localconnectpending) {
		return null;
	}
	quake_NET_$Loop.localconnectpending = false;
	quake_NET_$Loop.server.receiveMessageLength = 0;
	quake_NET_$Loop.server.canSend = true;
	quake_NET_$Loop.client.receiveMessageLength = 0;
	quake_NET_$Loop.client.canSend = true;
	return quake_NET_$Loop.server;
};
quake_NET_$Loop.CheckForResend = function() {
	throw new js__$Boot_HaxeError("Not implemented");
};
var quake__$NET_$WEBS_WEBSNETSocket = function(address) {
	quake_NETSocketBase.call(this,address);
	this.disconnected = true;
	this.receiveMessage = [];
	this.native_socket = new WebSocket(address,"quake");
	this.native_socket.data_socket = this;
	this.native_socket.binaryType = "arraybuffer";
	this.native_socket.onerror = $bind(this,this.OnError);
	this.native_socket.onmessage = $bind(this,this.OnMessage);
};
$hxClasses["quake._NET_WEBS.WEBSNETSocket"] = quake__$NET_$WEBS_WEBSNETSocket;
quake__$NET_$WEBS_WEBSNETSocket.__name__ = true;
quake__$NET_$WEBS_WEBSNETSocket.__interfaces__ = [quake_INETSocket];
quake__$NET_$WEBS_WEBSNETSocket.__super__ = quake_NETSocketBase;
quake__$NET_$WEBS_WEBSNETSocket.prototype = $extend(quake_NETSocketBase.prototype,{
	receiveMessage: null
	,native_socket: null
	,OnError: function() {
		quake_NET.Close(this);
	}
	,OnMessage: function(message) {
		var data = message.data;
		if(typeof(data) == "string") {
			return;
		}
		if(data.byteLength > 8000) {
			return;
		}
		this.receiveMessage.push(new Uint8Array(data));
	}
	,Close: function() {
		if(this.native_socket != null) {
			this.native_socket.close(1000);
		}
	}
	,GetMessage: function() {
		if(this.native_socket == null) {
			return -1;
		}
		if(this.native_socket.readyState != 1) {
			return -1;
		}
		if(this.receiveMessage.length == 0) {
			return 0;
		}
		var message = this.receiveMessage.shift();
		quake_NET.message.cursize = message.length - 1;
		new Uint8Array(quake_NET.message.data).set(message.subarray(1,message.length));
		return message[0];
	}
	,SendMessage: function(data) {
		if(this.native_socket == null) {
			return -1;
		}
		if(this.native_socket.readyState != 1) {
			return -1;
		}
		var buf = new ArrayBuffer(data.cursize + 1);
		var dest = new Uint8Array(buf);
		dest[0] = 1;
		dest.set(new Uint8Array(data.data,0,data.cursize),1);
		this.native_socket.send(buf);
		return 1;
	}
	,SendUnreliableMessage: function(data) {
		if(this.native_socket == null) {
			return -1;
		}
		if(this.native_socket.readyState != 1) {
			return -1;
		}
		var buf = new ArrayBuffer(data.cursize + 1);
		var dest = new Uint8Array(buf);
		dest[0] = 2;
		dest.set(new Uint8Array(data.data,0,data.cursize),1);
		this.native_socket.send(buf);
		return 1;
	}
	,CanSendMessage: function() {
		if(this.native_socket == null) {
			return false;
		}
		if(this.native_socket.readyState == 1) {
			return true;
		}
		return false;
	}
	,__class__: quake__$NET_$WEBS_WEBSNETSocket
});
var quake_NET_$WEBS = function() { };
$hxClasses["quake.NET_WEBS"] = quake_NET_$WEBS;
quake_NET_$WEBS.__name__ = true;
quake_NET_$WEBS.Init = function() {
	if(window.WebSocket == null || window.document.location.protocol == "https:") {
		return false;
	}
	quake_NET_$WEBS.available = true;
	return true;
};
quake_NET_$WEBS.Connect = function(host) {
	if(host.length <= 5) {
		return null;
	}
	if(HxOverrides.cca(host,5) == 47) {
		return null;
	}
	if(host.substring(0,5) != "ws://") {
		return null;
	}
	host = "ws://" + host.split("/")[2];
	var sock;
	try {
		sock = new quake__$NET_$WEBS_WEBSNETSocket(host);
	} catch( e ) {
		return null;
	}
	quake_NET.newsocket = sock;
	quake_NET.AddNewSocket(sock);
	return 0;
};
quake_NET_$WEBS.CheckNewConnections = function() {
	return null;
};
quake_NET_$WEBS.CheckForResend = function() {
	var sock = quake_NET.newsocket;
	if(sock.native_socket.readyState == 1) {
		return 1;
	}
	if(sock.native_socket.readyState != 0) {
		return -1;
	}
	return null;
};
var quake_PR = function() { };
$hxClasses["quake.PR"] = quake_PR;
quake_PR.__name__ = true;
quake_PR.CheckEmptyString = function(s) {
	var c = HxOverrides.cca(s,0);
	if(c == null || c <= 32) {
		quake_PR.RunError("Bad string");
	}
};
quake_PR.ValueString = function(type,val,ofs) {
	var val_float = new Float32Array(val);
	var val_int = new Int32Array(val);
	var type1 = type & 32767;
	switch(type1) {
	case 0:
		return "void";
	case 1:
		return quake_PR.GetString(val_int[ofs]);
	case 2:
		return val_float[ofs].toFixed(1);
	case 3:
		return "'" + val_float[ofs].toFixed(1) + " " + val_float[ofs + 1].toFixed(1) + " " + val_float[ofs + 2].toFixed(1) + "'";
	case 4:
		return "entity " + val_int[ofs];
	case 5:
		var def = quake_ED.FieldAtOfs(val_int[ofs]);
		if(def != null) {
			return "." + quake_PR.GetString(def.name);
		}
		return ".";
	case 6:
		return quake_PR.GetString(quake_PR.functions[val_int[ofs]].name) + "()";
	case 7:
		return "pointer";
	default:
		return "bad type " + type1;
	}
};
quake_PR.UglyValueString = function(type,val,ofs) {
	var val_float = new Float32Array(val);
	var val_int = new Int32Array(val);
	var type1 = type & 32767;
	switch(type1) {
	case 0:
		return "void";
	case 1:
		return quake_PR.GetString(val_int[ofs]);
	case 2:
		return val_float[ofs].toFixed(6);
	case 3:
		return val_float[ofs].toFixed(6) + " " + val_float[ofs + 1].toFixed(6) + " " + val_float[ofs + 2].toFixed(6);
	case 4:
		return Std.string(val_int[ofs]);
	case 5:
		var def = quake_ED.FieldAtOfs(val_int[ofs]);
		if(def != null) {
			return quake_PR.GetString(def.name);
		}
		return "";
	case 6:
		return quake_PR.GetString(quake_PR.functions[val_int[ofs]].name);
	default:
		return "bad type " + type1;
	}
};
quake_PR.GlobalString = function(ofs) {
	var def = quake_ED.GlobalAtOfs(ofs);
	var line;
	if(def != null) {
		line = ofs + "(" + quake_PR.GetString(def.name) + ")" + quake_PR.ValueString(def.type,quake_PR.globals.buffer,ofs);
	} else {
		line = ofs + "(???)";
	}
	while(line.length <= 20) line += " ";
	return line;
};
quake_PR.GlobalStringNoContents = function(ofs) {
	var def = quake_ED.GlobalAtOfs(ofs);
	var line;
	if(def != null) {
		line = ofs + "(" + quake_PR.GetString(def.name) + ")";
	} else {
		line = ofs + "(???)";
	}
	while(line.length <= 20) line += " ";
	return line;
};
quake_PR.LoadProgs = function() {
	var progs = quake_COM.LoadFile("progs.dat");
	if(progs == null) {
		quake_Sys.Error("PR.LoadProgs: couldn't load progs.dat");
	}
	quake_Console.DPrint("Programs occupy " + (progs.byteLength >> 10) + "K.\n");
	var view = new DataView(progs);
	var i = view.getUint32(0,true);
	if(i != 6) {
		quake_Sys.Error("progs.dat has wrong version number (" + i + " should be " + 6 + ")");
	}
	if(view.getUint32(4,true) != 5927) {
		quake_Sys.Error("progs.dat system vars have been modified, PR.js is out of date");
	}
	quake_PR.crc = quake_CRC.Block(new Uint8Array(progs));
	quake_PR.stack = [];
	quake_PR.depth = 0;
	quake_PR.localstack = [];
	var _g1 = 0;
	var _g = quake_PR.localstack_size;
	while(_g1 < _g) {
		var i1 = _g1++;
		quake_PR.localstack.push(0);
	}
	quake_PR.localstack_used = 0;
	var ofs;
	var num;
	ofs = view.getUint32(8,true);
	num = view.getUint32(12,true);
	quake_PR.statements = [];
	var _g11 = 0;
	var _g2 = num;
	while(_g11 < _g2) {
		var i2 = _g11++;
		quake_PR.statements.push(new quake__$PR_PRStatement(view,ofs));
		ofs += 8;
	}
	ofs = view.getUint32(16,true);
	num = view.getUint32(20,true);
	quake_PR.globaldefs = [];
	var _g12 = 0;
	var _g3 = num;
	while(_g12 < _g3) {
		var i3 = _g12++;
		quake_PR.globaldefs.push(new quake_PRDef(view,ofs));
		ofs += 8;
	}
	ofs = view.getUint32(24,true);
	num = view.getUint32(28,true);
	quake_PR.fielddefs = [];
	var _g13 = 0;
	var _g4 = num;
	while(_g13 < _g4) {
		var i4 = _g13++;
		quake_PR.fielddefs.push(new quake_PRDef(view,ofs));
		ofs += 8;
	}
	ofs = view.getUint32(32,true);
	num = view.getUint32(36,true);
	quake_PR.functions = [];
	var _g14 = 0;
	var _g5 = num;
	while(_g14 < _g5) {
		var i5 = _g14++;
		quake_PR.functions.push(new quake__$PR_PRFunction(view,ofs));
		ofs += 36;
	}
	ofs = view.getUint32(40,true);
	num = view.getUint32(44,true);
	quake_PR.strings = new Uint8Array(num);
	quake_PR.strings.set(new Uint8Array(progs,ofs,num));
	quake_PR.string_temp = quake_PR.NewString("",128);
	quake_PR.netnames = quake_PR.NewString("",quake_SV.svs.maxclients << 5);
	ofs = view.getUint32(48,true);
	num = view.getUint32(52,true);
	quake_PR.globals = new quake_GlobalVars(new ArrayBuffer(num << 2));
	var _g15 = 0;
	var _g6 = num;
	while(_g15 < _g6) {
		var i6 = _g15++;
		quake_PR.globals.ints[i6] = view.getInt32(ofs + (i6 << 2),true);
	}
	quake_PR.entityfields = view.getUint32(56,true);
	quake_PR.edict_size = 96 + (quake_PR.entityfields << 2);
	var def = quake_ED.FindField("ammo_shells1");
	if(def != null) {
		quake_EdictVars.ammo_shells1_ofs = def.ofs;
	}
	var def1 = quake_ED.FindField("ammo_nails1");
	if(def1 != null) {
		quake_EdictVars.ammo_nails1_ofs = def1.ofs;
	}
	var def2 = quake_ED.FindField("ammo_lava_nails");
	if(def2 != null) {
		quake_EdictVars.ammo_lava_nails_ofs = def2.ofs;
	}
	var def3 = quake_ED.FindField("ammo_rockets1");
	if(def3 != null) {
		quake_EdictVars.ammo_rockets1_ofs = def3.ofs;
	}
	var def4 = quake_ED.FindField("ammo_multi_rockets");
	if(def4 != null) {
		quake_EdictVars.ammo_multi_rockets_ofs = def4.ofs;
	}
	var def5 = quake_ED.FindField("ammo_cells1");
	if(def5 != null) {
		quake_EdictVars.ammo_cells1_ofs = def5.ofs;
	}
	var def6 = quake_ED.FindField("ammo_plasma");
	if(def6 != null) {
		quake_EdictVars.ammo_plasma_ofs = def6.ofs;
	}
	var def7 = quake_ED.FindField("gravity");
	if(def7 != null) {
		quake_EdictVars.gravity_ofs = def7.ofs;
	}
	var def8 = quake_ED.FindField("items2");
	if(def8 != null) {
		quake_EdictVars.items2_ofs = def8.ofs;
	}
};
quake_PR.Init = function() {
	quake_Cmd.AddCommand("edict",quake_ED.PrintEdict_f);
	quake_Cmd.AddCommand("edicts",quake_ED.PrintEdicts);
	quake_Cmd.AddCommand("edictcount",quake_ED.Count);
	quake_Cmd.AddCommand("profile",quake_PR.Profile_f);
	quake_Cvar.RegisterVariable("nomonsters","0");
	quake_Cvar.RegisterVariable("gamecfg","0");
	quake_Cvar.RegisterVariable("scratch1","0");
	quake_Cvar.RegisterVariable("scratch2","0");
	quake_Cvar.RegisterVariable("scratch3","0");
	quake_Cvar.RegisterVariable("scratch4","0");
	quake_Cvar.RegisterVariable("savedgamecfg","0",true);
	quake_Cvar.RegisterVariable("saved1","0",true);
	quake_Cvar.RegisterVariable("saved2","0",true);
	quake_Cvar.RegisterVariable("saved3","0",true);
	quake_Cvar.RegisterVariable("saved4","0",true);
};
quake_PR.PrintStatement = function(s) {
	var text;
	if(s.op < quake_PR.opnames.length) {
		text = quake_PR.opnames[s.op] + " ";
		while(text.length <= 9) text += " ";
	} else {
		text = "";
	}
	if(s.op == 49 || s.op == 50) {
		text += quake_PR.GlobalString(s.a) + "branch " + s.b;
	} else if(s.op == 61) {
		text += "branch " + s.a;
	} else if(s.op >= 31 && s.op <= 36) {
		text += quake_PR.GlobalString(s.a) + quake_PR.GlobalStringNoContents(s.b);
	} else {
		if(s.a != 0) {
			text += quake_PR.GlobalString(s.a);
		}
		if(s.b != 0) {
			text += quake_PR.GlobalString(s.b);
		}
		if(s.c != 0) {
			text += quake_PR.GlobalStringNoContents(s.c);
		}
	}
	quake_Console.Print(text + "\n");
};
quake_PR.StackTrace = function() {
	if(quake_PR.depth == 0) {
		quake_Console.Print("<NO STACK>\n");
		return;
	}
	quake_PR.stack[quake_PR.depth] = new quake__$PR_PRStackItem(quake_PR.xstatement,quake_PR.xfunction);
	while(quake_PR.depth >= 0) {
		var f = quake_PR.stack[quake_PR.depth--].func;
		if(f == null) {
			quake_Console.Print("<NO FUNCTION>\n");
			continue;
		}
		var file = quake_PR.GetString(f.file);
		while(file.length <= 11) file += " ";
		quake_Console.Print(file + " : " + quake_PR.GetString(f.name) + "\n");
	}
	quake_PR.depth = 0;
};
quake_PR.Profile_f = function() {
	if(!quake_SV.server.active) {
		return;
	}
	var num = 0;
	while(true) {
		var max = 0;
		var best = null;
		var _g = 0;
		var _g1 = quake_PR.functions;
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			if(f.profile > max) {
				max = f.profile;
				best = f;
			}
		}
		if(best == null) {
			return;
		}
		if(num < 10) {
			var profile = best.profile == null ? "null" : "" + best.profile;
			while(profile.length <= 6) profile = " " + profile;
			quake_Console.Print(profile + " " + quake_PR.GetString(best.name) + "\n");
		}
		++num;
		best.profile = 0;
	}
};
quake_PR.RunError = function(error) {
	quake_PR.PrintStatement(quake_PR.statements[quake_PR.xstatement]);
	quake_PR.StackTrace();
	quake_Console.Print(error + "\n");
	quake_Host.Error("Program error");
};
quake_PR.EnterFunction = function(f) {
	quake_PR.stack[quake_PR.depth++] = new quake__$PR_PRStackItem(quake_PR.xstatement,quake_PR.xfunction);
	var c = f.locals;
	if(quake_PR.localstack_used + c > quake_PR.localstack_size) {
		quake_PR.RunError("PR.EnterFunction: locals stack overflow\n");
	}
	var _g1 = 0;
	var _g = c;
	while(_g1 < _g) {
		var i = _g1++;
		quake_PR.localstack[quake_PR.localstack_used + i] = quake_PR.globals.ints[f.parm_start + i];
	}
	quake_PR.localstack_used += c;
	var o = f.parm_start;
	var _g11 = 0;
	var _g2 = f.numparms;
	while(_g11 < _g2) {
		var i1 = _g11++;
		var _g3 = 0;
		var _g21 = f.parm_size[i1];
		while(_g3 < _g21) {
			var j = _g3++;
			quake_PR.globals.ints[o++] = quake_PR.globals.ints[4 + i1 * 3 + j];
		}
	}
	quake_PR.xfunction = f;
	return f.first_statement - 1;
};
quake_PR.LeaveFunction = function() {
	if(quake_PR.depth <= 0) {
		quake_Sys.Error("prog stack underflow");
	}
	var c = quake_PR.xfunction.locals;
	quake_PR.localstack_used -= c;
	if(quake_PR.localstack_used < 0) {
		quake_PR.RunError("PR.LeaveFunction: locals stack underflow\n");
	}
	--c;
	while(c >= 0) {
		quake_PR.globals.ints[quake_PR.xfunction.parm_start + c] = quake_PR.localstack[quake_PR.localstack_used + c];
		--c;
	}
	quake_PR.xfunction = quake_PR.stack[--quake_PR.depth].func;
	return quake_PR.stack[quake_PR.depth].stmt;
};
quake_PR.ExecuteProgram = function(fnum) {
	if(fnum == 0 || fnum >= quake_PR.functions.length) {
		if(quake_PR.globals.ints[28] != 0) {
			quake_ED.Print(quake_SV.server.edicts[quake_PR.globals.ints[28]]);
		}
		quake_Host.Error("PR.ExecuteProgram: NULL function");
	}
	var runaway = 100000;
	quake_PR.trace = false;
	var exitdepth = quake_PR.depth;
	var s = quake_PR.EnterFunction(quake_PR.functions[fnum]);
	while(true) {
		++s;
		var st = quake_PR.statements[s];
		if(--runaway == 0) {
			quake_PR.RunError("runaway loop error");
		}
		++quake_PR.xfunction.profile;
		quake_PR.xstatement = s;
		if(quake_PR.trace) {
			quake_PR.PrintStatement(st);
		}
		var _g = st.op;
		switch(_g) {
		case 1:
			quake_PR.globals.floats[st.c] = quake_PR.globals.floats[st.a] * quake_PR.globals.floats[st.b];
			break;
		case 2:
			quake_PR.globals.floats[st.c] = quake_PR.globals.floats[st.a] * quake_PR.globals.floats[st.b] + quake_PR.globals.floats[st.a + 1] * quake_PR.globals.floats[st.b + 1] + quake_PR.globals.floats[st.a + 2] * quake_PR.globals.floats[st.b + 2];
			break;
		case 3:
			quake_PR.globals.floats[st.c] = quake_PR.globals.floats[st.a] * quake_PR.globals.floats[st.b];
			quake_PR.globals.floats[st.c + 1] = quake_PR.globals.floats[st.a] * quake_PR.globals.floats[st.b + 1];
			quake_PR.globals.floats[st.c + 2] = quake_PR.globals.floats[st.a] * quake_PR.globals.floats[st.b + 2];
			break;
		case 4:
			quake_PR.globals.floats[st.c] = quake_PR.globals.floats[st.b] * quake_PR.globals.floats[st.a];
			quake_PR.globals.floats[st.c + 1] = quake_PR.globals.floats[st.b] * quake_PR.globals.floats[st.a + 1];
			quake_PR.globals.floats[st.c + 2] = quake_PR.globals.floats[st.b] * quake_PR.globals.floats[st.a + 2];
			break;
		case 5:
			quake_PR.globals.floats[st.c] = quake_PR.globals.floats[st.a] / quake_PR.globals.floats[st.b];
			break;
		case 6:
			quake_PR.globals.floats[st.c] = quake_PR.globals.floats[st.a] + quake_PR.globals.floats[st.b];
			break;
		case 7:
			quake_PR.globals.floats[st.c] = quake_PR.globals.floats[st.a] + quake_PR.globals.floats[st.b];
			quake_PR.globals.floats[st.c + 1] = quake_PR.globals.floats[st.a + 1] + quake_PR.globals.floats[st.b + 1];
			quake_PR.globals.floats[st.c + 2] = quake_PR.globals.floats[st.a + 2] + quake_PR.globals.floats[st.b + 2];
			break;
		case 8:
			quake_PR.globals.floats[st.c] = quake_PR.globals.floats[st.a] - quake_PR.globals.floats[st.b];
			break;
		case 9:
			quake_PR.globals.floats[st.c] = quake_PR.globals.floats[st.a] - quake_PR.globals.floats[st.b];
			quake_PR.globals.floats[st.c + 1] = quake_PR.globals.floats[st.a + 1] - quake_PR.globals.floats[st.b + 1];
			quake_PR.globals.floats[st.c + 2] = quake_PR.globals.floats[st.a + 2] - quake_PR.globals.floats[st.b + 2];
			break;
		case 10:
			quake_PR.globals.floats[st.c] = quake_PR.globals.floats[st.a] == quake_PR.globals.floats[st.b] ? 1.0 : 0.0;
			break;
		case 11:
			quake_PR.globals.floats[st.c] = quake_PR.globals.floats[st.a] == quake_PR.globals.floats[st.b] && quake_PR.globals.floats[st.a + 1] == quake_PR.globals.floats[st.b + 1] && quake_PR.globals.floats[st.a + 2] == quake_PR.globals.floats[st.b + 2] ? 1.0 : 0.0;
			break;
		case 12:
			var this1 = st.c;
			var v = quake_PR.GetString(quake_PR.globals.ints[st.a]) == quake_PR.GetString(quake_PR.globals.ints[st.b]) ? 1.0 : 0.0;
			quake_PR.globals.floats[this1] = v;
			break;
		case 13:case 14:
			quake_PR.globals.floats[st.c] = quake_PR.globals.ints[st.a] == quake_PR.globals.ints[st.b] ? 1.0 : 0.0;
			break;
		case 15:
			quake_PR.globals.floats[st.c] = quake_PR.globals.floats[st.a] != quake_PR.globals.floats[st.b] ? 1.0 : 0.0;
			break;
		case 16:
			quake_PR.globals.floats[st.c] = quake_PR.globals.floats[st.a] != quake_PR.globals.floats[st.b] || quake_PR.globals.floats[st.a + 1] != quake_PR.globals.floats[st.b + 1] || quake_PR.globals.floats[st.a + 2] != quake_PR.globals.floats[st.b + 2] ? 1.0 : 0.0;
			break;
		case 17:
			var this2 = st.c;
			var v1 = quake_PR.GetString(quake_PR.globals.ints[st.a]) != quake_PR.GetString(quake_PR.globals.ints[st.b]) ? 1.0 : 0.0;
			quake_PR.globals.floats[this2] = v1;
			break;
		case 18:case 19:
			quake_PR.globals.floats[st.c] = quake_PR.globals.ints[st.a] != quake_PR.globals.ints[st.b] ? 1.0 : 0.0;
			break;
		case 20:
			quake_PR.globals.floats[st.c] = quake_PR.globals.floats[st.a] <= quake_PR.globals.floats[st.b] ? 1.0 : 0.0;
			break;
		case 21:
			quake_PR.globals.floats[st.c] = quake_PR.globals.floats[st.a] >= quake_PR.globals.floats[st.b] ? 1.0 : 0.0;
			break;
		case 22:
			quake_PR.globals.floats[st.c] = quake_PR.globals.floats[st.a] < quake_PR.globals.floats[st.b] ? 1.0 : 0.0;
			break;
		case 23:
			quake_PR.globals.floats[st.c] = quake_PR.globals.floats[st.a] > quake_PR.globals.floats[st.b] ? 1.0 : 0.0;
			break;
		case 25:
			var ed = quake_SV.server.edicts[quake_PR.globals.ints[st.a]];
			var ptr = quake_PR.globals.ints[st.b];
			quake_PR.globals.ints[st.c] = ed.v.ints[ptr];
			quake_PR.globals.ints[st.c + 1] = ed.v.ints[ptr + 1];
			quake_PR.globals.ints[st.c + 2] = ed.v.ints[ptr + 2];
			break;
		case 24:case 26:case 27:case 28:case 29:
			quake_PR.globals.ints[st.c] = quake_SV.server.edicts[quake_PR.globals.ints[st.a]].v.ints[quake_PR.globals.ints[st.b]];
			break;
		case 30:
			var ed1 = quake_PR.globals.ints[st.a];
			if(ed1 == 0 && !quake_SV.server.loading) {
				quake_PR.RunError("assignment to world entity");
			}
			quake_PR.globals.ints[st.c] = ed1 * quake_PR.edict_size + 96 + (quake_PR.globals.ints[st.b] << 2);
			break;
		case 32:
			quake_PR.globals.ints[st.b] = quake_PR.globals.ints[st.a];
			quake_PR.globals.ints[st.b + 1] = quake_PR.globals.ints[st.a + 1];
			quake_PR.globals.ints[st.b + 2] = quake_PR.globals.ints[st.a + 2];
			break;
		case 31:case 33:case 34:case 35:case 36:
			quake_PR.globals.ints[st.b] = quake_PR.globals.ints[st.a];
			break;
		case 38:
			var ed2 = quake_SV.server.edicts[Math.floor(quake_PR.globals.ints[st.b] / quake_PR.edict_size)];
			var ptr1 = quake_PR.globals.ints[st.b] % quake_PR.edict_size - 96 >> 2;
			ed2.v.ints[ptr1] = quake_PR.globals.ints[st.a];
			ed2.v.ints[ptr1 + 1] = quake_PR.globals.ints[st.a + 1];
			ed2.v.ints[ptr1 + 2] = quake_PR.globals.ints[st.a + 2];
			break;
		case 37:case 39:case 40:case 41:case 42:
			var ptr2 = quake_PR.globals.ints[st.b];
			quake_SV.server.edicts[Math.floor(ptr2 / quake_PR.edict_size)].v.ints[ptr2 % quake_PR.edict_size - 96 >> 2] = quake_PR.globals.ints[st.a];
			break;
		case 0:case 43:
			quake_PR.globals.ints[1] = quake_PR.globals.ints[st.a];
			quake_PR.globals.ints[1 + 1] = quake_PR.globals.ints[st.a + 1];
			quake_PR.globals.ints[1 + 2] = quake_PR.globals.ints[st.a + 2];
			s = quake_PR.LeaveFunction();
			if(quake_PR.depth == exitdepth) {
				return;
			}
			break;
		case 44:
			quake_PR.globals.floats[st.c] = quake_PR.globals.floats[st.a] == 0.0 ? 1.0 : 0.0;
			break;
		case 45:
			quake_PR.globals.floats[st.c] = quake_PR.globals.floats[st.a] == 0.0 && quake_PR.globals.floats[st.a + 1] == 0.0 && quake_PR.globals.floats[st.a + 2] == 0.0 ? 1.0 : 0.0;
			break;
		case 46:
			if(quake_PR.globals.ints[st.a] != 0) {
				quake_PR.globals.floats[st.c] = quake_PR.strings[quake_PR.globals.ints[st.a]] == 0 ? 1.0 : 0.0;
			} else {
				quake_PR.globals.floats[st.c] = 1.0;
			}
			break;
		case 47:case 48:
			quake_PR.globals.floats[st.c] = quake_PR.globals.ints[st.a] == 0 ? 1.0 : 0.0;
			break;
		case 49:
			if(quake_PR.globals.ints[st.a] != 0) {
				s += st.b - 1;
			}
			break;
		case 50:
			if(quake_PR.globals.ints[st.a] == 0) {
				s += st.b - 1;
			}
			break;
		case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 58:case 59:
			if(quake_PR.globals.ints[st.a] == 0) {
				quake_PR.RunError("NULL function");
			}
			var newf = quake_PR.functions[quake_PR.globals.ints[st.a]];
			if(newf.first_statement < 0) {
				var argc = st.op - 51;
				var idx = -newf.first_statement;
				if(idx >= quake_PF.builtin.length) {
					quake_PR.RunError("Bad builtin call number");
				}
				quake_PF.argc = argc;
				quake_PF.builtin[idx]();
				continue;
			}
			s = quake_PR.EnterFunction(newf);
			break;
		case 60:
			var ed3 = quake_SV.server.edicts[quake_PR.globals.ints[28]];
			ed3.v.floats[46] = quake_PR.globals.floats[31] + 0.1;
			ed3.v.floats[30] = quake_PR.globals.floats[st.a];
			ed3.v.ints[44] = quake_PR.globals.ints[st.b];
			break;
		case 61:
			s += st.a - 1;
			break;
		case 62:
			quake_PR.globals.floats[st.c] = quake_PR.globals.floats[st.a] != 0.0 && quake_PR.globals.floats[st.b] != 0.0 ? 1.0 : 0.0;
			break;
		case 63:
			quake_PR.globals.floats[st.c] = quake_PR.globals.floats[st.a] != 0.0 || quake_PR.globals.floats[st.b] != 0.0 ? 1.0 : 0.0;
			break;
		case 64:
			quake_PR.globals.floats[st.c] = (quake_PR.globals.floats[st.a] | 0) & (quake_PR.globals.floats[st.b] | 0);
			break;
		case 65:
			quake_PR.globals.floats[st.c] = quake_PR.globals.floats[st.a] | 0 | (quake_PR.globals.floats[st.b] | 0);
			break;
		default:
			quake_PR.RunError("Bad opcode " + st.op);
		}
	}
};
quake_PR.GetString = function(num) {
	var buf_b = "";
	var _g1 = num;
	var _g = quake_PR.strings.length;
	while(_g1 < _g) {
		var num1 = _g1++;
		if(quake_PR.strings[num1] == 0) {
			break;
		}
		buf_b += String.fromCharCode(quake_PR.strings[num1]);
	}
	return buf_b;
};
quake_PR.NewString = function(s,length) {
	var ofs = quake_PR.strings.length;
	var old_strings = quake_PR.strings;
	quake_PR.strings = new Uint8Array(ofs + length);
	quake_PR.strings.set(old_strings);
	var end = s.length >= length ? length - 1 : s.length;
	var _g1 = 0;
	var _g = end;
	while(_g1 < _g) {
		var i = _g1++;
		quake_PR.strings[ofs + i] = HxOverrides.cca(s,i);
	}
	return ofs;
};
quake_PR.TempString = function(string) {
	if(string.length > 127) {
		string = string.substring(0,127);
	}
	var _g1 = 0;
	var _g = string.length;
	while(_g1 < _g) {
		var i = _g1++;
		quake_PR.strings[quake_PR.string_temp + i] = HxOverrides.cca(string,i);
	}
	quake_PR.strings[quake_PR.string_temp + string.length] = 0;
};
var quake_VID = function() { };
$hxClasses["quake.VID"] = quake_VID;
quake_VID.__name__ = true;
quake_VID.SetPalette = function() {
	var palette = quake_COM.LoadFile("gfx/palette.lmp");
	if(palette == null) {
		quake_Sys.Error("Couldn't load gfx/palette.lmp");
	}
	var pal = new Uint8Array(palette);
	var src = 0;
	var _g = 0;
	while(_g < 256) {
		var i = _g++;
		quake_VID.d_8to24table[i] = pal[src] + (pal[src + 1] << 8) + (pal[src + 2] << 16);
		src += 3;
	}
};
quake_VID.Init = function() {
	window.document.getElementById("progress").style.display = "none";
	quake_GL.Init();
	quake_VID.SetPalette();
};
var quake_Q = function() { };
$hxClasses["quake.Q"] = quake_Q;
quake_Q.__name__ = true;
quake_Q.memstr = function(src) {
	var dest = [];
	var _g1 = 0;
	var _g = src.length;
	while(_g1 < _g) {
		var i = _g1++;
		if(src[i] == 0) {
			break;
		}
		dest.push(String.fromCharCode(src[i]));
	}
	return dest.join("");
};
quake_Q.strmem = function(src) {
	var buf = new ArrayBuffer(src.length);
	var dest = new Uint8Array(buf);
	var _g1 = 0;
	var _g = src.length;
	while(_g1 < _g) {
		var i = _g1++;
		dest[i] = HxOverrides.cca(src,i) & 255;
	}
	return buf;
};
quake_Q.atoi = function(str) {
	if(str == null) {
		return 0;
	}
	var ptr;
	var sign;
	if(HxOverrides.cca(str,0) == 45) {
		sign = -1;
		ptr = 1;
	} else {
		sign = 1;
		ptr = 0;
	}
	var c = HxOverrides.cca(str,ptr);
	var c2 = HxOverrides.cca(str,ptr + 1);
	var val = 0;
	if(c == 48 && (c2 == 120 || c2 == 88)) {
		ptr += 2;
		while(true) {
			c = HxOverrides.cca(str,ptr++);
			if(c >= 48 && c <= 57) {
				val = (val << 4) + c - 48;
			} else if(c >= 97 && c <= 102) {
				val = (val << 4) + c - 87;
			} else if(c >= 65 && c <= 70) {
				val = (val << 4) + c - 55;
			} else {
				return val * sign;
			}
		}
	}
	if(c == 39) {
		if(c2 == null) {
			return 0;
		}
		return sign * c2;
	}
	while(true) {
		c = HxOverrides.cca(str,ptr++);
		if(c == null || c <= 47 || c >= 58) {
			return val * sign;
		}
		val = val * 10 + c - 48;
	}
};
quake_Q.atof = function(str) {
	if(str == null) {
		return 0.0;
	}
	var ptr;
	var sign;
	if(HxOverrides.cca(str,0) == 45) {
		sign = -1;
		ptr = 1;
	} else {
		sign = 1;
		ptr = 0;
	}
	var c = HxOverrides.cca(str,ptr);
	var c2 = HxOverrides.cca(str,ptr + 1);
	var val;
	if(c == 48 && (c2 == 120 || c2 == 88)) {
		ptr += 2;
		val = 0.0;
		while(true) {
			c = HxOverrides.cca(str,ptr++);
			if(c >= 48 && c <= 57) {
				val = val * 16 + c - 48;
			} else if(c >= 97 && c <= 102) {
				val = val * 16 + c - 87;
			} else if(c >= 65 && c <= 70) {
				val = val * 16 + c - 55;
			} else {
				return val * sign;
			}
		}
	}
	if(c == 39) {
		if(isNaN(c2)) {
			return 0;
		}
		return sign * c2;
	}
	val = parseFloat(str);
	if(isNaN(val)) {
		return 0;
	}
	return val;
};
quake_Q.btoa = function(src) {
	var str = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
	var val = [];
	var len = src.length - src.length % 3;
	var i = 0;
	while(i < len) {
		var c = (src[i] << 16) + (src[i + 1] << 8) + src[i + 2];
		val.push(str.charAt(c >> 18) + str.charAt(c >> 12 & 63) + str.charAt(c >> 6 & 63) + str.charAt(c & 63));
		i += 3;
	}
	if(src.length - len == 1) {
		var c1 = src[len];
		val.push(str.charAt(c1 >> 2) + str.charAt((c1 & 3) << 4) + "==");
	} else if(src.length - len == 2) {
		var c2 = (src[len] << 8) + src[len + 1];
		val.push(str.charAt(c2 >> 10) + str.charAt(c2 >> 4 & 63) + str.charAt((c2 & 15) << 2) + "=");
	}
	return val.join("");
};
var quake_S = function() { };
$hxClasses["quake.S"] = quake_S;
quake_S.__name__ = true;
quake_S.Init = function() {
	quake_Console.Print("\nSound Initialization\n");
	quake_Cmd.AddCommand("play",quake_S.Play);
	quake_Cmd.AddCommand("playvol",quake_S.PlayVol);
	quake_Cmd.AddCommand("stopsound",quake_S.StopAllSounds);
	quake_Cmd.AddCommand("soundlist",quake_S.SoundList);
	quake_S.nosound = quake_Cvar.RegisterVariable("nosound",quake_COM.CheckParm("-nosound") != null ? "1" : "0");
	quake_S.volume = quake_Cvar.RegisterVariable("volume","0.7",true);
	quake_S.precache = quake_Cvar.RegisterVariable("precache","1");
	quake_S.bgmvolume = quake_Cvar.RegisterVariable("bgmvolume","1",true);
	quake_S.ambient_level = quake_Cvar.RegisterVariable("ambient_level","0.3");
	quake_S.ambient_fade = quake_Cvar.RegisterVariable("ambient_fade","100");
	quake_S.started = true;
	quake_S.context = new AudioContext();
	var ambient_sfx = ["water1","wind2"];
	var _g1 = 0;
	var _g = ambient_sfx.length;
	while(_g1 < _g) {
		var i = _g1++;
		var ch = [new quake__$S_Channel(quake_S.PrecacheSound("ambience/" + ambient_sfx[i] + ".wav",false))];
		quake_S.ambient_channels.push(ch[0]);
		quake_S.LoadSound(ch[0].sfx,(function(ch1) {
			return function(success) {
				if(!success) {
					return;
				}
				if(ch1[0].sfx.cache.loopstart == null) {
					quake_Console.Print("Sound ambience/" + ch1[0].sfx.name + ".wav not looped\n");
					return;
				}
				var nodes = { source : quake_S.context.createBufferSource(), gain0 : quake_S.context.createGain()};
				ch1[0].nodes = nodes;
				nodes.source.buffer = ch1[0].sfx.cache.data;
				nodes.source.loop = true;
				nodes.source.loopStart = ch1[0].sfx.cache.loopstart;
				nodes.source.loopEnd = nodes.source.buffer.length;
				nodes.source.connect(nodes.gain0);
				nodes.gain0.connect(quake_S.context.destination);
			};
		})(ch));
	}
	quake_Console.sfx_talk = quake_S.PrecacheSound("misc/talk.wav");
};
quake_S.PrecacheSound = function(name,load) {
	if(load == null) {
		load = true;
	}
	if(quake_S.nosound.value != 0) {
		return null;
	}
	var sfx = null;
	var _g = 0;
	var _g1 = quake_S.known_sfx;
	while(_g < _g1.length) {
		var s = _g1[_g];
		++_g;
		if(s.name == name) {
			sfx = s;
			break;
		}
	}
	if(sfx == null) {
		sfx = new quake_Sfx(name);
		quake_S.known_sfx.push(sfx);
	}
	if(load && quake_S.precache.value != 0) {
		quake_S.LoadSound(sfx,function(_) {
		});
	}
	return sfx;
};
quake_S.PickChannel = function(entnum,entchannel) {
	var i = null;
	var channel = null;
	if(entchannel != 0) {
		i = 0;
		while(i < quake_S.channels.length) {
			channel = quake_S.channels[i++];
			if(channel == null) {
				continue;
			}
			if(channel.entnum == entnum && (channel.entchannel == entchannel || entchannel == -1)) {
				channel.sfx = null;
				if(channel.nodes != null) {
					quake_S.NoteOff(channel.nodes.source);
					channel.nodes = null;
				}
				break;
			}
		}
	}
	if(entchannel == 0 || i == quake_S.channels.length) {
		i = 0;
		while(i < quake_S.channels.length) {
			channel = quake_S.channels[i++];
			if(channel == null) {
				break;
			}
			if(channel.sfx == null) {
				break;
			}
		}
	}
	if(i == quake_S.channels.length) {
		channel = new quake__$S_Channel();
		quake_S.channels.push(channel);
	}
	return channel;
};
quake_S.Spatialize = function(ch) {
	if(ch.entnum == quake_CL.state.viewentity) {
		ch.leftvol = ch.master_vol;
		ch.rightvol = ch.master_vol;
		return;
	}
	var source_0 = ch.origin[0] - quake_S.listener_origin[0];
	var source_1 = ch.origin[1] - quake_S.listener_origin[1];
	var source_2 = ch.origin[2] - quake_S.listener_origin[2];
	var dist = Math.sqrt(source_0 * source_0 + source_1 * source_1 + source_2 * source_2);
	if(dist != 0.0) {
		source_0 /= dist;
		source_1 /= dist;
		source_2 /= dist;
	}
	dist *= ch.dist_mult;
	var dot = quake_S.listener_right[0] * source_0 + quake_S.listener_right[1] * source_1 + quake_S.listener_right[2] * source_2;
	ch.rightvol = ch.master_vol * (1.0 - dist) * (1.0 + dot);
	if(ch.rightvol < 0.0) {
		ch.rightvol = 0.0;
	}
	ch.leftvol = ch.master_vol * (1.0 - dist) * (1.0 - dot);
	if(ch.leftvol < 0.0) {
		ch.leftvol = 0.0;
	}
};
quake_S.StartSound = function(entnum,entchannel,sfx,origin,vol,attenuation) {
	if(quake_S.nosound.value != 0 || sfx == null) {
		return;
	}
	var target_chan = quake_S.PickChannel(entnum,entchannel);
	target_chan.origin = new Float32Array(origin);
	target_chan.dist_mult = attenuation * 0.001;
	target_chan.master_vol = vol;
	target_chan.entnum = entnum;
	target_chan.entchannel = entchannel;
	quake_S.Spatialize(target_chan);
	if(target_chan.leftvol == 0.0 && target_chan.rightvol == 0.0) {
		return;
	}
	quake_S.LoadSound(sfx,function(success) {
		if(!success) {
			target_chan.sfx = null;
			return;
		}
		target_chan.sfx = sfx;
		target_chan.pos = 0.0;
		target_chan.end = quake_Host.realtime + sfx.cache.length;
		var nodes_splitter;
		var nodes_source;
		var nodes_merger2;
		var nodes_merger1;
		var nodes_gain1;
		var nodes_gain0;
		nodes_source = quake_S.context.createBufferSource();
		nodes_merger1 = quake_S.context.createChannelMerger(2);
		nodes_splitter = quake_S.context.createChannelSplitter(2);
		nodes_gain0 = quake_S.context.createGain();
		nodes_gain1 = quake_S.context.createGain();
		nodes_merger2 = quake_S.context.createChannelMerger(2);
		target_chan.nodes = { source : nodes_source, gain0 : nodes_gain0, gain1 : nodes_gain1};
		nodes_source.buffer = sfx.cache.data;
		if(sfx.cache.loopstart != null) {
			nodes_source.loop = true;
			nodes_source.loopStart = sfx.cache.loopstart;
			nodes_source.loopEnd = nodes_source.buffer.length;
		}
		nodes_source.connect(nodes_merger1);
		nodes_source.connect(nodes_merger1,0,1);
		nodes_merger1.connect(nodes_splitter);
		nodes_splitter.connect(nodes_gain0,0);
		nodes_splitter.connect(nodes_gain1,1);
		var volume = target_chan.leftvol;
		if(volume > 1.0) {
			volume = 1.0;
		}
		nodes_gain0.gain.value = volume * quake_S.volume.value;
		nodes_gain0.connect(nodes_merger2,0,0);
		volume = target_chan.rightvol;
		if(volume > 1.0) {
			volume = 1.0;
		}
		nodes_gain1.gain.value = volume * quake_S.volume.value;
		nodes_gain1.connect(nodes_merger2,0,1);
		nodes_merger2.connect(quake_S.context.destination);
		var _g = 0;
		var _g1 = quake_S.channels;
		while(_g < _g1.length) {
			var check = _g1[_g];
			++_g;
			if(check == target_chan) {
				continue;
			}
			if(check.sfx != sfx || check.pos != 0.0) {
				continue;
			}
			var skip = Math.random() * 0.1;
			if(skip >= sfx.cache.length) {
				quake_S.NoteOn(nodes_source);
				break;
			}
			target_chan.pos += skip;
			target_chan.end -= skip;
			nodes_source.start(0.0,skip,nodes_source.buffer.length - skip);
			break;
		}
		quake_S.NoteOn(nodes_source);
	});
};
quake_S.StopSound = function(entnum,entchannel) {
	if(quake_S.nosound.value != 0) {
		return;
	}
	var _g = 0;
	var _g1 = quake_S.channels;
	while(_g < _g1.length) {
		var ch = _g1[_g];
		++_g;
		if(ch == null) {
			continue;
		}
		if(ch.entnum == entnum && ch.entchannel == entchannel) {
			ch.end = 0.0;
			ch.sfx = null;
			if(ch.nodes != null) {
				quake_S.NoteOff(ch.nodes.source);
				ch.nodes = null;
			}
			return;
		}
	}
};
quake_S.NoteOff = function(node) {
	try {
		node.stop();
	} catch( _ ) {
	}
};
quake_S.NoteOn = function(node) {
	try {
		node.start();
	} catch( _ ) {
	}
};
quake_S.StopAllSounds = function() {
	if(quake_S.nosound.value != 0) {
		return;
	}
	var _g = 0;
	var _g1 = quake_S.ambient_channels;
	while(_g < _g1.length) {
		var ch = _g1[_g];
		++_g;
		ch.master_vol = 0.0;
		if(ch.nodes != null) {
			quake_S.NoteOff(ch.nodes.source);
		}
	}
	var _g2 = 0;
	var _g11 = quake_S.channels;
	while(_g2 < _g11.length) {
		var ch1 = _g11[_g2];
		++_g2;
		if(ch1 == null) {
			continue;
		}
		if(ch1.nodes != null) {
			quake_S.NoteOff(ch1.nodes.source);
		}
	}
	quake_S.channels = [];
	var _g3 = 0;
	var _g12 = quake_S.static_channels;
	while(_g3 < _g12.length) {
		var ch2 = _g12[_g3];
		++_g3;
		quake_S.NoteOff(ch2.nodes.source);
	}
	quake_S.static_channels = [];
};
quake_S.StaticSound = function(sfx,origin,vol,attenuation) {
	if(quake_S.nosound.value != 0 || sfx == null) {
		return;
	}
	quake_S.LoadSound(sfx,function(success) {
		if(!success) {
			return;
		}
		if(sfx.cache.loopstart == null) {
			quake_Console.Print("Sound " + sfx.name + " not looped\n");
			return;
		}
		var ss = new quake__$S_Channel(sfx);
		ss.origin = new Float32Array(origin);
		ss.master_vol = vol;
		ss.dist_mult = attenuation * 0.000015625;
		ss.end = quake_Host.realtime + sfx.cache.length;
		quake_S.static_channels.push(ss);
		var nodes_splitter;
		var nodes_source;
		var nodes_merger2;
		var nodes_merger1;
		var nodes_gain1;
		var nodes_gain0;
		nodes_source = quake_S.context.createBufferSource();
		nodes_merger1 = quake_S.context.createChannelMerger(2);
		nodes_splitter = quake_S.context.createChannelSplitter(2);
		nodes_gain0 = quake_S.context.createGain();
		nodes_gain1 = quake_S.context.createGain();
		nodes_merger2 = quake_S.context.createChannelMerger(2);
		ss.nodes = { source : nodes_source, gain0 : nodes_gain0, gain1 : nodes_gain1};
		nodes_source.buffer = sfx.cache.data;
		nodes_source.loop = true;
		nodes_source.loopStart = sfx.cache.loopstart;
		nodes_source.loopEnd = nodes_source.buffer.length;
		nodes_source.connect(nodes_merger1);
		nodes_source.connect(nodes_merger1,0,1);
		nodes_merger1.connect(nodes_splitter);
		nodes_splitter.connect(nodes_gain0,0);
		nodes_splitter.connect(nodes_gain1,1);
		nodes_gain0.connect(nodes_merger2,0,0);
		nodes_gain1.connect(nodes_merger2,0,1);
		nodes_merger2.connect(quake_S.context.destination);
	});
};
quake_S.SoundList = function() {
	var total = 0;
	var _g = 0;
	var _g1 = quake_S.known_sfx;
	while(_g < _g1.length) {
		var sfx = _g1[_g];
		++_g;
		var sc = sfx.cache;
		if(sc == null) {
			continue;
		}
		var size = sc.size == null ? "null" : "" + sc.size;
		total += sc.size;
		while(size.length <= 5) size = " " + size;
		if(sc.loopstart != null) {
			size = "L" + size;
		} else {
			size = " " + size;
		}
		quake_Console.Print(size + " : " + sfx.name + "\n");
	}
	quake_Console.Print("Total resident: " + total + "\n");
};
quake_S.LocalSound = function(sound) {
	quake_S.StartSound(quake_CL.state.viewentity,-1,sound,quake__$Vec_Vec_$Impl_$.origin,1.0,1.0);
};
quake_S.UpdateAmbientSounds = function() {
	if(quake_CL.state.worldmodel == null) {
		return;
	}
	var l = quake_Mod_$Brush.PointInLeaf(quake_S.listener_origin,quake_CL.state.worldmodel);
	if(l == null || quake_S.ambient_level.value == 0) {
		var _g = 0;
		var _g1 = quake_S.ambient_channels;
		while(_g < _g1.length) {
			var ch = _g1[_g];
			++_g;
			ch.master_vol = 0.0;
			if(ch.nodes != null) {
				quake_S.NoteOff(ch.nodes.source);
			}
		}
		return;
	}
	var _g11 = 0;
	var _g2 = quake_S.ambient_channels.length;
	while(_g11 < _g2) {
		var i = _g11++;
		var ch1 = quake_S.ambient_channels[i];
		if(ch1.nodes == null) {
			continue;
		}
		var vol = quake_S.ambient_level.value * l.ambient_level[i];
		if(vol < 8.0) {
			vol = 0.0;
		}
		vol /= 255.0;
		if(ch1.master_vol < vol) {
			ch1.master_vol += quake_Host.frametime * quake_S.ambient_fade.value / 255.0;
			if(ch1.master_vol > vol) {
				ch1.master_vol = vol;
			}
		} else if(ch1.master_vol > vol) {
			ch1.master_vol -= quake_Host.frametime * quake_S.ambient_fade.value / 255.0;
			if(ch1.master_vol < vol) {
				ch1.master_vol = vol;
			}
		}
		if(ch1.master_vol == 0.0) {
			quake_S.NoteOff(ch1.nodes.source);
			continue;
		}
		if(ch1.master_vol > 1.0) {
			ch1.master_vol = 1.0;
		}
		ch1.nodes.gain0.gain.value = ch1.master_vol * quake_S.volume.value;
		quake_S.NoteOn(ch1.nodes.source);
	}
};
quake_S.UpdateDynamicSounds = function() {
	var _g = 0;
	var _g1 = quake_S.channels;
	while(_g < _g1.length) {
		var ch = _g1[_g];
		++_g;
		if(ch == null) {
			continue;
		}
		if(ch.sfx == null) {
			continue;
		}
		if(quake_Host.realtime >= ch.end) {
			var sc = ch.sfx.cache;
			if(sc.loopstart != null) {
				ch.end = quake_Host.realtime + sc.length - sc.loopstart;
			} else {
				ch.sfx = null;
				ch.nodes = null;
				continue;
			}
		}
		quake_S.Spatialize(ch);
		if(ch.leftvol > 1.0) {
			ch.leftvol = 1.0;
		}
		if(ch.rightvol > 1.0) {
			ch.rightvol = 1.0;
		}
		ch.nodes.gain0.gain.value = ch.leftvol * quake_S.volume.value;
		ch.nodes.gain1.gain.value = ch.rightvol * quake_S.volume.value;
	}
};
quake_S.UpdateStaticSounds = function() {
	var _g = 0;
	var _g1 = quake_S.static_channels;
	while(_g < _g1.length) {
		var ch = _g1[_g];
		++_g;
		quake_S.Spatialize(ch);
	}
	var _g11 = 0;
	var _g2 = quake_S.static_channels.length;
	while(_g11 < _g2) {
		var i = _g11++;
		var ch1 = quake_S.static_channels[i];
		if(ch1.leftvol == 0.0 && ch1.rightvol == 0.0) {
			continue;
		}
		var sfx = ch1.sfx;
		var _g3 = i + 1;
		var _g21 = quake_S.static_channels.length;
		while(_g3 < _g21) {
			var j = _g3++;
			var ch2 = quake_S.static_channels[j];
			if(sfx == ch2.sfx) {
				ch1.leftvol += ch2.leftvol;
				ch1.rightvol += ch2.rightvol;
				ch2.leftvol = 0.0;
				ch2.rightvol = 0.0;
			}
		}
	}
	var _g4 = 0;
	var _g12 = quake_S.static_channels;
	while(_g4 < _g12.length) {
		var ch3 = _g12[_g4];
		++_g4;
		if(ch3.leftvol == 0.0 && ch3.rightvol == 0.0) {
			quake_S.NoteOff(ch3.nodes.source);
			continue;
		}
		if(ch3.leftvol > 1.0) {
			ch3.leftvol = 1.0;
		}
		if(ch3.rightvol > 1.0) {
			ch3.rightvol = 1.0;
		}
		ch3.nodes.gain0.gain.value = ch3.leftvol * quake_S.volume.value;
		ch3.nodes.gain1.gain.value = ch3.rightvol * quake_S.volume.value;
		quake_S.NoteOn(ch3.nodes.source);
	}
};
quake_S.Update = function(origin,forward,right,up) {
	if(quake_S.nosound.value != 0) {
		return;
	}
	quake_S.listener_origin[0] = origin[0];
	quake_S.listener_origin[1] = origin[1];
	quake_S.listener_origin[2] = origin[2];
	quake_S.listener_forward[0] = forward[0];
	quake_S.listener_forward[1] = forward[1];
	quake_S.listener_forward[2] = forward[2];
	quake_S.listener_right[0] = right[0];
	quake_S.listener_right[1] = right[1];
	quake_S.listener_right[2] = right[2];
	quake_S.listener_up[0] = up[0];
	quake_S.listener_up[1] = up[1];
	quake_S.listener_up[2] = up[2];
	if(quake_S.volume.value < 0.0) {
		quake_S.volume.setValue(0.0);
	} else if(quake_S.volume.value > 1.0) {
		quake_S.volume.setValue(1.0);
	}
	quake_S.UpdateAmbientSounds();
	quake_S.UpdateDynamicSounds();
	quake_S.UpdateStaticSounds();
};
quake_S.Play = function() {
	if(quake_S.nosound.value != 0) {
		return;
	}
	var _g1 = 1;
	var _g = quake_Cmd.argv.length;
	while(_g1 < _g) {
		var i = _g1++;
		var sfx = quake_S.PrecacheSound(quake_COM.DefaultExtension(quake_Cmd.argv[i],".wav"));
		if(sfx != null) {
			quake_S.StartSound(quake_CL.state.viewentity,0,sfx,quake_S.listener_origin,1.0,1.0);
		}
	}
};
quake_S.PlayVol = function() {
	if(quake_S.nosound.value != 0) {
		return;
	}
	var i = 1;
	while(i < quake_Cmd.argv.length) {
		var sfx = quake_S.PrecacheSound(quake_COM.DefaultExtension(quake_Cmd.argv[i],".wav"));
		if(sfx != null) {
			quake_S.StartSound(quake_CL.state.viewentity,0,sfx,quake_S.listener_origin,quake_Q.atof(quake_Cmd.argv[i + 1]),1.0);
		}
		i += 2;
	}
};
quake_S.LoadSound = function(s,cb) {
	if(quake_S.nosound.value != 0) {
		cb(false);
		return;
	}
	if(s.cache != null) {
		cb(true);
		return;
	}
	var sc = new quake__$S_SfxCache();
	var data = quake_COM.LoadFile("sound/" + s.name);
	if(data == null) {
		quake_Console.Print("Couldn't load sound/" + s.name + "\n");
		cb(false);
		return;
	}
	var view = new DataView(data);
	if(view.getUint32(0,true) != 1179011410 || view.getUint32(8,true) != 1163280727) {
		quake_Console.Print("Missing RIFF/WAVE chunks\n");
		cb(false);
		return;
	}
	var p = 12;
	var fmt = null;
	var dataofs = null;
	var datalen = null;
	var cue = null;
	var loopstart = null;
	var samples = null;
	while(p < data.byteLength) {
		var _g = view.getUint32(p,true);
		switch(_g) {
		case 543520099:
			cue = true;
			loopstart = view.getUint32(p + 32,true);
			break;
		case 544501094:
			if(view.getInt16(p + 8,true) != 1) {
				quake_Console.Print("Microsoft PCM format only\n");
				cb(false);
				return;
			}
			fmt = { channels : view.getUint16(p + 10,true), samplesPerSec : view.getUint32(p + 12,true), avgBytesPerSec : view.getUint32(p + 16,true), blockAlign : view.getUint16(p + 20,true), bitsPerSample : view.getUint16(p + 22,true)};
			break;
		case 1414744396:
			if(cue) {
				cue = false;
				if(view.getUint32(p + 28,true) == 1802658157) {
					samples = loopstart + view.getUint32(p + 24,true);
				}
			}
			break;
		case 1635017060:
			dataofs = p + 8;
			datalen = view.getUint32(p + 4,true);
			break;
		}
		p += view.getUint32(p + 4,true) + 8;
		if((p & 1) != 0) {
			++p;
		}
	}
	if(fmt == null) {
		quake_Console.Print("Missing fmt chunk\n");
		cb(false);
		return;
	}
	if(dataofs == null) {
		quake_Console.Print("Missing data chunk\n");
		cb(false);
		return;
	}
	if(loopstart != null) {
		sc.loopstart = loopstart * fmt.blockAlign / fmt.samplesPerSec;
	}
	if(samples != null) {
		sc.length = samples / fmt.samplesPerSec;
	} else {
		sc.length = datalen / fmt.avgBytesPerSec;
	}
	sc.size = datalen + 44;
	if((sc.size & 1) != 0) {
		++sc.size;
	}
	var out = new ArrayBuffer(sc.size);
	view = new DataView(out);
	view.setUint32(0,1179011410,true);
	view.setUint32(4,sc.size - 8,true);
	view.setUint32(8,1163280727,true);
	view.setUint32(12,544501094,true);
	view.setUint32(16,16,true);
	view.setUint16(20,1,true);
	view.setUint16(22,fmt.channels,true);
	view.setUint32(24,fmt.samplesPerSec,true);
	view.setUint32(28,fmt.avgBytesPerSec,true);
	view.setUint16(32,fmt.blockAlign,true);
	view.setUint16(34,fmt.bitsPerSample,true);
	view.setUint32(36,1635017060,true);
	view.setUint32(40,datalen,true);
	new Uint8Array(out,44,datalen).set(new Uint8Array(data,dataofs,datalen));
	quake_S.context.decodeAudioData(out,function(data1) {
		sc.data = data1;
		s.cache = sc;
		cb(true);
		return;
	});
};
var quake__$S_Channel = function(s) {
	this.sfx = s;
	this.end = 0.0;
	this.master_vol = 0.0;
};
$hxClasses["quake._S.Channel"] = quake__$S_Channel;
quake__$S_Channel.__name__ = true;
quake__$S_Channel.prototype = {
	entnum: null
	,entchannel: null
	,sfx: null
	,end: null
	,origin: null
	,master_vol: null
	,leftvol: null
	,rightvol: null
	,dist_mult: null
	,pos: null
	,nodes: null
	,__class__: quake__$S_Channel
};
var quake__$S_SfxCache = function() {
};
$hxClasses["quake._S.SfxCache"] = quake__$S_SfxCache;
quake__$S_SfxCache.__name__ = true;
quake__$S_SfxCache.prototype = {
	loopstart: null
	,length: null
	,size: null
	,data: null
	,__class__: quake__$S_SfxCache
};
var quake__$Vec_Vec_$Impl_$ = {};
$hxClasses["quake._Vec.Vec_Impl_"] = quake__$Vec_Vec_$Impl_$;
quake__$Vec_Vec_$Impl_$.__name__ = true;
quake__$Vec_Vec_$Impl_$._new = function() {
	var this1 = new Float32Array(3);
	return this1;
};
quake__$Vec_Vec_$Impl_$.copy = function(this1) {
	return new Float32Array(this1);
};
quake__$Vec_Vec_$Impl_$.setVector = function(this1,v) {
	this1.set(v);
};
quake__$Vec_Vec_$Impl_$.setValues = function(this1,x,y,z) {
	this1[0] = x;
	this1[1] = y;
	this1[2] = z;
};
quake__$Vec_Vec_$Impl_$.of = function(x,y,z) {
	var this1 = new Float32Array(3);
	var v = this1;
	v[0] = x;
	v[1] = y;
	v[2] = z;
	return v;
};
quake__$Vec_Vec_$Impl_$.ofArray = function(a) {
	var this1 = new Float32Array(3);
	var v = this1;
	v[0] = a[0];
	v[1] = a[1];
	v[2] = a[2];
	return v;
};
quake__$Vec_Vec_$Impl_$.get = function(this1,i) {
	return this1[i];
};
quake__$Vec_Vec_$Impl_$.set = function(this1,i,v) {
	return this1[i] = v;
};
quake__$Vec_Vec_$Impl_$.Perpendicular = function(v) {
	var pos = 0;
	var minelem = 1.0;
	if(Math.abs(v[0]) < minelem) {
		pos = 0;
		minelem = Math.abs(v[0]);
	}
	if(Math.abs(v[1]) < minelem) {
		pos = 1;
		minelem = Math.abs(v[1]);
	}
	if(Math.abs(v[2]) < minelem) {
		pos = 2;
		minelem = Math.abs(v[2]);
	}
	var tempvec = [0.0,0.0,0.0];
	tempvec[pos] = 1.0;
	var inv_denom = 1.0 / (v[0] * v[0] + v[1] * v[1] + v[2] * v[2]);
	var d = (tempvec[0] * v[0] + tempvec[1] * v[1] + tempvec[2] * v[2]) * inv_denom;
	var this1 = new Float32Array(3);
	var v1 = this1;
	v1[0] = tempvec[0] - d * v[0] * inv_denom;
	v1[1] = tempvec[1] - d * v[1] * inv_denom;
	v1[2] = tempvec[2] - d * v[2] * inv_denom;
	var dst = v1;
	quake__$Vec_Vec_$Impl_$.Normalize(dst);
	return dst;
};
quake__$Vec_Vec_$Impl_$.RotatePointAroundVector = function(dir,point,degrees,out) {
	var r = quake__$Vec_Vec_$Impl_$.Perpendicular(dir);
	var up = quake__$Vec_Vec_$Impl_$.CrossProduct(r,dir);
	var m = [[r[0],up[0],dir[0]],[r[1],up[1],dir[1]],[r[2],up[2],dir[2]]];
	var im = [[m[0][0],m[1][0],m[2][0]],[m[0][1],m[1][1],m[2][1]],[m[0][2],m[1][2],m[2][2]]];
	var s = Math.sin(degrees * Math.PI / 180.0);
	var c = Math.cos(degrees * Math.PI / 180.0);
	var zrot = [[c,s,0],[-s,c,0],[0.0,0.0,1.0]];
	var rot = quake__$Vec_Vec_$Impl_$.ConcatRotations(quake__$Vec_Vec_$Impl_$.ConcatRotations(m,zrot),im);
	out[0] = rot[0][0] * point[0] + rot[0][1] * point[1] + rot[0][2] * point[2];
	out[1] = rot[1][0] * point[0] + rot[1][1] * point[1] + rot[1][2] * point[2];
	out[2] = rot[2][0] * point[0] + rot[2][1] * point[1] + rot[2][2] * point[2];
	return out;
};
quake__$Vec_Vec_$Impl_$.Anglemod = function(a) {
	return (a % 360.0 + 360.0) % 360.0;
};
quake__$Vec_Vec_$Impl_$.BoxOnPlaneSide = function(emins,emaxs,p) {
	if(p.type <= 2) {
		if(p.dist <= emins[p.type]) {
			return 1;
		}
		if(p.dist >= emaxs[p.type]) {
			return 2;
		}
		return 3;
	}
	var dist1 = null;
	var dist2 = null;
	var _g = p.signbits;
	switch(_g) {
	case 0:
		dist1 = p.normal[0] * emaxs[0] + p.normal[1] * emaxs[1] + p.normal[2] * emaxs[2];
		dist2 = p.normal[0] * emins[0] + p.normal[1] * emins[1] + p.normal[2] * emins[2];
		break;
	case 1:
		dist1 = p.normal[0] * emins[0] + p.normal[1] * emaxs[1] + p.normal[2] * emaxs[2];
		dist2 = p.normal[0] * emaxs[0] + p.normal[1] * emins[1] + p.normal[2] * emins[2];
		break;
	case 2:
		dist1 = p.normal[0] * emaxs[0] + p.normal[1] * emins[1] + p.normal[2] * emaxs[2];
		dist2 = p.normal[0] * emins[0] + p.normal[1] * emaxs[1] + p.normal[2] * emins[2];
		break;
	case 3:
		dist1 = p.normal[0] * emins[0] + p.normal[1] * emins[1] + p.normal[2] * emaxs[2];
		dist2 = p.normal[0] * emaxs[0] + p.normal[1] * emaxs[1] + p.normal[2] * emins[2];
		break;
	case 4:
		dist1 = p.normal[0] * emaxs[0] + p.normal[1] * emaxs[1] + p.normal[2] * emins[2];
		dist2 = p.normal[0] * emins[0] + p.normal[1] * emins[1] + p.normal[2] * emaxs[2];
		break;
	case 5:
		dist1 = p.normal[0] * emins[0] + p.normal[1] * emaxs[1] + p.normal[2] * emins[2];
		dist2 = p.normal[0] * emaxs[0] + p.normal[1] * emins[1] + p.normal[2] * emaxs[2];
		break;
	case 6:
		dist1 = p.normal[0] * emaxs[0] + p.normal[1] * emins[1] + p.normal[2] * emins[2];
		dist2 = p.normal[0] * emins[0] + p.normal[1] * emaxs[1] + p.normal[2] * emaxs[2];
		break;
	case 7:
		dist1 = p.normal[0] * emins[0] + p.normal[1] * emins[1] + p.normal[2] * emins[2];
		dist2 = p.normal[0] * emaxs[0] + p.normal[1] * emaxs[1] + p.normal[2] * emaxs[2];
		break;
	default:
		quake_Sys.Error("Vec.BoxOnPlaneSide: Bad signbits");
	}
	var sides = 0;
	if(dist1 >= p.dist) {
		sides = 1;
	}
	if(dist2 < p.dist) {
		sides += 2;
	}
	return sides;
};
quake__$Vec_Vec_$Impl_$.AngleVectors = function(angles,forward,right,up) {
	var angle = angles[0] * Math.PI / 180.0;
	var sp = Math.sin(angle);
	var cp = Math.cos(angle);
	angle = angles[1] * Math.PI / 180.0;
	var sy = Math.sin(angle);
	var cy = Math.cos(angle);
	angle = angles[2] * Math.PI / 180.0;
	var sr = Math.sin(angle);
	var cr = Math.cos(angle);
	if(forward != null) {
		forward[0] = cp * cy;
		forward[1] = cp * sy;
		forward[2] = -sp;
	}
	if(right != null) {
		right[0] = cr * sy - sr * sp * cy;
		right[1] = -sr * sp * sy - cr * cy;
		right[2] = -sr * cp;
	}
	if(up != null) {
		up[0] = cr * sp * cy + sr * sy;
		up[1] = cr * sp * sy - sr * cy;
		up[2] = cr * cp;
	}
};
quake__$Vec_Vec_$Impl_$.DotProduct = function(v1,v2) {
	return v1[0] * v2[0] + v1[1] * v2[1] + v1[2] * v2[2];
};
quake__$Vec_Vec_$Impl_$.Add = function(v1,v2) {
	var this1 = new Float32Array(3);
	var v = this1;
	v[0] = v1[0] + v2[0];
	v[1] = v1[1] + v2[1];
	v[2] = v1[2] + v2[2];
	return v;
};
quake__$Vec_Vec_$Impl_$.CrossProduct = function(v1,v2) {
	var this1 = new Float32Array(3);
	var v = this1;
	v[0] = v1[1] * v2[2] - v1[2] * v2[1];
	v[1] = v1[2] * v2[0] - v1[0] * v2[2];
	v[2] = v1[0] * v2[1] - v1[1] * v2[0];
	return v;
};
quake__$Vec_Vec_$Impl_$.Length = function(v) {
	return Math.sqrt(v[0] * v[0] + v[1] * v[1] + v[2] * v[2]);
};
quake__$Vec_Vec_$Impl_$.Normalize = function(v) {
	var length = Math.sqrt(v[0] * v[0] + v[1] * v[1] + v[2] * v[2]);
	if(length == 0.0) {
		v[0] = v[1] = v[2] = 0.0;
		return 0.0;
	}
	var _g = v;
	_g[0] /= length;
	var _g1 = v;
	_g1[1] /= length;
	var _g2 = v;
	_g2[2] /= length;
	return length;
};
quake__$Vec_Vec_$Impl_$.ConcatRotations = function(m1,m2) {
	return [[m1[0][0] * m2[0][0] + m1[0][1] * m2[1][0] + m1[0][2] * m2[2][0],m1[0][0] * m2[0][1] + m1[0][1] * m2[1][1] + m1[0][2] * m2[2][1],m1[0][0] * m2[0][2] + m1[0][1] * m2[1][2] + m1[0][2] * m2[2][2]],[m1[1][0] * m2[0][0] + m1[1][1] * m2[1][0] + m1[1][2] * m2[2][0],m1[1][0] * m2[0][1] + m1[1][1] * m2[1][1] + m1[1][2] * m2[2][1],m1[1][0] * m2[0][2] + m1[1][1] * m2[1][2] + m1[1][2] * m2[2][2]],[m1[2][0] * m2[0][0] + m1[2][1] * m2[1][0] + m1[2][2] * m2[2][0],m1[2][0] * m2[0][1] + m1[2][1] * m2[1][1] + m1[2][2] * m2[2][1],m1[2][0] * m2[0][2] + m1[2][1] * m2[1][2] + m1[2][2] * m2[2][2]]];
};
var quake__$PR_PRStackItem = function(s,f) {
	this.stmt = s;
	this.func = f;
};
$hxClasses["quake._PR.PRStackItem"] = quake__$PR_PRStackItem;
quake__$PR_PRStackItem.__name__ = true;
quake__$PR_PRStackItem.prototype = {
	stmt: null
	,func: null
	,__class__: quake__$PR_PRStackItem
};
var quake_Sys = function() { };
$hxClasses["quake.Sys"] = quake_Sys;
quake_Sys.__name__ = true;
quake_Sys.clearEvents = function() {
	window.onbeforeunload = null;
	window.oncontextmenu = null;
	window.onfocus = null;
	window.onkeydown = null;
	window.onkeyup = null;
	window.onmousedown = null;
	window.onmouseup = null;
	window.onunload = null;
	window.onwheel = null;
};
quake_Sys.Quit = function() {
	if(quake_Sys.frame != null) {
		kha_Scheduler.removeFrameTask(quake_Sys.frame);
	}
	quake_Sys.clearEvents();
	quake_Host.Shutdown();
	window.document.body.style.cursor = "auto";
	quake_VID.mainwindow.style.display = "none";
	if(quake_COM.registered.value != 0) {
		window.document.getElementById("end2").style.display = "inline";
	} else {
		window.document.getElementById("end1").style.display = "inline";
	}
	throw new Error();
};
quake_Sys.Print = function(text) {
	haxe_Log.trace(text,{ fileName : "Sys.hx", lineNumber : 45, className : "quake.Sys", methodName : "Print"});
};
quake_Sys.Error = function(text) {
	if(quake_Sys.frame != null) {
		kha_Scheduler.removeFrameTask(quake_Sys.frame);
	}
	quake_Sys.clearEvents();
	if(quake_Host.initialized) {
		quake_Host.Shutdown();
	}
	window.document.body.style.cursor = "auto";
	var i = quake_Console.text.length - 25;
	if(i < 0) {
		i = 0;
	}
	if(window.console != null) {
		while(i < quake_Console.text.length) window.console.log(quake_Console.text[i++].text);
	}
	window.alert(text);
	throw new Error(text);
};
quake_Sys.FloatTime = function() {
	return new Date().getTime() * 0.001 - quake_Sys.oldtime;
};
quake_Sys.urlDecode = function(s) {
	return decodeURIComponent(s);
};
quake_Sys.main = function() {
	kha_System.init({ },function() {
		kha_Assets.loadEverything(function() {
			var s = window.document.location.search;
			var cmdline = decodeURIComponent(s);
			var location = window.document.location;
			var argv = [location.href.substring(0,location.href.length - location.search.length)];
			if(HxOverrides.cca(cmdline,0) == 63) {
				var text = "";
				var quotes = false;
				var _g1 = 1;
				var _g = cmdline.length;
				while(_g1 < _g) {
					var i = _g1++;
					var c = HxOverrides.cca(cmdline,i);
					if(c < 32 || c > 127) {
						continue;
					}
					if(c == 34) {
						quotes = !quotes;
						continue;
					}
					if(quotes == false && c == 32) {
						if(text.length == 0) {
							continue;
						}
						argv.push(text);
						text = "";
						continue;
					}
					text += cmdline.charAt(i);
				}
				if(text.length != 0) {
					argv.push(text);
				}
			}
			quake_COM.InitArgv(argv);
			var elem = window.document.documentElement;
			quake_VID.width = elem.clientWidth <= 320 ? 320 : elem.clientWidth;
			quake_VID.height = elem.clientHeight <= 200 ? 200 : elem.clientHeight;
			quake_Sys.scantokey = new haxe_ds_IntMap();
			var v = 127;
			quake_Sys.scantokey.h[8] = v;
			var v1 = 9;
			quake_Sys.scantokey.h[9] = v1;
			var v2 = 13;
			quake_Sys.scantokey.h[13] = v2;
			var v3 = 134;
			quake_Sys.scantokey.h[16] = v3;
			var v4 = 133;
			quake_Sys.scantokey.h[17] = v4;
			var v5 = 132;
			quake_Sys.scantokey.h[18] = v5;
			var v6 = 255;
			quake_Sys.scantokey.h[19] = v6;
			var v7 = 27;
			quake_Sys.scantokey.h[27] = v7;
			var v8 = 32;
			quake_Sys.scantokey.h[32] = v8;
			var v9 = 150;
			quake_Sys.scantokey.h[105] = v9;
			var v10 = v9;
			quake_Sys.scantokey.h[33] = v10;
			var v11 = 149;
			quake_Sys.scantokey.h[99] = v11;
			var v12 = v11;
			quake_Sys.scantokey.h[34] = v12;
			var v13 = 152;
			quake_Sys.scantokey.h[97] = v13;
			var v14 = v13;
			quake_Sys.scantokey.h[35] = v14;
			var v15 = 151;
			quake_Sys.scantokey.h[103] = v15;
			var v16 = v15;
			quake_Sys.scantokey.h[36] = v16;
			var v17 = 130;
			quake_Sys.scantokey.h[100] = v17;
			var v18 = v17;
			quake_Sys.scantokey.h[37] = v18;
			var v19 = 128;
			quake_Sys.scantokey.h[104] = v19;
			var v20 = v19;
			quake_Sys.scantokey.h[38] = v20;
			var v21 = 131;
			quake_Sys.scantokey.h[102] = v21;
			var v22 = v21;
			quake_Sys.scantokey.h[39] = v22;
			var v23 = 129;
			quake_Sys.scantokey.h[98] = v23;
			var v24 = v23;
			quake_Sys.scantokey.h[40] = v24;
			var v25 = 147;
			quake_Sys.scantokey.h[96] = v25;
			var v26 = v25;
			quake_Sys.scantokey.h[45] = v26;
			var v27 = 148;
			quake_Sys.scantokey.h[110] = v27;
			var v28 = v27;
			quake_Sys.scantokey.h[46] = v28;
			var _g2 = 48;
			while(_g2 < 58) {
				var i1 = _g2++;
				quake_Sys.scantokey.h[i1] = i1;
			}
			quake_Sys.scantokey.h[186] = 59;
			var v29 = 59;
			quake_Sys.scantokey.h[59] = v29;
			quake_Sys.scantokey.h[187] = 61;
			var v30 = 61;
			quake_Sys.scantokey.h[61] = v30;
			var _g3 = 65;
			while(_g3 < 91) {
				var i2 = _g3++;
				var v31 = i2 + 32;
				quake_Sys.scantokey.h[i2] = v31;
			}
			quake_Sys.scantokey.h[106] = 42;
			quake_Sys.scantokey.h[107] = 43;
			quake_Sys.scantokey.h[189] = 45;
			var v32 = 45;
			quake_Sys.scantokey.h[173] = v32;
			var v33 = v32;
			quake_Sys.scantokey.h[109] = v33;
			quake_Sys.scantokey.h[191] = 47;
			var v34 = 47;
			quake_Sys.scantokey.h[111] = v34;
			var _g4 = 112;
			while(_g4 < 124) {
				var i3 = _g4++;
				var v35 = i3 - 112 + 135;
				quake_Sys.scantokey.h[i3] = v35;
			}
			quake_Sys.scantokey.h[188] = 44;
			quake_Sys.scantokey.h[190] = 46;
			quake_Sys.scantokey.h[192] = 96;
			quake_Sys.scantokey.h[219] = 91;
			quake_Sys.scantokey.h[220] = 92;
			quake_Sys.scantokey.h[221] = 93;
			quake_Sys.scantokey.h[222] = 39;
			quake_Sys.oldtime = new Date().getTime() * 0.001;
			haxe_Log.trace("Host.Init\n",{ fileName : "Sys.hx", lineNumber : 45, className : "quake.Sys", methodName : "Print"});
			quake_Host.Init();
			window.onbeforeunload = quake_Sys.onbeforeunload;
			window.oncontextmenu = quake_Sys.oncontextmenu;
			window.onfocus = quake_Sys.onfocus;
			window.onkeydown = quake_Sys.onkeydown;
			window.onkeyup = quake_Sys.onkeyup;
			window.onmousedown = quake_Sys.onmousedown;
			window.onmouseup = quake_Sys.onmouseup;
			window.onunload = quake_Sys.onunload;
			window.onwheel = quake_Sys.onwheel;
			quake_Sys.frame = kha_Scheduler.addTimeTask(quake_Host.Frame,0,0.016666666666666666);
		});
	});
};
quake_Sys.onbeforeunload = function(_) {
	return "Are you sure you want to quit?";
};
quake_Sys.oncontextmenu = function(e) {
	e.preventDefault();
};
quake_Sys.onfocus = function() {
	var _g = 0;
	while(_g < 256) {
		var i = _g++;
		quake_Key.Event(i,false);
		quake_Key.down[i] = false;
	}
};
quake_Sys.onkeydown = function(e) {
	var key = quake_Sys.scantokey.h[e.keyCode];
	if(key == null) {
		return;
	}
	quake_Key.Event(key,true);
	e.preventDefault();
};
quake_Sys.onkeyup = function(e) {
	var key = quake_Sys.scantokey.h[e.keyCode];
	if(key == null) {
		return;
	}
	quake_Key.Event(key,false);
	e.preventDefault();
};
quake_Sys.onmousedown = function(e) {
	var key;
	var _g = e.which;
	switch(_g) {
	case 1:
		key = 200;
		break;
	case 2:
		key = 202;
		break;
	case 3:
		key = 201;
		break;
	default:
		return;
	}
	quake_Key.Event(key,true);
	e.preventDefault();
};
quake_Sys.onmouseup = function(e) {
	var key;
	var _g = e.which;
	switch(_g) {
	case 1:
		key = 200;
		break;
	case 2:
		key = 202;
		break;
	case 3:
		key = 201;
		break;
	default:
		return;
	}
	quake_Key.Event(key,false);
	e.preventDefault();
};
quake_Sys.onunload = function() {
	quake_Host.Shutdown();
};
quake_Sys.onwheel = function(e) {
	var key = e.deltaY < 0 ? 239 : 240;
	quake_Key.Event(key,true);
	quake_Key.Event(key,false);
	e.preventDefault();
};
var quake_SCR = function() { };
$hxClasses["quake.SCR"] = quake_SCR;
quake_SCR.__name__ = true;
quake_SCR.Init = function() {
	quake_SCR.fov = quake_Cvar.RegisterVariable("fov","90");
	quake_SCR.viewsize = quake_Cvar.RegisterVariable("viewsize","100",true);
	quake_SCR.conspeed = quake_Cvar.RegisterVariable("scr_conspeed","300");
	quake_SCR.showturtle = quake_Cvar.RegisterVariable("showturtle","0");
	quake_SCR.showpause = quake_Cvar.RegisterVariable("showpause","1");
	quake_SCR.centertime = quake_Cvar.RegisterVariable("scr_centertime","2");
	quake_SCR.printspeed = quake_Cvar.RegisterVariable("scr_printspeed","8");
	quake_Cmd.AddCommand("screenshot",quake_SCR.ScreenShot_f);
	quake_Cmd.AddCommand("sizeup",quake_SCR.SizeUp_f);
	quake_Cmd.AddCommand("sizedown",quake_SCR.SizeDown_f);
	quake_SCR.net = new quake_DrawPic(quake_W.GetLumpName("NET"));
	quake_SCR.turtle = new quake_DrawPic(quake_W.GetLumpName("TURTLE"));
	quake_SCR.pause = quake_Draw.CachePic("pause");
};
quake_SCR.CenterPrint = function(str) {
	quake_SCR.centerstring = [];
	var start = 0;
	var i = 0;
	while(i < str.length) {
		var next;
		if(HxOverrides.cca(str,i) == 10) {
			next = i + 1;
		} else if(i - start >= 40) {
			next = i;
		} else {
			++i;
			continue;
		}
		quake_SCR.centerstring.push(str.substring(start,i));
		start = next;
		++i;
	}
	quake_SCR.centerstring.push(str.substring(start,i));
	quake_SCR.centertime_off = quake_SCR.centertime.value;
	quake_SCR.centertime_start = quake_CL.state.time;
};
quake_SCR.BeginLoadingPlaque = function() {
	quake_S.StopAllSounds();
	if(quake_CL.cls.state != 2 || quake_CL.cls.signon != 4) {
		return;
	}
	quake_SCR.centertime_off = 0.0;
	quake_SCR.con_current = 0;
	quake_SCR.disabled_for_loading = true;
	quake_SCR.disabled_time = quake_Host.realtime + 60.0;
};
quake_SCR.EndLoadingPlaque = function() {
	quake_SCR.disabled_for_loading = false;
	quake_Console.ClearNotify();
};
quake_SCR.UpdateScreen = function() {
	if(quake_SCR.disabled_for_loading) {
		if(quake_Host.realtime <= quake_SCR.disabled_time) {
			return;
		}
		quake_SCR.disabled_for_loading = false;
		quake_Console.Print("load failed.\n");
	}
	var elem = window.document.documentElement;
	var width = elem.clientWidth <= 320 ? 320 : elem.clientWidth;
	var height = elem.clientHeight <= 200 ? 200 : elem.clientHeight;
	var pixelRatio = window.devicePixelRatio >= 1.0 ? window.devicePixelRatio : 1.0;
	if(quake_VID.width != width || quake_VID.height != height || quake_SCR.devicePixelRatio != pixelRatio || quake_Host.framecount == 0) {
		quake_VID.width = width;
		quake_VID.height = height;
		quake_VID.mainwindow.width = width * pixelRatio | 0;
		quake_VID.mainwindow.height = height * pixelRatio | 0;
		quake_VID.mainwindow.style.width = width + "px";
		quake_VID.mainwindow.style.height = height + "px";
		quake_SCR.devicePixelRatio = pixelRatio;
		quake_SCR.recalc_refdef = true;
	}
	if(quake_SCR.oldfov != quake_SCR.fov.value) {
		quake_SCR.oldfov = quake_SCR.fov.value;
		quake_SCR.recalc_refdef = true;
	}
	if(quake_SCR.oldscreensize != quake_SCR.viewsize.value) {
		quake_SCR.oldscreensize = quake_SCR.viewsize.value;
		quake_SCR.recalc_refdef = true;
	}
	if(quake_SCR.recalc_refdef) {
		quake_SCR.CalcRefdef();
	}
	quake_SCR.SetUpToDrawConsole();
	quake_V.RenderView();
	quake_GL.Set2D();
	if(quake_Render.dowarp) {
		quake_Render.WarpScreen();
	}
	if(!quake_Console.forcedup) {
		quake_Render.PolyBlend();
	}
	if(quake_CL.cls.state == 1) {
		quake_SCR.DrawConsole();
	} else if(quake_CL.state.intermission == 1 && quake_Key.dest == 0) {
		quake_Sbar.IntermissionOverlay();
	} else if(quake_CL.state.intermission == 2 && quake_Key.dest == 0) {
		quake_Draw.Pic(quake_VID.width - quake_Sbar.finale.width >> 1,16,quake_Sbar.finale);
		quake_SCR.DrawCenterString();
	} else if(quake_CL.state.intermission == 3 && quake_Key.dest == 0) {
		quake_SCR.DrawCenterString();
	} else {
		if(quake_V.crosshair.value != 0) {
			quake_Draw.Character(quake_Render.refdef.vrect.x + (quake_Render.refdef.vrect.width >> 1) + quake_V.crossx.value | 0,quake_Render.refdef.vrect.y + (quake_Render.refdef.vrect.height >> 1) + quake_V.crossy.value | 0,43);
		}
		quake_SCR.DrawNet();
		quake_SCR.DrawTurtle();
		quake_SCR.DrawPause();
		quake_SCR.DrawCenterString();
		quake_Sbar.DrawSbar();
		quake_SCR.DrawConsole();
		quake_Menu.DrawMenu();
	}
	quake_GL.gl.disable(3042);
	if(quake_SCR.screenshot) {
		quake_SCR.screenshot = false;
		quake_GL.gl.finish();
		window.open(quake_VID.mainwindow.toDataURL("image/jpeg"));
	}
};
quake_SCR.DrawCenterString = function() {
	quake_SCR.centertime_off -= quake_Host.frametime;
	if(quake_SCR.centertime_off <= 0.0 && quake_CL.state.intermission == 0 || quake_Key.dest != 0) {
		return;
	}
	var y = quake_SCR.centerstring.length <= 4 ? Math.floor(quake_VID.height * 0.35) : 48;
	if(quake_CL.state.intermission != 0) {
		var remaining = Math.floor(quake_SCR.printspeed.value * (quake_CL.state.time - quake_SCR.centertime_start));
		var _g = 0;
		var _g1 = quake_SCR.centerstring;
		while(_g < _g1.length) {
			var str = _g1[_g];
			++_g;
			var x = quake_VID.width - (str.length << 3) >> 1;
			var _g3 = 0;
			var _g2 = str.length;
			while(_g3 < _g2) {
				var j = _g3++;
				quake_Draw.Character(x,y,HxOverrides.cca(str,j));
				if(remaining-- == 0) {
					return;
				}
				x += 8;
			}
			y += 8;
		}
		return;
	}
	var _g4 = 0;
	var _g11 = quake_SCR.centerstring;
	while(_g4 < _g11.length) {
		var s = _g11[_g4];
		++_g4;
		quake_Draw.String(quake_VID.width - (s.length << 3) >> 1,y,s);
		y += 8;
	}
};
quake_SCR.CalcRefdef = function() {
	quake_SCR.recalc_refdef = false;
	if(quake_SCR.viewsize.value < 30) {
		quake_SCR.viewsize.set("30");
	} else if(quake_SCR.viewsize.value > 120) {
		quake_SCR.viewsize.set("120");
	}
	var size;
	var full = false;
	if(quake_CL.state.intermission != 0) {
		full = true;
		size = 1.0;
		quake_Sbar.lines = 0;
	} else {
		size = quake_SCR.viewsize.value;
		if(size >= 120.0) {
			quake_Sbar.lines = 0;
		} else if(size >= 110.0) {
			quake_Sbar.lines = 24;
		} else {
			quake_Sbar.lines = 48;
		}
		if(size >= 100.0) {
			full = true;
			size = 100.0;
		}
		size *= 0.01;
	}
	var vrect = quake_Render.refdef.vrect;
	vrect.width = Math.floor(quake_VID.width * size);
	if(vrect.width < 96) {
		size = 96.0 / vrect.width;
		vrect.width = 96;
	}
	vrect.height = Math.floor(quake_VID.height * size);
	if(vrect.height > quake_VID.height - quake_Sbar.lines) {
		vrect.height = quake_VID.height - quake_Sbar.lines;
	}
	vrect.x = quake_VID.width - vrect.width >> 1;
	if(full) {
		vrect.y = 0;
	} else {
		vrect.y = quake_VID.height - quake_Sbar.lines - vrect.height >> 1;
	}
	if(quake_SCR.fov.value < 10) {
		quake_SCR.fov.set("10");
	} else if(quake_SCR.fov.value > 170) {
		quake_SCR.fov.set("170");
	}
	if(vrect.width * 0.75 <= vrect.height) {
		quake_Render.refdef.fov_x = quake_SCR.fov.value;
		quake_Render.refdef.fov_y = Math.atan(vrect.height / (vrect.width / Math.tan(quake_SCR.fov.value * Math.PI / 360.0))) * 360.0 / Math.PI;
	} else {
		quake_Render.refdef.fov_x = Math.atan(vrect.width / (vrect.height / Math.tan(quake_SCR.fov.value * 0.82 * Math.PI / 360.0))) * 360.0 / Math.PI;
		quake_Render.refdef.fov_y = quake_SCR.fov.value * 0.82;
	}
	var ymax = 4.0 * Math.tan(quake_Render.refdef.fov_y * Math.PI / 360.0);
	quake_Render.perspective[0] = 4.0 / (ymax * quake_Render.refdef.vrect.width / quake_Render.refdef.vrect.height);
	quake_Render.perspective[5] = 4.0 / ymax;
	quake_GL.ortho[0] = 2.0 / quake_VID.width;
	quake_GL.ortho[5] = -2.0 / quake_VID.height;
	quake_Render.warpwidth = vrect.width * quake_SCR.devicePixelRatio | 0;
	quake_Render.warpheight = vrect.height * quake_SCR.devicePixelRatio | 0;
	if(quake_Render.warpwidth > 2048) {
		quake_Render.warpwidth = 2048;
	}
	if(quake_Render.warpheight > 2048) {
		quake_Render.warpheight = 2048;
	}
	if(quake_Render.oldwarpwidth != quake_Render.warpwidth || quake_Render.oldwarpheight != quake_Render.warpheight) {
		quake_Render.oldwarpwidth = quake_Render.warpwidth;
		quake_Render.oldwarpheight = quake_Render.warpheight;
		quake_GL.Bind(0,quake_Render.warptexture);
		quake_GL.gl.texImage2D(3553,0,6408,quake_Render.warpwidth,quake_Render.warpheight,0,6408,5121,null);
		quake_GL.gl.bindRenderbuffer(36161,quake_Render.warprenderbuffer);
		quake_GL.gl.renderbufferStorage(36161,33189,quake_Render.warpwidth,quake_Render.warpheight);
		quake_GL.gl.bindRenderbuffer(36161,null);
	}
};
quake_SCR.SizeUp_f = function() {
	quake_SCR.viewsize.setValue(quake_SCR.viewsize.value + 10);
	quake_SCR.recalc_refdef = true;
};
quake_SCR.SizeDown_f = function() {
	quake_SCR.viewsize.setValue(quake_SCR.viewsize.value - 10);
	quake_SCR.recalc_refdef = true;
};
quake_SCR.DrawTurtle = function() {
	if(quake_SCR.showturtle.value == 0) {
		return;
	}
	if(quake_Host.frametime < 0.1) {
		quake_SCR.count = 0;
		return;
	}
	if(++quake_SCR.count >= 3) {
		quake_Draw.Pic(quake_Render.refdef.vrect.x,quake_Render.refdef.vrect.y,quake_SCR.turtle);
	}
};
quake_SCR.DrawNet = function() {
	if(quake_Host.realtime - quake_CL.state.last_received_message >= 0.3 && !quake_CL.cls.demoplayback) {
		quake_Draw.Pic(quake_Render.refdef.vrect.x,quake_Render.refdef.vrect.y,quake_SCR.net);
	}
};
quake_SCR.DrawPause = function() {
	if(quake_SCR.showpause.value != 0 && quake_CL.state.paused) {
		quake_Draw.Pic(quake_VID.width - quake_SCR.pause.width >> 1,quake_VID.height - 48 - quake_SCR.pause.height >> 1,quake_SCR.pause);
	}
};
quake_SCR.SetUpToDrawConsole = function() {
	quake_Console.forcedup = quake_CL.state.worldmodel == null || quake_CL.cls.signon != 4;
	if(quake_Console.forcedup) {
		quake_SCR.con_current = 200;
		return;
	}
	var conlines = quake_Key.dest == 1 ? 100 : 0;
	if(conlines < quake_SCR.con_current) {
		quake_SCR.con_current -= quake_SCR.conspeed.value * quake_Host.frametime | 0;
		if(conlines > quake_SCR.con_current) {
			quake_SCR.con_current = conlines;
		}
	} else if(conlines > quake_SCR.con_current) {
		quake_SCR.con_current += quake_SCR.conspeed.value * quake_Host.frametime | 0;
		if(conlines < quake_SCR.con_current) {
			quake_SCR.con_current = conlines;
		}
	}
};
quake_SCR.DrawConsole = function() {
	if(quake_SCR.con_current > 0) {
		quake_Console.DrawConsole(quake_SCR.con_current);
		return;
	}
	if(quake_Key.dest == 0 || quake_Key.dest == 2) {
		quake_Console.DrawNotify();
	}
};
quake_SCR.ScreenShot_f = function() {
	quake_SCR.screenshot = true;
};
var quake__$SV_ServerState = function() {
	this.signon = new quake_MSG(8192);
	this.reliable_datagram = new quake_MSG(1024);
	this.datagram = new quake_MSG(1024);
	this.num_edicts = 0;
};
$hxClasses["quake._SV.ServerState"] = quake__$SV_ServerState;
quake__$SV_ServerState.__name__ = true;
quake__$SV_ServerState.prototype = {
	num_edicts: null
	,datagram: null
	,reliable_datagram: null
	,signon: null
	,sound_precache: null
	,model_precache: null
	,edicts: null
	,loadgame: null
	,worldmodel: null
	,models: null
	,time: null
	,active: null
	,loading: null
	,paused: null
	,lastcheck: null
	,lastchecktime: null
	,modelname: null
	,lightstyles: null
	,__class__: quake__$SV_ServerState
};
var quake__$SV_ServerStatic = function() {
};
$hxClasses["quake._SV.ServerStatic"] = quake__$SV_ServerStatic;
quake__$SV_ServerStatic.__name__ = true;
quake__$SV_ServerStatic.prototype = {
	maxclients: null
	,maxclientslimit: null
	,clients: null
	,serverflags: null
	,changelevel_issued: null
	,__class__: quake__$SV_ServerStatic
};
var quake_SV = function() { };
$hxClasses["quake.SV"] = quake_SV;
quake_SV.__name__ = true;
quake_SV.Init = function() {
	quake_SV.maxvelocity = quake_Cvar.RegisterVariable("sv_maxvelocity","2000");
	quake_SV.gravity = quake_Cvar.RegisterVariable("sv_gravity","800",false,true);
	quake_SV.friction = quake_Cvar.RegisterVariable("sv_friction","4",false,true);
	quake_SV.edgefriction = quake_Cvar.RegisterVariable("edgefriction","2");
	quake_SV.stopspeed = quake_Cvar.RegisterVariable("sv_stopspeed","100");
	quake_SV.maxspeed = quake_Cvar.RegisterVariable("sv_maxspeed","320",false,true);
	quake_SV.accelerate = quake_Cvar.RegisterVariable("sv_accelerate","10");
	quake_SV.idealpitchscale = quake_Cvar.RegisterVariable("sv_idealpitchscale","0.8");
	quake_SV.aim = quake_Cvar.RegisterVariable("sv_aim","0.93");
	quake_SV.nostep = quake_Cvar.RegisterVariable("sv_nostep","0");
	quake_SV.nop = new quake_MSG(4,1);
	new Uint8Array(quake_SV.nop.data)[0] = 1;
	quake_SV.reconnect = new quake_MSG(128);
	quake_SV.reconnect.WriteByte(9);
	quake_SV.reconnect.WriteString("reconnect\n");
	quake_SV.InitBoxHull();
};
quake_SV.StartParticle = function(org,dir,color,count) {
	var datagram = quake_SV.server.datagram;
	if(datagram.cursize >= 1009) {
		return;
	}
	datagram.WriteByte(18);
	datagram.WriteShort(org[0] * 8 | 0);
	datagram.WriteShort(org[1] * 8 | 0);
	datagram.WriteShort(org[2] * 8 | 0);
	var _g = 0;
	while(_g < 3) {
		var i = _g++;
		var v = dir[i] * 16.0 | 0;
		if(v > 127) {
			v = 127;
		} else if(v < -128) {
			v = -128;
		}
		datagram.WriteChar(v);
	}
	datagram.WriteByte(count);
	datagram.WriteByte(color);
};
quake_SV.StartSound = function(entity,channel,sample,volume,attenuation) {
	if(volume < 0 || volume > 255) {
		quake_Sys.Error("SV.StartSound: volume = " + volume);
	}
	if(attenuation < 0.0 || attenuation > 4.0) {
		quake_Sys.Error("SV.StartSound: attenuation = " + attenuation);
	}
	if(channel < 0 || channel > 7) {
		quake_Sys.Error("SV.StartSound: channel = " + channel);
	}
	var datagram = quake_SV.server.datagram;
	if(datagram.cursize >= 1009) {
		return;
	}
	var i = 1;
	while(i < quake_SV.server.sound_precache.length) {
		if(sample == quake_SV.server.sound_precache[i]) {
			break;
		}
		++i;
	}
	if(i >= quake_SV.server.sound_precache.length) {
		quake_Console.Print("SV.StartSound: " + sample + " not precached\n");
		return;
	}
	var field_mask = 0;
	if(volume != 255) {
		++field_mask;
	}
	if(attenuation != 1.0) {
		field_mask += 2;
	}
	datagram.WriteByte(6);
	datagram.WriteByte(field_mask);
	if((field_mask & 1) != 0) {
		datagram.WriteByte(volume);
	}
	if((field_mask & 2) != 0) {
		datagram.WriteByte(Math.floor(attenuation * 64.0));
	}
	datagram.WriteShort((entity.num << 3) + channel);
	datagram.WriteByte(i);
	datagram.WriteShort((entity.v.origin[0] + 0.5 * (entity.v.mins[0] + entity.v.maxs[0])) * 8 | 0);
	datagram.WriteShort((entity.v.origin[1] + 0.5 * (entity.v.mins[1] + entity.v.maxs[1])) * 8 | 0);
	datagram.WriteShort((entity.v.origin[2] + 0.5 * (entity.v.mins[2] + entity.v.maxs[2])) * 8 | 0);
};
quake_SV.SendServerinfo = function(client) {
	var message = client.message;
	message.WriteByte(8);
	message.WriteString("\x02" + "\nVERSION 1.09 SERVER (" + quake_PR.crc + " CRC)\n");
	message.WriteByte(11);
	message.WriteLong(15);
	message.WriteByte(quake_SV.svs.maxclients);
	message.WriteByte(quake_Host.coop.value == 0 && quake_Host.deathmatch.value != 0 ? 1 : 0);
	message.WriteString(quake_PR.GetString(quake_SV.server.edicts[0].v.ints[99]));
	var _g1 = 1;
	var _g = quake_SV.server.model_precache.length;
	while(_g1 < _g) {
		var i = _g1++;
		message.WriteString(quake_SV.server.model_precache[i]);
	}
	message.WriteByte(0);
	var _g11 = 1;
	var _g2 = quake_SV.server.sound_precache.length;
	while(_g11 < _g2) {
		var i1 = _g11++;
		message.WriteString(quake_SV.server.sound_precache[i1]);
	}
	message.WriteByte(0);
	message.WriteByte(32);
	message.WriteByte(quake_SV.server.edicts[0].v.floats[100] | 0);
	message.WriteByte(quake_SV.server.edicts[0].v.floats[100] | 0);
	message.WriteByte(5);
	message.WriteShort(client.edict.num);
	message.WriteByte(25);
	message.WriteByte(1);
	client.sendsignon = true;
	client.spawned = false;
};
quake_SV.ConnectClient = function(clientnum) {
	var client = quake_SV.svs.clients[clientnum];
	var spawn_parms = null;
	if(quake_SV.server.loadgame) {
		spawn_parms = [];
		if(client.spawn_parms == null) {
			client.spawn_parms = [0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0];
		}
		var _g = 0;
		while(_g < 16) {
			var i = _g++;
			spawn_parms[i] = client.spawn_parms[i];
		}
	}
	quake_Console.DPrint("Client " + client.netconnection.address + " connected\n");
	client.active = true;
	client.dropasap = false;
	client.last_message = 0.0;
	client.cmd = new quake_ClientCmd();
	var this1 = new Float32Array(3);
	client.wishdir = this1;
	client.message.cursize = 0;
	client.edict = quake_SV.server.edicts[clientnum + 1];
	client.edict.v.ints[74] = quake_PR.netnames + (clientnum << 5);
	quake_SV.SetClientName(client,"unconnected");
	client.colors = 0;
	client.ping_times = [0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0];
	client.num_pings = 0;
	if(!quake_SV.server.loadgame) {
		client.spawn_parms = [0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0];
	}
	client.old_frags = 0;
	if(quake_SV.server.loadgame) {
		var _g1 = 0;
		while(_g1 < 16) {
			var i1 = _g1++;
			client.spawn_parms[i1] = spawn_parms[i1];
		}
	} else {
		quake_PR.ExecuteProgram(quake_PR.globals.ints[90]);
		var _this = quake_PR.globals;
		client.spawn_parms = [_this.floats[43],_this.floats[44],_this.floats[45],_this.floats[46],_this.floats[47],_this.floats[48],_this.floats[49],_this.floats[50],_this.floats[51],_this.floats[52],_this.floats[53],_this.floats[54],_this.floats[55],_this.floats[56],_this.floats[57],_this.floats[58]];
	}
	quake_SV.SendServerinfo(client);
};
quake_SV.CheckForNewClients = function() {
	while(true) {
		var ret = quake_NET.CheckNewConnections();
		if(ret == null) {
			return;
		}
		var i = 0;
		while(i < quake_SV.svs.maxclients) {
			if(!quake_SV.svs.clients[i].active) {
				break;
			}
			++i;
		}
		if(i == quake_SV.svs.maxclients) {
			quake_Sys.Error("SV.CheckForNewClients: no free clients");
		}
		quake_SV.svs.clients[i].netconnection = ret;
		quake_SV.ConnectClient(i);
		quake_NET.activeconnections++;
	}
};
quake_SV.AddToFatPVS = function(org,node) {
	while(true) {
		if(node.contents < 0) {
			if(node.contents != -2) {
				var pvs = quake_Mod_$Brush.LeafPVS(node,quake_SV.server.worldmodel);
				var _g1 = 0;
				var _g = quake_SV.fatbytes;
				while(_g1 < _g) {
					var i = _g1++;
					quake_SV.fatpvs[i] |= pvs[i];
				}
			}
			return;
		}
		var normal = node.plane.normal;
		var d = org[0] * normal[0] + org[1] * normal[1] + org[2] * normal[2] - node.plane.dist;
		if(d > 8.0) {
			node = node.child0;
		} else {
			if(d >= -8.0) {
				quake_SV.AddToFatPVS(org,node.child0);
			}
			node = node.child1;
		}
	}
};
quake_SV.FatPVS = function(org) {
	quake_SV.fatbytes = quake_SV.server.worldmodel.leafs.length + 31 >> 3;
	var _g1 = 0;
	var _g = quake_SV.fatbytes;
	while(_g1 < _g) {
		var i = _g1++;
		quake_SV.fatpvs[i] = 0;
	}
	quake_SV.AddToFatPVS(org,quake_SV.server.worldmodel.nodes[0]);
};
quake_SV.WriteEntitiesToClient = function(clent,msg) {
	var v1 = clent.v.origin;
	var v2 = clent.v.view_ofs;
	var this1 = new Float32Array(3);
	var v = this1;
	v[0] = v1[0] + v2[0];
	v[1] = v1[1] + v2[1];
	v[2] = v1[2] + v2[2];
	quake_SV.FatPVS(v);
	var pvs = quake_SV.fatpvs;
	var _g1 = 1;
	var _g = quake_SV.server.num_edicts;
	while(_g1 < _g) {
		var e = _g1++;
		var ent = quake_SV.server.edicts[e];
		if(ent != clent) {
			if(ent.v.floats[0] == 0.0 || quake_PR.strings[ent.v.ints[29]] == 0) {
				continue;
			}
			var i = 0;
			while(i < ent.leafnums.length) {
				if((pvs[ent.leafnums[i] >> 3] & 1 << (ent.leafnums[i] & 7)) != 0) {
					break;
				}
				++i;
			}
			if(i == ent.leafnums.length) {
				continue;
			}
		}
		if(msg.data.byteLength - msg.cursize < 16) {
			quake_Console.Print("packet overflow\n");
			return;
		}
		var bits = 0;
		var _g2 = 0;
		while(_g2 < 3) {
			var i1 = _g2++;
			var miss = ent.v.origin[i1] - ent.baseline.origin[i1];
			if(miss < -0.1 || miss > 0.1) {
				bits += 2 << i1;
			}
		}
		if(ent.v.angles[0] != ent.baseline.angles[0]) {
			bits += 256;
		}
		if(ent.v.angles[1] != ent.baseline.angles[1]) {
			bits += 16;
		}
		if(ent.v.angles[2] != ent.baseline.angles[2]) {
			bits += 512;
		}
		if(ent.v.floats[8] == 4) {
			bits += 32;
		}
		if(ent.baseline.colormap != ent.v.floats[77]) {
			bits += 2048;
		}
		if(ent.baseline.skin != ent.v.floats[31]) {
			bits += 4096;
		}
		if(ent.baseline.frame != ent.v.floats[30]) {
			bits += 64;
		}
		if(ent.baseline.effects != ent.v.floats[32]) {
			bits += 8192;
		}
		if(ent.baseline.modelindex != ent.v.floats[0]) {
			bits += 1024;
		}
		if(e >= 256) {
			bits += 16384;
		}
		if(bits >= 256) {
			bits += 1;
		}
		msg.WriteByte(bits + 128);
		if((bits & 1) != 0) {
			msg.WriteByte(bits >> 8);
		}
		if((bits & 16384) != 0) {
			msg.WriteShort(e);
		} else {
			msg.WriteByte(e);
		}
		if((bits & 1024) != 0) {
			msg.WriteByte(ent.v.floats[0] | 0);
		}
		if((bits & 64) != 0) {
			msg.WriteByte(ent.v.floats[30] | 0);
		}
		if((bits & 2048) != 0) {
			msg.WriteByte(ent.v.floats[77] | 0);
		}
		if((bits & 4096) != 0) {
			msg.WriteByte(ent.v.floats[31] | 0);
		}
		if((bits & 8192) != 0) {
			msg.WriteByte(ent.v.floats[32] | 0);
		}
		if((bits & 2) != 0) {
			msg.WriteShort(ent.v.origin[0] * 8 | 0);
		}
		if((bits & 256) != 0) {
			msg.WriteByte((ent.v.angles[0] * 256 / 360 | 0) & 255);
		}
		if((bits & 4) != 0) {
			msg.WriteShort(ent.v.origin[1] * 8 | 0);
		}
		if((bits & 16) != 0) {
			msg.WriteByte((ent.v.angles[1] * 256 / 360 | 0) & 255);
		}
		if((bits & 8) != 0) {
			msg.WriteShort(ent.v.origin[2] * 8 | 0);
		}
		if((bits & 512) != 0) {
			msg.WriteByte((ent.v.angles[2] * 256 / 360 | 0) & 255);
		}
	}
};
quake_SV.WriteClientdataToMessage = function(ent,msg) {
	if(ent.v.floats[92] != 0.0 || ent.v.floats[93] != 0.0) {
		var other = quake_SV.server.edicts[ent.v.ints[94]];
		msg.WriteByte(19);
		msg.WriteByte(ent.v.floats[93] | 0);
		msg.WriteByte(ent.v.floats[92] | 0);
		msg.WriteShort((other.v.origin[0] + 0.5 * (other.v.mins[0] + other.v.maxs[0])) * 8 | 0);
		msg.WriteShort((other.v.origin[1] + 0.5 * (other.v.mins[1] + other.v.maxs[1])) * 8 | 0);
		msg.WriteShort((other.v.origin[2] + 0.5 * (other.v.mins[2] + other.v.maxs[2])) * 8 | 0);
		ent.v.floats[92] = 0.0;
		ent.v.floats[93] = 0.0;
	}
	quake_SV.SetIdealPitch();
	if(ent.v.floats[69] != 0.0) {
		msg.WriteByte(10);
		msg.WriteByte((ent.v.angles[0] * 256 / 360 | 0) & 255);
		msg.WriteByte((ent.v.angles[1] * 256 / 360 | 0) & 255);
		msg.WriteByte((ent.v.angles[2] * 256 / 360 | 0) & 255);
		ent.v.floats[69] = 0.0;
	}
	var bits = 512 + 16384;
	if(ent.v.view_ofs[2] != 22) {
		bits = bits + 1;
	}
	if(ent.v.floats[73] != 0.0) {
		bits = bits + 2;
	}
	var val = quake_EdictVars.items2_ofs;
	var items;
	if(val != null) {
		if(ent.v.floats[val] != 0.0) {
			items = (ent.v.floats[58] | 0 | 0) + ((ent.v.floats[val] | 0) << 23);
		} else {
			items = (ent.v.floats[58] | 0 | 0) + ((quake_PR.globals.floats[38] | 0) << 28);
		}
	} else {
		items = (ent.v.floats[58] | 0 | 0) + ((quake_PR.globals.floats[38] | 0) << 28);
	}
	if(((ent.v.floats[76] | 0) & 512) != 0) {
		bits = bits + 1024;
	}
	if(ent.v.floats[83] >= 2.0) {
		bits = bits + 2048;
	}
	if(ent.v.punchangle[0] != 0.0) {
		bits = bits + 4;
	}
	if(ent.v.velocity[0] != 0.0) {
		bits = bits + 32;
	}
	if(ent.v.punchangle[1] != 0.0) {
		bits = bits + 8;
	}
	if(ent.v.velocity[1] != 0.0) {
		bits = bits + 64;
	}
	if(ent.v.punchangle[2] != 0.0) {
		bits = bits + 16;
	}
	if(ent.v.velocity[2] != 0.0) {
		bits = bits + 128;
	}
	if(ent.v.floats[52] != 0.0) {
		bits = bits + 4096;
	}
	if(ent.v.floats[82] != 0.0) {
		bits = bits + 8192;
	}
	msg.WriteByte(15);
	msg.WriteShort(bits);
	if((bits & 1) != 0) {
		msg.WriteChar(ent.v.view_ofs[2] | 0);
	}
	if((bits & 2) != 0) {
		msg.WriteChar(ent.v.floats[73] | 0);
	}
	if((bits & 4) != 0) {
		msg.WriteChar(ent.v.punchangle[0] | 0);
	}
	if((bits & 32) != 0) {
		msg.WriteChar(ent.v.velocity[0] * 0.0625 | 0);
	}
	if((bits & 8) != 0) {
		msg.WriteChar(ent.v.punchangle[1] | 0);
	}
	if((bits & 64) != 0) {
		msg.WriteChar(ent.v.velocity[1] * 0.0625 | 0);
	}
	if((bits & 16) != 0) {
		msg.WriteChar(ent.v.punchangle[2] | 0);
	}
	if((bits & 128) != 0) {
		msg.WriteChar(ent.v.velocity[2] * 0.0625 | 0);
	}
	msg.WriteLong(items);
	if((bits & 4096) != 0) {
		msg.WriteByte(ent.v.floats[52] | 0);
	}
	if((bits & 8192) != 0) {
		msg.WriteByte(ent.v.floats[82] | 0);
	}
	msg.WriteByte(quake_SV.ModelIndex(quake_PR.GetString(ent.v.ints[51])));
	msg.WriteShort(ent.v.floats[48] | 0);
	msg.WriteByte(ent.v.floats[53] | 0);
	msg.WriteByte(ent.v.floats[54] | 0);
	msg.WriteByte(ent.v.floats[55] | 0);
	msg.WriteByte(ent.v.floats[56] | 0);
	msg.WriteByte(ent.v.floats[57] | 0);
	if(quake_COM.standard_quake) {
		msg.WriteByte(ent.v.floats[50] | 0);
	} else {
		var weapon = ent.v.floats[50] | 0;
		var _g = 0;
		while(_g < 32) {
			var i = _g++;
			if((weapon & 1 << i) != 0) {
				msg.WriteByte(i);
				break;
			}
		}
	}
};
quake_SV.SendClientDatagram = function() {
	var client = quake_Host.client;
	var msg = quake_SV.clientdatagram;
	msg.cursize = 0;
	msg.WriteByte(7);
	msg.WriteFloat(quake_SV.server.time);
	quake_SV.WriteClientdataToMessage(client.edict,msg);
	quake_SV.WriteEntitiesToClient(client.edict,msg);
	if(msg.cursize + quake_SV.server.datagram.cursize < msg.data.byteLength) {
		msg.Write(new Uint8Array(quake_SV.server.datagram.data),quake_SV.server.datagram.cursize);
	}
	if(quake_NET.SendUnreliableMessage(client.netconnection,msg) == -1) {
		quake_Host.DropClient(true);
		return false;
	}
	return true;
};
quake_SV.UpdateToReliableMessages = function() {
	var _g1 = 0;
	var _g = quake_SV.svs.maxclients;
	while(_g1 < _g) {
		var i = _g1++;
		quake_Host.client = quake_SV.svs.clients[i];
		var frags = quake_Host.client.edict.v.floats[49] | 0;
		quake_Host.client.edict.v.floats[49] = frags;
		if(quake_Host.client.old_frags == frags) {
			continue;
		}
		var _g3 = 0;
		var _g2 = quake_SV.svs.maxclients;
		while(_g3 < _g2) {
			var j = _g3++;
			var client = quake_SV.svs.clients[j];
			if(!client.active) {
				continue;
			}
			client.message.WriteByte(14);
			client.message.WriteByte(i);
			client.message.WriteShort(frags);
		}
		quake_Host.client.old_frags = frags;
	}
	var _g11 = 0;
	var _g4 = quake_SV.svs.maxclients;
	while(_g11 < _g4) {
		var i1 = _g11++;
		var client1 = quake_SV.svs.clients[i1];
		if(client1.active) {
			client1.message.Write(new Uint8Array(quake_SV.server.reliable_datagram.data),quake_SV.server.reliable_datagram.cursize);
		}
	}
	quake_SV.server.reliable_datagram.cursize = 0;
};
quake_SV.SendClientMessages = function() {
	quake_SV.UpdateToReliableMessages();
	var _g1 = 0;
	var _g = quake_SV.svs.maxclients;
	while(_g1 < _g) {
		var i = _g1++;
		var client = quake_Host.client = quake_SV.svs.clients[i];
		if(!client.active) {
			continue;
		}
		if(client.spawned) {
			if(!quake_SV.SendClientDatagram()) {
				continue;
			}
		} else if(!client.sendsignon) {
			if(quake_Host.realtime - client.last_message > 5.0) {
				if(quake_NET.SendUnreliableMessage(client.netconnection,quake_SV.nop) == -1) {
					quake_Host.DropClient(true);
				}
				client.last_message = quake_Host.realtime;
			}
			continue;
		}
		if(client.message.overflowed) {
			quake_Host.DropClient(true);
			client.message.overflowed = false;
			continue;
		}
		if(client.dropasap) {
			if(quake_NET.CanSendMessage(client.netconnection)) {
				quake_Host.DropClient(false);
			}
		} else if(client.message.cursize != 0) {
			if(!quake_NET.CanSendMessage(client.netconnection)) {
				continue;
			}
			if(quake_NET.SendMessage(client.netconnection,client.message) == -1) {
				quake_Host.DropClient(true);
			}
			client.message.cursize = 0;
			client.last_message = quake_Host.realtime;
			client.sendsignon = false;
		}
	}
	var _g11 = 1;
	var _g2 = quake_SV.server.num_edicts;
	while(_g11 < _g2) {
		var i1 = _g11++;
		quake_SV.server.edicts[i1].v.floats[32] = (quake_SV.server.edicts[i1].v.floats[32] | 0) & ~2;
	}
};
quake_SV.ModelIndex = function(name) {
	if(name == null) {
		return 0;
	}
	if(name.length == 0) {
		return 0;
	}
	var _g1 = 0;
	var _g = quake_SV.server.model_precache.length;
	while(_g1 < _g) {
		var i = _g1++;
		if(quake_SV.server.model_precache[i] == name) {
			return i;
		}
	}
	quake_Sys.Error("SV.ModelIndex: model " + name + " not precached");
	return 0;
};
quake_SV.CreateBaseline = function() {
	var player = quake_SV.ModelIndex("progs/player.mdl");
	var signon = quake_SV.server.signon;
	var _g1 = 0;
	var _g = quake_SV.server.num_edicts;
	while(_g1 < _g) {
		var i = _g1++;
		var svent = quake_SV.server.edicts[i];
		if(svent.free) {
			continue;
		}
		if(i > quake_SV.svs.maxclients && svent.v.floats[0] == 0) {
			continue;
		}
		var baseline = svent.baseline;
		var this1 = baseline.origin;
		var y = svent.v.origin[1];
		var z = svent.v.origin[2];
		this1[0] = svent.v.origin[0];
		this1[1] = y;
		this1[2] = z;
		var this2 = baseline.angles;
		var y1 = svent.v.angles[1];
		var z1 = svent.v.angles[2];
		this2[0] = svent.v.angles[0];
		this2[1] = y1;
		this2[2] = z1;
		baseline.frame = svent.v.floats[30] | 0;
		baseline.skin = svent.v.floats[31] | 0;
		if(i > 0 && i <= quake_SV.svs.maxclients) {
			baseline.colormap = i;
			baseline.modelindex = player;
		} else {
			baseline.colormap = 0;
			baseline.modelindex = quake_SV.ModelIndex(quake_PR.GetString(svent.v.ints[29]));
		}
		signon.WriteByte(22);
		signon.WriteShort(i);
		signon.WriteByte(baseline.modelindex);
		signon.WriteByte(baseline.frame);
		signon.WriteByte(baseline.colormap);
		signon.WriteByte(baseline.skin);
		signon.WriteShort(baseline.origin[0] * 8 | 0);
		signon.WriteByte((baseline.angles[0] * 256 / 360 | 0) & 255);
		signon.WriteShort(baseline.origin[1] * 8 | 0);
		signon.WriteByte((baseline.angles[1] * 256 / 360 | 0) & 255);
		signon.WriteShort(baseline.origin[2] * 8 | 0);
		signon.WriteByte((baseline.angles[2] * 256 / 360 | 0) & 255);
	}
};
quake_SV.SaveSpawnparms = function() {
	quake_SV.svs.serverflags = quake_PR.globals.floats[38] | 0;
	var _g1 = 0;
	var _g = quake_SV.svs.maxclients;
	while(_g1 < _g) {
		var i = _g1++;
		quake_Host.client = quake_SV.svs.clients[i];
		if(!quake_Host.client.active) {
			continue;
		}
		quake_PR.globals.ints[28] = quake_Host.client.edict.num;
		quake_PR.ExecuteProgram(quake_PR.globals.ints[91]);
		var _this = quake_PR.globals;
		quake_Host.client.spawn_parms = [_this.floats[43],_this.floats[44],_this.floats[45],_this.floats[46],_this.floats[47],_this.floats[48],_this.floats[49],_this.floats[50],_this.floats[51],_this.floats[52],_this.floats[53],_this.floats[54],_this.floats[55],_this.floats[56],_this.floats[57],_this.floats[58]];
	}
};
quake_SV.SpawnServer = function(map) {
	if(quake_NET.hostname.string.length == 0) {
		quake_NET.hostname.set("UNNAMED");
	}
	quake_SCR.centertime_off = 0.0;
	quake_Console.DPrint("SpawnServer: " + map + "\n");
	quake_SV.svs.changelevel_issued = false;
	if(quake_SV.server.active) {
		quake_NET.SendToAll(quake_SV.reconnect);
		quake_Cmd.ExecuteString("reconnect\n");
	}
	if(quake_Host.coop.value != 0) {
		quake_Host.deathmatch.setValue(0);
	}
	quake_Host.current_skill = Math.floor(quake_Host.skill.value + 0.5);
	if(quake_Host.current_skill < 0) {
		quake_Host.current_skill = 0;
	} else if(quake_Host.current_skill > 3) {
		quake_Host.current_skill = 3;
	}
	quake_Host.skill.setValue(quake_Host.current_skill);
	quake_Console.DPrint("Clearing memory\n");
	quake_Mod.ClearAll();
	quake_PR.LoadProgs();
	quake_SV.server.edicts = [];
	var _g = 0;
	while(_g < 2048) {
		var i = _g++;
		quake_SV.server.edicts.push(new quake_Edict(i));
	}
	quake_SV.server.datagram.cursize = 0;
	quake_SV.server.reliable_datagram.cursize = 0;
	quake_SV.server.signon.cursize = 0;
	quake_SV.server.num_edicts = quake_SV.svs.maxclients + 1;
	var _g1 = 0;
	var _g2 = quake_SV.svs.maxclients;
	while(_g1 < _g2) {
		var i1 = _g1++;
		quake_SV.svs.clients[i1].edict = quake_SV.server.edicts[i1 + 1];
	}
	quake_SV.server.loading = true;
	quake_SV.server.paused = false;
	quake_SV.server.loadgame = false;
	quake_SV.server.time = 1.0;
	quake_SV.server.lastcheck = 0;
	quake_SV.server.lastchecktime = 0.0;
	quake_SV.server.modelname = "maps/" + map + ".bsp";
	var tmp = quake_Mod.LoadModel(quake_Mod.FindName(quake_SV.server.modelname),false);
	quake_SV.server.worldmodel = tmp;
	if(quake_SV.server.worldmodel == null) {
		quake_Console.Print("Couldn't spawn server " + quake_SV.server.modelname + "\n");
		quake_SV.server.active = false;
		return;
	}
	quake_SV.server.models = [];
	quake_SV.server.models[1] = quake_SV.server.worldmodel;
	quake_SV.areanodes = [];
	quake_SV.CreateAreaNode(0,quake_SV.server.worldmodel.mins,quake_SV.server.worldmodel.maxs);
	quake_SV.server.sound_precache = [""];
	quake_SV.server.model_precache = ["",quake_SV.server.modelname];
	var _g11 = 1;
	var _g3 = quake_SV.server.worldmodel.submodels.length + 1;
	while(_g11 < _g3) {
		var i2 = _g11++;
		quake_SV.server.model_precache[i2 + 1] = "*" + i2;
		quake_SV.server.models[i2 + 1] = quake_Mod.LoadModel(quake_Mod.FindName("*" + i2),false);
	}
	quake_SV.server.lightstyles = [];
	var _g4 = 0;
	while(_g4 < 64) {
		var i3 = _g4++;
		quake_SV.server.lightstyles.push("");
	}
	var ent = quake_SV.server.edicts[0];
	var _this = ent.v;
	var value = quake_PR.NewString(quake_SV.server.modelname,64);
	_this.ints[29] = value;
	ent.v.floats[0] = 1.0;
	ent.v.floats[9] = 4;
	ent.v.floats[8] = 7;
	if(quake_Host.coop.value != 0) {
		quake_PR.globals.floats[36] = quake_Host.coop.value;
	} else {
		quake_PR.globals.floats[35] = quake_Host.deathmatch.value;
	}
	var _this1 = quake_PR.globals;
	var value1 = quake_PR.NewString(map,64);
	_this1.ints[34] = value1;
	quake_PR.globals.floats[38] = quake_SV.svs.serverflags;
	quake_ED.LoadFromFile(quake_SV.server.worldmodel.entities);
	quake_SV.server.active = true;
	quake_SV.server.loading = false;
	quake_Host.frametime = 0.1;
	quake_SV.Physics();
	quake_SV.Physics();
	quake_SV.CreateBaseline();
	var _g12 = 0;
	var _g5 = quake_SV.svs.maxclients;
	while(_g12 < _g5) {
		var i4 = _g12++;
		quake_Host.client = quake_SV.svs.clients[i4];
		if(!quake_Host.client.active) {
			continue;
		}
		quake_Host.client.edict.v.ints[74] = quake_PR.netnames + (i4 << 5);
		quake_SV.SendServerinfo(quake_Host.client);
	}
	quake_Console.DPrint("Server spawned.\n");
};
quake_SV.GetClientName = function(client) {
	return quake_PR.GetString(quake_PR.netnames + (client.num << 5));
};
quake_SV.SetClientName = function(client,name) {
	var ofs = quake_PR.netnames + (client.num << 5);
	var i = 0;
	while(i < name.length) {
		quake_PR.strings[ofs + i] = HxOverrides.cca(name,i);
		++i;
	}
	quake_PR.strings[ofs + i] = 0;
};
quake_SV.CheckBottom = function(ent) {
	var mins_0 = ent.v.origin[0] + ent.v.mins[0];
	var mins_1 = ent.v.origin[1] + ent.v.mins[1];
	var mins_2 = ent.v.origin[2] + ent.v.mins[2];
	var maxs_0 = ent.v.origin[0] + ent.v.maxs[0];
	var maxs_1 = ent.v.origin[1] + ent.v.maxs[1];
	var maxs_2 = ent.v.origin[2] + ent.v.maxs[2];
	while(true) {
		var this1 = new Float32Array(3);
		var v = this1;
		v[0] = mins_0;
		v[1] = mins_1;
		v[2] = mins_2 - 1.0;
		if(quake_SV.PointContents(v) != -2) {
			break;
		}
		var this2 = new Float32Array(3);
		var v1 = this2;
		v1[0] = mins_0;
		v1[1] = maxs_1;
		v1[2] = mins_2 - 1.0;
		if(quake_SV.PointContents(v1) != -2) {
			break;
		}
		var this3 = new Float32Array(3);
		var v2 = this3;
		v2[0] = maxs_0;
		v2[1] = mins_1;
		v2[2] = mins_2 - 1.0;
		if(quake_SV.PointContents(v2) != -2) {
			break;
		}
		var this4 = new Float32Array(3);
		var v3 = this4;
		v3[0] = maxs_0;
		v3[1] = maxs_1;
		v3[2] = mins_2 - 1.0;
		if(quake_SV.PointContents(v3) != -2) {
			break;
		}
		return true;
	}
	var this5 = new Float32Array(3);
	var v4 = this5;
	v4[0] = (mins_0 + maxs_0) * 0.5;
	v4[1] = (mins_1 + maxs_1) * 0.5;
	v4[2] = mins_2;
	var start = v4;
	var this6 = new Float32Array(3);
	var v5 = this6;
	v5[0] = start[0];
	v5[1] = start[1];
	v5[2] = start[2] - 36.0;
	var stop = v5;
	var trace = quake_SV.Move(start,quake__$Vec_Vec_$Impl_$.origin,quake__$Vec_Vec_$Impl_$.origin,stop,1,ent);
	if(trace.fraction == 1.0) {
		return false;
	}
	var mid;
	var bottom = trace.endpos[2];
	mid = bottom;
	var _g = 0;
	while(_g < 2) {
		var x = _g++;
		var _g1 = 0;
		while(_g1 < 2) {
			var y = _g1++;
			start[0] = stop[0] = x != 0 ? maxs_0 : mins_0;
			start[1] = stop[1] = y != 0 ? maxs_1 : mins_1;
			trace = quake_SV.Move(start,quake__$Vec_Vec_$Impl_$.origin,quake__$Vec_Vec_$Impl_$.origin,stop,1,ent);
			if(trace.fraction != 1.0 && trace.endpos[2] > bottom) {
				bottom = trace.endpos[2];
			}
			if(trace.fraction == 1.0 || mid - trace.endpos[2] > 18.0) {
				return false;
			}
		}
	}
	return true;
};
quake_SV.movestep = function(ent,move,relink) {
	var oldorg = ent.v.origin;
	var this1 = new Float32Array(3);
	var neworg = this1;
	var mins = new Float32Array(ent.v.mins);
	var maxs = new Float32Array(ent.v.maxs);
	if(((ent.v.floats[76] | 0) & 2 + 1) != 0) {
		var enemy = ent.v.ints[75];
		var _g = 0;
		while(_g < 2) {
			var i = _g++;
			var y = ent.v.origin[1] + move[1];
			var z = ent.v.origin[2];
			neworg[0] = ent.v.origin[0] + move[0];
			neworg[1] = y;
			neworg[2] = z;
			if(i == 0 && enemy != 0) {
				var dz = ent.v.origin[2] - quake_SV.server.edicts[enemy].v.origin[2];
				if(dz > 40.0) {
					var _g1 = neworg;
					_g1[2] -= 8.0;
				} else if(dz < 30.0) {
					var _g11 = neworg;
					_g11[2] += 8.0;
				}
			}
			var trace = quake_SV.Move(new Float32Array(ent.v.origin),mins,maxs,neworg,0,ent);
			if(trace.fraction == 1.0) {
				if(((ent.v.floats[76] | 0) & 2) != 0 && quake_SV.PointContents(trace.endpos) == -1) {
					return false;
				}
				ent.v.origin.set(trace.endpos);
				if(relink) {
					quake_SV.LinkEdict(ent,true);
				}
				return true;
			}
			if(enemy == 0) {
				return false;
			}
		}
		return false;
	}
	var y1 = ent.v.origin[1] + move[1];
	var z1 = ent.v.origin[2] + 18.0;
	neworg[0] = ent.v.origin[0] + move[0];
	neworg[1] = y1;
	neworg[2] = z1;
	var this2 = new Float32Array(3);
	var v = this2;
	v[0] = neworg[0];
	v[1] = neworg[1];
	v[2] = neworg[2] - 36.0;
	var end = v;
	var trace1 = quake_SV.Move(neworg,mins,maxs,end,0,ent);
	if(trace1.allsolid) {
		return false;
	}
	if(trace1.startsolid) {
		var _g2 = neworg;
		_g2[2] -= 18.0;
		trace1 = quake_SV.Move(neworg,mins,maxs,end,0,ent);
		if(trace1.allsolid || trace1.startsolid) {
			return false;
		}
	}
	if(trace1.fraction == 1.0) {
		if(((ent.v.floats[76] | 0) & 1024) == 0) {
			return false;
		}
		var _g3 = ent.v.origin;
		_g3[0] += move[0];
		var _g4 = ent.v.origin;
		_g4[1] += move[1];
		if(relink) {
			quake_SV.LinkEdict(ent,true);
		}
		var _g5 = ent;
		var v1 = (_g5.v.floats[76] | 0) & ~512;
		_g5.v.floats[76] = v1;
		return true;
	}
	ent.v.origin.set(trace1.endpos);
	if(!quake_SV.CheckBottom(ent)) {
		if(((ent.v.floats[76] | 0) & 1024) != 0) {
			if(relink) {
				quake_SV.LinkEdict(ent,true);
			}
			return true;
		}
		ent.v.origin.set(oldorg);
		return false;
	}
	var _g6 = ent;
	var v2 = (_g6.v.floats[76] | 0) & ~1024;
	_g6.v.floats[76] = v2;
	ent.v.ints[47] = trace1.ent.num;
	if(relink) {
		quake_SV.LinkEdict(ent,true);
	}
	return true;
};
quake_SV.StepDirection = function(ent,yaw,dist) {
	ent.v.floats[85] = yaw;
	quake_PF.changeyaw();
	yaw *= Math.PI / 180.0;
	var oldorigin = new Float32Array(ent.v.origin);
	var x = Math.cos(yaw) * dist;
	var y = Math.sin(yaw) * dist;
	var this1 = new Float32Array(3);
	var v = this1;
	v[0] = x;
	v[1] = y;
	v[2] = 0;
	if(quake_SV.movestep(ent,v,false)) {
		var delta = ent.v.angles[1] - ent.v.floats[85];
		if(delta > 45.0 && delta < 315.0) {
			ent.v.origin.set(oldorigin);
		}
		quake_SV.LinkEdict(ent,true);
		return true;
	}
	quake_SV.LinkEdict(ent,true);
	return false;
};
quake_SV.NewChaseDir = function(actor,enemy,dist) {
	var olddir = quake__$Vec_Vec_$Impl_$.Anglemod((actor.v.floats[85] / 45.0 | 0) * 45.0);
	var turnaround = quake__$Vec_Vec_$Impl_$.Anglemod(olddir - 180.0);
	var deltax = enemy.v.origin[0] - actor.v.origin[0];
	var deltay = enemy.v.origin[1] - actor.v.origin[1];
	var dx;
	var dy;
	if(deltax > 10.0) {
		dx = 0.0;
	} else if(deltax < -10.0) {
		dx = 180.0;
	} else {
		dx = -1;
	}
	if(deltay < -10.0) {
		dy = 270.0;
	} else if(deltay > 10.0) {
		dy = 90.0;
	} else {
		dy = -1;
	}
	var tdir;
	if(dx != -1 && dy != -1) {
		if(dx == 0.0) {
			if(dy == 90.0) {
				tdir = 45.0;
			} else {
				tdir = 315.0;
			}
		} else if(dy == 90.0) {
			tdir = 135.0;
		} else {
			tdir = 215.0;
		}
		if(tdir != turnaround && quake_SV.StepDirection(actor,tdir,dist)) {
			return;
		}
	}
	if(Math.random() >= 0.25 || Math.abs(deltay) > Math.abs(deltax)) {
		tdir = dx;
		dx = dy;
		dy = tdir;
	}
	if(dx != -1 && dx != turnaround && quake_SV.StepDirection(actor,dx,dist)) {
		return;
	}
	if(dy != -1 && dy != turnaround && quake_SV.StepDirection(actor,dy,dist)) {
		return;
	}
	if(olddir != -1 && quake_SV.StepDirection(actor,olddir,dist)) {
		return;
	}
	if(Math.random() >= 0.5) {
		tdir = 0.0;
		while(tdir <= 315.0) {
			if(tdir != turnaround && quake_SV.StepDirection(actor,tdir,dist)) {
				return;
			}
			tdir += 45.0;
		}
	} else {
		tdir = 315.0;
		while(tdir >= 0.0) {
			if(tdir != turnaround && quake_SV.StepDirection(actor,tdir,dist)) {
				return;
			}
			tdir -= 45.0;
		}
	}
	if(turnaround != -1 && quake_SV.StepDirection(actor,turnaround,dist)) {
		return;
	}
	actor.v.floats[85] = olddir;
	if(!quake_SV.CheckBottom(actor)) {
		var _g = actor;
		var v = _g.v.floats[76] | 0 | 1024;
		_g.v.floats[76] = v;
	}
};
quake_SV.CloseEnough = function(ent,goal,dist) {
	var _g = 0;
	while(_g < 3) {
		var i = _g++;
		if(goal.v.absmin[i] > ent.v.absmax[i] + dist) {
			return false;
		}
		if(goal.v.absmax[i] < ent.v.absmin[i] - dist) {
			return false;
		}
	}
	return true;
};
quake_SV.CheckAllEnts = function() {
	var _g1 = 1;
	var _g = quake_SV.server.num_edicts;
	while(_g1 < _g) {
		var e = _g1++;
		var check = quake_SV.server.edicts[e];
		if(check.free) {
			continue;
		}
		var _g2 = check.v.floats[8];
		switch(_g2) {
		case 0:case 7:case 8:
			continue;
			break;
		}
		if(quake_SV.TestEntityPosition(check)) {
			quake_Console.Print("entity in invalid position\n");
		}
	}
};
quake_SV.CheckVelocity = function(ent) {
	var _g = 0;
	while(_g < 3) {
		var i = _g++;
		var velocity = ent.v.velocity[i];
		if(isNaN(velocity)) {
			quake_Console.Print("Got a NaN velocity on " + quake_PR.GetString(ent.v.ints[28]) + "\n");
			velocity = 0.0;
		}
		if(isNaN(ent.v.origin[i])) {
			quake_Console.Print("Got a NaN origin on " + quake_PR.GetString(ent.v.ints[28]) + "\n");
			ent.v.origin[i] = 0.0;
		}
		if(velocity > quake_SV.maxvelocity.value) {
			velocity = quake_SV.maxvelocity.value;
		} else if(velocity < -quake_SV.maxvelocity.value) {
			velocity = -quake_SV.maxvelocity.value;
		}
		ent.v.velocity[i] = velocity;
	}
};
quake_SV.RunThink = function(ent) {
	var thinktime = ent.v.floats[46];
	if(thinktime <= 0.0 || thinktime > quake_SV.server.time + quake_Host.frametime) {
		return true;
	}
	if(thinktime < quake_SV.server.time) {
		thinktime = quake_SV.server.time;
	}
	ent.v.floats[46] = 0.0;
	quake_PR.globals.floats[31] = thinktime;
	quake_PR.globals.ints[28] = ent.num;
	quake_PR.globals.ints[29] = 0;
	quake_PR.ExecuteProgram(ent.v.ints[44]);
	return !ent.free;
};
quake_SV.Impact = function(e1,e2) {
	var old_self = quake_PR.globals.ints[28];
	var old_other = quake_PR.globals.ints[29];
	quake_PR.globals.floats[31] = quake_SV.server.time;
	if(e1.v.ints[42] != 0 && e1.v.floats[9] != 0) {
		quake_PR.globals.ints[28] = e1.num;
		quake_PR.globals.ints[29] = e2.num;
		quake_PR.ExecuteProgram(e1.v.ints[42]);
	}
	if(e2.v.ints[42] != 0 && e2.v.floats[9] != 0) {
		quake_PR.globals.ints[28] = e2.num;
		quake_PR.globals.ints[29] = e1.num;
		quake_PR.ExecuteProgram(e2.v.ints[42]);
	}
	quake_PR.globals.ints[28] = old_self;
	quake_PR.globals.ints[29] = old_other;
};
quake_SV.ClipVelocity = function(vec,normal,out,overbounce) {
	var backoff = (vec[0] * normal[0] + vec[1] * normal[1] + vec[2] * normal[2]) * overbounce;
	out[0] = vec[0] - normal[0] * backoff;
	if(out[0] > -0.1 && out[0] < 0.1) {
		out[0] = 0.0;
	}
	out[1] = vec[1] - normal[1] * backoff;
	if(out[1] > -0.1 && out[1] < 0.1) {
		out[1] = 0.0;
	}
	out[2] = vec[2] - normal[2] * backoff;
	if(out[2] > -0.1 && out[2] < 0.1) {
		out[2] = 0.0;
	}
};
quake_SV.FlyMove = function(ent,time) {
	var primal_velocity = new Float32Array(ent.v.velocity);
	var original_velocity = new Float32Array(ent.v.velocity);
	var this1 = new Float32Array(3);
	var new_velocity = this1;
	var this2 = new Float32Array(3);
	var end = this2;
	var time_left = time;
	var blocked = 0;
	var planes = [];
	var numplanes = 0;
	var _g = 0;
	while(_g < 4) {
		var bumpcount = _g++;
		if(ent.v.velocity[0] == 0.0 && ent.v.velocity[1] == 0.0 && ent.v.velocity[2] == 0.0) {
			break;
		}
		end[0] = ent.v.origin[0] + time_left * ent.v.velocity[0];
		end[1] = ent.v.origin[1] + time_left * ent.v.velocity[1];
		end[2] = ent.v.origin[2] + time_left * ent.v.velocity[2];
		var trace = quake_SV.Move(new Float32Array(ent.v.origin),new Float32Array(ent.v.mins),new Float32Array(ent.v.maxs),end,0,ent);
		if(trace.allsolid) {
			ent.v.velocity.set(quake__$Vec_Vec_$Impl_$.origin);
			return 3;
		}
		if(trace.fraction > 0.0) {
			ent.v.origin.set(trace.endpos);
			original_velocity = new Float32Array(ent.v.velocity);
			numplanes = 0;
			if(trace.fraction == 1.0) {
				break;
			}
		}
		if(trace.ent == null) {
			quake_Sys.Error("SV.FlyMove: !trace.ent");
		}
		if(trace.plane.normal[2] > 0.7) {
			blocked |= 1;
			if(trace.ent.v.floats[9] == 4) {
				var _g1 = ent;
				var v = _g1.v.floats[76] | 0 | 512;
				_g1.v.floats[76] = v;
				ent.v.ints[47] = trace.ent.num;
			}
		} else if(trace.plane.normal[2] == 0.0) {
			blocked |= 2;
			quake_SV.steptrace = trace;
		}
		quake_SV.Impact(ent,trace.ent);
		if(ent.free) {
			break;
		}
		time_left -= time_left * trace.fraction;
		if(numplanes >= 5) {
			ent.v.velocity.set(quake__$Vec_Vec_$Impl_$.origin);
			return 3;
		}
		var this3 = new Float32Array(3);
		var v1 = this3;
		v1[0] = trace.plane.normal[0];
		v1[1] = trace.plane.normal[1];
		v1[2] = trace.plane.normal[2];
		planes[numplanes++] = v1;
		var i = 0;
		while(i < numplanes) {
			quake_SV.ClipVelocity(original_velocity,planes[i],new_velocity,1.0);
			var j = 0;
			while(j < numplanes) {
				if(j != i) {
					var plane = planes[j];
					if(new_velocity[0] * plane[0] + new_velocity[1] * plane[1] + new_velocity[2] * plane[2] < 0.0) {
						break;
					}
				}
				++j;
			}
			if(j == numplanes) {
				break;
			}
			++i;
		}
		if(i != numplanes) {
			ent.v.velocity.set(new_velocity);
		} else {
			if(numplanes != 2) {
				ent.v.velocity.set(quake__$Vec_Vec_$Impl_$.origin);
				return 7;
			}
			var dir = quake__$Vec_Vec_$Impl_$.CrossProduct(planes[0],planes[1]);
			var d = dir[0] * ent.v.velocity[0] + dir[1] * ent.v.velocity[1] + dir[2] * ent.v.velocity[2];
			var this4 = ent.v.velocity;
			this4[0] = dir[0] * d;
			this4[1] = dir[1] * d;
			this4[2] = dir[2] * d;
		}
		if(ent.v.velocity[0] * primal_velocity[0] + ent.v.velocity[1] * primal_velocity[1] + ent.v.velocity[2] * primal_velocity[2] <= 0.0) {
			ent.v.velocity.set(quake__$Vec_Vec_$Impl_$.origin);
			return blocked;
		}
	}
	return blocked;
};
quake_SV.AddGravity = function(ent) {
	var val = quake_EdictVars.gravity_ofs;
	var ent_gravity;
	if(val != null) {
		if(ent.v.floats[val] != 0.0) {
			ent_gravity = ent.v.floats[val];
		} else {
			ent_gravity = 1.0;
		}
	} else {
		ent_gravity = 1.0;
	}
	var _g = ent.v.velocity;
	_g[2] -= ent_gravity * quake_SV.gravity.value * quake_Host.frametime;
};
quake_SV.PushEntity = function(ent,push) {
	var v1 = ent.v.origin;
	var this1 = new Float32Array(3);
	var v = this1;
	v[0] = v1[0] + push[0];
	v[1] = v1[1] + push[1];
	v[2] = v1[2] + push[2];
	var end = v;
	var nomonsters;
	var solid = ent.v.floats[9];
	if(ent.v.floats[8] == 9) {
		nomonsters = 2;
	} else if(solid == 1 || solid == 0) {
		nomonsters = 1;
	} else {
		nomonsters = 0;
	}
	var trace = quake_SV.Move(new Float32Array(ent.v.origin),new Float32Array(ent.v.mins),new Float32Array(ent.v.maxs),end,nomonsters,ent);
	ent.v.origin.set(trace.endpos);
	quake_SV.LinkEdict(ent,true);
	if(trace.ent != null) {
		quake_SV.Impact(ent,trace.ent);
	}
	return trace;
};
quake_SV.PushMove = function(pusher,movetime) {
	if(pusher.v.velocity[0] == 0.0 && pusher.v.velocity[1] == 0.0 && pusher.v.velocity[2] == 0.0) {
		var _g = pusher.v;
		_g.floats[7] += movetime;
		return;
	}
	var x = pusher.v.velocity[0] * movetime;
	var y = pusher.v.velocity[1] * movetime;
	var z = pusher.v.velocity[2] * movetime;
	var this1 = new Float32Array(3);
	var v = this1;
	v[0] = x;
	v[1] = y;
	v[2] = z;
	var move = v;
	var mins_0 = pusher.v.absmin[0] + move[0];
	var mins_1 = pusher.v.absmin[1] + move[1];
	var mins_2 = pusher.v.absmin[2] + move[2];
	var maxs_0 = pusher.v.absmax[0] + move[0];
	var maxs_1 = pusher.v.absmax[1] + move[1];
	var maxs_2 = pusher.v.absmax[2] + move[2];
	var pushorig = new Float32Array(pusher.v.origin);
	var _g1 = pusher.v.origin;
	_g1[0] += move[0];
	var _g2 = pusher.v.origin;
	_g2[1] += move[1];
	var _g3 = pusher.v.origin;
	_g3[2] += move[2];
	var _g4 = pusher.v;
	_g4.floats[7] += movetime;
	quake_SV.LinkEdict(pusher,false);
	var moved = [];
	var _g11 = 1;
	var _g5 = quake_SV.server.num_edicts;
	while(_g11 < _g5) {
		var e = _g11++;
		var check = quake_SV.server.edicts[e];
		if(check.free) {
			continue;
		}
		var movetype = check.v.floats[8];
		if(movetype == 7 || movetype == 0 || movetype == 8) {
			continue;
		}
		if(((check.v.floats[76] | 0) & 512) == 0 || check.v.ints[47] != pusher.num) {
			if(check.v.absmin[0] >= maxs_0 || check.v.absmin[1] >= maxs_1 || check.v.absmin[2] >= maxs_2 || check.v.absmax[0] <= mins_0 || check.v.absmax[1] <= mins_1 || check.v.absmax[2] <= mins_2) {
				continue;
			}
			if(!quake_SV.TestEntityPosition(check)) {
				continue;
			}
		}
		if(movetype != 3) {
			var _g21 = check;
			var v1 = (_g21.v.floats[76] | 0) & ~512;
			_g21.v.floats[76] = v1;
		}
		var entorig = new Float32Array(check.v.origin);
		moved.push([entorig[0],entorig[1],entorig[2],check]);
		pusher.v.floats[9] = 0;
		quake_SV.PushEntity(check,move);
		pusher.v.floats[9] = 4;
		if(quake_SV.TestEntityPosition(check)) {
			if(check.v.mins == check.v.maxs) {
				continue;
			}
			if(check.v.floats[9] == 0 || check.v.floats[9] == 1) {
				var v2 = check.v.maxs[0] = 0.0;
				check.v.mins[0] = v2;
				var v3 = check.v.maxs[1] = 0.0;
				check.v.mins[1] = v3;
				check.v.maxs[2] = check.v.mins[2];
				continue;
			}
			check.v.origin.set(entorig);
			quake_SV.LinkEdict(check,true);
			pusher.v.origin.set(pushorig);
			quake_SV.LinkEdict(pusher,false);
			var _g22 = pusher.v;
			_g22.floats[7] -= movetime;
			if(pusher.v.ints[45] != 0) {
				quake_PR.globals.ints[28] = pusher.num;
				quake_PR.globals.ints[29] = check.num;
				quake_PR.ExecuteProgram(pusher.v.ints[45]);
			}
			var _g23 = 0;
			while(_g23 < moved.length) {
				var moved_edict = moved[_g23];
				++_g23;
				var ed = moved_edict[3];
				var this2 = ed.v.origin;
				this2[0] = moved_edict[0];
				this2[1] = moved_edict[1];
				this2[2] = moved_edict[2];
				quake_SV.LinkEdict(ed,false);
			}
			return;
		}
	}
};
quake_SV.Physics_Pusher = function(ent) {
	var oldltime = ent.v.floats[7];
	var thinktime = ent.v.floats[46];
	var movetime;
	if(thinktime < oldltime + quake_Host.frametime) {
		movetime = thinktime - oldltime;
		if(movetime < 0.0) {
			movetime = 0.0;
		}
	} else {
		movetime = quake_Host.frametime;
	}
	if(movetime != 0.0) {
		quake_SV.PushMove(ent,movetime);
	}
	if(thinktime <= oldltime || thinktime > ent.v.floats[7]) {
		return;
	}
	ent.v.floats[46] = 0.0;
	quake_PR.globals.floats[31] = quake_SV.server.time;
	quake_PR.globals.ints[28] = ent.num;
	quake_PR.globals.ints[29] = 0;
	quake_PR.ExecuteProgram(ent.v.ints[44]);
};
quake_SV.CheckStuck = function(ent) {
	if(!quake_SV.TestEntityPosition(ent)) {
		ent.v.oldorigin.set(ent.v.origin);
		return;
	}
	var org = new Float32Array(ent.v.origin);
	ent.v.origin.set(ent.v.oldorigin);
	if(!quake_SV.TestEntityPosition(ent)) {
		quake_Console.DPrint("Unstuck.\n");
		quake_SV.LinkEdict(ent,true);
		return;
	}
	var _g = 0;
	while(_g < 18) {
		var z = _g++;
		var _g1 = -1;
		while(_g1 < 2) {
			var i = _g1++;
			var _g2 = -1;
			while(_g2 < 2) {
				var j = _g2++;
				var this1 = ent.v.origin;
				this1[0] = org[0] + i;
				this1[1] = org[1] + j;
				this1[2] = org[2] + z;
				if(!quake_SV.TestEntityPosition(ent)) {
					quake_Console.DPrint("Unstuck.\n");
					quake_SV.LinkEdict(ent,true);
					return;
				}
			}
		}
	}
	ent.v.origin.set(org);
	quake_Console.DPrint("player is stuck.\n");
};
quake_SV.CheckWater = function(ent) {
	var x = ent.v.origin[0];
	var y = ent.v.origin[1];
	var z = ent.v.origin[2] + ent.v.mins[2] + 1.0;
	var this1 = new Float32Array(3);
	var v = this1;
	v[0] = x;
	v[1] = y;
	v[2] = z;
	var point = v;
	ent.v.floats[83] = 0.0;
	ent.v.floats[84] = -1;
	var cont = quake_SV.PointContents(point);
	if(cont > -3) {
		return false;
	}
	ent.v.floats[84] = cont;
	ent.v.floats[83] = 1.0;
	point[2] = ent.v.origin[2] + (ent.v.mins[2] + ent.v.maxs[2]) * 0.5;
	cont = quake_SV.PointContents(point);
	if(cont <= -3) {
		ent.v.floats[83] = 2.0;
		point[2] = ent.v.origin[2] + ent.v.view_ofs[2];
		cont = quake_SV.PointContents(point);
		if(cont <= -3) {
			ent.v.floats[83] = 3.0;
		}
	}
	return ent.v.floats[83] > 1.0;
};
quake_SV.WallFriction = function(ent,tr) {
	var this1 = new Float32Array(3);
	var forward = this1;
	quake__$Vec_Vec_$Impl_$.AngleVectors(new Float32Array(ent.v.v_angle),forward);
	var normal = tr.plane.normal;
	var d = normal[0] * forward[0] + normal[1] * forward[1] + normal[2] * forward[2] + 0.5;
	if(d >= 0.0) {
		return;
	}
	d += 1.0;
	var i = normal[0] * ent.v.velocity[0] + normal[1] * ent.v.velocity[1] + normal[2] * ent.v.velocity[2];
	ent.v.velocity[0] = (ent.v.velocity[0] - normal[0] * i) * d;
	ent.v.velocity[1] = (ent.v.velocity[1] - normal[1] * i) * d;
};
quake_SV.TryUnstick = function(ent,oldvel) {
	var oldorg = new Float32Array(ent.v.origin);
	var this1 = new Float32Array(3);
	var v = this1;
	v[0] = 2.0;
	v[1] = 0.0;
	v[2] = 0.0;
	var dir = v;
	var _g = 0;
	while(_g < 8) {
		var i = _g++;
		switch(i) {
		case 1:
			dir[0] = 0.0;
			dir[1] = 2.0;
			break;
		case 2:
			dir[0] = -2.0;
			dir[1] = 0.0;
			break;
		case 3:
			dir[0] = 0.0;
			dir[1] = -2.0;
			break;
		case 4:
			dir[0] = 2.0;
			dir[1] = 2.0;
			break;
		case 5:
			dir[0] = -2.0;
			dir[1] = 2.0;
			break;
		case 6:
			dir[0] = 2.0;
			dir[1] = -2.0;
			break;
		case 7:
			dir[0] = -2.0;
			dir[1] = -2.0;
			break;
		}
		quake_SV.PushEntity(ent,dir);
		var this2 = ent.v.velocity;
		this2[0] = oldvel[0];
		this2[1] = oldvel[1];
		this2[2] = 0.0;
		var clip = quake_SV.FlyMove(ent,0.1);
		if(Math.abs(oldorg[1] - ent.v.origin[1]) > 4.0 || Math.abs(oldorg[0] - ent.v.origin[0]) > 4.0) {
			return clip;
		}
		ent.v.origin.set(oldorg);
	}
	ent.v.velocity.set(quake__$Vec_Vec_$Impl_$.origin);
	return 7;
};
quake_SV.WalkMove = function(ent) {
	var oldonground = (ent.v.floats[76] | 0) & 512;
	var _g = ent;
	var v = (_g.v.floats[76] | 0) ^ oldonground;
	_g.v.floats[76] = v;
	var oldorg = new Float32Array(ent.v.origin);
	var oldvel = new Float32Array(ent.v.velocity);
	var clip = quake_SV.FlyMove(ent,quake_Host.frametime);
	if((clip & 2) == 0) {
		return;
	}
	if(oldonground == 0 && ent.v.floats[83] == 0.0) {
		return;
	}
	if(ent.v.floats[8] != 3) {
		return;
	}
	if(quake_SV.nostep.value != 0) {
		return;
	}
	if(((quake_SV.player.v.floats[76] | 0) & 2048) != 0) {
		return;
	}
	var nosteporg = new Float32Array(ent.v.origin);
	var nostepvel = new Float32Array(ent.v.velocity);
	ent.v.origin.set(oldorg);
	var this1 = new Float32Array(3);
	var v1 = this1;
	v1[0] = 0.0;
	v1[1] = 0.0;
	v1[2] = 18.0;
	quake_SV.PushEntity(ent,v1);
	ent.v.velocity[0] = oldvel[0];
	ent.v.velocity[1] = oldvel[1];
	ent.v.velocity[2] = 0.0;
	clip = quake_SV.FlyMove(ent,quake_Host.frametime);
	if(clip != 0) {
		if(Math.abs(oldorg[1] - ent.v.origin[1]) < 0.03125 && Math.abs(oldorg[0] - ent.v.origin[0]) < 0.03125) {
			clip = quake_SV.TryUnstick(ent,oldvel);
		}
		if((clip & 2) != 0) {
			quake_SV.WallFriction(ent,quake_SV.steptrace);
		}
	}
	var z = oldvel[2] * quake_Host.frametime - 18.0;
	var this2 = new Float32Array(3);
	var v2 = this2;
	v2[0] = 0.0;
	v2[1] = 0.0;
	v2[2] = z;
	var downtrace = quake_SV.PushEntity(ent,v2);
	if(downtrace.plane.normal[2] > 0.7) {
		if(ent.v.floats[9] == 4) {
			var _g1 = ent;
			var v3 = _g1.v.floats[76] | 0 | 512;
			_g1.v.floats[76] = v3;
			ent.v.ints[47] = downtrace.ent.num;
		}
		return;
	}
	ent.v.origin.set(nosteporg);
	ent.v.velocity.set(nostepvel);
};
quake_SV.Physics_Client = function(ent) {
	if(!quake_SV.svs.clients[ent.num - 1].active) {
		return;
	}
	quake_PR.globals.floats[31] = quake_SV.server.time;
	quake_PR.globals.ints[28] = ent.num;
	quake_PR.ExecuteProgram(quake_PR.globals.ints[84]);
	quake_SV.CheckVelocity(ent);
	var movetype = ent.v.floats[8] | 0;
	if(movetype == 6 || movetype == 10) {
		quake_SV.Physics_Toss(ent);
	} else {
		if(!quake_SV.RunThink(ent)) {
			return;
		}
		switch(movetype) {
		case 0:
			break;
		case 3:
			if(!quake_SV.CheckWater(ent) && ((ent.v.floats[76] | 0) & 2048) == 0) {
				quake_SV.AddGravity(ent);
			}
			quake_SV.CheckStuck(ent);
			quake_SV.WalkMove(ent);
			break;
		case 5:
			quake_SV.FlyMove(ent,quake_Host.frametime);
			break;
		case 8:
			var _g = ent.v.origin;
			_g[0] += quake_Host.frametime * ent.v.velocity[0];
			var _g1 = ent.v.origin;
			_g1[1] += quake_Host.frametime * ent.v.velocity[1];
			var _g2 = ent.v.origin;
			_g2[2] += quake_Host.frametime * ent.v.velocity[2];
			break;
		default:
			quake_Sys.Error("SV.Physics_Client: bad movetype " + movetype);
		}
	}
	quake_SV.LinkEdict(ent,true);
	quake_PR.globals.floats[31] = quake_SV.server.time;
	quake_PR.globals.ints[28] = ent.num;
	quake_PR.ExecuteProgram(quake_PR.globals.ints[85]);
};
quake_SV.Physics_Noclip = function(ent) {
	if(!quake_SV.RunThink(ent)) {
		return;
	}
	var _g = ent.v.angles;
	_g[0] += quake_Host.frametime * ent.v.avelocity[0];
	var _g1 = ent.v.angles;
	_g1[1] += quake_Host.frametime * ent.v.avelocity[1];
	var _g2 = ent.v.angles;
	_g2[2] += quake_Host.frametime * ent.v.avelocity[2];
	var _g3 = ent.v.origin;
	_g3[0] += quake_Host.frametime * ent.v.velocity[0];
	var _g4 = ent.v.origin;
	_g4[1] += quake_Host.frametime * ent.v.velocity[1];
	var _g5 = ent.v.origin;
	_g5[2] += quake_Host.frametime * ent.v.velocity[2];
	quake_SV.LinkEdict(ent,false);
};
quake_SV.CheckWaterTransition = function(ent) {
	var cont = quake_SV.PointContents(new Float32Array(ent.v.origin));
	if(ent.v.floats[84] == 0.0) {
		ent.v.floats[84] = cont;
		ent.v.floats[83] = 1.0;
		return;
	}
	if(cont <= -3) {
		if(ent.v.floats[84] == -1) {
			quake_SV.StartSound(ent,0,"misc/h2ohit1.wav",255,1.0);
		}
		ent.v.floats[84] = cont;
		ent.v.floats[83] = 1.0;
		return;
	}
	if(ent.v.floats[84] != -1) {
		quake_SV.StartSound(ent,0,"misc/h2ohit1.wav",255,1.0);
	}
	ent.v.floats[84] = -1;
	ent.v.floats[83] = cont;
};
quake_SV.Physics_Toss = function(ent) {
	if(!quake_SV.RunThink(ent)) {
		return;
	}
	if(((ent.v.floats[76] | 0) & 512) != 0) {
		return;
	}
	quake_SV.CheckVelocity(ent);
	var movetype = ent.v.floats[8];
	if(movetype != 5 && movetype != 9) {
		quake_SV.AddGravity(ent);
	}
	var _g = ent.v.angles;
	_g[0] += quake_Host.frametime * ent.v.avelocity[0];
	var _g1 = ent.v.angles;
	_g1[1] += quake_Host.frametime * ent.v.avelocity[1];
	var _g2 = ent.v.angles;
	_g2[2] += quake_Host.frametime * ent.v.avelocity[2];
	var x = ent.v.velocity[0] * quake_Host.frametime;
	var y = ent.v.velocity[1] * quake_Host.frametime;
	var z = ent.v.velocity[2] * quake_Host.frametime;
	var this1 = new Float32Array(3);
	var v = this1;
	v[0] = x;
	v[1] = y;
	v[2] = z;
	var trace = quake_SV.PushEntity(ent,v);
	if(trace.fraction == 1.0 || ent.free) {
		return;
	}
	var this2 = new Float32Array(3);
	var velocity = this2;
	quake_SV.ClipVelocity(new Float32Array(ent.v.velocity),trace.plane.normal,velocity,movetype == 10 ? 1.5 : 1.0);
	ent.v.velocity.set(velocity);
	if(trace.plane.normal[2] > 0.7) {
		if(ent.v.velocity[2] < 60.0 || movetype != 10) {
			var _g3 = ent;
			var v1 = _g3.v.floats[76] | 0 | 512;
			_g3.v.floats[76] = v1;
			ent.v.ints[47] = trace.ent.num;
			ent.v.velocity.set(quake__$Vec_Vec_$Impl_$.origin);
			ent.v.avelocity.set(quake__$Vec_Vec_$Impl_$.origin);
		}
	}
	quake_SV.CheckWaterTransition(ent);
};
quake_SV.Physics_Step = function(ent) {
	if(((ent.v.floats[76] | 0) & 512 + 1 + 2) == 0) {
		var hitsound = ent.v.velocity[2] < quake_SV.gravity.value * -0.1;
		quake_SV.AddGravity(ent);
		quake_SV.CheckVelocity(ent);
		quake_SV.FlyMove(ent,quake_Host.frametime);
		quake_SV.LinkEdict(ent,true);
		if(hitsound && ((ent.v.floats[76] | 0) & 512) != 0) {
			quake_SV.StartSound(ent,0,"demon/dland2.wav",255,1.0);
		}
	}
	quake_SV.RunThink(ent);
	quake_SV.CheckWaterTransition(ent);
};
quake_SV.Physics = function() {
	quake_PR.globals.ints[28] = 0;
	quake_PR.globals.ints[29] = 0;
	quake_PR.globals.floats[31] = quake_SV.server.time;
	quake_PR.ExecuteProgram(quake_PR.globals.ints[83]);
	var _g1 = 0;
	var _g = quake_SV.server.num_edicts;
	while(_g1 < _g) {
		var i = _g1++;
		var ent = quake_SV.server.edicts[i];
		if(ent.free) {
			continue;
		}
		if(quake_PR.globals.floats[33] != 0.0) {
			quake_SV.LinkEdict(ent,true);
		}
		if(i > 0 && i <= quake_SV.svs.maxclients) {
			quake_SV.Physics_Client(ent);
			continue;
		}
		var _g2 = ent.v.floats[8];
		switch(_g2) {
		case 0:
			quake_SV.RunThink(ent);
			break;
		case 4:
			quake_SV.Physics_Step(ent);
			break;
		case 7:
			quake_SV.Physics_Pusher(ent);
			break;
		case 8:
			quake_SV.Physics_Noclip(ent);
			break;
		case 5:case 6:case 9:case 10:
			quake_SV.Physics_Toss(ent);
			break;
		default:
			quake_Sys.Error("SV.Physics: bad movetype " + (ent.v.floats[8] | 0));
		}
	}
	if(quake_PR.globals.floats[33] != 0.0) {
		var _g3 = quake_PR.globals;
		_g3.floats[33] -= 1;
	}
	quake_SV.server.time += quake_Host.frametime;
};
quake_SV.SetIdealPitch = function() {
	var ent = quake_SV.player;
	if(((ent.v.floats[76] | 0) & 512) == 0) {
		return;
	}
	var angleval = ent.v.angles[1] * (Math.PI / 180.0);
	var sinval = Math.sin(angleval);
	var cosval = Math.cos(angleval);
	var z = ent.v.origin[2] + ent.v.view_ofs[2];
	var this1 = new Float32Array(3);
	var v = this1;
	v[0] = 0.0;
	v[1] = 0.0;
	v[2] = z;
	var top = v;
	var this2 = new Float32Array(3);
	var v1 = this2;
	v1[0] = 0.0;
	v1[1] = 0.0;
	v1[2] = top[2] - 160.0;
	var bottom = v1;
	var z1 = [];
	var _g = 0;
	while(_g < 6) {
		var i = _g++;
		top[0] = bottom[0] = ent.v.origin[0] + cosval * (i + 3) * 12.0;
		top[1] = bottom[1] = ent.v.origin[1] + sinval * (i + 3) * 12.0;
		var tr = quake_SV.Move(top,quake__$Vec_Vec_$Impl_$.origin,quake__$Vec_Vec_$Impl_$.origin,bottom,1,ent);
		if(tr.allsolid || tr.fraction == 1.0) {
			return;
		}
		z1[i] = top[2] - tr.fraction * 160.0;
	}
	var dir = 0.0;
	var steps = 0;
	var _g1 = 1;
	while(_g1 < 6) {
		var i1 = _g1++;
		var step = z1[i1] - z1[i1 - 1];
		if(step > -0.1 && step < 0.1) {
			continue;
		}
		if(dir != 0.0 && (step - dir > 0.1 || step - dir < -0.1)) {
			return;
		}
		++steps;
		dir = step;
	}
	if(dir == 0.0) {
		ent.v.floats[73] = 0.0;
		return;
	}
	if(steps >= 2) {
		ent.v.floats[73] = -dir * quake_SV.idealpitchscale.value;
	}
};
quake_SV.UserFriction = function() {
	var ent = quake_SV.player;
	var vel0 = ent.v.velocity[0];
	var vel1 = ent.v.velocity[1];
	var speed = Math.sqrt(vel0 * vel0 + vel1 * vel1);
	if(speed == 0.0) {
		return;
	}
	var x = ent.v.origin[0] + vel0 / speed * 16.0;
	var y = ent.v.origin[1] + vel1 / speed * 16.0;
	var z = ent.v.origin[2] + ent.v.mins[2];
	var this1 = new Float32Array(3);
	var v = this1;
	v[0] = x;
	v[1] = y;
	v[2] = z;
	var start = v;
	var friction = quake_SV.friction.value;
	var tmp = quake__$Vec_Vec_$Impl_$.origin;
	var tmp1 = quake__$Vec_Vec_$Impl_$.origin;
	var this2 = new Float32Array(3);
	var v1 = this2;
	v1[0] = start[0];
	v1[1] = start[1];
	v1[2] = start[2] - 34.0;
	if(quake_SV.Move(start,tmp,tmp1,v1,1,ent).fraction == 1.0) {
		friction *= quake_SV.edgefriction.value;
	}
	var newspeed = speed - quake_Host.frametime * (speed < quake_SV.stopspeed.value ? quake_SV.stopspeed.value : speed) * friction;
	if(newspeed < 0.0) {
		newspeed = 0.0;
	}
	newspeed /= speed;
	var _g = ent.v.velocity;
	_g[0] *= newspeed;
	var _g1 = ent.v.velocity;
	_g1[1] *= newspeed;
	var _g2 = ent.v.velocity;
	_g2[2] *= newspeed;
};
quake_SV.Accelerate = function(wishvel,air) {
	var ent = quake_SV.player;
	var wishdir = new Float32Array(wishvel);
	var wishspeed = quake__$Vec_Vec_$Impl_$.Normalize(wishdir);
	if(air && wishspeed > 30.0) {
		wishspeed = 30.0;
	}
	var addspeed = wishspeed - (ent.v.velocity[0] * wishdir[0] + ent.v.velocity[1] * wishdir[1] + ent.v.velocity[2] * wishdir[2]);
	if(addspeed <= 0.0) {
		return;
	}
	var accelspeed = quake_SV.accelerate.value * quake_Host.frametime * wishspeed;
	if(accelspeed > addspeed) {
		accelspeed = addspeed;
	}
	var _g = ent.v.velocity;
	_g[0] += accelspeed * wishdir[0];
	var _g1 = ent.v.velocity;
	_g1[1] += accelspeed * wishdir[1];
	var _g2 = ent.v.velocity;
	_g2[2] += accelspeed * wishdir[2];
};
quake_SV.WaterMove = function() {
	var ent = quake_SV.player;
	var cmd = quake_Host.client.cmd;
	var this1 = new Float32Array(3);
	var forward = this1;
	var this2 = new Float32Array(3);
	var right = this2;
	quake__$Vec_Vec_$Impl_$.AngleVectors(new Float32Array(ent.v.v_angle),forward,right);
	var wishvel_0 = forward[0] * cmd.forwardmove + right[0] * cmd.sidemove;
	var wishvel_1 = forward[1] * cmd.forwardmove + right[1] * cmd.sidemove;
	var wishvel_2 = forward[2] * cmd.forwardmove + right[2] * cmd.sidemove;
	if(cmd.forwardmove == 0.0 && cmd.sidemove == 0.0 && cmd.upmove == 0.0) {
		wishvel_2 -= 60.0;
	} else {
		wishvel_2 += cmd.upmove;
	}
	var wishspeed = Math.sqrt(wishvel_0 * wishvel_0 + wishvel_1 * wishvel_1 + wishvel_2 * wishvel_2);
	if(wishspeed > quake_SV.maxspeed.value) {
		var scale = quake_SV.maxspeed.value / wishspeed;
		wishvel_0 *= scale;
		wishvel_1 *= scale;
		wishvel_2 *= scale;
		wishspeed = quake_SV.maxspeed.value;
	}
	wishspeed *= 0.7;
	var v = ent.v.velocity;
	var speed = Math.sqrt(v[0] * v[0] + v[1] * v[1] + v[2] * v[2]);
	var newspeed;
	if(speed != 0.0) {
		newspeed = speed - quake_Host.frametime * speed * quake_SV.friction.value;
		if(newspeed < 0.0) {
			newspeed = 0.0;
		}
		var scale1 = newspeed / speed;
		var _g = ent.v.velocity;
		_g[0] *= scale1;
		var _g1 = ent.v.velocity;
		_g1[1] *= scale1;
		var _g2 = ent.v.velocity;
		_g2[2] *= scale1;
	} else {
		newspeed = 0.0;
	}
	if(wishspeed == 0.0) {
		return;
	}
	var addspeed = wishspeed - newspeed;
	if(addspeed <= 0.0) {
		return;
	}
	var accelspeed = quake_SV.accelerate.value * wishspeed * quake_Host.frametime;
	if(accelspeed > addspeed) {
		accelspeed = addspeed;
	}
	var _g3 = ent.v.velocity;
	_g3[0] += accelspeed * (wishvel_0 / wishspeed);
	var _g4 = ent.v.velocity;
	_g4[1] += accelspeed * (wishvel_1 / wishspeed);
	var _g5 = ent.v.velocity;
	_g5[2] += accelspeed * (wishvel_2 / wishspeed);
};
quake_SV.WaterJump = function() {
	var ent = quake_SV.player;
	if(quake_SV.server.time > ent.v.floats[80] || ent.v.floats[83] == 0.0) {
		var _g = ent;
		var v = (_g.v.floats[76] | 0) & ~2048;
		_g.v.floats[76] = v;
		ent.v.floats[80] = 0.0;
	}
	ent.v.velocity[0] = ent.v.movedir[0];
	ent.v.velocity[1] = ent.v.movedir[1];
};
quake_SV.AirMove = function() {
	var ent = quake_SV.player;
	var cmd = quake_Host.client.cmd;
	var this1 = new Float32Array(3);
	var forward = this1;
	var this2 = new Float32Array(3);
	var right = this2;
	quake__$Vec_Vec_$Impl_$.AngleVectors(new Float32Array(ent.v.angles),forward,right);
	var fmove = cmd.forwardmove;
	var smove = cmd.sidemove;
	if(quake_SV.server.time < ent.v.floats[80] && fmove < 0.0) {
		fmove = 0.0;
	}
	var z = (ent.v.floats[8] | 0) != 3 ? cmd.upmove : 0.0;
	var this3 = new Float32Array(3);
	var v = this3;
	v[0] = forward[0] * fmove + right[0] * smove;
	v[1] = forward[1] * fmove + right[1] * smove;
	v[2] = z;
	var wishvel = v;
	var wishdir = new Float32Array(wishvel);
	if(quake__$Vec_Vec_$Impl_$.Normalize(wishdir) > quake_SV.maxspeed.value) {
		wishvel[0] = wishdir[0] * quake_SV.maxspeed.value;
		wishvel[1] = wishdir[1] * quake_SV.maxspeed.value;
		wishvel[2] = wishdir[2] * quake_SV.maxspeed.value;
	}
	if(ent.v.floats[8] == 8) {
		ent.v.velocity.set(wishvel);
	} else if(((ent.v.floats[76] | 0) & 512) != 0) {
		quake_SV.UserFriction();
		quake_SV.Accelerate(wishvel,false);
	} else {
		quake_SV.Accelerate(wishvel,true);
	}
};
quake_SV.ClientThink = function() {
	var ent = quake_SV.player;
	if(ent.v.floats[8] == 0) {
		return;
	}
	var punchangle = new Float32Array(ent.v.punchangle);
	var len = quake__$Vec_Vec_$Impl_$.Normalize(punchangle) - 10.0 * quake_Host.frametime;
	if(len < 0.0) {
		len = 0.0;
	}
	ent.v.punchangle[0] = punchangle[0] * len;
	ent.v.punchangle[1] = punchangle[1] * len;
	ent.v.punchangle[2] = punchangle[2] * len;
	if(ent.v.floats[48] <= 0.0) {
		return;
	}
	ent.v.angles[2] = quake_V.CalcRoll(new Float32Array(ent.v.angles),new Float32Array(ent.v.velocity)) * 4.0;
	if(ent.v.floats[69] == 0.0) {
		ent.v.angles[0] = (ent.v.v_angle[0] + ent.v.punchangle[0]) / -3.0;
		ent.v.angles[1] = ent.v.v_angle[1] + ent.v.punchangle[1];
	}
	if(((ent.v.floats[76] | 0) & 2048) != 0) {
		quake_SV.WaterJump();
	} else if(ent.v.floats[83] >= 2.0 && ent.v.floats[8] != 8) {
		quake_SV.WaterMove();
	} else {
		quake_SV.AirMove();
	}
};
quake_SV.ReadClientMove = function() {
	var client = quake_Host.client;
	client.ping_times[client.num_pings++ & 15] = quake_SV.server.time - quake_MSG.ReadFloat();
	client.edict.v.v_angle[0] = quake_MSG.ReadChar() * 1.40625;
	client.edict.v.v_angle[1] = quake_MSG.ReadChar() * 1.40625;
	client.edict.v.v_angle[2] = quake_MSG.ReadChar() * 1.40625;
	client.cmd.forwardmove = quake_MSG.ReadShort();
	client.cmd.sidemove = quake_MSG.ReadShort();
	client.cmd.upmove = quake_MSG.ReadShort();
	var i = quake_MSG.ReadByte();
	client.edict.v.floats[65] = i & 1;
	client.edict.v.floats[67] = (i & 2) >> 1;
	i = quake_MSG.ReadByte();
	if(i != 0) {
		client.edict.v.floats[68] = i;
	}
};
quake_SV.ReadClientMessage = function() {
	var ret;
	while(true) {
		ret = quake_NET.GetMessage(quake_Host.client.netconnection);
		if(ret == -1) {
			haxe_Log.trace("SV.ReadClientMessage: NET.GetMessage failed\n",{ fileName : "Sys.hx", lineNumber : 45, className : "quake.Sys", methodName : "Print"});
			return false;
		}
		if(ret == 0) {
			return true;
		}
		quake_MSG.BeginReading();
		while(true) {
			if(!quake_Host.client.active) {
				return false;
			}
			if(quake_MSG.badread) {
				haxe_Log.trace("SV.ReadClientMessage: badread\n",{ fileName : "Sys.hx", lineNumber : 45, className : "quake.Sys", methodName : "Print"});
				return false;
			}
			var cmd = quake_MSG.ReadChar();
			if(cmd == -1) {
				ret = 1;
				break;
			}
			if(cmd == 1) {
				continue;
			}
			if(cmd == 4) {
				var s = quake_MSG.ReadString();
				var i = 0;
				while(i < quake_SV.readClientCmds.length) {
					if(s.substring(0,quake_SV.readClientCmds[i].length).toLowerCase() != quake_SV.readClientCmds[i]) {
						++i;
						continue;
					}
					quake_Cmd.ExecuteString(s,true);
					break;
				}
				if(i == quake_SV.readClientCmds.length) {
					quake_Console.DPrint(quake_PR.GetString(quake_PR.netnames + (quake_Host.client.num << 5)) + " tried to " + s);
				}
			} else if(cmd == 2) {
				return false;
			} else if(cmd == 3) {
				quake_SV.ReadClientMove();
			} else {
				haxe_Log.trace("SV.ReadClientMessage: unknown command char\n",{ fileName : "Sys.hx", lineNumber : 45, className : "quake.Sys", methodName : "Print"});
				return false;
			}
		}
		if(!(ret == 1)) {
			break;
		}
	}
	return false;
};
quake_SV.RunClients = function() {
	var _g1 = 0;
	var _g = quake_SV.svs.maxclients;
	while(_g1 < _g) {
		var i = _g1++;
		quake_Host.client = quake_SV.svs.clients[i];
		if(!quake_Host.client.active) {
			continue;
		}
		quake_SV.player = quake_Host.client.edict;
		if(!quake_SV.ReadClientMessage()) {
			quake_Host.DropClient(false);
			continue;
		}
		if(!quake_Host.client.spawned) {
			quake_Host.client.cmd.forwardmove = 0.0;
			quake_Host.client.cmd.sidemove = 0.0;
			quake_Host.client.cmd.upmove = 0.0;
			continue;
		}
		quake_SV.ClientThink();
	}
};
quake_SV.InitBoxHull = function() {
	quake_SV.box_clipnodes = [];
	quake_SV.box_planes = [];
	quake_SV.box_hull = new quake_Hull();
	quake_SV.box_hull.clipnodes = quake_SV.box_clipnodes;
	quake_SV.box_hull.planes = quake_SV.box_planes;
	quake_SV.box_hull.firstclipnode = 0;
	quake_SV.box_hull.lastclipnode = 5;
	var _g = 0;
	while(_g < 6) {
		var i = _g++;
		var side = i & 1;
		var node = new quake_ClipNode();
		node.planenum = i;
		if(side == 0) {
			node.child0 = -1;
		} else {
			node.child1 = -1;
		}
		if(i != 5) {
			if(side == 0) {
				node.child1 = i + 1;
			} else {
				node.child0 = i + 1;
			}
		} else if(side == 0) {
			node.child1 = -2;
		} else {
			node.child0 = -2;
		}
		quake_SV.box_clipnodes.push(node);
		var plane = new quake_Plane();
		plane.type = i >> 1;
		plane.normal[i >> 1] = 1.0;
		plane.dist = 0.0;
		quake_SV.box_planes.push(plane);
	}
};
quake_SV.HullForEntity = function(ent,mins,maxs,offset) {
	if(ent.v.floats[9] != 4) {
		quake_SV.box_planes[0].dist = ent.v.maxs[0] - mins[0];
		quake_SV.box_planes[1].dist = ent.v.mins[0] - maxs[0];
		quake_SV.box_planes[2].dist = ent.v.maxs[1] - mins[1];
		quake_SV.box_planes[3].dist = ent.v.mins[1] - maxs[1];
		quake_SV.box_planes[4].dist = ent.v.maxs[2] - mins[2];
		quake_SV.box_planes[5].dist = ent.v.mins[2] - maxs[2];
		offset.set(ent.v.origin);
		return quake_SV.box_hull;
	}
	if(ent.v.floats[8] != 7) {
		quake_Sys.Error("SOLID_BSP without MOVETYPE_PUSH");
	}
	var model = quake_SV.server.models[ent.v.floats[0] | 0];
	if(model == null) {
		quake_Sys.Error("MOVETYPE_PUSH with a non bsp model");
	}
	if(model.type != 0) {
		quake_Sys.Error("MOVETYPE_PUSH with a non bsp model");
	}
	var size = maxs[0] - mins[0];
	var hull;
	if(size < 3.0) {
		hull = model.hulls[0];
	} else if(size <= 32.0) {
		hull = model.hulls[1];
	} else {
		hull = model.hulls[2];
	}
	var y = hull.clip_mins[1] - mins[1] + ent.v.origin[1];
	var z = hull.clip_mins[2] - mins[2] + ent.v.origin[2];
	offset[0] = hull.clip_mins[0] - mins[0] + ent.v.origin[0];
	offset[1] = y;
	offset[2] = z;
	return hull;
};
quake_SV.CreateAreaNode = function(depth,mins,maxs) {
	var anode = new quake__$SV_AreaNode();
	quake_SV.areanodes.push(anode);
	anode.trigger_edicts = new quake_EdictLink();
	anode.trigger_edicts.prev = anode.trigger_edicts.next = anode.trigger_edicts;
	anode.solid_edicts = new quake_EdictLink();
	anode.solid_edicts.prev = anode.solid_edicts.next = anode.solid_edicts;
	if(depth == 4) {
		anode.axis = -1;
		anode.children = [];
		return anode;
	}
	anode.axis = maxs[0] - mins[0] > maxs[1] - mins[1] ? 0 : 1;
	anode.dist = 0.5 * (maxs[anode.axis] + mins[anode.axis]);
	var maxs1 = new Float32Array(maxs);
	var mins2 = new Float32Array(mins);
	var v = mins2[anode.axis] = anode.dist;
	maxs1[anode.axis] = v;
	anode.children = [quake_SV.CreateAreaNode(depth + 1,mins2,maxs),quake_SV.CreateAreaNode(depth + 1,mins,maxs1)];
	return anode;
};
quake_SV.UnlinkEdict = function(ent) {
	if(ent.area.prev != null) {
		ent.area.prev.next = ent.area.next;
	}
	if(ent.area.next != null) {
		ent.area.next.prev = ent.area.prev;
	}
	ent.area.prev = ent.area.next = null;
};
quake_SV.TouchLinks = function(ent,node) {
	var l = node.trigger_edicts.next;
	while(l != node.trigger_edicts) {
		var touch = l.ent;
		l = l.next;
		if(touch == ent) {
			continue;
		}
		if(touch.v.ints[42] == 0 || touch.v.floats[9] != 1) {
			continue;
		}
		if(ent.v.absmin[0] > touch.v.absmax[0] || ent.v.absmin[1] > touch.v.absmax[1] || ent.v.absmin[2] > touch.v.absmax[2] || ent.v.absmax[0] < touch.v.absmin[0] || ent.v.absmax[1] < touch.v.absmin[1] || ent.v.absmax[2] < touch.v.absmin[2]) {
			continue;
		}
		var old_self = quake_PR.globals.ints[28];
		var old_other = quake_PR.globals.ints[29];
		quake_PR.globals.ints[28] = touch.num;
		quake_PR.globals.ints[29] = ent.num;
		quake_PR.globals.floats[31] = quake_SV.server.time;
		quake_PR.ExecuteProgram(touch.v.ints[42]);
		quake_PR.globals.ints[28] = old_self;
		quake_PR.globals.ints[29] = old_other;
	}
	if(node.axis == -1) {
		return;
	}
	if(ent.v.absmax[node.axis] > node.dist) {
		quake_SV.TouchLinks(ent,node.children[0]);
	}
	if(ent.v.absmin[node.axis] < node.dist) {
		quake_SV.TouchLinks(ent,node.children[1]);
	}
};
quake_SV.FindTouchedLeafs = function(ent,node) {
	if(node.contents == -2) {
		return;
	}
	if(node.contents < 0) {
		if(ent.leafnums.length == 16) {
			return;
		}
		ent.leafnums.push(node.num - 1);
		return;
	}
	var sides = quake__$Vec_Vec_$Impl_$.BoxOnPlaneSide(ent.v.absmin,ent.v.absmax,node.plane);
	if((sides & 1) != 0) {
		quake_SV.FindTouchedLeafs(ent,node.child0);
	}
	if((sides & 2) != 0) {
		quake_SV.FindTouchedLeafs(ent,node.child1);
	}
};
quake_SV.LinkEdict = function(ent,touch_triggers) {
	if(ent.free || ent == quake_SV.server.edicts[0]) {
		return;
	}
	quake_SV.UnlinkEdict(ent);
	var this1 = ent.v.absmin;
	var y = ent.v.origin[1] + ent.v.mins[1] - 1.0;
	var z = ent.v.origin[2] + ent.v.mins[2];
	this1[0] = ent.v.origin[0] + ent.v.mins[0] - 1.0;
	this1[1] = y;
	this1[2] = z;
	var this2 = ent.v.absmax;
	var y1 = ent.v.origin[1] + ent.v.maxs[1] + 1.0;
	var z1 = ent.v.origin[2] + ent.v.maxs[2];
	this2[0] = ent.v.origin[0] + ent.v.maxs[0] + 1.0;
	this2[1] = y1;
	this2[2] = z1;
	if(((ent.v.floats[76] | 0) & 256) != 0) {
		var _g = ent.v.absmin;
		_g[0] -= 14.0;
		var _g1 = ent.v.absmin;
		_g1[1] -= 14.0;
		var _g2 = ent.v.absmax;
		_g2[0] += 14.0;
		var _g3 = ent.v.absmax;
		_g3[1] += 14.0;
	} else {
		var _g4 = ent.v.absmin;
		_g4[2] -= 1.0;
		var _g5 = ent.v.absmax;
		_g5[2] += 1.0;
	}
	ent.leafnums = [];
	if(ent.v.floats[0] != 0) {
		quake_SV.FindTouchedLeafs(ent,quake_SV.server.worldmodel.nodes[0]);
	}
	if(ent.v.floats[9] == 0) {
		return;
	}
	var node = quake_SV.areanodes[0];
	while(node.axis != -1) if(ent.v.absmin[node.axis] > node.dist) {
		node = node.children[0];
	} else if(ent.v.absmax[node.axis] < node.dist) {
		node = node.children[1];
	} else {
		break;
	}
	var before = ent.v.floats[9] == 1 ? node.trigger_edicts : node.solid_edicts;
	ent.area.next = before;
	ent.area.prev = before.prev;
	ent.area.prev.next = ent.area;
	ent.area.next.prev = ent.area;
	ent.area.ent = ent;
	if(touch_triggers) {
		quake_SV.TouchLinks(ent,quake_SV.areanodes[0]);
	}
};
quake_SV.HullPointContents = function(hull,num,p) {
	while(num >= 0) {
		if(num < hull.firstclipnode || num > hull.lastclipnode) {
			quake_Sys.Error("SV.HullPointContents: bad node number");
		}
		var node = hull.clipnodes[num];
		var plane = hull.planes[node.planenum];
		var d;
		if(plane.type <= 2) {
			d = p[plane.type] - plane.dist;
		} else {
			d = plane.normal[0] * p[0] + plane.normal[1] * p[1] + plane.normal[2] * p[2] - plane.dist;
		}
		if(d >= 0.0) {
			num = node.child0;
		} else {
			num = node.child1;
		}
	}
	return num;
};
quake_SV.PointContents = function(p) {
	var cont = quake_SV.HullPointContents(quake_SV.server.worldmodel.hulls[0],0,p);
	if(cont <= -9 && cont >= -14) {
		return -3;
	}
	return cont;
};
quake_SV.TestEntityPosition = function(ent) {
	var origin = new Float32Array(ent.v.origin);
	return quake_SV.Move(origin,new Float32Array(ent.v.mins),new Float32Array(ent.v.maxs),origin,0,ent).startsolid;
};
quake_SV.RecursiveHullCheck = function(hull,num,p1f,p2f,p1,p2,trace) {
	if(num < 0) {
		if(num != -2) {
			trace.allsolid = false;
			if(num == -1) {
				trace.inopen = true;
			} else {
				trace.inwater = true;
			}
		} else {
			trace.startsolid = true;
		}
		return true;
	}
	if(num < hull.firstclipnode || num > hull.lastclipnode) {
		quake_Sys.Error("SV.RecursiveHullCheck: bad node number");
	}
	var node = hull.clipnodes[num];
	var plane = hull.planes[node.planenum];
	var t1;
	var t2;
	if(plane.type <= 2) {
		t1 = p1[plane.type] - plane.dist;
		t2 = p2[plane.type] - plane.dist;
	} else {
		t1 = plane.normal[0] * p1[0] + plane.normal[1] * p1[1] + plane.normal[2] * p1[2] - plane.dist;
		t2 = plane.normal[0] * p2[0] + plane.normal[1] * p2[1] + plane.normal[2] * p2[2] - plane.dist;
	}
	if(t1 >= 0.0 && t2 >= 0.0) {
		return quake_SV.RecursiveHullCheck(hull,node.child0,p1f,p2f,p1,p2,trace);
	}
	if(t1 < 0.0 && t2 < 0.0) {
		return quake_SV.RecursiveHullCheck(hull,node.child1,p1f,p2f,p1,p2,trace);
	}
	var frac = (t1 + (t1 < 0.0 ? 0.03125 : -0.03125)) / (t1 - t2);
	if(frac < 0.0) {
		frac = 0.0;
	} else if(frac > 1.0) {
		frac = 1.0;
	}
	var midf = p1f + (p2f - p1f) * frac;
	var this1 = new Float32Array(3);
	var v = this1;
	v[0] = p1[0] + frac * (p2[0] - p1[0]);
	v[1] = p1[1] + frac * (p2[1] - p1[1]);
	v[2] = p1[2] + frac * (p2[2] - p1[2]);
	var mid = v;
	var side = t1 < 0.0;
	if(!quake_SV.RecursiveHullCheck(hull,side ? node.child1 : node.child0,p1f,midf,p1,mid,trace)) {
		return false;
	}
	if(quake_SV.HullPointContents(hull,side ? node.child0 : node.child1,mid) != -2) {
		return quake_SV.RecursiveHullCheck(hull,side ? node.child0 : node.child1,midf,p2f,mid,p2,trace);
	}
	if(trace.allsolid) {
		return false;
	}
	if(!side) {
		trace.plane.normal.set(plane.normal);
		trace.plane.dist = plane.dist;
	} else {
		var this2 = trace.plane.normal;
		this2[0] = -plane.normal[0];
		this2[1] = -plane.normal[1];
		this2[2] = -plane.normal[2];
		trace.plane.dist = -plane.dist;
	}
	while(quake_SV.HullPointContents(hull,hull.firstclipnode,mid) == -2) {
		frac -= 0.1;
		if(frac < 0.0) {
			trace.fraction = midf;
			trace.endpos.set(mid);
			quake_Console.DPrint("backup past 0\n");
			return false;
		}
		midf = p1f + (p2f - p1f) * frac;
		mid[0] = p1[0] + frac * (p2[0] - p1[0]);
		mid[1] = p1[1] + frac * (p2[1] - p1[1]);
		mid[2] = p1[2] + frac * (p2[2] - p1[2]);
	}
	trace.fraction = midf;
	trace.endpos.set(mid);
	return false;
};
quake_SV.ClipMoveToEntity = function(ent,start,mins,maxs,end) {
	var trace = new quake_Trace();
	trace.fraction = 1.0;
	trace.allsolid = true;
	trace.endpos.set(end);
	var this1 = new Float32Array(3);
	var offset = this1;
	var hull = quake_SV.HullForEntity(ent,mins,maxs,offset);
	var hull1 = hull.firstclipnode;
	var this2 = new Float32Array(3);
	var v = this2;
	v[0] = start[0] - offset[0];
	v[1] = start[1] - offset[1];
	v[2] = start[2] - offset[2];
	var this3 = new Float32Array(3);
	var v1 = this3;
	v1[0] = end[0] - offset[0];
	v1[1] = end[1] - offset[1];
	v1[2] = end[2] - offset[2];
	quake_SV.RecursiveHullCheck(hull,hull1,0.0,1.0,v,v1,trace);
	if(trace.fraction != 1.0) {
		var _g = trace.endpos;
		_g[0] += offset[0];
		var _g1 = trace.endpos;
		_g1[1] += offset[1];
		var _g2 = trace.endpos;
		_g2[2] += offset[2];
	}
	if(trace.fraction < 1.0 || trace.startsolid) {
		trace.ent = ent;
	}
	return trace;
};
quake_SV.ClipToLinks = function(node,clip) {
	var l = node.solid_edicts.next;
	while(l != node.solid_edicts) {
		var touch = l.ent;
		l = l.next;
		var solid = touch.v.floats[9];
		if(solid == 0 || touch == clip.passedict) {
			continue;
		}
		if(solid == 1) {
			quake_Sys.Error("Trigger in clipping list");
		}
		if(clip.type == 1 && solid != 4) {
			continue;
		}
		if(clip.boxmins[0] > touch.v.absmax[0] || clip.boxmins[1] > touch.v.absmax[1] || clip.boxmins[2] > touch.v.absmax[2] || clip.boxmaxs[0] < touch.v.absmin[0] || clip.boxmaxs[1] < touch.v.absmin[1] || clip.boxmaxs[2] < touch.v.absmin[2]) {
			continue;
		}
		if(clip.passedict != null) {
			if(clip.passedict.v.size[0] != 0.0 && touch.v.size[0] == 0.0) {
				continue;
			}
		}
		if(clip.trace.allsolid) {
			return;
		}
		if(clip.passedict != null) {
			if(quake_SV.server.edicts[touch.v.ints[95]] == clip.passedict) {
				continue;
			}
			if(quake_SV.server.edicts[clip.passedict.v.ints[95]] == touch) {
				continue;
			}
		}
		var trace;
		if(((touch.v.floats[76] | 0) & 32) != 0) {
			trace = quake_SV.ClipMoveToEntity(touch,clip.start,clip.mins2,clip.maxs2,clip.end);
		} else {
			trace = quake_SV.ClipMoveToEntity(touch,clip.start,clip.mins,clip.maxs,clip.end);
		}
		if(trace.allsolid || trace.startsolid || trace.fraction < clip.trace.fraction) {
			trace.ent = touch;
			clip.trace = trace;
			if(trace.startsolid) {
				clip.trace.startsolid = true;
			}
		}
	}
	if(node.axis == -1) {
		return;
	}
	if(clip.boxmaxs[node.axis] > node.dist) {
		quake_SV.ClipToLinks(node.children[0],clip);
	}
	if(clip.boxmins[node.axis] < node.dist) {
		quake_SV.ClipToLinks(node.children[1],clip);
	}
};
quake_SV.Move = function(start,mins,maxs,end,type,passedict) {
	var clip = new quake__$SV_MoveClip();
	clip.trace = quake_SV.ClipMoveToEntity(quake_SV.server.edicts[0],start,mins,maxs,end);
	clip.start = start;
	clip.end = end;
	clip.mins = mins;
	clip.maxs = maxs;
	clip.type = type;
	clip.passedict = passedict;
	var this1 = new Float32Array(3);
	clip.boxmins = this1;
	var this2 = new Float32Array(3);
	clip.boxmaxs = this2;
	if(type == 2) {
		var this3 = new Float32Array(3);
		var v = this3;
		v[0] = -15.0;
		v[1] = -15.0;
		v[2] = -15.0;
		clip.mins2 = v;
		var this4 = new Float32Array(3);
		var v1 = this4;
		v1[0] = 15.0;
		v1[1] = 15.0;
		v1[2] = 15.0;
		clip.maxs2 = v1;
	} else {
		clip.mins2 = new Float32Array(mins);
		clip.maxs2 = new Float32Array(maxs);
	}
	var _g = 0;
	while(_g < 3) {
		var i = _g++;
		if(end[i] > start[i]) {
			clip.boxmins[i] = start[i] + clip.mins2[i] - 1.0;
			clip.boxmaxs[i] = end[i] + clip.maxs2[i] + 1.0;
			continue;
		}
		clip.boxmins[i] = end[i] + clip.mins2[i] - 1.0;
		clip.boxmaxs[i] = start[i] + clip.maxs2[i] + 1.0;
	}
	quake_SV.ClipToLinks(quake_SV.areanodes[0],clip);
	return clip.trace;
};
var quake__$SV_MoveClip = function() {
};
$hxClasses["quake._SV.MoveClip"] = quake__$SV_MoveClip;
quake__$SV_MoveClip.__name__ = true;
quake__$SV_MoveClip.prototype = {
	type: null
	,trace: null
	,boxmins: null
	,boxmaxs: null
	,mins: null
	,maxs: null
	,mins2: null
	,maxs2: null
	,start: null
	,end: null
	,passedict: null
	,__class__: quake__$SV_MoveClip
};
var quake_Trace = function() {
	var this1 = new Float32Array(3);
	this.endpos = this1;
	this.fraction = 0.0;
	this.plane = new quake_Plane();
	this.inwater = false;
	this.inopen = false;
	this.startsolid = false;
	this.allsolid = false;
};
$hxClasses["quake.Trace"] = quake_Trace;
quake_Trace.__name__ = true;
quake_Trace.prototype = {
	allsolid: null
	,startsolid: null
	,inopen: null
	,inwater: null
	,plane: null
	,fraction: null
	,endpos: null
	,ent: null
	,__class__: quake_Trace
};
var quake_Plane = function() {
	this.signbits = 0;
	this.dist = 0;
	var this1 = new Float32Array(3);
	this.normal = this1;
	this.type = 0;
};
$hxClasses["quake.Plane"] = quake_Plane;
quake_Plane.__name__ = true;
quake_Plane.prototype = {
	type: null
	,normal: null
	,dist: null
	,signbits: null
	,__class__: quake_Plane
};
var quake__$Render_RefDef = function() {
	var this1 = new Float32Array(3);
	this.viewangles = this1;
	var this11 = new Float32Array(3);
	this.vieworg = this11;
	this.vrect = new quake__$Render_Rect();
};
$hxClasses["quake._Render.RefDef"] = quake__$Render_RefDef;
quake__$Render_RefDef.__name__ = true;
quake__$Render_RefDef.prototype = {
	vrect: null
	,vieworg: null
	,viewangles: null
	,fov_x: null
	,fov_y: null
	,__class__: quake__$Render_RefDef
};
var quake_Render = function() { };
$hxClasses["quake.Render"] = quake_Render;
quake_Render.__name__ = true;
quake_Render.SplitEntityOnNode = function(emins,emaxs,node) {
	if(node.contents == -2) {
		return;
	}
	if(node.contents < 0) {
		quake_Render.currententity.leafs.push(node.num - 1);
		return;
	}
	var sides = quake__$Vec_Vec_$Impl_$.BoxOnPlaneSide(emins,emaxs,node.plane);
	if((sides & 1) != 0) {
		quake_Render.SplitEntityOnNode(emins,emaxs,node.child0);
	}
	if((sides & 2) != 0) {
		quake_Render.SplitEntityOnNode(emins,emaxs,node.child1);
	}
};
quake_Render.AnimateLight = function() {
	if(quake_Render.fullbright.value == 0) {
		var i = Math.floor(quake_CL.state.time * 10.0);
		var _g = 0;
		while(_g < 64) {
			var j = _g++;
			var style = quake_CL.lightstyle[j];
			if(style.length == 0) {
				quake_Render.lightstylevalue[j] = 12;
			} else {
				quake_Render.lightstylevalue[j] = HxOverrides.cca(style,i % style.length) - 97;
			}
		}
	} else {
		var _g1 = 0;
		while(_g1 < 64) {
			var j1 = _g1++;
			quake_Render.lightstylevalue[j1] = 12;
		}
	}
	quake_GL.Bind(0,quake_Render.lightstyle_texture);
	quake_GL.gl.texImage2D(3553,0,6406,64,1,0,6406,5121,quake_Render.lightstylevalue);
};
quake_Render.RenderDlights = function() {
	if(quake_Render.flashblend.value == 0) {
		return;
	}
	quake_Render.dlightframecount++;
	quake_GL.gl.enable(3042);
	var program = quake_GL.UseProgram(quake_GLPrograms.dlight);
	quake_GL.gl.bindBuffer(34962,quake_Render.dlightvecs);
	quake_GL.gl.vertexAttribPointer(program.aPoint,3,5126,false,0,0);
	var _g = 0;
	var _g1 = quake_CL.dlights;
	while(_g < _g1.length) {
		var l = _g1[_g];
		++_g;
		if(l.die < quake_CL.state.time || l.radius == 0.0) {
			continue;
		}
		var x = l.origin[0] - quake_Render.refdef.vieworg[0];
		var y = l.origin[1] - quake_Render.refdef.vieworg[1];
		var z = l.origin[2] - quake_Render.refdef.vieworg[2];
		var this1 = new Float32Array(3);
		var v = this1;
		v[0] = x;
		v[1] = y;
		v[2] = z;
		var v1 = v;
		if(Math.sqrt(v1[0] * v1[0] + v1[1] * v1[1] + v1[2] * v1[2]) < l.radius * 0.35) {
			var a = l.radius * 0.0003;
			quake_V.blend[3] += a * (1.0 - quake_V.blend[3]);
			a /= quake_V.blend[3];
			quake_V.blend[0] = quake_V.blend[1] * (1.0 - a) + 255.0 * a;
			quake_V.blend[1] = quake_V.blend[1] * (1.0 - a) + 127.5 * a;
			quake_V.blend[2] *= 1.0 - a;
			continue;
		}
		quake_GL.gl.uniform3fv(program.uOrigin,l.origin);
		quake_GL.gl.uniform1f(program.uRadius,l.radius);
		quake_GL.gl.drawArrays(6,0,18);
	}
	quake_GL.gl.disable(3042);
};
quake_Render.MarkLights = function(light,bit,node) {
	while(true) {
		if(node.contents < 0) {
			return;
		}
		var splitplane = node.plane;
		var dist;
		if(splitplane.type < 3) {
			dist = light.origin[splitplane.type] - splitplane.dist;
		} else {
			var v1 = light.origin;
			var v2 = splitplane.normal;
			dist = v1[0] * v2[0] + v1[1] * v2[1] + v1[2] * v2[2] - splitplane.dist;
		}
		if(dist > light.radius) {
			node = node.child0;
			continue;
		}
		if(dist < -light.radius) {
			node = node.child1;
			continue;
		}
		var _g1 = 0;
		var _g = node.numfaces;
		while(_g1 < _g) {
			var i = _g1++;
			var surf = quake_CL.state.worldmodel.faces[node.firstface + i];
			if(surf.sky || surf.turbulent) {
				continue;
			}
			if(surf.dlightframe != quake_Render.dlightframecount + 1) {
				surf.dlightbits = 0;
				surf.dlightframe = quake_Render.dlightframecount + 1;
			}
			surf.dlightbits += bit;
		}
		if(node.child0.contents >= 0) {
			quake_Render.MarkLights(light,bit,node.child0);
		}
		if(node.child1.contents >= 0) {
			quake_Render.MarkLights(light,bit,node.child1);
		}
		break;
	}
};
quake_Render.PushDlights = function() {
	if(quake_Render.flashblend.value != 0) {
		return;
	}
	var _g = 0;
	while(_g < 1024) {
		var i = _g++;
		quake_Render.lightmap_modified[i] = 0;
	}
	var bit = 1;
	var _g1 = 0;
	var _g11 = quake_CL.dlights;
	while(_g1 < _g11.length) {
		var l = _g11[_g1];
		++_g1;
		if(l.die >= quake_CL.state.time && l.radius != 0.0) {
			quake_Render.MarkLights(l,bit,quake_CL.state.worldmodel.nodes[0]);
			var _g3 = 0;
			var _g2 = quake_CL.numvisedicts;
			while(_g3 < _g2) {
				var j = _g3++;
				var ent = quake_CL.visedicts[j];
				if(ent.model == null) {
					continue;
				}
				if(ent.model.type != 0 || !ent.model.submodel) {
					continue;
				}
				quake_Render.MarkLights(l,bit,quake_CL.state.worldmodel.nodes[ent.model.hulls[0].firstclipnode]);
			}
		}
		bit += bit;
	}
	var _g4 = 0;
	var _g12 = quake_CL.state.worldmodel.faces;
	while(_g4 < _g12.length) {
		var surf = _g12[_g4];
		++_g4;
		if(surf.dlightframe == quake_Render.dlightframecount) {
			quake_Render.RemoveDynamicLights(surf);
		} else if(surf.dlightframe == quake_Render.dlightframecount + 1) {
			quake_Render.AddDynamicLights(surf);
		}
	}
	quake_GL.Bind(0,quake_Render.dlightmap_texture);
	var start = null;
	var _g5 = 0;
	while(_g5 < 1024) {
		var i1 = _g5++;
		if(start == null && quake_Render.lightmap_modified[i1] != 0) {
			start = i1;
		} else if(start != null && quake_Render.lightmap_modified[i1] == 0) {
			quake_GL.gl.texSubImage2D(3553,0,0,start,1024,i1 - start,6406,5121,quake_Render.dlightmaps.subarray(start << 10,i1 << 10));
			start = null;
		}
	}
	if(start != null) {
		quake_GL.gl.texSubImage2D(3553,0,0,start,1024,1024 - start,6406,5121,quake_Render.dlightmaps.subarray(start << 10,1048576));
	}
	quake_Render.dlightframecount++;
};
quake_Render.RecursiveLightPoint = function(node,start,end) {
	if(node.contents < 0) {
		return -1;
	}
	var normal = node.plane.normal;
	var front = start[0] * normal[0] + start[1] * normal[1] + start[2] * normal[2] - node.plane.dist;
	var back = end[0] * normal[0] + end[1] * normal[1] + end[2] * normal[2] - node.plane.dist;
	var side = front < 0;
	if(back < 0 == side) {
		return quake_Render.RecursiveLightPoint(side ? node.child1 : node.child0,start,end);
	}
	var frac = front / (front - back);
	var this1 = new Float32Array(3);
	var v = this1;
	v[0] = start[0] + (end[0] - start[0]) * frac;
	v[1] = start[1] + (end[1] - start[1]) * frac;
	v[2] = start[2] + (end[2] - start[2]) * frac;
	var mid = v;
	var r = quake_Render.RecursiveLightPoint(side ? node.child1 : node.child0,start,mid);
	if(r >= 0) {
		return r;
	}
	if(back < 0 == side) {
		return -1;
	}
	var _g1 = 0;
	var _g = node.numfaces;
	while(_g1 < _g) {
		var i = _g1++;
		var surf = quake_CL.state.worldmodel.faces[node.firstface + i];
		if(surf.sky || surf.turbulent) {
			continue;
		}
		var tex = quake_CL.state.worldmodel.texinfo[surf.texinfo];
		var a = tex.vecs[0];
		var this2 = new Float32Array(3);
		var v1 = this2;
		v1[0] = a[0];
		v1[1] = a[1];
		v1[2] = a[2];
		var v2 = v1;
		var s = mid[0] * v2[0] + mid[1] * v2[1] + mid[2] * v2[2] + tex.vecs[0][3] | 0;
		var a1 = tex.vecs[1];
		var this3 = new Float32Array(3);
		var v3 = this3;
		v3[0] = a1[0];
		v3[1] = a1[1];
		v3[2] = a1[2];
		var v21 = v3;
		var t = mid[0] * v21[0] + mid[1] * v21[1] + mid[2] * v21[2] + tex.vecs[1][3] | 0;
		if(s < surf.texturemins[0] || t < surf.texturemins[1]) {
			continue;
		}
		var ds = s - surf.texturemins[0];
		var dt = t - surf.texturemins[1];
		if(ds > surf.extents[0] || dt > surf.extents[1]) {
			continue;
		}
		if(surf.lightofs == 0) {
			return 0;
		}
		ds >>= 4;
		dt >>= 4;
		var lightmap = surf.lightofs;
		if(lightmap == 0) {
			return 0;
		}
		lightmap += dt * ((surf.extents[0] >> 4) + 1) + ds;
		r = 0;
		var size = ((surf.extents[0] >> 4) + 1) * ((surf.extents[1] >> 4) + 1);
		var _g3 = 0;
		var _g2 = surf.styles.length;
		while(_g3 < _g2) {
			var maps = _g3++;
			r += quake_CL.state.worldmodel.lightdata[lightmap] * quake_Render.lightstylevalue[surf.styles[maps]] * 22;
			lightmap += size;
		}
		return r >> 8;
	}
	return quake_Render.RecursiveLightPoint(side ? node.child0 : node.child1,mid,end);
};
quake_Render.LightPoint = function(p) {
	if(quake_CL.state.worldmodel.lightdata == null) {
		return 255;
	}
	var r = quake_CL.state.worldmodel.nodes[0];
	var this1 = new Float32Array(3);
	var v = this1;
	v[0] = p[0];
	v[1] = p[1];
	v[2] = p[2] - 2048.0;
	var r1 = quake_Render.RecursiveLightPoint(r,p,v);
	if(r1 == -1) {
		return 0;
	}
	return r1;
};
quake_Render.CullBox = function(mins,maxs) {
	if(quake__$Vec_Vec_$Impl_$.BoxOnPlaneSide(mins,maxs,quake_Render.frustum[0]) == 2) {
		return true;
	}
	if(quake__$Vec_Vec_$Impl_$.BoxOnPlaneSide(mins,maxs,quake_Render.frustum[1]) == 2) {
		return true;
	}
	if(quake__$Vec_Vec_$Impl_$.BoxOnPlaneSide(mins,maxs,quake_Render.frustum[2]) == 2) {
		return true;
	}
	if(quake__$Vec_Vec_$Impl_$.BoxOnPlaneSide(mins,maxs,quake_Render.frustum[3]) == 2) {
		return true;
	}
	return false;
};
quake_Render.DrawSpriteModel = function(e) {
	var program;
	if(e.model.oriented) {
		program = quake_GL.UseProgram(quake_GLPrograms.spriteOriented);
		quake_GL.gl.uniformMatrix3fv(quake_GLPrograms.spriteOriented.uAngles,false,quake_GL.RotationMatrix(e.angles[0],e.angles[1] - 90.0,e.angles[2]));
	} else {
		program = quake_GL.UseProgram(quake_GLPrograms.sprite);
	}
	var num = e.frame;
	if(num >= e.model.numframes || num < 0) {
		quake_Console.DPrint("Render.DrawSpriteModel: no such frame " + num + "\n");
		num = 0;
	}
	var frame = e.model.frames[num];
	if(frame.group) {
		var time = quake_CL.state.time + e.syncbase;
		var num1 = frame.frames.length - 1;
		var fullinterval = frame.frames[num1].interval;
		var targettime = time - Math.floor(time / fullinterval) * fullinterval;
		var i = 0;
		while(i < num1) {
			if(frame.frames[i].interval > targettime) {
				break;
			}
			++i;
		}
		frame = frame.frames[i];
	}
	quake_GL.gl.uniform4f(program.uRect,frame.origin[0],frame.origin[1],frame.width,frame.height);
	quake_GL.gl.uniform3fv(program.uOrigin,e.origin);
	quake_GL.Bind(program.tTexture,frame.texturenum);
	quake_GL.gl.bindBuffer(34962,quake_GL.rect);
	quake_GL.gl.vertexAttribPointer(program.aPoint,2,5126,false,0,0);
	quake_GL.gl.drawArrays(5,0,4);
};
quake_Render.DrawAliasModel = function(e) {
	var clmodel = e.model;
	var x = e.origin[0] - clmodel.boundingradius;
	var y = e.origin[1] - clmodel.boundingradius;
	var z = e.origin[2] - clmodel.boundingradius;
	var this1 = new Float32Array(3);
	var v = this1;
	v[0] = x;
	v[1] = y;
	v[2] = z;
	var x1 = e.origin[0] + clmodel.boundingradius;
	var y1 = e.origin[1] + clmodel.boundingradius;
	var z1 = e.origin[2] + clmodel.boundingradius;
	var this2 = new Float32Array(3);
	var v1 = this2;
	v1[0] = x1;
	v1[1] = y1;
	v1[2] = z1;
	if(quake_Render.CullBox(v,v1)) {
		return;
	}
	var program;
	if(e.colormap != 0 && clmodel.player && quake_Render.nocolors.value == 0) {
		program = quake_GL.UseProgram(quake_GLPrograms.player);
		var top = (quake_CL.state.scores[e.colormap - 1].colors & 240) + 4;
		var bottom = ((quake_CL.state.scores[e.colormap - 1].colors & 15) << 4) + 4;
		if(top <= 127) {
			top += 7;
		}
		if(bottom <= 127) {
			bottom += 7;
		}
		top = quake_VID.d_8to24table[top];
		bottom = quake_VID.d_8to24table[bottom];
		quake_GL.gl.uniform3f(quake_GLPrograms.player.uTop,top & 255,top >> 8 & 255,top >> 16);
		quake_GL.gl.uniform3f(quake_GLPrograms.player.uBottom,bottom & 255,bottom >> 8 & 255,bottom >> 16);
	} else {
		program = quake_GL.UseProgram(quake_GLPrograms.alias);
	}
	quake_GL.gl.uniform3fv(program.uOrigin,e.origin);
	quake_GL.gl.uniformMatrix3fv(program.uAngles,false,quake_GL.RotationMatrix(e.angles[0],e.angles[1],e.angles[2]));
	var ambientlight = quake_Render.LightPoint(e.origin);
	var shadelight = ambientlight;
	if(e == quake_CL.state.viewent && ambientlight < 24.0) {
		shadelight = 24;
		ambientlight = shadelight;
	}
	var _g = 0;
	var _g1 = quake_CL.dlights;
	while(_g < _g1.length) {
		var dl = _g1[_g];
		++_g;
		if(dl.die < quake_CL.state.time) {
			continue;
		}
		var dl1 = dl.radius;
		var x2 = e.origin[0] - dl.origin[0];
		var y2 = e.origin[1] - dl.origin[1];
		var z2 = e.origin[1] - dl.origin[1];
		var this3 = new Float32Array(3);
		var v2 = this3;
		v2[0] = x2;
		v2[1] = y2;
		v2[2] = z2;
		var v3 = v2;
		var add = dl1 - Math.sqrt(v3[0] * v3[0] + v3[1] * v3[1] + v3[2] * v3[2]);
		if(add > 0) {
			ambientlight += add;
			shadelight += add;
		}
	}
	if(ambientlight > 128.0) {
		ambientlight = 128.0;
	}
	if(ambientlight + shadelight > 192.0) {
		shadelight = 192.0 - ambientlight;
	}
	if(e.num >= 1 && e.num <= quake_CL.state.maxclients && ambientlight < 8.0) {
		shadelight = 8.0;
		ambientlight = shadelight;
	}
	quake_GL.gl.uniform1f(program.uAmbientLight,ambientlight * 0.0078125);
	quake_GL.gl.uniform1f(program.uShadeLight,shadelight * 0.0078125);
	var this4 = new Float32Array(3);
	var forward = this4;
	var this5 = new Float32Array(3);
	var right = this5;
	var this6 = new Float32Array(3);
	var up = this6;
	quake__$Vec_Vec_$Impl_$.AngleVectors(e.angles,forward,right,up);
	var tmp = quake_GL.gl;
	var program1 = program.uLightVec;
	var this7 = new Float32Array(3);
	var v4 = this7;
	v4[0] = -1.0;
	v4[1] = 0.0;
	v4[2] = 0.0;
	var v11 = v4;
	var tmp1 = v11[0] * forward[0] + v11[1] * forward[1] + v11[2] * forward[2];
	var this8 = new Float32Array(3);
	var v5 = this8;
	v5[0] = -1.0;
	v5[1] = 0.0;
	v5[2] = 0.0;
	var v12 = v5;
	var tmp2 = -(v12[0] * right[0] + v12[1] * right[1] + v12[2] * right[2]);
	var this9 = new Float32Array(3);
	var v6 = this9;
	v6[0] = -1.0;
	v6[1] = 0.0;
	v6[2] = 0.0;
	var v13 = v6;
	tmp.uniform3fv(program1,[tmp1,tmp2,v13[0] * up[0] + v13[1] * up[1] + v13[2] * up[2]]);
	quake_Render.c_alias_polys += clmodel.numtris;
	var time = quake_CL.state.time + e.syncbase;
	var num = e.frame;
	if(num >= clmodel.numframes || num < 0) {
		quake_Console.DPrint("Render.DrawAliasModel: no such frame " + num + "\n");
		num = 0;
	}
	var frame = clmodel.frames[num];
	if(frame.group) {
		var num1 = frame.frames.length - 1;
		var fullinterval = frame.frames[num1].interval;
		var targettime = time - Math.floor(time / fullinterval) * fullinterval;
		var i = 0;
		while(i < num1) {
			if(frame.frames[i].interval > targettime) {
				break;
			}
			++i;
		}
		frame = frame.frames[i];
	}
	quake_GL.gl.bindBuffer(34962,clmodel.cmds);
	quake_GL.gl.vertexAttribPointer(program.aPoint,3,5126,false,24,frame.cmdofs);
	quake_GL.gl.vertexAttribPointer(program.aLightNormal,3,5126,false,24,frame.cmdofs + 12);
	quake_GL.gl.vertexAttribPointer(program.aTexCoord,2,5126,false,0,0);
	num = e.skinnum;
	if(num >= clmodel.numskins || num < 0) {
		quake_Console.DPrint("Render.DrawAliasModel: no such skin # " + num + "\n");
		num = 0;
	}
	var skin = clmodel.skins[num];
	if(skin.group) {
		num = skin.skins.length - 1;
		var fullinterval1 = skin.skins[num].interval;
		var targettime1 = time - Math.floor(time / fullinterval1) * fullinterval1;
		var i1 = 0;
		while(i1 < num) {
			if(skin.skins[i1].interval > targettime1) {
				break;
			}
			++i1;
		}
		skin = skin.skins[i1];
	}
	quake_GL.Bind(program.tTexture,skin.texturenum.texnum);
	if(clmodel.player) {
		quake_GL.Bind(quake_GLPrograms.player.tPlayer,skin.playertexture);
	}
	quake_GL.gl.drawArrays(4,0,clmodel.numtris * 3);
};
quake_Render.DrawEntitiesOnList = function() {
	if(quake_Render.drawentities.value == 0) {
		return;
	}
	var vis = quake_Render.novis.value != 0 ? quake_Mod_$Brush.novis : quake_Mod_$Brush.LeafPVS(quake_Render.viewleaf,quake_CL.state.worldmodel);
	var _g = 0;
	var _g1 = quake_CL.static_entities;
	while(_g < _g1.length) {
		var e = _g1[_g];
		++_g;
		quake_Render.currententity = e;
		if(quake_Render.currententity.model == null) {
			continue;
		}
		var j = 0;
		while(j < quake_Render.currententity.leafs.length) {
			var leaf = quake_Render.currententity.leafs[j];
			if(leaf < 0 || (vis[leaf >> 3] & 1 << (leaf & 7)) != 0) {
				break;
			}
			++j;
		}
		if(j == quake_Render.currententity.leafs.length) {
			continue;
		}
		var _g2 = quake_Render.currententity.model.type;
		switch(_g2) {
		case 0:
			quake_Render.DrawBrushModel(quake_Render.currententity);
			break;
		case 2:
			quake_Render.DrawAliasModel(quake_Render.currententity);
			break;
		default:
		}
	}
	var _g11 = 0;
	var _g3 = quake_CL.numvisedicts;
	while(_g11 < _g3) {
		var i = _g11++;
		quake_Render.currententity = quake_CL.visedicts[i];
		if(quake_Render.currententity.model == null) {
			continue;
		}
		var _g21 = quake_Render.currententity.model.type;
		switch(_g21) {
		case 0:
			quake_Render.DrawBrushModel(quake_Render.currententity);
			break;
		case 2:
			quake_Render.DrawAliasModel(quake_Render.currententity);
			break;
		default:
		}
	}
	quake_GL.gl.depthMask(false);
	quake_GL.gl.enable(3042);
	var _g4 = 0;
	var _g12 = quake_CL.static_entities;
	while(_g4 < _g12.length) {
		var e1 = _g12[_g4];
		++_g4;
		quake_Render.currententity = e1;
		if(quake_Render.currententity.model == null) {
			continue;
		}
		if(quake_Render.currententity.model.type == 1) {
			quake_Render.DrawSpriteModel(quake_Render.currententity);
		}
	}
	var _g13 = 0;
	var _g5 = quake_CL.numvisedicts;
	while(_g13 < _g5) {
		var i1 = _g13++;
		quake_Render.currententity = quake_CL.visedicts[i1];
		if(quake_Render.currententity.model == null) {
			continue;
		}
		if(quake_Render.currententity.model.type == 1) {
			quake_Render.DrawSpriteModel(quake_Render.currententity);
		}
	}
	quake_GL.gl.disable(3042);
	quake_GL.gl.depthMask(true);
};
quake_Render.DrawViewModel = function() {
	if(quake_Render.drawviewmodel.value == 0) {
		return;
	}
	if(quake_Chase.active.value != 0) {
		return;
	}
	if(quake_Render.drawentities.value == 0) {
		return;
	}
	if((quake_CL.state.items & quake_Def.it.invisibility) != 0) {
		return;
	}
	if(quake_CL.state.stats[0] <= 0) {
		return;
	}
	if(quake_CL.state.viewent.model == null) {
		return;
	}
	quake_GL.gl.depthRange(0.0,0.3);
	var ymax = 4.0 * Math.tan(quake_SCR.fov.value * 0.82 * Math.PI / 360.0);
	quake_Render.perspective[0] = 4.0 / (ymax * quake_Render.refdef.vrect.width / quake_Render.refdef.vrect.height);
	quake_Render.perspective[5] = 4.0 / ymax;
	var program = quake_GL.UseProgram(quake_GLPrograms.alias);
	quake_GL.gl.uniformMatrix4fv(program.uPerspective,false,quake_Render.perspective);
	quake_Render.DrawAliasModel(quake_CL.state.viewent);
	ymax = 4.0 * Math.tan(quake_Render.refdef.fov_y * Math.PI / 360.0);
	quake_Render.perspective[0] = 4.0 / (ymax * quake_Render.refdef.vrect.width / quake_Render.refdef.vrect.height);
	quake_Render.perspective[5] = 4.0 / ymax;
	program = quake_GL.UseProgram(quake_GLPrograms.alias);
	quake_GL.gl.uniformMatrix4fv(program.uPerspective,false,quake_Render.perspective);
	quake_GL.gl.depthRange(0.0,1.0);
};
quake_Render.PolyBlend = function() {
	if(quake_Render.polyblend.value == 0) {
		return;
	}
	if(quake_V.blend[3] == 0.0) {
		return;
	}
	var program = quake_GL.UseProgram(quake_GLPrograms.fill);
	quake_GL.gl.bindBuffer(34962,quake_GL.rect);
	quake_GL.gl.vertexAttribPointer(program.aPoint,2,5126,false,0,0);
	var vrect = quake_Render.refdef.vrect;
	quake_GL.gl.uniform4f(program.uRect,vrect.x,vrect.y,vrect.width,vrect.height);
	quake_GL.gl.uniform4fv(program.uColor,quake_V.blend);
	quake_GL.gl.drawArrays(5,0,4);
};
quake_Render.SetFrustum = function() {
	quake__$Vec_Vec_$Impl_$.RotatePointAroundVector(quake_Render.vup,quake_Render.vpn,-(90.0 - quake_Render.refdef.fov_x * 0.5),quake_Render.frustum[0].normal);
	quake__$Vec_Vec_$Impl_$.RotatePointAroundVector(quake_Render.vup,quake_Render.vpn,90.0 - quake_Render.refdef.fov_x * 0.5,quake_Render.frustum[1].normal);
	quake__$Vec_Vec_$Impl_$.RotatePointAroundVector(quake_Render.vright,quake_Render.vpn,90.0 - quake_Render.refdef.fov_y * 0.5,quake_Render.frustum[2].normal);
	quake__$Vec_Vec_$Impl_$.RotatePointAroundVector(quake_Render.vright,quake_Render.vpn,-(90.0 - quake_Render.refdef.fov_y * 0.5),quake_Render.frustum[3].normal);
	var _g = 0;
	while(_g < 4) {
		var i = _g++;
		var out = quake_Render.frustum[i];
		out.type = 5;
		var v1 = quake_Render.refdef.vieworg;
		var v2 = out.normal;
		out.dist = v1[0] * v2[0] + v1[1] * v2[1] + v1[2] * v2[2];
		out.signbits = 0;
		if(out.normal[0] < 0.0) {
			out.signbits = 1;
		}
		if(out.normal[1] < 0.0) {
			out.signbits += 2;
		}
		if(out.normal[2] < 0.0) {
			out.signbits += 4;
		}
		if(out.normal[3] < 0.0) {
			out.signbits += 8;
		}
	}
};
quake_Render.Perspective = function() {
	var viewangles_0 = quake_Render.refdef.viewangles[0] * Math.PI / 180.0;
	var viewangles_1 = (quake_Render.refdef.viewangles[1] - 90.0) * Math.PI / -180.0;
	var viewangles_2 = quake_Render.refdef.viewangles[2] * Math.PI / -180.0;
	var sp = Math.sin(viewangles_0);
	var cp = Math.cos(viewangles_0);
	var sy = Math.sin(viewangles_1);
	var cy = Math.cos(viewangles_1);
	var sr = Math.sin(viewangles_2);
	var cr = Math.cos(viewangles_2);
	var viewMatrix = [cr * cy + sr * sp * sy,cp * sy,-sr * cy + cr * sp * sy,cr * -sy + sr * sp * cy,cp * cy,-sr * -sy + cr * sp * cy,sr * cp,-sp,cr * cp];
	if(quake_V.gamma.value < 0.5) {
		quake_V.gamma.setValue(0.5);
	} else if(quake_V.gamma.value > 1.0) {
		quake_V.gamma.setValue(1.0);
	}
	quake_GL.UnbindProgram();
	var _g = 0;
	var _g1 = quake_GL.programs;
	while(_g < _g1.length) {
		var program = _g1[_g];
		++_g;
		program.gl.useProgram(program.program);
		program.setViewOrigin(quake_Render.refdef.vieworg);
		program.setViewAngles(viewMatrix);
		program.setPerspective(quake_Render.perspective);
		program.setGamma(quake_V.gamma.value);
	}
};
quake_Render.SetupGL = function() {
	if(quake_Render.dowarp) {
		quake_GL.gl.bindFramebuffer(36160,quake_Render.warpbuffer);
		quake_GL.gl.clear(16640);
		quake_GL.gl.viewport(0,0,quake_Render.warpwidth,quake_Render.warpheight);
	} else {
		var vrect = quake_Render.refdef.vrect;
		var pixelRatio = quake_SCR.devicePixelRatio;
		quake_GL.gl.viewport(vrect.x * pixelRatio | 0,(quake_VID.height - vrect.height - vrect.y) * pixelRatio | 0,vrect.width * pixelRatio | 0,vrect.height * pixelRatio | 0);
	}
	quake_Render.Perspective();
	quake_GL.gl.enable(2929);
};
quake_Render.RenderScene = function() {
	if(quake_CL.state.maxclients >= 2) {
		quake_Render.fullbright.set("0");
	}
	quake_Render.AnimateLight();
	quake__$Vec_Vec_$Impl_$.AngleVectors(quake_Render.refdef.viewangles,quake_Render.vpn,quake_Render.vright,quake_Render.vup);
	quake_Render.viewleaf = quake_Mod_$Brush.PointInLeaf(quake_Render.refdef.vieworg,quake_CL.state.worldmodel);
	quake_V.SetContentsColor(quake_Render.viewleaf.contents);
	quake_V.CalcBlend();
	quake_Render.dowarp = quake_Render.waterwarp.value != 0 && quake_Render.viewleaf.contents <= -3;
	quake_Render.SetFrustum();
	quake_Render.SetupGL();
	quake_Render.MarkLeaves();
	quake_GL.gl.enable(2884);
	quake_Render.DrawSkyBox();
	quake_Render.DrawViewModel();
	quake_Render.DrawWorld();
	quake_Render.DrawEntitiesOnList();
	quake_GL.gl.disable(2884);
	quake_Render.RenderDlights();
	quake_Render.DrawParticles();
};
quake_Render.RenderView = function() {
	quake_GL.gl.finish();
	var time1 = null;
	if(quake_Render.speeds.value != 0) {
		time1 = new Date().getTime() * 0.001 - quake_Sys.oldtime;
	}
	quake_Render.c_brush_verts = 0;
	quake_Render.c_alias_polys = 0;
	quake_GL.gl.clear(16640);
	quake_Render.RenderScene();
	if(quake_Render.speeds.value != 0) {
		var time2 = Math.floor((new Date().getTime() * 0.001 - quake_Sys.oldtime - time1) * 1000.0);
		var c_brush_polys = quake_Render.c_brush_verts / 3;
		var c_alias_polys = quake_Render.c_alias_polys;
		var msg = (time2 >= 100 ? "" : time2 >= 10 ? " " : "  ") + time2 + " ms  ";
		msg += (c_brush_polys >= 1000 ? "" : c_brush_polys >= 100 ? " " : c_brush_polys >= 10 ? "  " : "   ") + c_brush_polys + " wpoly ";
		msg += (c_alias_polys >= 1000 ? "" : c_alias_polys >= 100 ? " " : c_alias_polys >= 10 ? "  " : "   ") + c_alias_polys + " epoly\n";
		quake_Console.Print(msg);
	}
};
quake_Render.MakeBrushModelDisplayLists = function(m) {
	if(m.cmds != null) {
		quake_GL.gl.deleteBuffer(m.cmds);
	}
	var cmds = [];
	var styles_0 = 0.0;
	var styles_1 = 0.0;
	var styles_2 = 0.0;
	var styles_3 = 0.0;
	var verts = 0;
	m.chains = [];
	var _g1 = 0;
	var _g = m.textures.length;
	while(_g1 < _g) {
		var i = _g1++;
		var texture = m.textures[i];
		if(texture.sky || texture.turbulent) {
			continue;
		}
		var chain = [i,verts,0];
		var _g3 = 0;
		var _g2 = m.numfaces;
		while(_g3 < _g2) {
			var j = _g3++;
			var surf = m.faces[m.firstface + j];
			if(surf.texture != i) {
				continue;
			}
			styles_3 = 0.0;
			styles_2 = styles_3;
			styles_1 = styles_2;
			styles_0 = styles_1;
			var _g4 = surf.styles.length;
			switch(_g4) {
			case 1:
				styles_0 = surf.styles[0] * 0.015625 + 0.0078125;
				break;
			case 2:
				styles_1 = surf.styles[1] * 0.015625 + 0.0078125;
				break;
			case 3:
				styles_2 = surf.styles[2] * 0.015625 + 0.0078125;
				break;
			case 4:
				styles_3 = surf.styles[3] * 0.015625 + 0.0078125;
				break;
			}
			chain[2] += surf.verts.length;
			var _g6 = 0;
			var _g5 = surf.verts.length;
			while(_g6 < _g5) {
				var k = _g6++;
				var vert = surf.verts[k];
				cmds.push(vert[0]);
				cmds.push(vert[1]);
				cmds.push(vert[2]);
				cmds.push(vert[3]);
				cmds.push(vert[4]);
				cmds.push(vert[5]);
				cmds.push(vert[6]);
				cmds.push(styles_0);
				cmds.push(styles_1);
				cmds.push(styles_2);
				cmds.push(styles_3);
			}
		}
		if(chain[2] != 0) {
			m.chains.push(chain);
			verts += chain[2];
		}
	}
	m.waterchain = verts * 44;
	verts = 0;
	var _g11 = 0;
	var _g7 = m.textures.length;
	while(_g11 < _g7) {
		var i1 = _g11++;
		var texture1 = m.textures[i1];
		if(!texture1.turbulent) {
			continue;
		}
		var chain1 = [i1,verts,0];
		var _g31 = 0;
		var _g21 = m.numfaces;
		while(_g31 < _g21) {
			var j1 = _g31++;
			var surf1 = m.faces[m.firstface + j1];
			if(surf1.texture != i1) {
				continue;
			}
			chain1[2] += surf1.verts.length;
			var _g51 = 0;
			var _g41 = surf1.verts.length;
			while(_g51 < _g41) {
				var k1 = _g51++;
				var vert1 = surf1.verts[k1];
				cmds.push(vert1[0]);
				cmds.push(vert1[1]);
				cmds.push(vert1[2]);
				cmds.push(vert1[3]);
				cmds.push(vert1[4]);
			}
		}
		if(chain1[2] != 0) {
			m.chains.push(chain1);
			verts += chain1[2];
		}
	}
	m.cmds = quake_GL.gl.createBuffer();
	quake_GL.gl.bindBuffer(34962,m.cmds);
	quake_GL.gl.bufferData(34962,new Float32Array(cmds),35044);
};
quake_Render.MakeWorldModelDisplayLists = function(m) {
	if(m.cmds != null) {
		return;
	}
	var cmds = [];
	var styles_0 = 0.0;
	var styles_1 = 0.0;
	var styles_2 = 0.0;
	var styles_3 = 0.0;
	var verts = 0;
	var _g1 = 0;
	var _g = m.textures.length;
	while(_g1 < _g) {
		var i = _g1++;
		var texture = m.textures[i];
		if(texture.sky || texture.turbulent) {
			continue;
		}
		var _g3 = 0;
		var _g2 = m.leafs.length;
		while(_g3 < _g2) {
			var j = _g3++;
			var leaf = m.leafs[j];
			var chain = [i,verts,0];
			var _g5 = 0;
			var _g4 = leaf.nummarksurfaces;
			while(_g5 < _g4) {
				var k = _g5++;
				var surf = m.faces[m.marksurfaces[leaf.firstmarksurface + k]];
				if(surf.texture != i) {
					continue;
				}
				styles_3 = 0.0;
				styles_2 = styles_3;
				styles_1 = styles_2;
				styles_0 = styles_1;
				var _g6 = surf.styles.length;
				switch(_g6) {
				case 1:
					styles_0 = surf.styles[0] * 0.015625 + 0.0078125;
					break;
				case 2:
					styles_1 = surf.styles[1] * 0.015625 + 0.0078125;
					styles_0 = surf.styles[0] * 0.015625 + 0.0078125;
					break;
				case 3:
					styles_2 = surf.styles[2] * 0.015625 + 0.0078125;
					styles_1 = surf.styles[1] * 0.015625 + 0.0078125;
					styles_0 = surf.styles[0] * 0.015625 + 0.0078125;
					break;
				case 4:
					styles_3 = surf.styles[3] * 0.015625 + 0.0078125;
					styles_2 = surf.styles[2] * 0.015625 + 0.0078125;
					styles_1 = surf.styles[1] * 0.015625 + 0.0078125;
					styles_0 = surf.styles[0] * 0.015625 + 0.0078125;
					break;
				}
				chain[2] += surf.verts.length;
				var _g7 = 0;
				var _g8 = surf.verts;
				while(_g7 < _g8.length) {
					var vert = _g8[_g7];
					++_g7;
					cmds.push(vert[0]);
					cmds.push(vert[1]);
					cmds.push(vert[2]);
					cmds.push(vert[3]);
					cmds.push(vert[4]);
					cmds.push(vert[5]);
					cmds.push(vert[6]);
					cmds.push(styles_0);
					cmds.push(styles_1);
					cmds.push(styles_2);
					cmds.push(styles_3);
				}
			}
			if(chain[2] != 0) {
				leaf.cmds.push(chain);
				++leaf.skychain;
				++leaf.waterchain;
				verts += chain[2];
			}
		}
	}
	m.skychain = verts * 44;
	verts = 0;
	var _g11 = 0;
	var _g9 = m.textures.length;
	while(_g11 < _g9) {
		var i1 = _g11++;
		var texture1 = m.textures[i1];
		if(!texture1.sky) {
			continue;
		}
		var _g31 = 0;
		var _g21 = m.leafs.length;
		while(_g31 < _g21) {
			var j1 = _g31++;
			var leaf1 = m.leafs[j1];
			var chain1 = [verts,0];
			var _g51 = 0;
			var _g41 = leaf1.nummarksurfaces;
			while(_g51 < _g41) {
				var k1 = _g51++;
				var surf1 = m.faces[m.marksurfaces[leaf1.firstmarksurface + k1]];
				if(surf1.texture != i1) {
					continue;
				}
				chain1[1] += surf1.verts.length;
				var _g71 = 0;
				var _g61 = surf1.verts.length;
				while(_g71 < _g61) {
					var l = _g71++;
					var vert1 = surf1.verts[l];
					cmds.push(vert1[0]);
					cmds.push(vert1[1]);
					cmds.push(vert1[2]);
				}
			}
			if(chain1[1] != 0) {
				leaf1.cmds.push(chain1);
				++leaf1.waterchain;
				verts += chain1[1];
			}
		}
	}
	m.waterchain = m.skychain + verts * 12;
	verts = 0;
	var _g12 = 0;
	var _g10 = m.textures.length;
	while(_g12 < _g10) {
		var i2 = _g12++;
		var texture2 = m.textures[i2];
		if(!texture2.turbulent) {
			continue;
		}
		var _g32 = 0;
		var _g22 = m.leafs.length;
		while(_g32 < _g22) {
			var j2 = _g32++;
			var leaf2 = m.leafs[j2];
			var chain2 = [i2,verts,0];
			var _g52 = 0;
			var _g42 = leaf2.nummarksurfaces;
			while(_g52 < _g42) {
				var k2 = _g52++;
				var surf2 = m.faces[m.marksurfaces[leaf2.firstmarksurface + k2]];
				if(surf2.texture != i2) {
					continue;
				}
				chain2[2] += surf2.verts.length;
				var _g72 = 0;
				var _g62 = surf2.verts.length;
				while(_g72 < _g62) {
					var l1 = _g72++;
					var vert2 = surf2.verts[l1];
					cmds.push(vert2[0]);
					cmds.push(vert2[1]);
					cmds.push(vert2[2]);
					cmds.push(vert2[3]);
					cmds.push(vert2[4]);
				}
			}
			if(chain2[2] != 0) {
				leaf2.cmds.push(chain2);
				verts += chain2[2];
			}
		}
	}
	m.cmds = quake_GL.gl.createBuffer();
	quake_GL.gl.bindBuffer(34962,m.cmds);
	quake_GL.gl.bufferData(34962,new Float32Array(cmds),35044);
};
quake_Render.InitTextures = function() {
	var data = new Uint8Array(new ArrayBuffer(256));
	var _g = 0;
	while(_g < 8) {
		var i = _g++;
		var _g1 = 0;
		while(_g1 < 8) {
			var j = _g1++;
			data[(i << 4) + j] = data[136 + (i << 4) + j] = 255;
			data[8 + (i << 4) + j] = data[128 + (i << 4) + j] = 0;
		}
	}
	var t = new quake_MTexture();
	t.name = "notexture";
	t.width = 16;
	t.height = 16;
	t.texturenum = quake_GL.gl.createTexture();
	quake_Render.notexture_mip = t;
	quake_GL.Bind(0,quake_Render.notexture_mip.texturenum);
	quake_GL.Upload(data,16,16);
	quake_Render.solidskytexture = quake_GL.gl.createTexture();
	quake_GL.Bind(0,quake_Render.solidskytexture);
	quake_GL.gl.texParameteri(3553,10241,9729);
	quake_GL.gl.texParameteri(3553,10240,9729);
	quake_Render.alphaskytexture = quake_GL.gl.createTexture();
	quake_GL.Bind(0,quake_Render.alphaskytexture);
	quake_GL.gl.texParameteri(3553,10241,9729);
	quake_GL.gl.texParameteri(3553,10240,9729);
	quake_Render.lightmap_texture = quake_GL.gl.createTexture();
	quake_GL.Bind(0,quake_Render.lightmap_texture);
	quake_GL.gl.texParameteri(3553,10241,9729);
	quake_GL.gl.texParameteri(3553,10240,9729);
	quake_Render.dlightmap_texture = quake_GL.gl.createTexture();
	quake_GL.Bind(0,quake_Render.dlightmap_texture);
	quake_GL.gl.texParameteri(3553,10241,9729);
	quake_GL.gl.texParameteri(3553,10240,9729);
	quake_Render.lightstyle_texture = quake_GL.gl.createTexture();
	quake_GL.Bind(0,quake_Render.lightstyle_texture);
	quake_GL.gl.texParameteri(3553,10241,9728);
	quake_GL.gl.texParameteri(3553,10240,9728);
	quake_Render.fullbright_texture = quake_GL.gl.createTexture();
	quake_GL.Bind(0,quake_Render.fullbright_texture);
	quake_GL.gl.texImage2D(3553,0,6408,1,1,0,6408,5121,new Uint8Array([255,0,0,0]));
	quake_GL.gl.texParameteri(3553,10241,9728);
	quake_GL.gl.texParameteri(3553,10240,9728);
	quake_Render.null_texture = quake_GL.gl.createTexture();
	quake_GL.Bind(0,quake_Render.null_texture);
	quake_GL.gl.texImage2D(3553,0,6408,1,1,0,6408,5121,new Uint8Array([0,0,0,0]));
	quake_GL.gl.texParameteri(3553,10241,9728);
	quake_GL.gl.texParameteri(3553,10240,9728);
};
quake_Render.Init = function() {
	quake_Render.InitTextures();
	quake_Cmd.AddCommand("timerefresh",quake_Render.TimeRefresh_f);
	quake_Cmd.AddCommand("pointfile",quake_Render.ReadPointFile_f);
	quake_Render.waterwarp = quake_Cvar.RegisterVariable("r_waterwarp","1");
	quake_Render.fullbright = quake_Cvar.RegisterVariable("r_fullbright","0");
	quake_Render.drawentities = quake_Cvar.RegisterVariable("r_drawentities","1");
	quake_Render.drawviewmodel = quake_Cvar.RegisterVariable("r_drawviewmodel","1");
	quake_Render.novis = quake_Cvar.RegisterVariable("r_novis","0");
	quake_Render.speeds = quake_Cvar.RegisterVariable("r_speeds","0");
	quake_Render.polyblend = quake_Cvar.RegisterVariable("gl_polyblend","1");
	quake_Render.flashblend = quake_Cvar.RegisterVariable("gl_flashblend","0");
	quake_Render.nocolors = quake_Cvar.RegisterVariable("gl_nocolors","0");
	quake_Render.InitParticles();
	quake_Render.warpbuffer = quake_GL.gl.createFramebuffer();
	quake_Render.warptexture = quake_GL.gl.createTexture();
	quake_GL.Bind(0,quake_Render.warptexture);
	quake_GL.gl.texParameteri(3553,10241,9729);
	quake_GL.gl.texParameteri(3553,10240,9729);
	quake_GL.gl.texParameteri(3553,10242,33071);
	quake_GL.gl.texParameteri(3553,10243,33071);
	quake_Render.warprenderbuffer = quake_GL.gl.createRenderbuffer();
	quake_GL.gl.bindRenderbuffer(36161,quake_Render.warprenderbuffer);
	quake_GL.gl.renderbufferStorage(36161,33189,0,0);
	quake_GL.gl.bindRenderbuffer(36161,null);
	quake_GL.gl.bindFramebuffer(36160,quake_Render.warpbuffer);
	quake_GL.gl.framebufferTexture2D(36160,36064,3553,quake_Render.warptexture,0);
	quake_GL.gl.framebufferRenderbuffer(36160,36096,36161,quake_Render.warprenderbuffer);
	quake_GL.gl.bindFramebuffer(36160,null);
	quake_Render.dlightvecs = quake_GL.gl.createBuffer();
	quake_GL.gl.bindBuffer(34962,quake_Render.dlightvecs);
	quake_GL.gl.bufferData(34962,new Float32Array([0.0,-1.0,0.0,0.0,0.0,1.0,-0.382683,0.0,0.92388,-0.707107,0.0,0.707107,-0.92388,0.0,0.382683,-1.0,0.0,0.0,-0.92388,0.0,-0.382683,-0.707107,0.0,-0.707107,-0.382683,0.0,-0.92388,0.0,0.0,-1.0,0.382683,0.0,-0.92388,0.707107,0.0,-0.707107,0.92388,0.0,-0.382683,1.0,0.0,0.0,0.92388,0.0,0.382683,0.707107,0.0,0.707107,0.382683,0.0,0.92388,0.0,0.0,1.0]),35044);
	quake_Render.MakeSky();
};
quake_Render.NewMap = function() {
	var _g = 0;
	while(_g < 64) {
		var i = _g++;
		quake_Render.lightstylevalue[i] = 12;
	}
	quake_Render.ClearParticles();
	quake_Render.BuildLightmaps();
	var _g1 = 0;
	while(_g1 < 1048576) {
		var i1 = _g1++;
		quake_Render.dlightmaps[i1] = 0;
	}
	quake_GL.Bind(0,quake_Render.dlightmap_texture);
	quake_GL.gl.texImage2D(3553,0,6406,1024,1024,0,6406,5121,null);
};
quake_Render.TimeRefresh_f = function() {
	quake_GL.gl.finish();
	var start = new Date().getTime() * 0.001 - quake_Sys.oldtime;
	var _g = 0;
	while(_g < 128) {
		var i = _g++;
		quake_Render.refdef.viewangles[1] = i * 2.8125;
		quake_Render.RenderView();
	}
	quake_GL.gl.finish();
	var time = new Date().getTime() * 0.001 - quake_Sys.oldtime - start;
	quake_Console.Print(time.toFixed(6) + " seconds (" + (128.0 / time).toFixed(6) + " fps)\n");
};
quake_Render.InitParticles = function() {
	var numparticles;
	var i = quake_COM.CheckParm("-particles");
	if(i != null) {
		numparticles = quake_Q.atoi(quake_COM.argv[i + 1]);
		if(numparticles < 512) {
			numparticles = 512;
		}
	} else {
		numparticles = 2048;
	}
	var _g = [];
	var _g2 = 0;
	var _g1 = numparticles;
	while(_g2 < _g1) {
		var _ = _g2++;
		_g.push(new quake__$Render_Particle());
	}
	quake_Render.particles = _g;
	quake_Render.avelocities = [];
	var _g11 = 0;
	while(_g11 < 162) {
		var _1 = _g11++;
		var tmp = quake_Render.avelocities;
		var x = Math.random() * 2.56;
		var y = Math.random() * 2.56;
		var z = Math.random() * 2.56;
		var this1 = new Float32Array(3);
		var v = this1;
		v[0] = x;
		v[1] = y;
		v[2] = z;
		tmp.push(v);
	}
};
quake_Render.EntityParticles = function(ent) {
	var dist = 64;
	var beamlength = 16;
	var allocated = quake_Render.AllocParticles(162);
	var _g1 = 0;
	var _g = allocated.length;
	while(_g1 < _g) {
		var i = _g1++;
		var p = quake_Render.particles[allocated[i]];
		var angle = quake_CL.state.time * quake_Render.avelocities[i][0];
		var sy = Math.sin(angle);
		var cy = Math.cos(angle);
		var angle1 = quake_CL.state.time * quake_Render.avelocities[i][1];
		var sp = Math.sin(angle1);
		var cp = Math.cos(angle1);
		p.die = quake_CL.state.time + 0.01;
		p.color = 111;
		p.type = 4;
		var this1 = p.org;
		this1[0] = ent.origin[0] + quake_Render.avertexnormals[i * 3] * dist + cp * cy * beamlength;
		this1[1] = ent.origin[1] + quake_Render.avertexnormals[i * 3 + 1] * dist + cp * sy * beamlength;
		this1[2] = ent.origin[2] + quake_Render.avertexnormals[i * 3 + 2] * dist - sp * beamlength;
	}
};
quake_Render.ClearParticles = function() {
	var _g = 0;
	var _g1 = quake_Render.particles;
	while(_g < _g1.length) {
		var p = _g1[_g];
		++_g;
		p.die = -1.0;
	}
};
quake_Render.ReadPointFile_f = function() {
	if(!quake_SV.server.active) {
		return;
	}
	var name = "maps/" + quake_PR.GetString(quake_PR.globals.ints[34]) + ".pts";
	var f = quake_COM.LoadTextFile(name);
	if(f == null) {
		quake_Console.Print("couldn't open " + name + "\n");
		return;
	}
	quake_Console.Print("Reading " + name + "...\n");
	var f1 = f.split("\n");
	var c = 0;
	while(c < f1.length) {
		var org = f1[c].split(" ");
		if(org.length != 3) {
			break;
		}
		++c;
		var p = quake_Render.AllocParticles(1);
		if(p.length == 0) {
			quake_Console.Print("Not enough free particles\n");
			break;
		}
		var p1 = quake_Render.particles[p[0]];
		p1.type = 0;
		p1.die = 99999.0;
		p1.color = -c & 15;
		var this1 = p1.org;
		var x = quake_Q.atof(org[0]);
		var y = quake_Q.atof(org[1]);
		var z = quake_Q.atof(org[2]);
		this1[0] = x;
		this1[1] = y;
		this1[2] = z;
	}
	quake_Console.Print(c + " points read\n");
};
quake_Render.ParseParticleEffect = function() {
	var x = quake_MSG.ReadShort() * 0.125;
	var y = quake_MSG.ReadShort() * 0.125;
	var z = quake_MSG.ReadShort() * 0.125;
	var this1 = new Float32Array(3);
	var v = this1;
	v[0] = x;
	v[1] = y;
	v[2] = z;
	var org = v;
	var x1 = quake_MSG.ReadChar() * 0.0625;
	var y1 = quake_MSG.ReadChar() * 0.0625;
	var z1 = quake_MSG.ReadChar() * 0.0625;
	var this2 = new Float32Array(3);
	var v1 = this2;
	v1[0] = x1;
	v1[1] = y1;
	v1[2] = z1;
	var dir = v1;
	var msgcount = quake_MSG.ReadByte();
	var color = quake_MSG.ReadByte();
	if(msgcount == 255) {
		quake_Render.ParticleExplosion(org);
	} else {
		quake_Render.RunParticleEffect(org,dir,color,msgcount);
	}
};
quake_Render.ParticleExplosion = function(org) {
	var allocated = quake_Render.AllocParticles(1024);
	var _g1 = 0;
	var _g = allocated.length;
	while(_g1 < _g) {
		var i = _g1++;
		var p = quake_Render.particles[allocated[i]];
		p.type = (i & 1) != 0 ? 4 : 5;
		p.die = quake_CL.state.time + 5.0;
		p.color = quake_Render.ramp1[0];
		p.ramp = Math.floor(Math.random() * 4.0);
		var this1 = p.vel;
		var x = Math.random() * 512.0 - 256.0;
		var y = Math.random() * 512.0 - 256.0;
		var z = Math.random() * 512.0 - 256.0;
		this1[0] = x;
		this1[1] = y;
		this1[2] = z;
		var this2 = p.org;
		var x1 = org[0] + Math.random() * 32.0 - 16.0;
		var y1 = org[1] + Math.random() * 32.0 - 16.0;
		var z1 = org[2] + Math.random() * 32.0 - 16.0;
		this2[0] = x1;
		this2[1] = y1;
		this2[2] = z1;
	}
};
quake_Render.ParticleExplosion2 = function(org,colorStart,colorLength) {
	var allocated = quake_Render.AllocParticles(512);
	var colorMod = 0;
	var _g = 0;
	while(_g < allocated.length) {
		var idx = allocated[_g];
		++_g;
		var p = quake_Render.particles[idx];
		p.type = 6;
		p.die = quake_CL.state.time + 0.3;
		p.color = colorStart + colorMod++ % colorLength;
		var this1 = p.org;
		var x = org[0] + Math.random() * 32.0 - 16.0;
		var y = org[1] + Math.random() * 32.0 - 16.0;
		var z = org[2] + Math.random() * 32.0 - 16.0;
		this1[0] = x;
		this1[1] = y;
		this1[2] = z;
		var this2 = p.vel;
		var x1 = Math.random() * 512.0 - 256.0;
		var y1 = Math.random() * 512.0 - 256.0;
		var z1 = Math.random() * 512.0 - 256.0;
		this2[0] = x1;
		this2[1] = y1;
		this2[2] = z1;
	}
};
quake_Render.BlobExplosion = function(org) {
	var allocated = quake_Render.AllocParticles(1024);
	var _g1 = 0;
	var _g = allocated.length;
	while(_g1 < _g) {
		var i = _g1++;
		var p = quake_Render.particles[allocated[i]];
		p.die = quake_CL.state.time + 1.0 + Math.random() * 0.4;
		if((i & 1) != 0) {
			p.type = 6;
			p.color = 66 + Math.floor(Math.random() * 7.0);
		} else {
			p.type = 7;
			p.color = 150 + Math.floor(Math.random() * 7.0);
		}
		var this1 = p.org;
		var x = org[0] + Math.random() * 32.0 - 16.0;
		var y = org[1] + Math.random() * 32.0 - 16.0;
		var z = org[2] + Math.random() * 32.0 - 16.0;
		this1[0] = x;
		this1[1] = y;
		this1[2] = z;
		var this2 = p.vel;
		var x1 = Math.random() * 512.0 - 256.0;
		var y1 = Math.random() * 512.0 - 256.0;
		var z1 = Math.random() * 512.0 - 256.0;
		this2[0] = x1;
		this2[1] = y1;
		this2[2] = z1;
	}
};
quake_Render.RunParticleEffect = function(org,dir,color,count) {
	var allocated = quake_Render.AllocParticles(count);
	var _g = 0;
	while(_g < allocated.length) {
		var idx = allocated[_g];
		++_g;
		var p = quake_Render.particles[idx];
		p.type = 2;
		p.die = quake_CL.state.time + 0.6 * Math.random();
		p.color = (color & 248) + Math.floor(Math.random() * 8.0);
		var this1 = p.org;
		var x = org[0] + Math.random() * 16.0 - 8.0;
		var y = org[1] + Math.random() * 16.0 - 8.0;
		var z = org[2] + Math.random() * 16.0 - 8.0;
		this1[0] = x;
		this1[1] = y;
		this1[2] = z;
		var this2 = p.vel;
		this2[0] = dir[0] * 15.0;
		this2[1] = dir[1] * 15.0;
		this2[2] = dir[2] * 15.0;
	}
};
quake_Render.LavaSplash = function(org) {
	var allocated = quake_Render.AllocParticles(1024);
	var this1 = new Float32Array(3);
	var dir = this1;
	var k = 0;
	var _g = -16;
	while(_g < 16) {
		var i = _g++;
		var _g1 = -16;
		while(_g1 < 16) {
			var j = _g1++;
			if(k >= allocated.length) {
				return;
			}
			var p = quake_Render.particles[allocated[k++]];
			p.die = quake_CL.state.time + 2.0 + Math.random() * 0.64;
			p.color = 224 + Math.floor(Math.random() * 8.0);
			p.type = 2;
			dir[0] = (j + Math.random()) * 8.0;
			dir[1] = (i + Math.random()) * 8.0;
			dir[2] = 256.0;
			var this2 = p.org;
			var z = org[2] + Math.random() * 64.0;
			this2[0] = org[0] + dir[0];
			this2[1] = org[1] + dir[1];
			this2[2] = z;
			quake__$Vec_Vec_$Impl_$.Normalize(dir);
			var vel = 50.0 + Math.random() * 64.0;
			var this3 = p.vel;
			this3[0] = dir[0] * vel;
			this3[1] = dir[1] * vel;
			this3[2] = dir[2] * vel;
		}
	}
};
quake_Render.TeleportSplash = function(org) {
	var allocated = quake_Render.AllocParticles(896);
	var i;
	var j;
	var k;
	var l = 0;
	var this1 = new Float32Array(3);
	var dir = this1;
	i = -16;
	while(i < 16) {
		j = -16;
		while(j < 16) {
			k = -24;
			while(k < 32) {
				if(l >= allocated.length) {
					return;
				}
				var p = quake_Render.particles[allocated[l++]];
				p.die = quake_CL.state.time + 0.2 + Math.random() * 0.16;
				p.color = 7 + Math.floor(Math.random() * 8.0);
				p.type = 2;
				dir[0] = j * 8.0;
				dir[1] = i * 8.0;
				dir[2] = k * 8.0;
				var this2 = p.org;
				var x = org[0] + i + Math.random() * 4.0;
				var y = org[1] + j + Math.random() * 4.0;
				var z = org[2] + k + Math.random() * 4.0;
				this2[0] = x;
				this2[1] = y;
				this2[2] = z;
				quake__$Vec_Vec_$Impl_$.Normalize(dir);
				var vel = 50.0 + Math.random() * 64.0;
				var this3 = p.vel;
				this3[0] = dir[0] * vel;
				this3[1] = dir[1] * vel;
				this3[2] = dir[2] * vel;
				k += 4;
			}
			j += 4;
		}
		i += 4;
	}
};
quake_Render.RocketTrail = function(start,end,type) {
	var this1 = new Float32Array(3);
	var v = this1;
	v[0] = end[0] - start[0];
	v[1] = end[1] - start[1];
	v[2] = end[2] - start[2];
	var vec = v;
	var len = quake__$Vec_Vec_$Impl_$.Normalize(vec);
	if(len == 0.0) {
		return;
	}
	var allocated;
	if(type == 4) {
		allocated = quake_Render.AllocParticles(Math.floor(len / 6.0));
	} else {
		allocated = quake_Render.AllocParticles(Math.floor(len / 3.0));
	}
	var _g = 0;
	while(_g < allocated.length) {
		var idx = allocated[_g];
		++_g;
		var p = quake_Render.particles[idx];
		p.vel.set(quake__$Vec_Vec_$Impl_$.origin);
		p.die = quake_CL.state.time + 2.0;
		switch(type) {
		case 0:case 1:
			p.ramp = Math.floor(Math.random() * 4.0) + (type << 1);
			p.color = quake_Render.ramp3[p.ramp | 0];
			p.type = 3;
			var this2 = p.org;
			var x = start[0] + Math.random() * 6.0 - 3.0;
			var y = start[1] + Math.random() * 6.0 - 3.0;
			var z = start[2] + Math.random() * 6.0 - 3.0;
			this2[0] = x;
			this2[1] = y;
			this2[2] = z;
			break;
		case 2:
			p.type = 1;
			p.color = 67 + Math.floor(Math.random() * 4.0);
			var this3 = p.org;
			var x1 = start[0] + Math.random() * 6.0 - 3.0;
			var y1 = start[1] + Math.random() * 6.0 - 3.0;
			var z1 = start[2] + Math.random() * 6.0 - 3.0;
			this3[0] = x1;
			this3[1] = y1;
			this3[2] = z1;
			break;
		case 3:case 5:
			p.die = quake_CL.state.time + 0.5;
			p.type = 0;
			if(type == 3) {
				p.color = 52 + ((quake_Render.tracercount++ & 4) << 1);
			} else {
				p.color = 230 + ((quake_Render.tracercount++ & 4) << 1);
			}
			p.org.set(start);
			if((quake_Render.tracercount & 1) != 0) {
				p.vel[0] = 30.0 * vec[1];
				p.vel[2] = -30.0 * vec[0];
			} else {
				p.vel[0] = -30.0 * vec[1];
				p.vel[2] = 30.0 * vec[0];
			}
			break;
		case 4:
			p.type = 1;
			p.color = 67 + Math.floor(Math.random() * 4.0);
			var this4 = p.org;
			var x2 = start[0] + Math.random() * 6.0 - 3.0;
			var y2 = start[1] + Math.random() * 6.0 - 3.0;
			var z2 = start[2] + Math.random() * 6.0 - 3.0;
			this4[0] = x2;
			this4[1] = y2;
			this4[2] = z2;
			break;
		case 6:
			p.color = 152 + Math.floor(Math.random() * 4.0);
			p.type = 0;
			p.die = quake_CL.state.time + 0.3;
			var this5 = p.org;
			var x3 = start[0] + Math.random() * 16.0 - 8.0;
			var y3 = start[1] + Math.random() * 16.0 - 8.0;
			var z3 = start[2] + Math.random() * 16.0 - 8.0;
			this5[0] = x3;
			this5[1] = y3;
			this5[2] = z3;
			break;
		}
		var _g1 = start;
		_g1[0] += vec[0];
		var _g11 = start;
		_g11[1] += vec[1];
		var _g12 = start;
		_g12[2] += vec[2];
	}
};
quake_Render.DrawParticles = function() {
	var program = quake_GL.UseProgram(quake_GLPrograms.particle);
	quake_GL.gl.bindBuffer(34962,quake_GL.rect);
	quake_GL.gl.vertexAttribPointer(program.aPoint,2,5126,false,0,0);
	quake_GL.gl.depthMask(false);
	quake_GL.gl.enable(3042);
	var _g = 0;
	var _g1 = quake_Render.particles;
	while(_g < _g1.length) {
		var p = _g1[_g];
		++_g;
		if(p.die < quake_CL.state.time) {
			continue;
		}
		var color = quake_VID.d_8to24table[p.color];
		quake_GL.gl.uniform3f(program.uColor,color & 255,color >> 8 & 255,color >> 16);
		quake_GL.gl.uniform3fv(program.uOrigin,p.org);
		var scale = (p.org[0] - quake_Render.refdef.vieworg[0]) * quake_Render.vpn[0] + (p.org[1] - quake_Render.refdef.vieworg[1]) * quake_Render.vpn[1] + (p.org[2] - quake_Render.refdef.vieworg[2]) * quake_Render.vpn[2];
		if(scale < 20.0) {
			quake_GL.gl.uniform1f(program.uScale,1.08);
		} else {
			quake_GL.gl.uniform1f(program.uScale,1 + scale * 0.004);
		}
		quake_GL.gl.drawArrays(5,0,4);
	}
	quake_GL.gl.disable(3042);
	quake_GL.gl.depthMask(true);
};
quake_Render.AllocParticles = function(count) {
	var allocated = [];
	var _g1 = 0;
	var _g = quake_Render.particles.length;
	while(_g1 < _g) {
		var i = _g1++;
		if(count == 0) {
			return allocated;
		}
		if(quake_Render.particles[i].die < quake_CL.state.time) {
			allocated.push(i);
			--count;
		}
	}
	return allocated;
};
quake_Render.AddDynamicLights = function(surf) {
	var smax = (surf.extents[0] >> 4) + 1;
	var tmax = (surf.extents[1] >> 4) + 1;
	var size = smax * tmax;
	var tex = quake_CL.state.worldmodel.texinfo[surf.texinfo];
	var this1 = new Float32Array(3);
	var impact = this1;
	var blocklights = [];
	var _g1 = 0;
	var _g = size;
	while(_g1 < _g) {
		var i = _g1++;
		blocklights[i] = 0;
	}
	var _g2 = 0;
	while(_g2 < 32) {
		var i1 = _g2++;
		if((surf.dlightbits >>> i1 & 1) == 0) {
			continue;
		}
		var light = quake_CL.dlights[i1];
		var v1 = light.origin;
		var v2 = surf.plane.normal;
		var dist = v1[0] * v2[0] + v1[1] * v2[1] + v1[2] * v2[2] - surf.plane.dist;
		var rad = light.radius - Math.abs(dist);
		var minlight = light.minlight;
		if(rad < minlight) {
			continue;
		}
		minlight = rad - minlight;
		impact[0] = light.origin[0] - surf.plane.normal[0] * dist;
		impact[1] = light.origin[1] - surf.plane.normal[1] * dist;
		impact[2] = light.origin[2] - surf.plane.normal[2] * dist;
		var a = tex.vecs[0];
		var this2 = new Float32Array(3);
		var v = this2;
		v[0] = a[0];
		v[1] = a[1];
		v[2] = a[2];
		var v21 = v;
		var local0 = impact[0] * v21[0] + impact[1] * v21[1] + impact[2] * v21[2] + tex.vecs[0][3] - surf.texturemins[0];
		var a1 = tex.vecs[1];
		var this3 = new Float32Array(3);
		var v3 = this3;
		v3[0] = a1[0];
		v3[1] = a1[1];
		v3[2] = a1[2];
		var v22 = v3;
		var local1 = impact[0] * v22[0] + impact[1] * v22[1] + impact[2] * v22[2] + tex.vecs[1][3] - surf.texturemins[1];
		var _g21 = 0;
		var _g11 = tmax;
		while(_g21 < _g11) {
			var t = _g21++;
			var td = local1 - (t << 4);
			if(td < 0.0) {
				td = -td;
			}
			var td1 = Math.floor(td);
			var _g4 = 0;
			var _g3 = smax;
			while(_g4 < _g3) {
				var s = _g4++;
				var sd = local0 - (s << 4);
				if(sd < 0) {
					sd = -sd;
				}
				var sd1 = Math.floor(sd);
				if(sd1 > td1) {
					dist = sd1 + (td1 >> 1);
				} else {
					dist = td1 + (sd1 >> 1);
				}
				if(dist < minlight) {
					blocklights[t * smax + s] += Math.floor((rad - dist) * 256.0);
				}
			}
		}
	}
	var i2 = 0;
	var _g12 = 0;
	var _g5 = tmax;
	while(_g12 < _g5) {
		var t1 = _g12++;
		var idx = surf.light_t + t1;
		if(idx >= 1024) {
			quake_Sys.Error("Funny lightmap_modified index: " + idx + " < 1024");
		}
		quake_Render.lightmap_modified[idx] = 1;
		var dest = (idx << 10) + surf.light_s;
		var _g31 = 0;
		var _g22 = smax;
		while(_g31 < _g22) {
			var s1 = _g31++;
			var bl = blocklights[i2++] >> 7;
			if(bl > 255) {
				bl = 255;
			}
			quake_Render.dlightmaps[dest + s1] = bl;
		}
	}
};
quake_Render.RemoveDynamicLights = function(surf) {
	var smax = (surf.extents[0] >> 4) + 1;
	var tmax = (surf.extents[1] >> 4) + 1;
	var _g1 = 0;
	var _g = tmax;
	while(_g1 < _g) {
		var t = _g1++;
		var idx = surf.light_t + t;
		if(idx >= 1024) {
			quake_Sys.Error("Funny lightmap_modified index: " + idx + " < 1024");
		}
		quake_Render.lightmap_modified[idx] = 1;
		var dest = (idx << 10) + surf.light_s;
		var _g3 = 0;
		var _g2 = smax;
		while(_g3 < _g2) {
			var s = _g3++;
			quake_Render.dlightmaps[dest + s] = 0;
		}
	}
};
quake_Render.BuildLightMap = function(surf) {
	var smax = (surf.extents[0] >> 4) + 1;
	var tmax = (surf.extents[1] >> 4) + 1;
	var lightmap = surf.lightofs;
	var maps = 0;
	while(maps < surf.styles.length) {
		var dest = (surf.light_t << 12) + (surf.light_s << 2) + maps;
		var _g1 = 0;
		var _g = tmax;
		while(_g1 < _g) {
			var i = _g1++;
			var _g3 = 0;
			var _g2 = smax;
			while(_g3 < _g2) {
				var j = _g3++;
				quake_Render.lightmaps[dest + (j << 2)] = quake_Render.currentmodel.lightdata[lightmap + j];
			}
			lightmap += smax;
			dest += 4096;
		}
		++maps;
	}
	while(maps <= 3) {
		var dest1 = (surf.light_t << 12) + (surf.light_s << 2) + maps;
		var _g11 = 0;
		var _g4 = tmax;
		while(_g11 < _g4) {
			var i1 = _g11++;
			var _g31 = 0;
			var _g21 = smax;
			while(_g31 < _g21) {
				var j1 = _g31++;
				quake_Render.lightmaps[dest1 + (j1 << 2)] = 0;
			}
			dest1 += 4096;
		}
		++maps;
	}
};
quake_Render.TextureAnimation = function(base) {
	var frame = 0;
	if(base.anim_base != null) {
		frame = base.anim_frame;
		base = quake_Render.currententity.model.textures[base.anim_base];
	}
	var anims = base.anims;
	if(anims == null) {
		return base;
	}
	if(quake_Render.currententity.frame != 0 && base.alternate_anims.length != 0) {
		anims = base.alternate_anims;
	}
	return quake_Render.currententity.model.textures[anims[(Math.floor(quake_CL.state.time * 5.0) + frame) % anims.length]];
};
quake_Render.DrawBrushModel = function(e) {
	var clmodel = e.model;
	if(clmodel.submodel) {
		var x = e.origin[0] + clmodel.mins[0];
		var y = e.origin[1] + clmodel.mins[1];
		var z = e.origin[2] + clmodel.mins[2];
		var this1 = new Float32Array(3);
		var v = this1;
		v[0] = x;
		v[1] = y;
		v[2] = z;
		var x1 = e.origin[0] + clmodel.maxs[0];
		var y1 = e.origin[1] + clmodel.maxs[1];
		var z1 = e.origin[2] + clmodel.maxs[2];
		var this2 = new Float32Array(3);
		var v1 = this2;
		v1[0] = x1;
		v1[1] = y1;
		v1[2] = z1;
		if(quake_Render.CullBox(v,v1)) {
			return;
		}
	} else {
		var x2 = e.origin[0] - clmodel.radius;
		var y2 = e.origin[1] - clmodel.radius;
		var z2 = e.origin[2] - clmodel.radius;
		var this3 = new Float32Array(3);
		var v2 = this3;
		v2[0] = x2;
		v2[1] = y2;
		v2[2] = z2;
		var x3 = e.origin[0] + clmodel.radius;
		var y3 = e.origin[1] + clmodel.radius;
		var z3 = e.origin[2] + clmodel.radius;
		var this4 = new Float32Array(3);
		var v3 = this4;
		v3[0] = x3;
		v3[1] = y3;
		v3[2] = z3;
		if(quake_Render.CullBox(v2,v3)) {
			return;
		}
	}
	quake_GL.gl.bindBuffer(34962,clmodel.cmds);
	var viewMatrix = quake_GL.RotationMatrix(e.angles[0],e.angles[1],e.angles[2]);
	var program = quake_GL.UseProgram(quake_GLPrograms.brush);
	quake_GL.gl.uniform3fv(program.uOrigin,e.origin);
	quake_GL.gl.uniformMatrix3fv(program.uAngles,false,viewMatrix);
	quake_GL.gl.vertexAttribPointer(program.aPoint,3,5126,false,44,0);
	quake_GL.gl.vertexAttribPointer(program.aTexCoord,4,5126,false,44,12);
	quake_GL.gl.vertexAttribPointer(program.aLightStyle,4,5126,false,44,28);
	if(quake_Render.fullbright.value != 0 || clmodel.lightdata == null) {
		quake_GL.Bind(program.tLightmap,quake_Render.fullbright_texture);
	} else {
		quake_GL.Bind(program.tLightmap,quake_Render.lightmap_texture);
	}
	quake_GL.Bind(program.tDlight,quake_Render.flashblend.value == 0 && clmodel.submodel ? quake_Render.dlightmap_texture : quake_Render.null_texture);
	quake_GL.Bind(program.tLightStyle,quake_Render.lightstyle_texture);
	var _g1 = 0;
	var _g = clmodel.chains.length;
	while(_g1 < _g) {
		var i = _g1++;
		var chain = clmodel.chains[i];
		var texture = quake_Render.TextureAnimation(clmodel.textures[chain[0]]);
		if(texture.turbulent) {
			continue;
		}
		quake_Render.c_brush_verts += chain[2];
		quake_GL.Bind(program.tTexture,texture.texturenum);
		quake_GL.gl.drawArrays(4,chain[1],chain[2]);
	}
	var program1 = quake_GL.UseProgram(quake_GLPrograms.turbulent);
	quake_GL.gl.uniform3f(program1.uOrigin,0.0,0.0,0.0);
	quake_GL.gl.uniformMatrix3fv(program1.uAngles,false,viewMatrix);
	quake_GL.gl.uniform1f(program1.uTime,quake_Host.realtime % (Math.PI * 2.0));
	quake_GL.gl.vertexAttribPointer(program1.aPoint,3,5126,false,20,e.model.waterchain);
	quake_GL.gl.vertexAttribPointer(program1.aTexCoord,2,5126,false,20,e.model.waterchain + 12);
	var _g11 = 0;
	var _g2 = clmodel.chains.length;
	while(_g11 < _g2) {
		var i1 = _g11++;
		var chain1 = clmodel.chains[i1];
		var texture1 = clmodel.textures[chain1[0]];
		if(!texture1.turbulent) {
			continue;
		}
		quake_Render.c_brush_verts += chain1[2];
		quake_GL.Bind(program1.tTexture,texture1.texturenum);
		quake_GL.gl.drawArrays(4,chain1[1],chain1[2]);
	}
};
quake_Render.RecursiveWorldNode = function(node) {
	if(node.contents == -2) {
		return;
	}
	if(node.contents < 0) {
		if(node.markvisframe != quake_Render.visframecount) {
			return;
		}
		node.visframe = quake_Render.visframecount;
		if(node.skychain != node.waterchain) {
			quake_Render.drawsky = true;
		}
		return;
	}
	quake_Render.RecursiveWorldNode(node.child0);
	quake_Render.RecursiveWorldNode(node.child1);
};
quake_Render.DrawWorld = function() {
	var clmodel = quake_CL.state.worldmodel;
	quake_Render.currententity = quake_CL.entities[0];
	quake_GL.gl.bindBuffer(34962,clmodel.cmds);
	var program = quake_GL.UseProgram(quake_GLPrograms.brush);
	quake_GL.gl.uniform3f(program.uOrigin,0.0,0.0,0.0);
	quake_GL.gl.uniformMatrix3fv(program.uAngles,false,quake_GL.identity);
	quake_GL.gl.vertexAttribPointer(program.aPoint,3,5126,false,44,0);
	quake_GL.gl.vertexAttribPointer(program.aTexCoord,4,5126,false,44,12);
	quake_GL.gl.vertexAttribPointer(program.aLightStyle,4,5126,false,44,28);
	if(quake_Render.fullbright.value != 0 || clmodel.lightdata == null) {
		quake_GL.Bind(program.tLightmap,quake_Render.fullbright_texture);
	} else {
		quake_GL.Bind(program.tLightmap,quake_Render.lightmap_texture);
	}
	if(quake_Render.flashblend.value == 0) {
		quake_GL.Bind(program.tDlight,quake_Render.dlightmap_texture);
	} else {
		quake_GL.Bind(program.tDlight,quake_Render.null_texture);
	}
	quake_GL.Bind(program.tLightStyle,quake_Render.lightstyle_texture);
	var _g = 0;
	var _g1 = clmodel.leafs;
	while(_g < _g1.length) {
		var leaf = _g1[_g];
		++_g;
		if(leaf.visframe != quake_Render.visframecount || leaf.skychain == 0) {
			continue;
		}
		if(quake_Render.CullBox(leaf.mins,leaf.maxs)) {
			continue;
		}
		var _g3 = 0;
		var _g2 = leaf.skychain;
		while(_g3 < _g2) {
			var j = _g3++;
			var cmds = leaf.cmds[j];
			quake_Render.c_brush_verts += cmds[2];
			quake_GL.Bind(program.tTexture,quake_Render.TextureAnimation(clmodel.textures[cmds[0]]).texturenum);
			quake_GL.gl.drawArrays(4,cmds[1],cmds[2]);
		}
	}
	var program1 = quake_GL.UseProgram(quake_GLPrograms.turbulent);
	quake_GL.gl.uniform3f(program1.uOrigin,0.0,0.0,0.0);
	quake_GL.gl.uniformMatrix3fv(program1.uAngles,false,quake_GL.identity);
	quake_GL.gl.uniform1f(program1.uTime,quake_Host.realtime % (Math.PI * 2.0));
	quake_GL.gl.vertexAttribPointer(program1.aPoint,3,5126,false,20,clmodel.waterchain);
	quake_GL.gl.vertexAttribPointer(program1.aTexCoord,2,5126,false,20,clmodel.waterchain + 12);
	var _g4 = 0;
	var _g11 = clmodel.leafs;
	while(_g4 < _g11.length) {
		var leaf1 = _g11[_g4];
		++_g4;
		if(leaf1.visframe != quake_Render.visframecount || leaf1.waterchain == leaf1.cmds.length) {
			continue;
		}
		if(quake_Render.CullBox(leaf1.mins,leaf1.maxs)) {
			continue;
		}
		var _g31 = leaf1.waterchain;
		var _g21 = leaf1.cmds.length;
		while(_g31 < _g21) {
			var j1 = _g31++;
			var cmds1 = leaf1.cmds[j1];
			quake_Render.c_brush_verts += cmds1[2];
			quake_GL.Bind(program1.tTexture,clmodel.textures[cmds1[0]].texturenum);
			quake_GL.gl.drawArrays(4,cmds1[1],cmds1[2]);
		}
	}
};
quake_Render.MarkLeaves = function() {
	if(quake_Render.oldviewleaf == quake_Render.viewleaf && quake_Render.novis.value == 0) {
		return;
	}
	++quake_Render.visframecount;
	quake_Render.oldviewleaf = quake_Render.viewleaf;
	var vis = quake_Render.novis.value != 0 ? quake_Mod_$Brush.novis : quake_Mod_$Brush.LeafPVS(quake_Render.viewleaf,quake_CL.state.worldmodel);
	var _g1 = 0;
	var _g = quake_CL.state.worldmodel.leafs.length;
	while(_g1 < _g) {
		var i = _g1++;
		if((vis[i >> 3] & 1 << (i & 7)) == 0) {
			continue;
		}
		var node = quake_CL.state.worldmodel.leafs[i + 1];
		while(node != null) {
			if(node.markvisframe == quake_Render.visframecount) {
				break;
			}
			node.markvisframe = quake_Render.visframecount;
			node = node.parent;
		}
	}
	while(quake_Render.novis.value == 0) {
		var p_0 = quake_Render.refdef.vieworg[0];
		var p_1 = quake_Render.refdef.vieworg[1];
		var p_2 = quake_Render.refdef.vieworg[2];
		var leaf;
		if(quake_Render.viewleaf.contents <= -3) {
			var this1 = new Float32Array(3);
			var v = this1;
			v[0] = quake_Render.refdef.vieworg[0];
			v[1] = quake_Render.refdef.vieworg[1];
			v[2] = quake_Render.refdef.vieworg[2] + 16.0;
			leaf = quake_Mod_$Brush.PointInLeaf(v,quake_CL.state.worldmodel);
			if(leaf.contents <= -3) {
				break;
			}
		} else {
			var this2 = new Float32Array(3);
			var v1 = this2;
			v1[0] = quake_Render.refdef.vieworg[0];
			v1[1] = quake_Render.refdef.vieworg[1];
			v1[2] = quake_Render.refdef.vieworg[2] - 16.0;
			leaf = quake_Mod_$Brush.PointInLeaf(v1,quake_CL.state.worldmodel);
			if(leaf.contents > -3) {
				break;
			}
		}
		if(leaf == quake_Render.viewleaf) {
			break;
		}
		vis = quake_Mod_$Brush.LeafPVS(leaf,quake_CL.state.worldmodel);
		var _g11 = 0;
		var _g2 = quake_CL.state.worldmodel.leafs.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			if((vis[i1 >> 3] & 1 << (i1 & 7)) == 0) {
				continue;
			}
			var node1 = quake_CL.state.worldmodel.leafs[i1 + 1];
			while(node1 != null) {
				if(node1.markvisframe == quake_Render.visframecount) {
					break;
				}
				node1.markvisframe = quake_Render.visframecount;
				node1 = node1.parent;
			}
		}
		if(!false) {
			break;
		}
	}
	quake_Render.drawsky = false;
	quake_Render.RecursiveWorldNode(quake_CL.state.worldmodel.nodes[0]);
};
quake_Render.AllocBlock = function(surf) {
	var w = (surf.extents[0] >> 4) + 1;
	var h = (surf.extents[1] >> 4) + 1;
	var x = null;
	var y = null;
	var best = 1024;
	var _g1 = 0;
	var _g = 1024 - w;
	while(_g1 < _g) {
		var i = _g1++;
		var best2 = 0;
		var j = 0;
		while(j < w) {
			if(quake_Render.allocated[i + j] >= best) {
				break;
			}
			if(quake_Render.allocated[i + j] > best2) {
				best2 = quake_Render.allocated[i + j];
			}
			++j;
		}
		if(j == w) {
			x = i;
			best = best2;
			y = best;
		}
	}
	best += h;
	if(best > 1024) {
		quake_Sys.Error("AllocBlock: full");
	}
	var _g11 = 0;
	var _g2 = w;
	while(_g11 < _g2) {
		var i1 = _g11++;
		quake_Render.allocated[x + i1] = best;
	}
	surf.light_s = x;
	surf.light_t = y;
};
quake_Render.BuildSurfaceDisplayList = function(fa) {
	fa.verts = [];
	if(fa.numedges <= 2) {
		return;
	}
	var texinfo = quake_Render.currentmodel.texinfo[fa.texinfo];
	var texture = quake_Render.currentmodel.textures[texinfo.texture];
	var _g1 = 0;
	var _g = fa.numedges;
	while(_g1 < _g) {
		var i = _g1++;
		var index = quake_Render.currentmodel.surfedges[fa.firstedge + i];
		var vec;
		if(index > 0) {
			vec = quake_Render.currentmodel.vertexes[quake_Render.currentmodel.edges[index][0]];
		} else {
			vec = quake_Render.currentmodel.vertexes[quake_Render.currentmodel.edges[-index][1]];
		}
		var vert = [vec[0],vec[1],vec[2]];
		if(!fa.sky) {
			var a = texinfo.vecs[0];
			var this1 = new Float32Array(3);
			var v = this1;
			v[0] = a[0];
			v[1] = a[1];
			v[2] = a[2];
			var v2 = v;
			var s = vec[0] * v2[0] + vec[1] * v2[1] + vec[2] * v2[2] + texinfo.vecs[0][3];
			var a1 = texinfo.vecs[1];
			var this2 = new Float32Array(3);
			var v1 = this2;
			v1[0] = a1[0];
			v1[1] = a1[1];
			v1[2] = a1[2];
			var v21 = v1;
			var t = vec[0] * v21[0] + vec[1] * v21[1] + vec[2] * v21[2] + texinfo.vecs[1][3];
			vert[3] = s / texture.width;
			vert[4] = t / texture.height;
			if(!fa.turbulent) {
				vert[5] = (s - fa.texturemins[0] + (fa.light_s << 4) + 8.0) / 16384.0;
				vert[6] = (t - fa.texturemins[1] + (fa.light_t << 4) + 8.0) / 16384.0;
			}
		}
		if(i >= 3) {
			fa.verts.push(fa.verts[0]);
			fa.verts.push(fa.verts[fa.verts.length - 2]);
		}
		fa.verts.push(vert);
	}
};
quake_Render.BuildLightmaps = function() {
	quake_Render.allocated = [];
	var _g = 0;
	while(_g < 1024) {
		var i = _g++;
		quake_Render.allocated[i] = 0;
	}
	var _g1 = 1;
	var _g2 = quake_CL.state.model_precache.length;
	while(_g1 < _g2) {
		var i1 = _g1++;
		quake_Render.currentmodel = quake_CL.state.model_precache[i1];
		if(quake_Render.currentmodel.type != 0) {
			continue;
		}
		if(HxOverrides.cca(quake_Render.currentmodel.name,0) != 42) {
			var _g3 = 0;
			var _g21 = quake_Render.currentmodel.faces.length;
			while(_g3 < _g21) {
				var j = _g3++;
				var surf = quake_Render.currentmodel.faces[j];
				if(!surf.sky && !surf.turbulent) {
					quake_Render.AllocBlock(surf);
					if(quake_Render.currentmodel.lightdata != null) {
						quake_Render.BuildLightMap(surf);
					}
				}
				quake_Render.BuildSurfaceDisplayList(surf);
			}
		}
		if(i1 == 1) {
			quake_Render.MakeWorldModelDisplayLists(quake_Render.currentmodel);
		} else {
			quake_Render.MakeBrushModelDisplayLists(quake_Render.currentmodel);
		}
	}
	quake_GL.Bind(0,quake_Render.lightmap_texture);
	quake_GL.gl.texImage2D(3553,0,6408,1024,1024,0,6408,5121,quake_Render.lightmaps);
};
quake_Render.WarpScreen = function() {
	quake_GL.gl.finish();
	quake_GL.gl.bindFramebuffer(36160,null);
	quake_GL.gl.bindRenderbuffer(36161,null);
	var program = quake_GL.UseProgram(quake_GLPrograms.warp);
	var vrect = quake_Render.refdef.vrect;
	quake_GL.gl.uniform4f(program.uRect,vrect.x,vrect.y,vrect.width,vrect.height);
	quake_GL.gl.uniform1f(program.uTime,quake_Host.realtime % (Math.PI * 2.0));
	quake_GL.Bind(program.tTexture,quake_Render.warptexture);
	quake_GL.gl.clear(16384);
	quake_GL.gl.bindBuffer(34962,quake_GL.rect);
	quake_GL.gl.vertexAttribPointer(program.aPoint,2,5126,false,0,0);
	quake_GL.gl.drawArrays(5,0,4);
};
quake_Render.MakeSky = function() {
	var sin = [0.0,0.19509,0.382683,0.55557,0.707107,0.831470,0.92388,0.980785,1.0];
	var vecs = [];
	var i = 0;
	while(i < 7) {
		vecs = vecs.concat([0.0,0.0,1.0,sin[i + 2] * 0.19509,sin[6 - i] * 0.19509,0.980785,sin[i] * 0.19509,sin[8 - i] * 0.19509,0.980785]);
		var _g = 0;
		while(_g < 7) {
			var j = _g++;
			vecs = vecs.concat([sin[i] * sin[8 - j],sin[8 - i] * sin[8 - j],sin[j],sin[i] * sin[7 - j],sin[8 - i] * sin[7 - j],sin[j + 1],sin[i + 2] * sin[7 - j],sin[6 - i] * sin[7 - j],sin[j + 1],sin[i] * sin[8 - j],sin[8 - i] * sin[8 - j],sin[j],sin[i + 2] * sin[7 - j],sin[6 - i] * sin[7 - j],sin[j + 1],sin[i + 2] * sin[8 - j],sin[6 - i] * sin[8 - j],sin[j]]);
		}
		i += 2;
	}
	quake_Render.skyvecs = quake_GL.gl.createBuffer();
	quake_GL.gl.bindBuffer(34962,quake_Render.skyvecs);
	quake_GL.gl.bufferData(34962,new Float32Array(vecs),35044);
};
quake_Render.DrawSkyBox = function() {
	if(!quake_Render.drawsky) {
		return;
	}
	quake_GL.gl.colorMask(false,false,false,false);
	var clmodel = quake_CL.state.worldmodel;
	var program = quake_GL.UseProgram(quake_GLPrograms.skyChain);
	quake_GL.gl.bindBuffer(34962,clmodel.cmds);
	quake_GL.gl.vertexAttribPointer(program.aPoint,3,5126,false,12,clmodel.skychain);
	var _g1 = 0;
	var _g = clmodel.leafs.length;
	while(_g1 < _g) {
		var i = _g1++;
		var leaf = clmodel.leafs[i];
		if(leaf.visframe != quake_Render.visframecount || leaf.skychain == leaf.waterchain) {
			continue;
		}
		if(quake_Render.CullBox(leaf.mins,leaf.maxs)) {
			continue;
		}
		var _g3 = leaf.skychain;
		var _g2 = leaf.waterchain;
		while(_g3 < _g2) {
			var j = _g3++;
			var cmds = leaf.cmds[j];
			quake_GL.gl.drawArrays(4,cmds[0],cmds[1]);
		}
	}
	quake_GL.gl.colorMask(true,true,true,true);
	quake_GL.gl.depthFunc(516);
	quake_GL.gl.depthMask(false);
	quake_GL.gl.disable(2884);
	var program1 = quake_GL.UseProgram(quake_GLPrograms.sky);
	quake_GL.gl.uniform2f(program1.uTime,quake_Host.realtime * 0.125 % 1.0,quake_Host.realtime * 0.03125 % 1.0);
	quake_GL.Bind(program1.tSolid,quake_Render.solidskytexture);
	quake_GL.Bind(program1.tAlpha,quake_Render.alphaskytexture);
	quake_GL.gl.bindBuffer(34962,quake_Render.skyvecs);
	quake_GL.gl.vertexAttribPointer(program1.aPoint,3,5126,false,12,0);
	quake_GL.gl.uniform3f(program1.uScale,2.0,-2.0,1.0);
	quake_GL.gl.drawArrays(4,0,180);
	quake_GL.gl.uniform3f(program1.uScale,2.0,-2.0,-1.0);
	quake_GL.gl.drawArrays(4,0,180);
	quake_GL.gl.uniform3f(program1.uScale,2.0,2.0,1.0);
	quake_GL.gl.drawArrays(4,0,180);
	quake_GL.gl.uniform3f(program1.uScale,2.0,2.0,-1.0);
	quake_GL.gl.drawArrays(4,0,180);
	quake_GL.gl.uniform3f(program1.uScale,-2.0,-2.0,1.0);
	quake_GL.gl.drawArrays(4,0,180);
	quake_GL.gl.uniform3f(program1.uScale,-2.0,-2.0,-1.0);
	quake_GL.gl.drawArrays(4,0,180);
	quake_GL.gl.uniform3f(program1.uScale,-2.0,2.0,1.0);
	quake_GL.gl.drawArrays(4,0,180);
	quake_GL.gl.uniform3f(program1.uScale,-2.0,2.0,-1.0);
	quake_GL.gl.drawArrays(4,0,180);
	quake_GL.gl.enable(2884);
	quake_GL.gl.depthMask(true);
	quake_GL.gl.depthFunc(513);
};
quake_Render.InitSky = function(src) {
	var trans = new ArrayBuffer(65536);
	var trans32 = new Uint32Array(trans);
	var _g = 0;
	while(_g < 128) {
		var i = _g++;
		var _g1 = 0;
		while(_g1 < 128) {
			var j = _g1++;
			trans32[(i << 7) + j] = quake_COM.LittleLong(quake_VID.d_8to24table[src[(i << 8) + j + 128]] + -16777216);
		}
	}
	quake_GL.Bind(0,quake_Render.solidskytexture);
	quake_GL.gl.texImage2D(3553,0,6408,128,128,0,6408,5121,new Uint8Array(trans));
	quake_GL.gl.generateMipmap(3553);
	var _g2 = 0;
	while(_g2 < 128) {
		var i1 = _g2++;
		var _g11 = 0;
		while(_g11 < 128) {
			var j1 = _g11++;
			var p = (i1 << 8) + j1;
			if(src[p] != 0) {
				trans32[(i1 << 7) + j1] = quake_COM.LittleLong(quake_VID.d_8to24table[src[p]] + -16777216);
			} else {
				trans32[(i1 << 7) + j1] = 0;
			}
		}
	}
	quake_GL.Bind(0,quake_Render.alphaskytexture);
	quake_GL.gl.texImage2D(3553,0,6408,128,128,0,6408,5121,new Uint8Array(trans));
	quake_GL.gl.generateMipmap(3553);
};
var quake_PF = function() { };
$hxClasses["quake.PF"] = quake_PF;
quake_PF.__name__ = true;
quake_PF.call = function(argc,idx) {
	if(idx >= quake_PF.builtin.length) {
		quake_PR.RunError("Bad builtin call number");
	}
	quake_PF.argc = argc;
	quake_PF.builtin[idx]();
};
quake_PF.VarString = function(first) {
	var out = "";
	var _g1 = first;
	var _g = quake_PF.argc;
	while(_g1 < _g) {
		var i = _g1++;
		out += quake_PR.GetString(quake_PR.globals.ints[4 + i * 3]);
	}
	return out;
};
quake_PF.error = function() {
	quake_Console.Print("====SERVER ERROR in " + quake_PR.GetString(quake_PR.xfunction.name) + "\n" + quake_PF.VarString(0) + "\n");
	quake_ED.Print(quake_SV.server.edicts[quake_PR.globals.ints[28]]);
	quake_Host.Error("Program error");
};
quake_PF.objerror = function() {
	quake_Console.Print("====OBJECT ERROR in " + quake_PR.GetString(quake_PR.xfunction.name) + "\n" + quake_PF.VarString(0) + "\n");
	quake_ED.Print(quake_SV.server.edicts[quake_PR.globals.ints[28]]);
	quake_Host.Error("Program error");
};
quake_PF.makevectors = function() {
	var _this = quake_PR.globals;
	var ofs = 4;
	var x = _this.floats[ofs];
	var y = _this.floats[ofs + 1];
	var z = _this.floats[ofs + 2];
	var this1 = new Float32Array(3);
	var v = this1;
	v[0] = x;
	v[1] = y;
	v[2] = z;
	quake__$Vec_Vec_$Impl_$.AngleVectors(v,quake_PR.globals.v_forward,quake_PR.globals.v_right,quake_PR.globals.v_up);
};
quake_PF.setorigin = function() {
	var e = quake_SV.server.edicts[quake_PR.globals.ints[4]];
	var this1 = e.v.origin;
	var y = quake_PR.globals.floats[7 + 1];
	var z = quake_PR.globals.floats[7 + 2];
	this1[0] = quake_PR.globals.floats[7];
	this1[1] = y;
	this1[2] = z;
	quake_SV.LinkEdict(e,false);
};
quake_PF.SetMinMaxSize = function(e,min,max) {
	if(min[0] > max[0] || min[1] > max[1] || min[2] > max[2]) {
		quake_PR.RunError("backwards mins/maxs");
	}
	e.v.mins.set(min);
	e.v.maxs.set(max);
	var this1 = e.v.size;
	this1[0] = max[0] - min[0];
	this1[1] = max[1] - min[1];
	this1[2] = max[2] - min[2];
	quake_SV.LinkEdict(e,false);
};
quake_PF.setsize = function() {
	var tmp = quake_SV.server.edicts[quake_PR.globals.ints[4]];
	var _this = quake_PR.globals;
	var ofs = 7;
	var x = _this.floats[ofs];
	var y = _this.floats[ofs + 1];
	var z = _this.floats[ofs + 2];
	var this1 = new Float32Array(3);
	var v = this1;
	v[0] = x;
	v[1] = y;
	v[2] = z;
	var _this1 = quake_PR.globals;
	var ofs1 = 10;
	var x1 = _this1.floats[ofs1];
	var y1 = _this1.floats[ofs1 + 1];
	var z1 = _this1.floats[ofs1 + 2];
	var this2 = new Float32Array(3);
	var v1 = this2;
	v1[0] = x1;
	v1[1] = y1;
	v1[2] = z1;
	quake_PF.SetMinMaxSize(tmp,v,v1);
};
quake_PF.setmodel = function() {
	var e = quake_SV.server.edicts[quake_PR.globals.ints[4]];
	var m = quake_PR.GetString(quake_PR.globals.ints[7]);
	var i = 0;
	while(i < quake_SV.server.model_precache.length) {
		if(quake_SV.server.model_precache[i] == m) {
			break;
		}
		++i;
	}
	if(i == quake_SV.server.model_precache.length) {
		quake_PR.RunError("no precache: " + m + "\n");
	}
	e.v.ints[29] = quake_PR.globals.ints[7];
	e.v.floats[0] = i;
	var mod = quake_SV.server.models[i];
	if(mod != null) {
		quake_PF.SetMinMaxSize(e,mod.mins,mod.maxs);
	} else {
		quake_PF.SetMinMaxSize(e,quake__$Vec_Vec_$Impl_$.origin,quake__$Vec_Vec_$Impl_$.origin);
	}
};
quake_PF.bprint = function() {
	quake_Host.BroadcastPrint(quake_PF.VarString(0));
};
quake_PF.sprint = function() {
	var entnum = quake_PR.globals.ints[4];
	if(entnum <= 0 || entnum > quake_SV.svs.maxclients) {
		quake_Console.Print("tried to sprint to a non-client\n");
		return;
	}
	var client = quake_SV.svs.clients[entnum - 1];
	client.message.WriteByte(8);
	client.message.WriteString(quake_PF.VarString(1));
};
quake_PF.centerprint = function() {
	var entnum = quake_PR.globals.ints[4];
	if(entnum <= 0 || entnum > quake_SV.svs.maxclients) {
		quake_Console.Print("tried to sprint to a non-client\n");
		return;
	}
	var client = quake_SV.svs.clients[entnum - 1];
	client.message.WriteByte(26);
	client.message.WriteString(quake_PF.VarString(1));
};
quake_PF.normalize = function() {
	var _this = quake_PR.globals;
	var ofs = 4;
	var x = _this.floats[ofs];
	var y = _this.floats[ofs + 1];
	var z = _this.floats[ofs + 2];
	var this1 = new Float32Array(3);
	var v = this1;
	v[0] = x;
	v[1] = y;
	v[2] = z;
	var newvalue = v;
	quake__$Vec_Vec_$Impl_$.Normalize(newvalue);
	var _this1 = quake_PR.globals;
	_this1.floats[1] = newvalue[0];
	_this1.floats[1 + 1] = newvalue[1];
	_this1.floats[1 + 2] = newvalue[2];
};
quake_PF.vlen = function() {
	quake_PR.globals.floats[1] = Math.sqrt(quake_PR.globals.floats[4] * quake_PR.globals.floats[4] + quake_PR.globals.floats[4 + 1] * quake_PR.globals.floats[4 + 1] + quake_PR.globals.floats[4 + 2] * quake_PR.globals.floats[4 + 2]);
};
quake_PF.vectoyaw = function() {
	var value1 = quake_PR.globals.floats[4];
	var value2 = quake_PR.globals.floats[5];
	if(value1 == 0.0 && value2 == 0.0) {
		quake_PR.globals.floats[1] = 0.0;
		return;
	}
	var yaw = Math.atan2(value2,value1) * 180.0 / Math.PI | 0;
	if(yaw < 0) {
		yaw += 360;
	}
	quake_PR.globals.floats[1] = yaw;
};
quake_PF.vectoangles = function() {
	quake_PR.globals.floats[1 + 2] = 0.0;
	var value1_0 = quake_PR.globals.floats[4];
	var value1_1 = quake_PR.globals.floats[5];
	var value1_2 = quake_PR.globals.floats[6];
	if(value1_0 == 0.0 && value1_1 == 0.0) {
		if(value1_2 > 0.0) {
			quake_PR.globals.floats[1] = 90.0;
		} else {
			quake_PR.globals.floats[1] = 270.0;
		}
		quake_PR.globals.floats[1 + 1] = 0.0;
		return;
	}
	var yaw = Math.atan2(value1_1,value1_0) * 180.0 / Math.PI | 0;
	if(yaw < 0) {
		yaw += 360;
	}
	var pitch = Math.atan2(value1_2,Math.sqrt(value1_0 * value1_0 + value1_1 * value1_1)) * 180.0 / Math.PI | 0;
	if(pitch < 0) {
		pitch += 360;
	}
	quake_PR.globals.floats[1] = pitch;
	quake_PR.globals.floats[1 + 1] = yaw;
};
quake_PF.random = function() {
	var _this = quake_PR.globals;
	var f = Math.random();
	_this.floats[1] = f;
};
quake_PF.particle = function() {
	var _this = quake_PR.globals;
	var ofs = 4;
	var x = _this.floats[ofs];
	var y = _this.floats[ofs + 1];
	var z = _this.floats[ofs + 2];
	var this1 = new Float32Array(3);
	var v = this1;
	v[0] = x;
	v[1] = y;
	v[2] = z;
	var _this1 = quake_PR.globals;
	var ofs1 = 7;
	var x1 = _this1.floats[ofs1];
	var y1 = _this1.floats[ofs1 + 1];
	var z1 = _this1.floats[ofs1 + 2];
	var this2 = new Float32Array(3);
	var v1 = this2;
	v1[0] = x1;
	v1[1] = y1;
	v1[2] = z1;
	quake_SV.StartParticle(v,v1,quake_PR.globals.floats[10] | 0,quake_PR.globals.floats[13] | 0);
};
quake_PF.ambientsound = function() {
	var samp = quake_PR.GetString(quake_PR.globals.ints[7]);
	var i = 0;
	while(i < quake_SV.server.sound_precache.length) {
		if(quake_SV.server.sound_precache[i] == samp) {
			break;
		}
		++i;
	}
	if(i == quake_SV.server.sound_precache.length) {
		quake_Console.Print("no precache: " + samp + "\n");
		return;
	}
	var signon = quake_SV.server.signon;
	signon.WriteByte(29);
	signon.WriteShort(quake_PR.globals.floats[4] * 8 | 0);
	signon.WriteShort(quake_PR.globals.floats[5] * 8 | 0);
	signon.WriteShort(quake_PR.globals.floats[6] * 8 | 0);
	signon.WriteByte(i);
	signon.WriteByte(quake_PR.globals.floats[10] * 255 | 0);
	signon.WriteByte(quake_PR.globals.floats[13] * 64 | 0);
};
quake_PF.sound = function() {
	quake_SV.StartSound(quake_SV.server.edicts[quake_PR.globals.ints[4]],quake_PR.globals.floats[7] | 0,quake_PR.GetString(quake_PR.globals.ints[10]),quake_PR.globals.floats[13] * 255 | 0,quake_PR.globals.floats[16]);
};
quake_PF.breakstatement = function() {
	quake_Console.Print("break statement\n");
};
quake_PF.traceline = function() {
	var x = quake_PR.globals.floats[4];
	var y = quake_PR.globals.floats[5];
	var z = quake_PR.globals.floats[6];
	var this1 = new Float32Array(3);
	var v = this1;
	v[0] = x;
	v[1] = y;
	v[2] = z;
	var trace = quake__$Vec_Vec_$Impl_$.origin;
	var trace1 = quake__$Vec_Vec_$Impl_$.origin;
	var x1 = quake_PR.globals.floats[7];
	var y1 = quake_PR.globals.floats[8];
	var z1 = quake_PR.globals.floats[9];
	var this2 = new Float32Array(3);
	var v1 = this2;
	v1[0] = x1;
	v1[1] = y1;
	v1[2] = z1;
	var trace2 = quake_SV.Move(v,trace,trace1,v1,quake_PR.globals.floats[10] | 0,quake_SV.server.edicts[quake_PR.globals.ints[13]]);
	quake_PR.globals.floats[68] = trace2.allsolid ? 1.0 : 0.0;
	quake_PR.globals.floats[69] = trace2.startsolid ? 1.0 : 0.0;
	quake_PR.globals.floats[70] = trace2.fraction;
	quake_PR.globals.floats[80] = trace2.inwater ? 1.0 : 0.0;
	quake_PR.globals.floats[79] = trace2.inopen ? 1.0 : 0.0;
	quake_PR.globals.trace_endpos.set(trace2.endpos);
	var plane = trace2.plane;
	quake_PR.globals.trace_plane_normal.set(plane.normal);
	quake_PR.globals.floats[77] = plane.dist;
	quake_PR.globals.ints[78] = trace2.ent != null ? trace2.ent.num : 0;
};
quake_PF.newcheckclient = function(check) {
	if(check <= 0) {
		check = 1;
	} else if(check > quake_SV.svs.maxclients) {
		check = quake_SV.svs.maxclients;
	}
	var i = 1;
	if(check != quake_SV.svs.maxclients) {
		i += check;
	}
	var ent = null;
	while(true) {
		if(i == quake_SV.svs.maxclients + 1) {
			i = 1;
		}
		ent = quake_SV.server.edicts[i];
		if(i == check) {
			break;
		}
		if(ent.free) {
			++i;
			continue;
		}
		if(ent.v.floats[48] <= 0.0 || ((ent.v.floats[76] | 0) & 128) != 0) {
			++i;
			continue;
		}
		break;
	}
	var v1 = ent.v.origin;
	var v2 = ent.v.view_ofs;
	var this1 = new Float32Array(3);
	var v = this1;
	v[0] = v1[0] + v2[0];
	v[1] = v1[1] + v2[1];
	v[2] = v1[2] + v2[2];
	quake_PF.checkpvs = quake_Mod_$Brush.LeafPVS(quake_Mod_$Brush.PointInLeaf(v,quake_SV.server.worldmodel),quake_SV.server.worldmodel);
	return i;
};
quake_PF.checkclient = function() {
	if(quake_SV.server.time - quake_SV.server.lastchecktime >= 0.1) {
		quake_SV.server.lastcheck = quake_PF.newcheckclient(quake_SV.server.lastcheck);
		quake_SV.server.lastchecktime = quake_SV.server.time;
	}
	var ent = quake_SV.server.edicts[quake_SV.server.lastcheck];
	if(ent.free || ent.v.floats[48] <= 0.0) {
		quake_PR.globals.ints[1] = 0;
		return;
	}
	var self = quake_SV.server.edicts[quake_PR.globals.ints[28]];
	var v1 = self.v.origin;
	var v2 = self.v.view_ofs;
	var this1 = new Float32Array(3);
	var v = this1;
	v[0] = v1[0] + v2[0];
	v[1] = v1[1] + v2[1];
	v[2] = v1[2] + v2[2];
	var l = quake_Mod_$Brush.PointInLeaf(v,quake_SV.server.worldmodel).num - 1;
	if(l < 0 || (quake_PF.checkpvs[l >> 3] & 1 << (l & 7)) == 0) {
		quake_PR.globals.ints[1] = 0;
		return;
	}
	quake_PR.globals.ints[1] = ent.num;
};
quake_PF.stuffcmd = function() {
	var entnum = quake_PR.globals.ints[4];
	if(entnum <= 0 || entnum > quake_SV.svs.maxclients) {
		quake_PR.RunError("Parm 0 not a client");
	}
	var client = quake_SV.svs.clients[entnum - 1];
	client.message.WriteByte(9);
	client.message.WriteString(quake_PR.GetString(quake_PR.globals.ints[7]));
};
quake_PF.localcmd = function() {
	quake_Cmd.text += quake_PR.GetString(quake_PR.globals.ints[4]);
};
quake_PF.cvar = function() {
	var name = quake_PR.GetString(quake_PR.globals.ints[4]);
	var v = quake_Cvar.vars.get(name);
	quake_PR.globals.floats[1] = v != null ? v.value : 0.0;
};
quake_PF.cvar_set = function() {
	quake_Cvar.Set(quake_PR.GetString(quake_PR.globals.ints[4]),quake_PR.GetString(quake_PR.globals.ints[7]));
};
quake_PF.findradius = function() {
	var chain = 0;
	var org_0 = quake_PR.globals.floats[4];
	var org_1 = quake_PR.globals.floats[5];
	var org_2 = quake_PR.globals.floats[6];
	var eorg = [];
	var rad = quake_PR.globals.floats[7];
	var _g1 = 1;
	var _g = quake_SV.server.num_edicts;
	while(_g1 < _g) {
		var i = _g1++;
		var ent = quake_SV.server.edicts[i];
		if(ent.free) {
			continue;
		}
		if(ent.v.floats[9] == 0) {
			continue;
		}
		eorg[0] = org_0 - (ent.v.origin[0] + (ent.v.mins[0] + ent.v.maxs[0]) * 0.5);
		eorg[1] = org_1 - (ent.v.origin[1] + (ent.v.mins[1] + ent.v.maxs[1]) * 0.5);
		eorg[2] = org_2 - (ent.v.origin[2] + (ent.v.mins[2] + ent.v.maxs[2]) * 0.5);
		if(Math.sqrt(eorg[0] * eorg[0] + eorg[1] * eorg[1] + eorg[2] * eorg[2]) > rad) {
			continue;
		}
		ent.v.ints[60] = chain;
		chain = i;
	}
	quake_PR.globals.ints[1] = chain;
};
quake_PF.dprint = function() {
	quake_Console.DPrint(quake_PF.VarString(0));
};
quake_PF.ftos = function() {
	var v = quake_PR.globals.floats[4];
	if(v == Math.floor(v)) {
		quake_PR.TempString(v == null ? "null" : "" + v);
	} else {
		quake_PR.TempString(v.toFixed(1));
	}
	quake_PR.globals.ints[1] = quake_PR.string_temp;
};
quake_PF.fabs = function() {
	quake_PR.globals.floats[1] = Math.abs(quake_PR.globals.floats[4]);
};
quake_PF.vtos = function() {
	quake_PR.TempString(quake_PR.globals.floats[4].toFixed(1) + " " + quake_PR.globals.floats[5].toFixed(1) + " " + quake_PR.globals.floats[6].toFixed(1));
	quake_PR.globals.ints[1] = quake_PR.string_temp;
};
quake_PF.Spawn = function() {
	var _this = quake_PR.globals;
	var i = quake_ED.Alloc().num;
	_this.ints[1] = i;
};
quake_PF.Remove = function() {
	quake_ED.Free(quake_SV.server.edicts[quake_PR.globals.ints[4]]);
};
quake_PF.Find = function() {
	var e = quake_PR.globals.ints[4];
	var f = quake_PR.globals.ints[7];
	var s = quake_PR.GetString(quake_PR.globals.ints[10]);
	var _g1 = e + 1;
	var _g = quake_SV.server.num_edicts;
	while(_g1 < _g) {
		var e1 = _g1++;
		var ed = quake_SV.server.edicts[e1];
		if(ed.free) {
			continue;
		}
		if(quake_PR.GetString(ed.v.ints[f]) == s) {
			quake_PR.globals.ints[1] = ed.num;
			return;
		}
	}
	quake_PR.globals.ints[1] = 0;
};
quake_PF.MoveToGoal = function() {
	var ent = quake_SV.server.edicts[quake_PR.globals.ints[28]];
	if(((ent.v.floats[76] | 0) & 512 + 1 + 2) == 0) {
		quake_PR.globals.floats[1] = 0.0;
		return;
	}
	var goal = quake_SV.server.edicts[ent.v.ints[88]];
	var dist = quake_PR.globals.floats[4];
	if(ent.v.ints[75] != 0 && quake_SV.CloseEnough(ent,goal,dist)) {
		return;
	}
	if(Math.random() >= 0.75 || !quake_SV.StepDirection(ent,ent.v.floats[85],dist)) {
		quake_SV.NewChaseDir(ent,goal,dist);
	}
};
quake_PF.precache_file = function() {
	quake_PR.globals.ints[1] = quake_PR.globals.ints[4];
};
quake_PF.precache_sound = function() {
	var s = quake_PR.GetString(quake_PR.globals.ints[4]);
	quake_PR.globals.ints[1] = quake_PR.globals.ints[4];
	quake_PR.CheckEmptyString(s);
	var i = 0;
	while(i < quake_SV.server.sound_precache.length) {
		if(quake_SV.server.sound_precache[i] == s) {
			return;
		}
		++i;
	}
	quake_SV.server.sound_precache[i] = s;
};
quake_PF.precache_model = function() {
	if(!quake_SV.server.loading) {
		quake_PR.RunError("Precache_*: Precache can only be done in spawn functions");
	}
	var s = quake_PR.GetString(quake_PR.globals.ints[4]);
	quake_PR.globals.ints[1] = quake_PR.globals.ints[4];
	quake_PR.CheckEmptyString(s);
	var i = 0;
	while(i < quake_SV.server.model_precache.length) {
		if(quake_SV.server.model_precache[i] == s) {
			return;
		}
		++i;
	}
	quake_SV.server.model_precache[i] = s;
	quake_SV.server.models[i] = quake_Mod.LoadModel(quake_Mod.FindName(s),true);
};
quake_PF.coredump = function() {
	quake_ED.PrintEdicts();
};
quake_PF.traceon = function() {
	quake_PR.trace = true;
};
quake_PF.traceoff = function() {
	quake_PR.trace = false;
};
quake_PF.eprint = function() {
	quake_ED.Print(quake_SV.server.edicts[quake_PR.globals.floats[4] | 0]);
};
quake_PF.walkmove = function() {
	var ent = quake_SV.server.edicts[quake_PR.globals.ints[28]];
	if(((ent.v.floats[76] | 0) & 512 + 1 + 2) == 0) {
		quake_PR.globals.floats[1] = 0.0;
		return;
	}
	var yaw = quake_PR.globals.floats[4] * Math.PI / 180.0;
	var dist = quake_PR.globals.floats[7];
	var oldf = quake_PR.xfunction;
	var x = Math.cos(yaw) * dist;
	var y = Math.sin(yaw) * dist;
	var this1 = new Float32Array(3);
	var v = this1;
	v[0] = x;
	v[1] = y;
	v[2] = 0;
	var moved = quake_SV.movestep(ent,v,true);
	quake_PR.globals.floats[1] = moved ? 1 : 0;
	quake_PR.xfunction = oldf;
	quake_PR.globals.ints[28] = ent.num;
};
quake_PF.droptofloor = function() {
	var ent = quake_SV.server.edicts[quake_PR.globals.ints[28]];
	var trace = new Float32Array(ent.v.origin);
	var trace1 = new Float32Array(ent.v.mins);
	var trace2 = new Float32Array(ent.v.maxs);
	var x = ent.v.origin[0];
	var y = ent.v.origin[1];
	var z = ent.v.origin[2] - 256.0;
	var this1 = new Float32Array(3);
	var v = this1;
	v[0] = x;
	v[1] = y;
	v[2] = z;
	var trace3 = quake_SV.Move(trace,trace1,trace2,v,0,ent);
	if(trace3.fraction == 1.0 || trace3.allsolid) {
		quake_PR.globals.floats[1] = 0.0;
		return;
	}
	ent.v.origin.set(trace3.endpos);
	quake_SV.LinkEdict(ent,false);
	var v1 = ent.v.floats[76] | 0 | 512;
	ent.v.floats[76] = v1;
	ent.v.ints[47] = trace3.ent.num;
	quake_PR.globals.floats[1] = 1.0;
};
quake_PF.lightstyle = function() {
	var style = quake_PR.globals.floats[4] | 0;
	var val = quake_PR.GetString(quake_PR.globals.ints[7]);
	quake_SV.server.lightstyles[style] = val;
	if(quake_SV.server.loading) {
		return;
	}
	var _g1 = 0;
	var _g = quake_SV.svs.maxclients;
	while(_g1 < _g) {
		var i = _g1++;
		var client = quake_SV.svs.clients[i];
		if(!client.active && !client.spawned) {
			continue;
		}
		client.message.WriteByte(12);
		client.message.WriteByte(style);
		client.message.WriteString(val);
	}
};
quake_PF.rint = function() {
	var f = quake_PR.globals.floats[4];
	quake_PR.globals.floats[1] = (f >= 0.0 ? f + 0.5 : f - 0.5) | 0;
};
quake_PF.floor = function() {
	quake_PR.globals.floats[1] = Math.floor(quake_PR.globals.floats[4]);
};
quake_PF.ceil = function() {
	quake_PR.globals.floats[1] = Math.ceil(quake_PR.globals.floats[4]);
};
quake_PF.checkbottom = function() {
	var res = quake_SV.CheckBottom(quake_SV.server.edicts[quake_PR.globals.ints[4]]);
	quake_PR.globals.floats[1] = res ? 1 : 0;
};
quake_PF.pointcontents = function() {
	var tmp = quake_PR.globals.floats;
	var x = quake_PR.globals.floats[4];
	var y = quake_PR.globals.floats[5];
	var z = quake_PR.globals.floats[6];
	var this1 = new Float32Array(3);
	var v = this1;
	v[0] = x;
	v[1] = y;
	v[2] = z;
	tmp[1] = quake_SV.PointContents(v);
};
quake_PF.nextent = function() {
	var _g1 = quake_PR.globals.ints[4] + 1;
	var _g = quake_SV.server.num_edicts;
	while(_g1 < _g) {
		var i = _g1++;
		if(!quake_SV.server.edicts[i].free) {
			quake_PR.globals.ints[1] = i;
			return;
		}
	}
	quake_PR.globals.ints[1] = 0;
};
quake_PF.aim = function() {
	var ent = quake_SV.server.edicts[quake_PR.globals.ints[4]];
	var x = ent.v.origin[0];
	var y = ent.v.origin[1];
	var z = ent.v.origin[2] + 20.0;
	var this1 = new Float32Array(3);
	var v = this1;
	v[0] = x;
	v[1] = y;
	v[2] = z;
	var start = v;
	var dir = new Float32Array(quake_PR.globals.v_forward);
	var this2 = new Float32Array(3);
	var v1 = this2;
	v1[0] = start[0] + 2048.0 * dir[0];
	v1[1] = start[1] + 2048.0 * dir[1];
	v1[2] = start[2] + 2048.0 * dir[2];
	var end = v1;
	var tr = quake_SV.Move(start,quake__$Vec_Vec_$Impl_$.origin,quake__$Vec_Vec_$Impl_$.origin,end,0,ent);
	if(tr.ent != null) {
		if(tr.ent.v.floats[59] == 2 && (quake_Host.teamplay.value == 0 || ent.v.floats[78] <= 0 || ent.v.floats[78] != tr.ent.v.floats[78])) {
			var _this = quake_PR.globals;
			_this.floats[1] = dir[0];
			_this.floats[1 + 1] = dir[1];
			_this.floats[1 + 2] = dir[2];
			return;
		}
	}
	var bestdir = new Float32Array(dir);
	var bestdist = quake_SV.aim.value;
	var bestent = null;
	var this3 = new Float32Array(3);
	var end1 = this3;
	var _g1 = 1;
	var _g = quake_SV.server.num_edicts;
	while(_g1 < _g) {
		var i = _g1++;
		var check = quake_SV.server.edicts[i];
		if(check.v.floats[59] != 2) {
			continue;
		}
		if(check == ent) {
			continue;
		}
		if(quake_Host.teamplay.value != 0 && ent.v.floats[78] > 0 && ent.v.floats[78] == check.v.floats[78]) {
			continue;
		}
		end1[0] = check.v.origin[0] + 0.5 * (check.v.mins[0] + check.v.maxs[0]);
		end1[1] = check.v.origin[1] + 0.5 * (check.v.mins[1] + check.v.maxs[1]);
		end1[2] = check.v.origin[2] + 0.5 * (check.v.mins[2] + check.v.maxs[2]);
		dir[0] = end1[0] - start[0];
		dir[1] = end1[1] - start[1];
		dir[2] = end1[2] - start[2];
		quake__$Vec_Vec_$Impl_$.Normalize(dir);
		var dist = dir[0] * bestdir[0] + dir[1] * bestdir[1] + dir[2] * bestdir[2];
		if(dist < bestdist) {
			continue;
		}
		tr = quake_SV.Move(start,quake__$Vec_Vec_$Impl_$.origin,quake__$Vec_Vec_$Impl_$.origin,end1,0,ent);
		if(tr.ent == check) {
			bestdist = dist;
			bestent = check;
		}
	}
	if(bestent != null) {
		dir[0] = bestent.v.origin[0] - ent.v.origin[0];
		dir[1] = bestent.v.origin[1] - ent.v.origin[1];
		dir[2] = bestent.v.origin[2] - ent.v.origin[2];
		var dist1 = dir[0] * bestdir[0] + dir[1] * bestdir[1] + dir[2] * bestdir[2];
		end1[0] = bestdir[0] * dist1;
		end1[1] = bestdir[1] * dist1;
		end1[2] = dir[2];
		quake__$Vec_Vec_$Impl_$.Normalize(end1);
		var _this1 = quake_PR.globals;
		_this1.floats[1] = end1[0];
		_this1.floats[1 + 1] = end1[1];
		_this1.floats[1 + 2] = end1[2];
		return;
	}
	var _this2 = quake_PR.globals;
	_this2.floats[1] = bestdir[0];
	_this2.floats[1 + 1] = bestdir[1];
	_this2.floats[1 + 2] = bestdir[2];
};
quake_PF.changeyaw = function() {
	var ent = quake_SV.server.edicts[quake_PR.globals.ints[28]];
	var current = quake__$Vec_Vec_$Impl_$.Anglemod(ent.v.angles[1]);
	var ideal = ent.v.floats[85];
	if(current == ideal) {
		return;
	}
	var move = ideal - current;
	if(ideal > current) {
		if(move >= 180.0) {
			move -= 360.0;
		}
	} else if(move <= -180.0) {
		move += 360.0;
	}
	var speed = ent.v.floats[86];
	if(move > 0.0) {
		if(move > speed) {
			move = speed;
		}
	} else if(move < -speed) {
		move = -speed;
	}
	ent.v.angles[1] = quake__$Vec_Vec_$Impl_$.Anglemod(current + move);
};
quake_PF.WriteDest = function() {
	var _g = quake_PR.globals.floats[4] | 0;
	switch(_g) {
	case 0:
		return quake_SV.server.datagram;
	case 1:
		var entnum = quake_PR.globals.ints[81];
		if(entnum <= 0 || entnum > quake_SV.svs.maxclients) {
			quake_PR.RunError("WriteDest: not a client");
		}
		return quake_SV.svs.clients[entnum - 1].message;
	case 2:
		return quake_SV.server.reliable_datagram;
	case 3:
		return quake_SV.server.signon;
	default:
		quake_PR.RunError("WriteDest: bad destination");
		return null;
	}
};
quake_PF.WriteByte = function() {
	var tmp = quake_PR.globals.floats[7] | 0;
	quake_PF.WriteDest().WriteByte(tmp);
};
quake_PF.WriteChar = function() {
	var tmp = quake_PR.globals.floats[7] | 0;
	quake_PF.WriteDest().WriteChar(tmp);
};
quake_PF.WriteShort = function() {
	var tmp = quake_PR.globals.floats[7] | 0;
	quake_PF.WriteDest().WriteShort(tmp);
};
quake_PF.WriteLong = function() {
	var tmp = quake_PR.globals.floats[7] | 0;
	quake_PF.WriteDest().WriteLong(tmp);
};
quake_PF.WriteAngle = function() {
	quake_PF.WriteDest().WriteByte((quake_PR.globals.floats[7] * 256 / 360 | 0) & 255);
};
quake_PF.WriteCoord = function() {
	quake_PF.WriteDest().WriteShort(quake_PR.globals.floats[7] * 8 | 0);
};
quake_PF.WriteString = function() {
	quake_PF.WriteDest().WriteString(quake_PR.GetString(quake_PR.globals.ints[7]));
};
quake_PF.WriteEntity = function() {
	quake_PF.WriteDest().WriteShort(quake_PR.globals.ints[7]);
};
quake_PF.makestatic = function() {
	var ent = quake_SV.server.edicts[quake_PR.globals.ints[4]];
	var message = quake_SV.server.signon;
	message.WriteByte(20);
	message.WriteByte(quake_SV.ModelIndex(quake_PR.GetString(ent.v.ints[29])));
	message.WriteByte(ent.v.floats[30] | 0);
	message.WriteByte(ent.v.floats[77] | 0);
	message.WriteByte(ent.v.floats[31] | 0);
	message.WriteShort(ent.v.origin[0] * 8 | 0);
	message.WriteByte((ent.v.angles[0] * 256 / 360 | 0) & 255);
	message.WriteShort(ent.v.origin[1] * 8 | 0);
	message.WriteByte((ent.v.angles[1] * 256 / 360 | 0) & 255);
	message.WriteShort(ent.v.origin[2] * 8 | 0);
	message.WriteByte((ent.v.angles[2] * 256 / 360 | 0) & 255);
	quake_ED.Free(ent);
};
quake_PF.setspawnparms = function() {
	var i = quake_PR.globals.ints[4];
	if(i <= 0 || i > quake_SV.svs.maxclients) {
		quake_PR.RunError("Entity is not a client");
	}
	var _this = quake_PR.globals;
	var values = quake_SV.svs.clients[i - 1].spawn_parms;
	_this.floats[43] = values[0];
	_this.floats[44] = values[1];
	_this.floats[45] = values[2];
	_this.floats[46] = values[3];
	_this.floats[47] = values[4];
	_this.floats[48] = values[5];
	_this.floats[49] = values[6];
	_this.floats[50] = values[7];
	_this.floats[51] = values[8];
	_this.floats[52] = values[9];
	_this.floats[53] = values[10];
	_this.floats[54] = values[11];
	_this.floats[55] = values[12];
	_this.floats[56] = values[13];
	_this.floats[57] = values[14];
	_this.floats[58] = values[15];
};
quake_PF.changelevel = function() {
	if(quake_SV.svs.changelevel_issued) {
		return;
	}
	quake_SV.svs.changelevel_issued = true;
	quake_Cmd.text += "changelevel " + quake_PR.GetString(quake_PR.globals.ints[4]) + "\n";
};
quake_PF.Fixme = function() {
	quake_PR.RunError("unimplemented builtin");
};
var quake_PRDef = function(view,ofs) {
	this.type = view.getUint16(ofs,true);
	this.ofs = view.getUint16(ofs + 2,true);
	this.name = view.getUint32(ofs + 4,true);
};
$hxClasses["quake.PRDef"] = quake_PRDef;
quake_PRDef.__name__ = true;
quake_PRDef.prototype = {
	type: null
	,ofs: null
	,name: null
	,__class__: quake_PRDef
};
var quake__$PR_PRFunction = function(view,ofs) {
	this.first_statement = view.getInt32(ofs,true);
	this.parm_start = view.getUint32(ofs + 4,true);
	this.locals = view.getUint32(ofs + 8,true);
	this.profile = view.getUint32(ofs + 12,true);
	this.name = view.getUint32(ofs + 16,true);
	this.file = view.getUint32(ofs + 20,true);
	this.numparms = view.getUint32(ofs + 24,true);
	this.parm_size = [view.getUint8(ofs + 28),view.getUint8(ofs + 29),view.getUint8(ofs + 30),view.getUint8(ofs + 31),view.getUint8(ofs + 32),view.getUint8(ofs + 33),view.getUint8(ofs + 34),view.getUint8(ofs + 35)];
};
$hxClasses["quake._PR.PRFunction"] = quake__$PR_PRFunction;
quake__$PR_PRFunction.__name__ = true;
quake__$PR_PRFunction.prototype = {
	first_statement: null
	,parm_start: null
	,locals: null
	,profile: null
	,name: null
	,file: null
	,numparms: null
	,parm_size: null
	,__class__: quake__$PR_PRFunction
};
var quake__$PR_PRStatement = function(view,ofs) {
	this.op = view.getUint16(ofs,true);
	this.a = view.getInt16(ofs + 2,true);
	this.b = view.getInt16(ofs + 4,true);
	this.c = view.getInt16(ofs + 6,true);
};
$hxClasses["quake._PR.PRStatement"] = quake__$PR_PRStatement;
quake__$PR_PRStatement.__name__ = true;
quake__$PR_PRStatement.prototype = {
	op: null
	,a: null
	,b: null
	,c: null
	,__class__: quake__$PR_PRStatement
};
var quake__$PR_Eval_$Impl_$ = {};
$hxClasses["quake._PR.Eval_Impl_"] = quake__$PR_Eval_$Impl_$;
quake__$PR_Eval_$Impl_$.__name__ = true;
quake__$PR_Eval_$Impl_$._new = function(ofs) {
	var this1 = ofs;
	return this1;
};
quake__$PR_Eval_$Impl_$.get_float = function(this1) {
	return quake_PR.globals.floats[this1];
};
quake__$PR_Eval_$Impl_$.set_float = function(this1,v) {
	return quake_PR.globals.floats[this1] = v;
};
quake__$PR_Eval_$Impl_$.get_float1 = function(this1) {
	return quake_PR.globals.floats[this1 + 1];
};
quake__$PR_Eval_$Impl_$.set_float1 = function(this1,v) {
	return quake_PR.globals.floats[this1 + 1] = v;
};
quake__$PR_Eval_$Impl_$.get_float2 = function(this1) {
	return quake_PR.globals.floats[this1 + 2];
};
quake__$PR_Eval_$Impl_$.set_float2 = function(this1,v) {
	return quake_PR.globals.floats[this1 + 2] = v;
};
quake__$PR_Eval_$Impl_$.get_int = function(this1) {
	return quake_PR.globals.ints[this1];
};
quake__$PR_Eval_$Impl_$.set_int = function(this1,v) {
	return quake_PR.globals.ints[this1] = v;
};
quake__$PR_Eval_$Impl_$.get_int1 = function(this1) {
	return quake_PR.globals.ints[this1 + 1];
};
quake__$PR_Eval_$Impl_$.set_int1 = function(this1,v) {
	return quake_PR.globals.ints[this1 + 1] = v;
};
quake__$PR_Eval_$Impl_$.get_int2 = function(this1) {
	return quake_PR.globals.ints[this1 + 2];
};
quake__$PR_Eval_$Impl_$.set_int2 = function(this1,v) {
	return quake_PR.globals.ints[this1 + 2] = v;
};
var quake_PRMacro = function() { };
$hxClasses["quake.PRMacro"] = quake_PRMacro;
quake_PRMacro.__name__ = true;
var quake_Protocol = function() { };
$hxClasses["quake.Protocol"] = quake_Protocol;
quake_Protocol.__name__ = true;
var quake__$Render_Rect = function() {
};
$hxClasses["quake._Render.Rect"] = quake__$Render_Rect;
quake__$Render_Rect.__name__ = true;
quake__$Render_Rect.prototype = {
	x: null
	,y: null
	,width: null
	,height: null
	,__class__: quake__$Render_Rect
};
var quake__$Render_Particle = function() {
	this.color = 0;
	var this1 = new Float32Array(3);
	this.vel = this1;
	var this11 = new Float32Array(3);
	this.org = this11;
	this.die = -1;
	this.ramp = 0;
	this.type = 0;
};
$hxClasses["quake._Render.Particle"] = quake__$Render_Particle;
quake__$Render_Particle.__name__ = true;
quake__$Render_Particle.prototype = {
	type: null
	,ramp: null
	,die: null
	,org: null
	,vel: null
	,color: null
	,__class__: quake__$Render_Particle
};
var quake_Sfx = function(n) {
	this.name = n;
};
$hxClasses["quake.Sfx"] = quake_Sfx;
quake_Sfx.__name__ = true;
quake_Sfx.prototype = {
	name: null
	,cache: null
	,__class__: quake_Sfx
};
var quake__$SV_AreaNode = function() {
};
$hxClasses["quake._SV.AreaNode"] = quake__$SV_AreaNode;
quake__$SV_AreaNode.__name__ = true;
quake__$SV_AreaNode.prototype = {
	axis: null
	,dist: null
	,children: null
	,trigger_edicts: null
	,solid_edicts: null
	,__class__: quake__$SV_AreaNode
};
var quake_Sbar = function() { };
$hxClasses["quake.Sbar"] = quake_Sbar;
quake_Sbar.__name__ = true;
quake_Sbar.Init = function() {
	quake_Sbar.nums = [[],[]];
	var _g = 0;
	while(_g < 10) {
		var i = _g++;
		quake_Sbar.nums[0][i] = new quake_DrawPic(quake_W.GetLumpName("NUM_" + i));
		quake_Sbar.nums[1][i] = new quake_DrawPic(quake_W.GetLumpName("ANUM_" + i));
	}
	quake_Sbar.nums[0][10] = new quake_DrawPic(quake_W.GetLumpName("NUM_MINUS"));
	quake_Sbar.nums[1][10] = new quake_DrawPic(quake_W.GetLumpName("ANUM_MINUS"));
	quake_Sbar.colon = new quake_DrawPic(quake_W.GetLumpName("NUM_COLON"));
	quake_Sbar.slash = new quake_DrawPic(quake_W.GetLumpName("NUM_SLASH"));
	quake_Sbar.weapons = [[new quake_DrawPic(quake_W.GetLumpName("INV_SHOTGUN")),new quake_DrawPic(quake_W.GetLumpName("INV_SSHOTGUN")),new quake_DrawPic(quake_W.GetLumpName("INV_NAILGUN")),new quake_DrawPic(quake_W.GetLumpName("INV_SNAILGUN")),new quake_DrawPic(quake_W.GetLumpName("INV_RLAUNCH")),new quake_DrawPic(quake_W.GetLumpName("INV_SRLAUNCH")),new quake_DrawPic(quake_W.GetLumpName("INV_LIGHTNG"))],[new quake_DrawPic(quake_W.GetLumpName("INV2_SHOTGUN")),new quake_DrawPic(quake_W.GetLumpName("INV2_SSHOTGUN")),new quake_DrawPic(quake_W.GetLumpName("INV2_NAILGUN")),new quake_DrawPic(quake_W.GetLumpName("INV2_SNAILGUN")),new quake_DrawPic(quake_W.GetLumpName("INV2_RLAUNCH")),new quake_DrawPic(quake_W.GetLumpName("INV2_SRLAUNCH")),new quake_DrawPic(quake_W.GetLumpName("INV2_LIGHTNG"))]];
	var _g1 = 0;
	while(_g1 < 5) {
		var i1 = _g1++;
		quake_Sbar.weapons.push([new quake_DrawPic(quake_W.GetLumpName("INVA" + (i1 + 1) + "_SHOTGUN")),new quake_DrawPic(quake_W.GetLumpName("INVA" + (i1 + 1) + "_SSHOTGUN")),new quake_DrawPic(quake_W.GetLumpName("INVA" + (i1 + 1) + "_NAILGUN")),new quake_DrawPic(quake_W.GetLumpName("INVA" + (i1 + 1) + "_SNAILGUN")),new quake_DrawPic(quake_W.GetLumpName("INVA" + (i1 + 1) + "_RLAUNCH")),new quake_DrawPic(quake_W.GetLumpName("INVA" + (i1 + 1) + "_SRLAUNCH")),new quake_DrawPic(quake_W.GetLumpName("INVA" + (i1 + 1) + "_LIGHTNG"))]);
	}
	quake_Sbar.ammo = [new quake_DrawPic(quake_W.GetLumpName("SB_SHELLS")),new quake_DrawPic(quake_W.GetLumpName("SB_NAILS")),new quake_DrawPic(quake_W.GetLumpName("SB_ROCKET")),new quake_DrawPic(quake_W.GetLumpName("SB_CELLS"))];
	quake_Sbar.armor = [new quake_DrawPic(quake_W.GetLumpName("SB_ARMOR1")),new quake_DrawPic(quake_W.GetLumpName("SB_ARMOR2")),new quake_DrawPic(quake_W.GetLumpName("SB_ARMOR3"))];
	quake_Sbar.items = [new quake_DrawPic(quake_W.GetLumpName("SB_KEY1")),new quake_DrawPic(quake_W.GetLumpName("SB_KEY2")),new quake_DrawPic(quake_W.GetLumpName("SB_INVIS")),new quake_DrawPic(quake_W.GetLumpName("SB_INVULN")),new quake_DrawPic(quake_W.GetLumpName("SB_SUIT")),new quake_DrawPic(quake_W.GetLumpName("SB_QUAD"))];
	quake_Sbar.sigil = [new quake_DrawPic(quake_W.GetLumpName("SB_SIGIL1")),new quake_DrawPic(quake_W.GetLumpName("SB_SIGIL2")),new quake_DrawPic(quake_W.GetLumpName("SB_SIGIL3")),new quake_DrawPic(quake_W.GetLumpName("SB_SIGIL4"))];
	quake_Sbar.faces = [];
	var _g2 = 0;
	while(_g2 < 5) {
		var i2 = _g2++;
		quake_Sbar.faces.push([new quake_DrawPic(quake_W.GetLumpName("FACE" + (5 - i2))),new quake_DrawPic(quake_W.GetLumpName("FACE_P" + (5 - i2)))]);
	}
	quake_Sbar.face_invis = new quake_DrawPic(quake_W.GetLumpName("FACE_INVIS"));
	quake_Sbar.face_invuln = new quake_DrawPic(quake_W.GetLumpName("FACE_INVUL2"));
	quake_Sbar.face_invis_invuln = new quake_DrawPic(quake_W.GetLumpName("FACE_INV2"));
	quake_Sbar.face_quad = new quake_DrawPic(quake_W.GetLumpName("FACE_QUAD"));
	quake_Cmd.AddCommand("+showscores",quake_Sbar.ShowScores);
	quake_Cmd.AddCommand("-showscores",quake_Sbar.DontShowScores);
	quake_Sbar.sbar = new quake_DrawPic(quake_W.GetLumpName("SBAR"));
	quake_Sbar.ibar = new quake_DrawPic(quake_W.GetLumpName("IBAR"));
	quake_Sbar.scorebar = new quake_DrawPic(quake_W.GetLumpName("SCOREBAR"));
	quake_Sbar.ranking = quake_Draw.CachePic("ranking");
	quake_Sbar.complete = quake_Draw.CachePic("complete");
	quake_Sbar.inter = quake_Draw.CachePic("inter");
	quake_Sbar.finale = quake_Draw.CachePic("finale");
	quake_Sbar.disc = new quake_DrawPic(quake_W.GetLumpName("DISC"));
	if(quake_COM.hipnotic) {
		quake_Sbar.h_weapons = [[new quake_DrawPic(quake_W.GetLumpName("INV_LASER")),new quake_DrawPic(quake_W.GetLumpName("INV_MJOLNIR")),new quake_DrawPic(quake_W.GetLumpName("INV_GREN_PROX")),new quake_DrawPic(quake_W.GetLumpName("INV_PROX_GREN")),new quake_DrawPic(quake_W.GetLumpName("INV_PROX"))],[new quake_DrawPic(quake_W.GetLumpName("INV2_LASER")),new quake_DrawPic(quake_W.GetLumpName("INV2_MJOLNIR")),new quake_DrawPic(quake_W.GetLumpName("INV2_GREN_PROX")),new quake_DrawPic(quake_W.GetLumpName("INV2_PROX_GREN")),new quake_DrawPic(quake_W.GetLumpName("INV2_PROX"))]];
		var _g3 = 0;
		while(_g3 < 5) {
			var i3 = _g3++;
			quake_Sbar.h_weapons.push([new quake_DrawPic(quake_W.GetLumpName("INVA" + (i3 + 1) + "_LASER")),new quake_DrawPic(quake_W.GetLumpName("INVA" + (i3 + 1) + "_MJOLNIR")),new quake_DrawPic(quake_W.GetLumpName("INVA" + (i3 + 1) + "_GREN_PROX")),new quake_DrawPic(quake_W.GetLumpName("INVA" + (i3 + 1) + "_PROX_GREN")),new quake_DrawPic(quake_W.GetLumpName("INVA" + (i3 + 1) + "_PROX"))]);
		}
		quake_Sbar.hipweapons = [quake_Def.hit.laser_cannon_bit,quake_Def.hit.mjolnir_bit,4,quake_Def.hit.proximity_gun_bit];
		quake_Sbar.h_items = [new quake_DrawPic(quake_W.GetLumpName("SB_WSUIT")),new quake_DrawPic(quake_W.GetLumpName("SB_ESHLD"))];
	}
	if(quake_COM.rogue) {
		quake_Sbar.r_invbar = [new quake_DrawPic(quake_W.GetLumpName("R_INVBAR1")),new quake_DrawPic(quake_W.GetLumpName("R_INVBAR2"))];
		quake_Sbar.r_weapons = [new quake_DrawPic(quake_W.GetLumpName("R_LAVA")),new quake_DrawPic(quake_W.GetLumpName("R_SUPERLAVA")),new quake_DrawPic(quake_W.GetLumpName("R_GREN")),new quake_DrawPic(quake_W.GetLumpName("R_MULTIROCK")),new quake_DrawPic(quake_W.GetLumpName("R_PLASMA"))];
		quake_Sbar.r_items = [new quake_DrawPic(quake_W.GetLumpName("R_SHIELD1")),new quake_DrawPic(quake_W.GetLumpName("R_AGRAV1"))];
		quake_Sbar.r_teambord = new quake_DrawPic(quake_W.GetLumpName("R_TEAMBORD"));
		quake_Sbar.r_ammo = [new quake_DrawPic(quake_W.GetLumpName("R_AMMOLAVA")),new quake_DrawPic(quake_W.GetLumpName("R_AMMOMULTI")),new quake_DrawPic(quake_W.GetLumpName("R_AMMOPLASMA"))];
	}
};
quake_Sbar.ShowScores = function() {
	quake_Sbar.showscores = true;
};
quake_Sbar.DontShowScores = function() {
	quake_Sbar.showscores = false;
};
quake_Sbar.DrawPic = function(x,y,pic) {
	if(quake_CL.state.gametype == 1) {
		quake_Draw.Pic(x,y + quake_VID.height - 24,pic);
	} else {
		quake_Draw.Pic(x + (quake_VID.width >> 1) - 160,y + quake_VID.height - 24,pic);
	}
};
quake_Sbar.DrawCharacter = function(x,y,num) {
	if(quake_CL.state.gametype == 1) {
		quake_Draw.Character(x + 4,y + quake_VID.height - 24,num);
	} else {
		quake_Draw.Character(x + (quake_VID.width >> 1) - 156,y + quake_VID.height - 24,num);
	}
};
quake_Sbar.DrawString = function(x,y,str) {
	if(quake_CL.state.gametype == 1) {
		quake_Draw.String(x,y + quake_VID.height - 24,str);
	} else {
		quake_Draw.String(x + (quake_VID.width >> 1) - 160,y + quake_VID.height - 24,str);
	}
};
quake_Sbar.DrawNum = function(x,y,num,digits,color) {
	var str = num == null ? "null" : "" + num;
	if(str.length > digits) {
		str = str.substring(str.length - digits,str.length);
	} else if(str.length < digits) {
		x += (digits - str.length) * 24;
	}
	var _g1 = 0;
	var _g = str.length;
	while(_g1 < _g) {
		var i = _g1++;
		var frame = HxOverrides.cca(str,i);
		quake_Sbar.DrawPic(x,y,quake_Sbar.nums[color][frame == 45 ? 10 : frame - 48]);
		x += 24;
	}
};
quake_Sbar.SortFrags = function() {
	quake_Sbar.scoreboardlines = 0;
	var _g1 = 0;
	var _g = quake_CL.state.maxclients;
	while(_g1 < _g) {
		var i = _g1++;
		if(quake_CL.state.scores[i].name.length != 0) {
			quake_Sbar.fragsort[quake_Sbar.scoreboardlines++] = i;
		}
	}
	var _g11 = 0;
	var _g2 = quake_Sbar.scoreboardlines;
	while(_g11 < _g2) {
		var i1 = _g11++;
		var _g3 = 0;
		var _g21 = quake_Sbar.scoreboardlines - 1 - i1;
		while(_g3 < _g21) {
			var j = _g3++;
			if(quake_CL.state.scores[quake_Sbar.fragsort[j]].frags < quake_CL.state.scores[quake_Sbar.fragsort[j + 1]].frags) {
				var k = quake_Sbar.fragsort[j];
				quake_Sbar.fragsort[j] = quake_Sbar.fragsort[j + 1];
				quake_Sbar.fragsort[j + 1] = k;
			}
		}
	}
};
quake_Sbar.SoloScoreboard = function() {
	var str;
	quake_Sbar.DrawString(8,4,"Monsters:    /");
	str = Std.string(quake_CL.state.stats[14]);
	quake_Sbar.DrawString(104 - (str.length << 3),4,str);
	str = Std.string(quake_CL.state.stats[12]);
	quake_Sbar.DrawString(144 - (str.length << 3),4,str);
	quake_Sbar.DrawString(8,12,"Secrets :    /");
	str = Std.string(quake_CL.state.stats[13]);
	quake_Sbar.DrawString(104 - (str.length << 3),12,str);
	str = Std.string(quake_CL.state.stats[11]);
	quake_Sbar.DrawString(144 - (str.length << 3),12,str);
	var minutes = Math.floor(quake_CL.state.time / 60.0);
	var seconds = Math.floor(quake_CL.state.time - 60 * minutes);
	var tens = Math.floor(seconds / 10.0);
	str = Std.string(seconds - 10 * tens);
	quake_Sbar.DrawString(184,4,"Time :   :" + tens + str);
	if(minutes == null) {
		str = "null";
	} else {
		str = "" + minutes;
	}
	quake_Sbar.DrawString(256 - (str.length << 3),4,str);
	quake_Sbar.DrawString(232 - (quake_CL.state.levelname.length << 2),12,quake_CL.state.levelname);
};
quake_Sbar.DrawInventory = function() {
	if(quake_COM.rogue) {
		quake_Sbar.DrawPic(0,-24,quake_Sbar.r_invbar[quake_CL.state.stats[10] >= quake_Def.rit.lava_nailgun ? 0 : 1]);
	} else {
		quake_Sbar.DrawPic(0,-24,quake_Sbar.ibar);
	}
	var flashon;
	var _g = 0;
	while(_g < 7) {
		var i = _g++;
		if((quake_CL.state.items & quake_Def.it.shotgun << i) == 0) {
			continue;
		}
		flashon = Math.floor((quake_CL.state.time - quake_CL.state.item_gettime[i]) * 10.0);
		if(flashon >= 10) {
			if(quake_CL.state.stats[10] == quake_Def.it.shotgun << i) {
				flashon = 1;
			} else {
				flashon = 0;
			}
		} else {
			flashon = flashon % 5 + 2;
		}
		quake_Sbar.DrawPic(i * 24,-16,quake_Sbar.weapons[flashon][i]);
	}
	if(quake_COM.hipnotic) {
		var grenadeflashing = false;
		var _g1 = 0;
		while(_g1 < 4) {
			var i1 = _g1++;
			if((quake_CL.state.items & 1 << quake_Sbar.hipweapons[i1]) != 0) {
				flashon = Math.floor((quake_CL.state.time - quake_CL.state.item_gettime[i1]) * 10.0);
				if(flashon >= 10) {
					if(quake_CL.state.stats[10] == 1 << quake_Sbar.hipweapons[i1]) {
						flashon = 1;
					} else {
						flashon = 0;
					}
				} else {
					flashon = flashon % 5 + 2;
				}
				if(i1 == 2) {
					if((quake_CL.state.items & quake_Def.hit.proximity_gun) != 0 && flashon != 0) {
						grenadeflashing = true;
						quake_Sbar.DrawPic(96,-16,quake_Sbar.h_weapons[flashon][2]);
					}
				} else if(i1 == 3) {
					if((quake_CL.state.items & quake_Def.it.grenade_launcher) != 0) {
						if(!grenadeflashing) {
							quake_Sbar.DrawPic(96,-16,quake_Sbar.h_weapons[flashon][3]);
						}
					} else {
						quake_Sbar.DrawPic(96,-16,quake_Sbar.h_weapons[flashon][4]);
					}
				} else {
					quake_Sbar.DrawPic(176 + i1 * 24,-16,quake_Sbar.h_weapons[flashon][i1]);
				}
			}
		}
	} else if(quake_COM.rogue) {
		if(quake_CL.state.stats[10] >= quake_Def.rit.lava_nailgun) {
			var _g2 = 0;
			while(_g2 < 5) {
				var i2 = _g2++;
				if(quake_CL.state.stats[10] == quake_Def.rit.lava_nailgun << i2) {
					quake_Sbar.DrawPic((i2 + 2) * 24,-16,quake_Sbar.r_weapons[i2]);
				}
			}
		}
	}
	var _g3 = 0;
	while(_g3 < 4) {
		var i3 = _g3++;
		var num = Std.string(quake_CL.state.stats[6 + i3]);
		var _g11 = num.length;
		switch(_g11) {
		case 1:
			quake_Sbar.DrawCharacter((6 * i3 + 3 << 3) - 2,-24,HxOverrides.cca(num,0) - 30);
			continue;
			break;
		case 2:
			quake_Sbar.DrawCharacter((6 * i3 + 2 << 3) - 2,-24,HxOverrides.cca(num,0) - 30);
			quake_Sbar.DrawCharacter((6 * i3 + 3 << 3) - 2,-24,HxOverrides.cca(num,1) - 30);
			continue;
			break;
		case 3:
			quake_Sbar.DrawCharacter((6 * i3 + 1 << 3) - 2,-24,HxOverrides.cca(num,0) - 30);
			quake_Sbar.DrawCharacter((6 * i3 + 2 << 3) - 2,-24,HxOverrides.cca(num,1) - 30);
			quake_Sbar.DrawCharacter((6 * i3 + 3 << 3) - 2,-24,HxOverrides.cca(num,2) - 30);
			break;
		}
	}
	if(quake_COM.hipnotic) {
		var _g4 = 2;
		while(_g4 < 6) {
			var i4 = _g4++;
			if((quake_CL.state.items & 1 << 17 + i4) != 0) {
				quake_Sbar.DrawPic(192 + (i4 << 4),-16,quake_Sbar.items[i4]);
			}
		}
		if((quake_CL.state.items & 16777216) != 0) {
			quake_Sbar.DrawPic(288,-16,quake_Sbar.h_items[0]);
		}
		if((quake_CL.state.items & 33554432) != 0) {
			quake_Sbar.DrawPic(304,-16,quake_Sbar.h_items[1]);
		}
	} else {
		var _g5 = 0;
		while(_g5 < 6) {
			var i5 = _g5++;
			if((quake_CL.state.items & 1 << 17 + i5) != 0) {
				quake_Sbar.DrawPic(192 + (i5 << 4),-16,quake_Sbar.items[i5]);
			}
		}
		if(quake_COM.rogue) {
			if((quake_CL.state.items & 536870912) != 0) {
				quake_Sbar.DrawPic(288,-16,quake_Sbar.r_items[0]);
			}
			if((quake_CL.state.items & 1073741824) != 0) {
				quake_Sbar.DrawPic(304,-16,quake_Sbar.r_items[1]);
			}
		} else {
			var _g6 = 0;
			while(_g6 < 4) {
				var i6 = _g6++;
				if((quake_CL.state.items >>> 28 + i6 & 1) != 0) {
					quake_Sbar.DrawPic(288 + (i6 << 3),-16,quake_Sbar.sigil[i6]);
				}
			}
		}
	}
};
quake_Sbar.DrawFrags = function() {
	quake_Sbar.SortFrags();
	var l = quake_Sbar.scoreboardlines <= 4 ? quake_Sbar.scoreboardlines : 4;
	var x = 23;
	var xofs = quake_CL.state.gametype == 1 ? 10 : (quake_VID.width >> 1) - 150;
	var y = quake_VID.height - 47;
	var _g1 = 0;
	var _g = l;
	while(_g1 < _g) {
		var i = _g1++;
		var k = quake_Sbar.fragsort[i];
		var s = quake_CL.state.scores[k];
		if(s.name.length == 0) {
			continue;
		}
		quake_Draw.Fill(xofs + (x << 3),y,28,4,(s.colors & 240) + 8);
		quake_Draw.Fill(xofs + (x << 3),y + 4,28,3,((s.colors & 15) << 4) + 8);
		var num = s.frags == null ? "null" : "" + s.frags;
		quake_Sbar.DrawString((x - num.length << 3) + 36,-24,num);
		if(k == quake_CL.state.viewentity - 1) {
			quake_Sbar.DrawCharacter((x << 3) + 2,-24,16);
			quake_Sbar.DrawCharacter((x << 3) + 28,-24,17);
		}
		x += 4;
	}
};
quake_Sbar.DrawFace = function() {
	if(quake_COM.rogue && quake_CL.state.maxclients != 1 && quake_Host.teamplay.value >= 4 && quake_Host.teamplay.value <= 6) {
		var s = quake_CL.state.scores[quake_CL.state.viewentity - 1];
		var top = (s.colors & 240) + 8;
		var xofs = quake_CL.state.gametype == 1 ? 113 : (quake_VID.width >> 1) - 47;
		quake_Sbar.DrawPic(112,0,quake_Sbar.r_teambord);
		quake_Draw.Fill(xofs,quake_VID.height - 21,22,9,top);
		quake_Draw.Fill(xofs,quake_VID.height - 12,22,9,((s.colors & 15) << 4) + 8);
		var num = (top == 8 ? ">>>" : "   ") + s.frags;
		if(num.length > 3) {
			num = num.substring(num.length - 3);
		}
		if(top == 8) {
			quake_Sbar.DrawCharacter(109,3,HxOverrides.cca(num,0) - 30);
			quake_Sbar.DrawCharacter(116,3,HxOverrides.cca(num,1) - 30);
			quake_Sbar.DrawCharacter(123,3,HxOverrides.cca(num,2) - 30);
		} else {
			quake_Sbar.DrawCharacter(109,3,HxOverrides.cca(num,0));
			quake_Sbar.DrawCharacter(116,3,HxOverrides.cca(num,1));
			quake_Sbar.DrawCharacter(123,3,HxOverrides.cca(num,2));
		}
		return;
	}
	if((quake_CL.state.items & (quake_Def.it.invisibility | quake_Def.it.invulnerability)) == (quake_Def.it.invisibility | quake_Def.it.invulnerability)) {
		quake_Sbar.DrawPic(112,0,quake_Sbar.face_invis_invuln);
		return;
	}
	if((quake_CL.state.items & quake_Def.it.quad) != 0) {
		quake_Sbar.DrawPic(112,0,quake_Sbar.face_quad);
		return;
	}
	if((quake_CL.state.items & quake_Def.it.invisibility) != 0) {
		quake_Sbar.DrawPic(112,0,quake_Sbar.face_invis);
		return;
	}
	if((quake_CL.state.items & quake_Def.it.invulnerability) != 0) {
		quake_Sbar.DrawPic(112,0,quake_Sbar.face_invuln);
		return;
	}
	var f = quake_CL.state.stats[0] >= 100 ? 4 : quake_CL.state.stats[0] / 20 | 0;
	var anim = quake_CL.state.time <= quake_CL.state.faceanimtime ? 1 : 0;
	quake_Sbar.DrawPic(112,0,quake_Sbar.faces[f][anim]);
};
quake_Sbar.DrawSbar = function() {
	if(quake_SCR.con_current >= 200) {
		return;
	}
	if(quake_Sbar.lines > 24) {
		quake_Sbar.DrawInventory();
		if(quake_CL.state.maxclients != 1) {
			quake_Sbar.DrawFrags();
		}
	}
	if(quake_Sbar.showscores || quake_CL.state.stats[0] <= 0) {
		quake_Sbar.DrawPic(0,0,quake_Sbar.scorebar);
		quake_Sbar.SoloScoreboard();
		if(quake_CL.state.gametype == 1) {
			quake_Sbar.DeathmatchOverlay();
		}
		return;
	}
	if(quake_Sbar.lines == 0) {
		return;
	}
	quake_Sbar.DrawPic(0,0,quake_Sbar.sbar);
	if(quake_COM.hipnotic) {
		if((quake_CL.state.items & quake_Def.it.key1) != 0) {
			quake_Sbar.DrawPic(209,3,quake_Sbar.items[0]);
		}
		if((quake_CL.state.items & quake_Def.it.key2) != 0) {
			quake_Sbar.DrawPic(209,12,quake_Sbar.items[1]);
		}
	}
	var it = quake_COM.rogue ? quake_Def.rit : quake_Def.it;
	if((quake_CL.state.items & quake_Def.it.invulnerability) != 0) {
		quake_Sbar.DrawNum(24,0,666,3,1);
		quake_Sbar.DrawPic(0,0,quake_Sbar.disc);
	} else {
		quake_Sbar.DrawNum(24,0,quake_CL.state.stats[4],3,quake_CL.state.stats[4] <= 25 ? 1 : 0);
		if((quake_CL.state.items & it.armor3) != 0) {
			quake_Sbar.DrawPic(0,0,quake_Sbar.armor[2]);
		} else if((quake_CL.state.items & it.armor2) != 0) {
			quake_Sbar.DrawPic(0,0,quake_Sbar.armor[1]);
		} else if((quake_CL.state.items & it.armor1) != 0) {
			quake_Sbar.DrawPic(0,0,quake_Sbar.armor[0]);
		}
	}
	quake_Sbar.DrawFace();
	quake_Sbar.DrawNum(136,0,quake_CL.state.stats[0],3,quake_CL.state.stats[0] <= 25 ? 1 : 0);
	if((quake_CL.state.items & it.shells) != 0) {
		quake_Sbar.DrawPic(224,0,quake_Sbar.ammo[0]);
	} else if((quake_CL.state.items & it.nails) != 0) {
		quake_Sbar.DrawPic(224,0,quake_Sbar.ammo[1]);
	} else if((quake_CL.state.items & it.rockets) != 0) {
		quake_Sbar.DrawPic(224,0,quake_Sbar.ammo[2]);
	} else if((quake_CL.state.items & it.cells) != 0) {
		quake_Sbar.DrawPic(224,0,quake_Sbar.ammo[3]);
	} else if(quake_COM.rogue) {
		if((quake_CL.state.items & quake_Def.rit.lava_nails) != 0) {
			quake_Sbar.DrawPic(224,0,quake_Sbar.r_ammo[0]);
		} else if((quake_CL.state.items & quake_Def.rit.plasma_ammo) != 0) {
			quake_Sbar.DrawPic(224,0,quake_Sbar.r_ammo[1]);
		} else if((quake_CL.state.items & quake_Def.rit.multi_rockets) != 0) {
			quake_Sbar.DrawPic(224,0,quake_Sbar.r_ammo[2]);
		}
	}
	quake_Sbar.DrawNum(248,0,quake_CL.state.stats[3],3,quake_CL.state.stats[3] <= 10 ? 1 : 0);
	if(quake_VID.width >= 512 && quake_CL.state.gametype == 1) {
		quake_Sbar.MiniDeathmatchOverlay();
	}
};
quake_Sbar.IntermissionNumber = function(x,y,num) {
	var str = num == null ? "null" : "" + num;
	if(str.length > 3) {
		str = str.substring(str.length - 3,str.length);
	} else if(str.length < 3) {
		x += (3 - str.length) * 24;
	}
	var _g1 = 0;
	var _g = str.length;
	while(_g1 < _g) {
		var i = _g1++;
		var frame = HxOverrides.cca(str,i);
		quake_Draw.Pic(x,y,quake_Sbar.nums[0][frame == 45 ? 10 : frame - 48]);
		x += 24;
	}
};
quake_Sbar.DeathmatchOverlay = function() {
	quake_Draw.Pic(quake_VID.width - quake_Sbar.ranking.width >> 1,8,quake_Sbar.ranking);
	quake_Sbar.SortFrags();
	var x = (quake_VID.width >> 1) - 80;
	var y = 40;
	var _g1 = 0;
	var _g = quake_Sbar.scoreboardlines;
	while(_g1 < _g) {
		var i = _g1++;
		var s = quake_CL.state.scores[quake_Sbar.fragsort[i]];
		if(s.name.length == 0) {
			continue;
		}
		quake_Draw.Fill(x,y,40,4,(s.colors & 240) + 8);
		quake_Draw.Fill(x,y + 4,40,4,((s.colors & 15) << 4) + 8);
		var f = s.frags == null ? "null" : "" + s.frags;
		quake_Draw.String(x + 32 - (f.length << 3),y,f);
		if(quake_Sbar.fragsort[i] == quake_CL.state.viewentity - 1) {
			quake_Draw.Character(x - 8,y,12);
		}
		quake_Draw.String(x + 64,y,s.name);
		y += 10;
	}
};
quake_Sbar.MiniDeathmatchOverlay = function() {
	quake_Sbar.SortFrags();
	var l = quake_Sbar.scoreboardlines;
	var y = quake_VID.height - quake_Sbar.lines;
	var numlines = quake_Sbar.lines >> 3;
	var i = 0;
	while(i < l) {
		if(quake_Sbar.fragsort[i] == quake_CL.state.viewentity - 1) {
			break;
		}
		++i;
	}
	if(i == l) {
		i = 0;
	} else {
		i -= numlines >> 1;
	}
	if(i > l - numlines) {
		i = l - numlines;
	}
	if(i < 0) {
		i = 0;
	}
	while(i < l && y < quake_VID.height - 8) {
		var k = quake_Sbar.fragsort[i++];
		var s = quake_CL.state.scores[k];
		if(s.name.length == 0) {
			continue;
		}
		quake_Draw.Fill(324,y + 1,40,3,(s.colors & 240) + 8);
		quake_Draw.Fill(324,y + 4,40,4,((s.colors & 15) << 4) + 8);
		var num = s.frags == null ? "null" : "" + s.frags;
		quake_Draw.String(356 - (num.length << 3),y,num);
		if(k == quake_CL.state.viewentity - 1) {
			quake_Draw.Character(324,y,16);
			quake_Draw.Character(356,y,17);
		}
		quake_Draw.String(372,y,s.name);
		y += 8;
	}
};
quake_Sbar.IntermissionOverlay = function() {
	if(quake_CL.state.gametype == 1) {
		quake_Sbar.DeathmatchOverlay();
		return;
	}
	quake_Draw.Pic(64,24,quake_Sbar.complete);
	quake_Draw.Pic(0,56,quake_Sbar.inter);
	var dig = Math.floor(quake_CL.state.completed_time / 60.0);
	quake_Sbar.IntermissionNumber(160,64,dig);
	var num = Math.floor(quake_CL.state.completed_time - dig * 60);
	quake_Draw.Pic(234,64,quake_Sbar.colon);
	quake_Draw.Pic(246,64,quake_Sbar.nums[0][Math.floor(num / 10)]);
	quake_Draw.Pic(266,64,quake_Sbar.nums[0][Math.floor(num % 10)]);
	quake_Sbar.IntermissionNumber(160,104,quake_CL.state.stats[13]);
	quake_Draw.Pic(232,104,quake_Sbar.slash);
	quake_Sbar.IntermissionNumber(240,104,quake_CL.state.stats[11]);
	quake_Sbar.IntermissionNumber(160,144,quake_CL.state.stats[14]);
	quake_Draw.Pic(232,144,quake_Sbar.slash);
	quake_Sbar.IntermissionNumber(240,144,quake_CL.state.stats[12]);
};
quake_Sbar.FinaleOverlay = function() {
	quake_Draw.Pic(quake_VID.width - quake_Sbar.finale.width >> 1,16,quake_Sbar.finale);
};
var quake_V = function() { };
$hxClasses["quake.V"] = quake_V;
quake_V.__name__ = true;
quake_V.CalcRoll = function(angles,velocity) {
	var this1 = new Float32Array(3);
	var right = this1;
	quake__$Vec_Vec_$Impl_$.AngleVectors(angles,null,right);
	var side = velocity[0] * right[0] + velocity[1] * right[1] + velocity[2] * right[2];
	var sign = side < 0 ? -1 : 1;
	side = Math.abs(side);
	if(side < quake_V.rollspeed.value) {
		return side * sign * quake_V.rollangle.value / quake_V.rollspeed.value;
	}
	return quake_V.rollangle.value * sign;
};
quake_V.CalcBob = function() {
	if(quake_V.bobcycle.value <= 0.0 || quake_V.bobcycle.value >= 1.0 || quake_V.bobup.value <= 0.0 || quake_V.bobup.value >= 1.0 || quake_V.bob.value == 0.0) {
		return 0.0;
	}
	var cycle = (quake_CL.state.time - (quake_CL.state.time / quake_V.bobcycle.value | 0) * quake_V.bobcycle.value) / quake_V.bobcycle.value;
	if(cycle < quake_V.bobup.value) {
		cycle = Math.PI * cycle / quake_V.bobup.value;
	} else {
		cycle = Math.PI + Math.PI * (cycle - quake_V.bobup.value) / (1.0 - quake_V.bobup.value);
	}
	var bob = Math.sqrt(quake_CL.state.velocity[0] * quake_CL.state.velocity[0] + quake_CL.state.velocity[1] * quake_CL.state.velocity[1]) * quake_V.bob.value;
	bob = bob * 0.3 + bob * 0.7 * Math.sin(cycle);
	if(bob > 4.0) {
		bob = 4.0;
	} else if(bob < -7.0) {
		bob = -7.0;
	}
	return bob;
};
quake_V.StartPitchDrift = function() {
	if(quake_CL.state.laststop == quake_CL.state.time) {
		return;
	}
	if(quake_CL.state.nodrift || quake_CL.state.pitchvel == 0.0) {
		quake_CL.state.pitchvel = quake_V.centerspeed.value;
		quake_CL.state.nodrift = false;
		quake_CL.state.driftmove = 0.0;
	}
};
quake_V.StopPitchDrift = function() {
	quake_CL.state.laststop = quake_CL.state.time;
	quake_CL.state.nodrift = true;
	quake_CL.state.pitchvel = 0.0;
};
quake_V.DriftPitch = function() {
	if(quake_Host.noclip_anglehack || !quake_CL.state.onground || quake_CL.cls.demoplayback) {
		quake_CL.state.driftmove = 0.0;
		quake_CL.state.pitchvel = 0.0;
		return;
	}
	if(quake_CL.state.nodrift) {
		if(Math.abs(quake_CL.state.cmd.forwardmove) < quake_CL.forwardspeed.value) {
			quake_CL.state.driftmove = 0.0;
		} else {
			quake_CL.state.driftmove += quake_Host.frametime;
		}
		if(quake_CL.state.driftmove > quake_V.centermove.value) {
			quake_V.StartPitchDrift();
		}
		return;
	}
	var delta = quake_CL.state.idealpitch - quake_CL.state.viewangles[0];
	if(delta == 0.0) {
		quake_CL.state.pitchvel = 0.0;
		return;
	}
	var move = quake_Host.frametime * quake_CL.state.pitchvel;
	quake_CL.state.pitchvel += quake_Host.frametime * quake_V.centerspeed.value;
	if(delta > 0) {
		if(move > delta) {
			quake_CL.state.pitchvel = 0.0;
			move = delta;
		}
		var _g = quake_CL.state.viewangles;
		_g[0] += move;
	} else if(delta < 0) {
		if(move > -delta) {
			quake_CL.state.pitchvel = 0.0;
			move = -delta;
		}
		var _g1 = quake_CL.state.viewangles;
		_g1[0] -= move;
	}
};
quake_V.ParseDamage = function() {
	var armor = quake_MSG.ReadByte();
	var blood = quake_MSG.ReadByte();
	var ent = quake_CL.entities[quake_CL.state.viewentity];
	var x = quake_MSG.ReadShort() * 0.125 - ent.origin[0];
	var y = quake_MSG.ReadShort() * 0.125 - ent.origin[1];
	var z = quake_MSG.ReadShort() * 0.125 - ent.origin[2];
	var this1 = new Float32Array(3);
	var v = this1;
	v[0] = x;
	v[1] = y;
	v[2] = z;
	var from = v;
	quake__$Vec_Vec_$Impl_$.Normalize(from);
	var count = (blood + armor) * 0.5;
	if(count < 10.0) {
		count = 10.0;
	}
	quake_CL.state.faceanimtime = quake_CL.state.time + 0.2;
	var cshift = quake_CL.state.cshifts[1];
	cshift[3] += 3.0 * count;
	if(cshift[3] < 0.0) {
		cshift[3] = 0.0;
	} else if(cshift[3] > 150.0) {
		cshift[3] = 150.0;
	}
	if(armor > blood) {
		cshift[0] = 200.0;
		cshift[1] = cshift[2] = 100.0;
	} else if(armor != 0) {
		cshift[0] = 220.0;
		cshift[1] = cshift[2] = 50.0;
	} else {
		cshift[0] = 255.0;
		cshift[1] = cshift[2] = 0.0;
	}
	var this2 = new Float32Array(3);
	var forward = this2;
	var this3 = new Float32Array(3);
	var right = this3;
	quake__$Vec_Vec_$Impl_$.AngleVectors(ent.angles,forward,right);
	quake_V.dmg_roll = count * (from[0] * right[0] + from[1] * right[1] + from[2] * right[2]) * quake_V.kickroll.value;
	quake_V.dmg_pitch = count * (from[0] * forward[0] + from[1] * forward[1] + from[2] * forward[2]) * quake_V.kickpitch.value;
	quake_V.dmg_time = quake_V.kicktime.value;
};
quake_V.cshift_f = function() {
	var cshift = quake_V.cshift_empty;
	cshift[0] = quake_Q.atoi(quake_Cmd.argv[1]);
	cshift[1] = quake_Q.atoi(quake_Cmd.argv[2]);
	cshift[2] = quake_Q.atoi(quake_Cmd.argv[3]);
	cshift[3] = quake_Q.atoi(quake_Cmd.argv[4]);
};
quake_V.BonusFlash_f = function() {
	var cshift = quake_CL.state.cshifts[2];
	cshift[0] = 215.0;
	cshift[1] = 186.0;
	cshift[2] = 69.0;
	cshift[3] = 50.0;
};
quake_V.SetContentsColor = function(contents) {
	switch(contents) {
	case -5:
		quake_CL.state.cshifts[0] = quake_V.cshift_lava;
		break;
	case -4:
		quake_CL.state.cshifts[0] = quake_V.cshift_slime;
		break;
	case -2:case -1:
		quake_CL.state.cshifts[0] = quake_V.cshift_empty;
		break;
	default:
		quake_CL.state.cshifts[0] = quake_V.cshift_water;
	}
};
quake_V.CalcBlend = function() {
	var cshift = quake_CL.state.cshifts[3];
	if((quake_CL.state.items & quake_Def.it.quad) != 0) {
		cshift[0] = 0.0;
		cshift[1] = 0.0;
		cshift[2] = 255.0;
		cshift[3] = 30.0;
	} else if((quake_CL.state.items & quake_Def.it.suit) != 0) {
		cshift[0] = 0.0;
		cshift[1] = 255.0;
		cshift[2] = 0.0;
		cshift[3] = 20.0;
	} else if((quake_CL.state.items & quake_Def.it.invisibility) != 0) {
		cshift[0] = 100.0;
		cshift[1] = 100.0;
		cshift[2] = 100.0;
		cshift[3] = 100.0;
	} else if((quake_CL.state.items & quake_Def.it.invulnerability) != 0) {
		cshift[0] = 255.0;
		cshift[1] = 255.0;
		cshift[2] = 0.0;
		cshift[3] = 30.0;
	} else {
		cshift[3] = 0.0;
	}
	quake_CL.state.cshifts[1][3] -= quake_Host.frametime * 150.0;
	if(quake_CL.state.cshifts[1][3] < 0.0) {
		quake_CL.state.cshifts[1][3] = 0.0;
	}
	quake_CL.state.cshifts[2][3] -= quake_Host.frametime * 100.0;
	if(quake_CL.state.cshifts[2][3] < 0.0) {
		quake_CL.state.cshifts[2][3] = 0.0;
	}
	if(quake_V.cshiftpercent.value == 0) {
		var tmp = quake_V.blend[1] = quake_V.blend[2] = quake_V.blend[3] = 0.0;
		quake_V.blend[0] = tmp;
		return;
	}
	var r = 0.0;
	var g = 0.0;
	var b = 0.0;
	var a = 0.0;
	var _g = 0;
	while(_g < 4) {
		var i = _g++;
		var cshift1 = quake_CL.state.cshifts[i];
		var a2 = cshift1[3] * quake_V.cshiftpercent.value / 25500.0;
		if(a2 == 0.0) {
			continue;
		}
		a += a2 * (1.0 - a);
		a2 /= a;
		r = r * (1.0 - a2) + cshift1[0] * a2;
		g = g * (1.0 - a2) + cshift1[1] * a2;
		b = b * (1.0 - a2) + cshift1[2] * a2;
	}
	if(a > 1.0) {
		a = 1.0;
	} else if(a < 0.0) {
		a = 0.0;
	}
	quake_V.blend[0] = r;
	quake_V.blend[1] = g;
	quake_V.blend[2] = b;
	quake_V.blend[3] = a;
	if(quake_V.blend[3] > 1.0) {
		quake_V.blend[3] = 1.0;
	} else if(quake_V.blend[3] < 0.0) {
		quake_V.blend[3] = 0.0;
	}
};
quake_V.CalcIntermissionRefdef = function() {
	var ent = quake_CL.entities[quake_CL.state.viewentity];
	quake_Render.refdef.vieworg[0] = ent.origin[0];
	quake_Render.refdef.vieworg[1] = ent.origin[1];
	quake_Render.refdef.vieworg[2] = ent.origin[2];
	quake_Render.refdef.viewangles[0] = ent.angles[0] + Math.sin(quake_CL.state.time * quake_V.ipitch_cycle.value) * quake_V.ipitch_level.value;
	quake_Render.refdef.viewangles[1] = ent.angles[1] + Math.sin(quake_CL.state.time * quake_V.iyaw_cycle.value) * quake_V.iyaw_level.value;
	quake_Render.refdef.viewangles[2] = ent.angles[2] + Math.sin(quake_CL.state.time * quake_V.iroll_cycle.value) * quake_V.iroll_level.value;
	quake_CL.state.viewent.model = null;
};
quake_V.CalcRefdef = function() {
	quake_V.DriftPitch();
	var ent = quake_CL.entities[quake_CL.state.viewentity];
	ent.angles[1] = quake_CL.state.viewangles[1];
	ent.angles[0] = -quake_CL.state.viewangles[0];
	var bob = quake_V.CalcBob();
	quake_Render.refdef.vieworg[0] = ent.origin[0] + 0.03125;
	quake_Render.refdef.vieworg[1] = ent.origin[1] + 0.03125;
	quake_Render.refdef.vieworg[2] = ent.origin[2] + quake_CL.state.viewheight + bob + 0.03125;
	quake_Render.refdef.viewangles[0] = quake_CL.state.viewangles[0];
	quake_Render.refdef.viewangles[1] = quake_CL.state.viewangles[1];
	quake_Render.refdef.viewangles[2] = quake_CL.state.viewangles[2] + quake_V.CalcRoll(quake_CL.entities[quake_CL.state.viewentity].angles,quake_CL.state.velocity);
	if(quake_V.dmg_time > 0.0) {
		if(quake_V.kicktime.value != 0.0) {
			var _g = quake_Render.refdef.viewangles;
			_g[2] += quake_V.dmg_time / quake_V.kicktime.value * quake_V.dmg_roll;
			var _g1 = quake_Render.refdef.viewangles;
			_g1[0] -= quake_V.dmg_time / quake_V.kicktime.value * quake_V.dmg_pitch;
		}
		quake_V.dmg_time -= quake_Host.frametime;
	}
	if(quake_CL.state.stats[0] <= 0) {
		quake_Render.refdef.viewangles[2] = 80.0;
	}
	var ipitch = quake_V.idlescale.value * Math.sin(quake_CL.state.time * quake_V.ipitch_cycle.value) * quake_V.ipitch_level.value;
	var iyaw = quake_V.idlescale.value * Math.sin(quake_CL.state.time * quake_V.iyaw_cycle.value) * quake_V.iyaw_level.value;
	var iroll = quake_V.idlescale.value * Math.sin(quake_CL.state.time * quake_V.iroll_cycle.value) * quake_V.iroll_level.value;
	var _g2 = quake_Render.refdef.viewangles;
	_g2[0] += ipitch;
	var _g3 = quake_Render.refdef.viewangles;
	_g3[1] += iyaw;
	var _g4 = quake_Render.refdef.viewangles;
	_g4[2] += iroll;
	var this1 = new Float32Array(3);
	var forward = this1;
	var this2 = new Float32Array(3);
	var right = this2;
	var this3 = new Float32Array(3);
	var up = this3;
	var this4 = new Float32Array(3);
	var v = this4;
	v[0] = -ent.angles[0];
	v[1] = ent.angles[1];
	v[2] = ent.angles[2];
	quake__$Vec_Vec_$Impl_$.AngleVectors(v,forward,right,up);
	var _g5 = quake_Render.refdef.vieworg;
	_g5[0] += quake_V.ofsx.value * forward[0] + quake_V.ofsy.value * right[0] + quake_V.ofsz.value * up[0];
	var _g6 = quake_Render.refdef.vieworg;
	_g6[1] += quake_V.ofsx.value * forward[1] + quake_V.ofsy.value * right[1] + quake_V.ofsz.value * up[1];
	var _g7 = quake_Render.refdef.vieworg;
	_g7[2] += quake_V.ofsx.value * forward[2] + quake_V.ofsy.value * right[2] + quake_V.ofsz.value * up[2];
	if(quake_Render.refdef.vieworg[0] < ent.origin[0] - 14.0) {
		quake_Render.refdef.vieworg[0] = ent.origin[0] - 14.0;
	} else if(quake_Render.refdef.vieworg[0] > ent.origin[0] + 14.0) {
		quake_Render.refdef.vieworg[0] = ent.origin[0] + 14.0;
	}
	if(quake_Render.refdef.vieworg[1] < ent.origin[1] - 14.0) {
		quake_Render.refdef.vieworg[1] = ent.origin[1] - 14.0;
	} else if(quake_Render.refdef.vieworg[1] > ent.origin[1] + 14.0) {
		quake_Render.refdef.vieworg[1] = ent.origin[1] + 14.0;
	}
	if(quake_Render.refdef.vieworg[2] < ent.origin[2] - 22.0) {
		quake_Render.refdef.vieworg[2] = ent.origin[2] - 22.0;
	} else if(quake_Render.refdef.vieworg[2] > ent.origin[2] + 30.0) {
		quake_Render.refdef.vieworg[2] = ent.origin[2] + 30.0;
	}
	var view = quake_CL.state.viewent;
	view.angles[0] = -quake_Render.refdef.viewangles[0] - ipitch;
	view.angles[1] = quake_Render.refdef.viewangles[1] - iyaw;
	view.angles[2] = quake_CL.state.viewangles[2] - iroll;
	view.origin[0] = ent.origin[0] + forward[0] * bob * 0.4;
	view.origin[1] = ent.origin[1] + forward[1] * bob * 0.4;
	view.origin[2] = ent.origin[2] + quake_CL.state.viewheight + forward[2] * bob * 0.4 + bob;
	var _g8 = quake_SCR.viewsize.value;
	switch(_g8) {
	case 80:
		var _g9 = view.origin;
		_g9[2] += 0.5;
		break;
	case 90:case 110:
		var _g10 = view.origin;
		_g10[2] += 1.0;
		break;
	case 100:
		var _g11 = view.origin;
		_g11[2] += 2.0;
		break;
	}
	view.model = quake_CL.state.model_precache[quake_CL.state.stats[2]];
	view.frame = quake_CL.state.stats[5];
	var _g12 = quake_Render.refdef.viewangles;
	_g12[0] += quake_CL.state.punchangle[0];
	var _g13 = quake_Render.refdef.viewangles;
	_g13[1] += quake_CL.state.punchangle[1];
	var _g14 = quake_Render.refdef.viewangles;
	_g14[2] += quake_CL.state.punchangle[2];
	if(quake_CL.state.onground && ent.origin[2] - quake_V.oldz > 0.0) {
		var steptime = quake_CL.state.time - quake_CL.state.oldtime;
		if(steptime < 0.0) {
			steptime = 0.0;
		}
		quake_V.oldz += steptime * 80.0;
		if(quake_V.oldz > ent.origin[2]) {
			quake_V.oldz = ent.origin[2];
		} else if(ent.origin[2] - quake_V.oldz > 12.0) {
			quake_V.oldz = ent.origin[2] - 12.0;
		}
		var _g15 = quake_Render.refdef.vieworg;
		_g15[2] += quake_V.oldz - ent.origin[2];
		var _g16 = view.origin;
		_g16[2] += quake_V.oldz - ent.origin[2];
	} else {
		quake_V.oldz = ent.origin[2];
	}
	if(quake_Chase.active.value != 0) {
		quake_Chase.Update();
	}
};
quake_V.RenderView = function() {
	if(quake_Console.forcedup) {
		return;
	}
	if(quake_CL.state.maxclients >= 2) {
		quake_V.ofsx.set("0");
		quake_V.ofsy.set("0");
		quake_V.ofsz.set("0");
	}
	if(quake_CL.state.intermission != 0) {
		quake_V.CalcIntermissionRefdef();
	} else if(!quake_CL.state.paused) {
		quake_V.CalcRefdef();
	}
	quake_Render.PushDlights();
	quake_Render.RenderView();
};
quake_V.Init = function() {
	quake_Cmd.AddCommand("v_cshift",quake_V.cshift_f);
	quake_Cmd.AddCommand("bf",quake_V.BonusFlash_f);
	quake_Cmd.AddCommand("centerview",quake_V.StartPitchDrift);
	quake_V.centermove = quake_Cvar.RegisterVariable("v_centermove","0.15");
	quake_V.centerspeed = quake_Cvar.RegisterVariable("v_centerspeed","500");
	quake_V.iyaw_cycle = quake_Cvar.RegisterVariable("v_iyaw_cycle","2");
	quake_V.iroll_cycle = quake_Cvar.RegisterVariable("v_iroll_cycle","0.5");
	quake_V.ipitch_cycle = quake_Cvar.RegisterVariable("v_ipitch_cycle","1");
	quake_V.iyaw_level = quake_Cvar.RegisterVariable("v_iyaw_level","0.3");
	quake_V.iroll_level = quake_Cvar.RegisterVariable("v_iroll_level","0.1");
	quake_V.ipitch_level = quake_Cvar.RegisterVariable("v_ipitch_level","0.3");
	quake_V.idlescale = quake_Cvar.RegisterVariable("v_idlescale","0");
	quake_V.crosshair = quake_Cvar.RegisterVariable("crosshair","0",true);
	quake_V.crossx = quake_Cvar.RegisterVariable("cl_crossx","0");
	quake_V.crossy = quake_Cvar.RegisterVariable("cl_crossy","0");
	quake_V.cshiftpercent = quake_Cvar.RegisterVariable("gl_cshiftpercent","100");
	quake_V.ofsx = quake_Cvar.RegisterVariable("scr_ofsx","0");
	quake_V.ofsy = quake_Cvar.RegisterVariable("scr_ofsy","0");
	quake_V.ofsz = quake_Cvar.RegisterVariable("scr_ofsz","0");
	quake_V.rollspeed = quake_Cvar.RegisterVariable("cl_rollspeed","200");
	quake_V.rollangle = quake_Cvar.RegisterVariable("cl_rollangle","2.0");
	quake_V.bob = quake_Cvar.RegisterVariable("cl_bob","0.02");
	quake_V.bobcycle = quake_Cvar.RegisterVariable("cl_bobcycle","0.6");
	quake_V.bobup = quake_Cvar.RegisterVariable("cl_bobup","0.5");
	quake_V.kicktime = quake_Cvar.RegisterVariable("v_kicktime","0.5");
	quake_V.kickroll = quake_Cvar.RegisterVariable("v_kickroll","0.6");
	quake_V.kickpitch = quake_Cvar.RegisterVariable("v_kickpitch","0.6");
	quake_V.gamma = quake_Cvar.RegisterVariable("gamma","1",true);
};
var quake_W = function() { };
$hxClasses["quake.W"] = quake_W;
quake_W.__name__ = true;
quake_W.LoadWadFile = function(filename) {
	var base = quake_COM.LoadFile(filename);
	if(base == null) {
		quake_Sys.Error("W.LoadWadFile: couldn't load " + filename);
	}
	var view = new DataView(base);
	if(view.getUint32(0,true) != 843333975) {
		quake_Sys.Error("Wad file " + filename + " doesn't have WAD2 id");
	}
	var numlumps = view.getUint32(4,true);
	var infotableofs = view.getUint32(8,true);
	var _g1 = 0;
	var _g = numlumps;
	while(_g1 < _g) {
		var i = _g1++;
		var size = view.getUint32(infotableofs + 4,true);
		var lump = new ArrayBuffer(size);
		new Uint8Array(lump).set(new Uint8Array(base,view.getUint32(infotableofs,true),size));
		var this1 = quake_W.lumps;
		var k = quake_Q.memstr(new Uint8Array(base,infotableofs + 16,16)).toUpperCase();
		var _this = this1;
		if(__map_reserved[k] != null) {
			_this.setReserved(k,lump);
		} else {
			_this.h[k] = lump;
		}
		infotableofs += 32;
	}
};
quake_W.GetLumpName = function(name) {
	var _this = quake_W.lumps;
	var lump = __map_reserved[name] != null ? _this.getReserved(name) : _this.h[name];
	if(lump == null) {
		quake_Sys.Error("W.GetLumpName: " + name + " not found");
	}
	return lump;
};
function $iterator(o) { if( o instanceof Array ) return function() { return HxOverrides.iter(o); }; return typeof(o.iterator) == 'function' ? $bind(o,o.iterator) : o.iterator; }
var $_, $fid = 0;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $fid++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = function(){ return f.method.apply(f.scope, arguments); }; f.scope = o; f.method = m; o.hx__closures__[m.__id__] = f; } return f; }
$hxClasses["Math"] = Math;
String.prototype.__class__ = $hxClasses["String"] = String;
String.__name__ = true;
$hxClasses["Array"] = Array;
Array.__name__ = true;
Date.prototype.__class__ = $hxClasses["Date"] = Date;
Date.__name__ = ["Date"];
var Int = $hxClasses["Int"] = { __name__ : ["Int"]};
var Dynamic = $hxClasses["Dynamic"] = { __name__ : ["Dynamic"]};
var Float = $hxClasses["Float"] = Number;
Float.__name__ = ["Float"];
var Bool = $hxClasses["Bool"] = Boolean;
Bool.__ename__ = ["Bool"];
var Class = $hxClasses["Class"] = { __name__ : ["Class"]};
var Enum = { };
var __map_reserved = {}
var ArrayBuffer = $global.ArrayBuffer || js_html_compat_ArrayBuffer;
if(ArrayBuffer.prototype.slice == null) {
	ArrayBuffer.prototype.slice = js_html_compat_ArrayBuffer.sliceImpl;
}
var DataView = $global.DataView || js_html_compat_DataView;
var Float32Array = $global.Float32Array || js_html_compat_Float32Array._new;
var Uint8Array = $global.Uint8Array || js_html_compat_Uint8Array._new;
haxe_Unserializer.DEFAULT_RESOLVER = new haxe__$Unserializer_DefaultResolver();
haxe_Unserializer.BASE64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789%:";
haxe_crypto_Base64.CHARS = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
haxe_crypto_Base64.BYTES = haxe_io_Bytes.ofString(haxe_crypto_Base64.CHARS);
haxe_ds_ObjectMap.count = 0;
haxe_io_FPHelper.i64tmp = (function($this) {
	var $r;
	var this1 = new haxe__$Int64__$_$_$Int64(0,0);
	$r = this1;
	return $r;
}(this));
js_Boot.__toStr = ({ }).toString;
js_html_compat_Float32Array.BYTES_PER_ELEMENT = 4;
js_html_compat_Uint8Array.BYTES_PER_ELEMENT = 1;
kha_Assets.images = new kha__$Assets_ImageList();
kha_Assets.sounds = new kha__$Assets_SoundList();
kha_Assets.blobs = new kha__$Assets_BlobList();
kha_Assets.fonts = new kha__$Assets_FontList();
kha_Assets.videos = new kha__$Assets_VideoList();
kha__$Color_Color_$Impl_$.Black = -16777216;
kha__$Color_Color_$Impl_$.White = -1;
kha__$Color_Color_$Impl_$.Red = -65536;
kha__$Color_Color_$Impl_$.Blue = -16776961;
kha__$Color_Color_$Impl_$.Green = -16711936;
kha__$Color_Color_$Impl_$.Magenta = -65281;
kha__$Color_Color_$Impl_$.Yellow = -256;
kha__$Color_Color_$Impl_$.Cyan = -16711681;
kha__$Color_Color_$Impl_$.Purple = -8388480;
kha__$Color_Color_$Impl_$.Pink = -16181;
kha__$Color_Color_$Impl_$.Orange = -23296;
kha__$Color_Color_$Impl_$.Transparent = 0;
kha__$Color_Color_$Impl_$.invMaxChannelValue = 0.00392156862745098;
kha_CompilerDefines.js = "1";
kha_CompilerDefines.kha_a1 = "1";
kha_CompilerDefines.kha_g3 = "1";
kha_CompilerDefines.kha_g4 = "1";
kha_CompilerDefines.kha_html5_js = "1";
kha_CompilerDefines["source-header"] = "Generated by Haxe 3.4.2 (git build master @ 19a3e04)";
kha_CompilerDefines.sys_g3 = "1";
kha_CompilerDefines.kha_g1 = "1";
kha_CompilerDefines.sys_a1 = "1";
kha_CompilerDefines.haxe_ver = "3.402";
kha_CompilerDefines.jquery_ver = "11204";
kha_CompilerDefines.kha_js = "1";
kha_CompilerDefines.sys_html5 = "1";
kha_CompilerDefines.canvas_id = "khanvas";
kha_CompilerDefines.kha_version = "1611";
kha_CompilerDefines.sys_g4 = "1";
kha_CompilerDefines.js_es = "5";
kha_CompilerDefines.kha_html5 = "1";
kha_CompilerDefines["js-es5"] = "1";
kha_CompilerDefines.js_es5 = "1";
kha_CompilerDefines.sys_a2 = "1";
kha_CompilerDefines.dce = "std";
kha_CompilerDefines.sys_g1 = "1";
kha_CompilerDefines["true"] = "1";
kha_CompilerDefines.sys_g2 = "1";
kha_CompilerDefines.kha_webgl = "1";
kha_CompilerDefines.kha = "1";
kha_CompilerDefines.kha_g2 = "1";
kha_CompilerDefines.haxe3 = "1";
kha_CompilerDefines.kha_a2 = "1";
kha_CompilerDefines.script_name = "kha";
kha_FontStyle.Default = new kha_FontStyle(false,false,false);
kha_Scheduler.timeWarpSaveTime = 1.0;
kha_Scheduler.DIF_COUNT = 3;
kha_Scheduler.maxframetime = 0.5;
kha_Scheduler.startTime = 0;
kha_Shaders.painter_colored_fragData0 = "s198:I3ZlcnNpb24gMTAwCnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwpwcmVjaXNpb24gaGlnaHAgaW50OwoKdmFyeWluZyBoaWdocCB2ZWM0IGZyYWdtZW50Q29sb3I7Cgp2b2lkIG1haW4oKQp7CiAgICBnbF9GcmFnRGF0YVswXSA9IGZyYWdtZW50Q29sb3I7Cn0KCg";
kha_Shaders.painter_colored_fragData1 = "s192:I3ZlcnNpb24gMTAwCnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwpwcmVjaXNpb24gbWVkaXVtcCBpbnQ7Cgp2YXJ5aW5nIHZlYzQgZnJhZ21lbnRDb2xvcjsKCnZvaWQgbWFpbigpCnsKICAgIGdsX0ZyYWdEYXRhWzBdID0gZnJhZ21lbnRDb2xvcjsKfQoK";
kha_Shaders.painter_colored_fragData2 = "s210:I3ZlcnNpb24gMzAwIGVzCnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwpwcmVjaXNpb24gbWVkaXVtcCBpbnQ7CgpvdXQgdmVjNCBGcmFnQ29sb3I7CmluIHZlYzQgZnJhZ21lbnRDb2xvcjsKCnZvaWQgbWFpbigpCnsKICAgIEZyYWdDb2xvciA9IGZyYWdtZW50Q29sb3I7Cn0KCg";
kha_Shaders.painter_colored_vertData0 = "s331:I3ZlcnNpb24gMTAwCgp1bmlmb3JtIG1hdDQgcHJvamVjdGlvbk1hdHJpeDsKCmF0dHJpYnV0ZSB2ZWMzIHZlcnRleFBvc2l0aW9uOwp2YXJ5aW5nIHZlYzQgZnJhZ21lbnRDb2xvcjsKYXR0cmlidXRlIHZlYzQgdmVydGV4Q29sb3I7Cgp2b2lkIG1haW4oKQp7CiAgICBnbF9Qb3NpdGlvbiA9IHByb2plY3Rpb25NYXRyaXggKiB2ZWM0KHZlcnRleFBvc2l0aW9uLCAxLjApOwogICAgZnJhZ21lbnRDb2xvciA9IHZlcnRleENvbG9yOwp9Cgo";
kha_Shaders.painter_colored_vertData1 = "s374:I3ZlcnNpb24gMTAwCgp1bmlmb3JtIG1lZGl1bXAgbWF0NCBwcm9qZWN0aW9uTWF0cml4OwoKYXR0cmlidXRlIG1lZGl1bXAgdmVjMyB2ZXJ0ZXhQb3NpdGlvbjsKdmFyeWluZyBtZWRpdW1wIHZlYzQgZnJhZ21lbnRDb2xvcjsKYXR0cmlidXRlIG1lZGl1bXAgdmVjNCB2ZXJ0ZXhDb2xvcjsKCnZvaWQgbWFpbigpCnsKICAgIGdsX1Bvc2l0aW9uID0gcHJvamVjdGlvbk1hdHJpeCAqIHZlYzQodmVydGV4UG9zaXRpb24sIDEuMCk7CiAgICBmcmFnbWVudENvbG9yID0gdmVydGV4Q29sb3I7Cn0KCg";
kha_Shaders.painter_colored_vertData2 = "s354:I3ZlcnNpb24gMzAwIGVzCgp1bmlmb3JtIG1lZGl1bXAgbWF0NCBwcm9qZWN0aW9uTWF0cml4OwoKaW4gbWVkaXVtcCB2ZWMzIHZlcnRleFBvc2l0aW9uOwpvdXQgbWVkaXVtcCB2ZWM0IGZyYWdtZW50Q29sb3I7CmluIG1lZGl1bXAgdmVjNCB2ZXJ0ZXhDb2xvcjsKCnZvaWQgbWFpbigpCnsKICAgIGdsX1Bvc2l0aW9uID0gcHJvamVjdGlvbk1hdHJpeCAqIHZlYzQodmVydGV4UG9zaXRpb24sIDEuMCk7CiAgICBmcmFnbWVudENvbG9yID0gdmVydGV4Q29sb3I7Cn0KCg";
kha_Shaders.painter_image_fragData0 = "s471:I3ZlcnNpb24gMTAwCnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwpwcmVjaXNpb24gaGlnaHAgaW50OwoKdW5pZm9ybSBoaWdocCBzYW1wbGVyMkQgdGV4OwoKdmFyeWluZyBoaWdocCB2ZWMyIHRleENvb3JkOwp2YXJ5aW5nIGhpZ2hwIHZlYzQgY29sb3I7Cgp2b2lkIG1haW4oKQp7CiAgICBoaWdocCB2ZWM0IHRleGNvbG9yID0gdGV4dHVyZTJEKHRleCwgdGV4Q29vcmQpICogY29sb3I7CiAgICBoaWdocCB2ZWMzIF8zMiA9IHRleGNvbG9yLnh5eiAqIGNvbG9yLnc7CiAgICB0ZXhjb2xvciA9IHZlYzQoXzMyLngsIF8zMi55LCBfMzIueiwgdGV4Y29sb3Iudyk7CiAgICBnbF9GcmFnRGF0YVswXSA9IHRleGNvbG9yOwp9Cgo";
kha_Shaders.painter_image_fragData1 = "s444:I3ZlcnNpb24gMTAwCnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwpwcmVjaXNpb24gbWVkaXVtcCBpbnQ7Cgp1bmlmb3JtIG1lZGl1bXAgc2FtcGxlcjJEIHRleDsKCnZhcnlpbmcgdmVjMiB0ZXhDb29yZDsKdmFyeWluZyB2ZWM0IGNvbG9yOwoKdm9pZCBtYWluKCkKewogICAgdmVjNCB0ZXhjb2xvciA9IHRleHR1cmUyRCh0ZXgsIHRleENvb3JkKSAqIGNvbG9yOwogICAgdmVjMyBfMzIgPSB0ZXhjb2xvci54eXogKiBjb2xvci53OwogICAgdGV4Y29sb3IgPSB2ZWM0KF8zMi54LCBfMzIueSwgXzMyLnosIHRleGNvbG9yLncpOwogICAgZ2xfRnJhZ0RhdGFbMF0gPSB0ZXhjb2xvcjsKfQoK";
kha_Shaders.painter_image_fragData2 = "s452:I3ZlcnNpb24gMzAwIGVzCnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwpwcmVjaXNpb24gbWVkaXVtcCBpbnQ7Cgp1bmlmb3JtIG1lZGl1bXAgc2FtcGxlcjJEIHRleDsKCmluIHZlYzIgdGV4Q29vcmQ7CmluIHZlYzQgY29sb3I7Cm91dCB2ZWM0IEZyYWdDb2xvcjsKCnZvaWQgbWFpbigpCnsKICAgIHZlYzQgdGV4Y29sb3IgPSB0ZXh0dXJlKHRleCwgdGV4Q29vcmQpICogY29sb3I7CiAgICB2ZWMzIF8zMiA9IHRleGNvbG9yLnh5eiAqIGNvbG9yLnc7CiAgICB0ZXhjb2xvciA9IHZlYzQoXzMyLngsIF8zMi55LCBfMzIueiwgdGV4Y29sb3Iudyk7CiAgICBGcmFnQ29sb3IgPSB0ZXhjb2xvcjsKfQoK";
kha_Shaders.painter_image_vertData0 = "s415:I3ZlcnNpb24gMTAwCgp1bmlmb3JtIG1hdDQgcHJvamVjdGlvbk1hdHJpeDsKCmF0dHJpYnV0ZSB2ZWMzIHZlcnRleFBvc2l0aW9uOwp2YXJ5aW5nIHZlYzIgdGV4Q29vcmQ7CmF0dHJpYnV0ZSB2ZWMyIHRleFBvc2l0aW9uOwp2YXJ5aW5nIHZlYzQgY29sb3I7CmF0dHJpYnV0ZSB2ZWM0IHZlcnRleENvbG9yOwoKdm9pZCBtYWluKCkKewogICAgZ2xfUG9zaXRpb24gPSBwcm9qZWN0aW9uTWF0cml4ICogdmVjNCh2ZXJ0ZXhQb3NpdGlvbiwgMS4wKTsKICAgIHRleENvb3JkID0gdGV4UG9zaXRpb247CiAgICBjb2xvciA9IHZlcnRleENvbG9yOwp9Cgo";
kha_Shaders.painter_image_vertData1 = "s479:I3ZlcnNpb24gMTAwCgp1bmlmb3JtIG1lZGl1bXAgbWF0NCBwcm9qZWN0aW9uTWF0cml4OwoKYXR0cmlidXRlIG1lZGl1bXAgdmVjMyB2ZXJ0ZXhQb3NpdGlvbjsKdmFyeWluZyBtZWRpdW1wIHZlYzIgdGV4Q29vcmQ7CmF0dHJpYnV0ZSBtZWRpdW1wIHZlYzIgdGV4UG9zaXRpb247CnZhcnlpbmcgbWVkaXVtcCB2ZWM0IGNvbG9yOwphdHRyaWJ1dGUgbWVkaXVtcCB2ZWM0IHZlcnRleENvbG9yOwoKdm9pZCBtYWluKCkKewogICAgZ2xfUG9zaXRpb24gPSBwcm9qZWN0aW9uTWF0cml4ICogdmVjNCh2ZXJ0ZXhQb3NpdGlvbiwgMS4wKTsKICAgIHRleENvb3JkID0gdGV4UG9zaXRpb247CiAgICBjb2xvciA9IHZlcnRleENvbG9yOwp9Cgo";
kha_Shaders.painter_image_vertData2 = "s444:I3ZlcnNpb24gMzAwIGVzCgp1bmlmb3JtIG1lZGl1bXAgbWF0NCBwcm9qZWN0aW9uTWF0cml4OwoKaW4gbWVkaXVtcCB2ZWMzIHZlcnRleFBvc2l0aW9uOwpvdXQgbWVkaXVtcCB2ZWMyIHRleENvb3JkOwppbiBtZWRpdW1wIHZlYzIgdGV4UG9zaXRpb247Cm91dCBtZWRpdW1wIHZlYzQgY29sb3I7CmluIG1lZGl1bXAgdmVjNCB2ZXJ0ZXhDb2xvcjsKCnZvaWQgbWFpbigpCnsKICAgIGdsX1Bvc2l0aW9uID0gcHJvamVjdGlvbk1hdHJpeCAqIHZlYzQodmVydGV4UG9zaXRpb24sIDEuMCk7CiAgICB0ZXhDb29yZCA9IHRleFBvc2l0aW9uOwogICAgY29sb3IgPSB2ZXJ0ZXhDb2xvcjsKfQoK";
kha_Shaders.painter_text_fragData0 = "s351:I3ZlcnNpb24gMTAwCnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwpwcmVjaXNpb24gaGlnaHAgaW50OwoKdW5pZm9ybSBoaWdocCBzYW1wbGVyMkQgdGV4OwoKdmFyeWluZyBoaWdocCB2ZWM0IGZyYWdtZW50Q29sb3I7CnZhcnlpbmcgaGlnaHAgdmVjMiB0ZXhDb29yZDsKCnZvaWQgbWFpbigpCnsKICAgIGdsX0ZyYWdEYXRhWzBdID0gdmVjNChmcmFnbWVudENvbG9yLnh5eiwgdGV4dHVyZTJEKHRleCwgdGV4Q29vcmQpLnggKiBmcmFnbWVudENvbG9yLncpOwp9Cgo";
kha_Shaders.painter_text_fragData1 = "s340:I3ZlcnNpb24gMTAwCnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwpwcmVjaXNpb24gbWVkaXVtcCBpbnQ7Cgp1bmlmb3JtIG1lZGl1bXAgc2FtcGxlcjJEIHRleDsKCnZhcnlpbmcgdmVjNCBmcmFnbWVudENvbG9yOwp2YXJ5aW5nIHZlYzIgdGV4Q29vcmQ7Cgp2b2lkIG1haW4oKQp7CiAgICBnbF9GcmFnRGF0YVswXSA9IHZlYzQoZnJhZ21lbnRDb2xvci54eXosIHRleHR1cmUyRCh0ZXgsIHRleENvb3JkKS54ICogZnJhZ21lbnRDb2xvci53KTsKfQoK";
kha_Shaders.painter_text_fragData2 = "s348:I3ZlcnNpb24gMzAwIGVzCnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwpwcmVjaXNpb24gbWVkaXVtcCBpbnQ7Cgp1bmlmb3JtIG1lZGl1bXAgc2FtcGxlcjJEIHRleDsKCm91dCB2ZWM0IEZyYWdDb2xvcjsKaW4gdmVjNCBmcmFnbWVudENvbG9yOwppbiB2ZWMyIHRleENvb3JkOwoKdm9pZCBtYWluKCkKewogICAgRnJhZ0NvbG9yID0gdmVjNChmcmFnbWVudENvbG9yLnh5eiwgdGV4dHVyZSh0ZXgsIHRleENvb3JkKS54ICogZnJhZ21lbnRDb2xvci53KTsKfQoK";
kha_Shaders.painter_text_vertData0 = "s436:I3ZlcnNpb24gMTAwCgp1bmlmb3JtIG1hdDQgcHJvamVjdGlvbk1hdHJpeDsKCmF0dHJpYnV0ZSB2ZWMzIHZlcnRleFBvc2l0aW9uOwp2YXJ5aW5nIHZlYzIgdGV4Q29vcmQ7CmF0dHJpYnV0ZSB2ZWMyIHRleFBvc2l0aW9uOwp2YXJ5aW5nIHZlYzQgZnJhZ21lbnRDb2xvcjsKYXR0cmlidXRlIHZlYzQgdmVydGV4Q29sb3I7Cgp2b2lkIG1haW4oKQp7CiAgICBnbF9Qb3NpdGlvbiA9IHByb2plY3Rpb25NYXRyaXggKiB2ZWM0KHZlcnRleFBvc2l0aW9uLCAxLjApOwogICAgdGV4Q29vcmQgPSB0ZXhQb3NpdGlvbjsKICAgIGZyYWdtZW50Q29sb3IgPSB2ZXJ0ZXhDb2xvcjsKfQoK";
kha_Shaders.painter_text_vertData1 = "s500:I3ZlcnNpb24gMTAwCgp1bmlmb3JtIG1lZGl1bXAgbWF0NCBwcm9qZWN0aW9uTWF0cml4OwoKYXR0cmlidXRlIG1lZGl1bXAgdmVjMyB2ZXJ0ZXhQb3NpdGlvbjsKdmFyeWluZyBtZWRpdW1wIHZlYzIgdGV4Q29vcmQ7CmF0dHJpYnV0ZSBtZWRpdW1wIHZlYzIgdGV4UG9zaXRpb247CnZhcnlpbmcgbWVkaXVtcCB2ZWM0IGZyYWdtZW50Q29sb3I7CmF0dHJpYnV0ZSBtZWRpdW1wIHZlYzQgdmVydGV4Q29sb3I7Cgp2b2lkIG1haW4oKQp7CiAgICBnbF9Qb3NpdGlvbiA9IHByb2plY3Rpb25NYXRyaXggKiB2ZWM0KHZlcnRleFBvc2l0aW9uLCAxLjApOwogICAgdGV4Q29vcmQgPSB0ZXhQb3NpdGlvbjsKICAgIGZyYWdtZW50Q29sb3IgPSB2ZXJ0ZXhDb2xvcjsKfQoK";
kha_Shaders.painter_text_vertData2 = "s466:I3ZlcnNpb24gMzAwIGVzCgp1bmlmb3JtIG1lZGl1bXAgbWF0NCBwcm9qZWN0aW9uTWF0cml4OwoKaW4gbWVkaXVtcCB2ZWMzIHZlcnRleFBvc2l0aW9uOwpvdXQgbWVkaXVtcCB2ZWMyIHRleENvb3JkOwppbiBtZWRpdW1wIHZlYzIgdGV4UG9zaXRpb247Cm91dCBtZWRpdW1wIHZlYzQgZnJhZ21lbnRDb2xvcjsKaW4gbWVkaXVtcCB2ZWM0IHZlcnRleENvbG9yOwoKdm9pZCBtYWluKCkKewogICAgZ2xfUG9zaXRpb24gPSBwcm9qZWN0aW9uTWF0cml4ICogdmVjNCh2ZXJ0ZXhQb3NpdGlvbiwgMS4wKTsKICAgIHRleENvb3JkID0gdGV4UG9zaXRpb247CiAgICBmcmFnbWVudENvbG9yID0gdmVydGV4Q29sb3I7Cn0KCg";
kha_Shaders.painter_video_fragData0 = "s471:I3ZlcnNpb24gMTAwCnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwpwcmVjaXNpb24gaGlnaHAgaW50OwoKdW5pZm9ybSBoaWdocCBzYW1wbGVyMkQgdGV4OwoKdmFyeWluZyBoaWdocCB2ZWMyIHRleENvb3JkOwp2YXJ5aW5nIGhpZ2hwIHZlYzQgY29sb3I7Cgp2b2lkIG1haW4oKQp7CiAgICBoaWdocCB2ZWM0IHRleGNvbG9yID0gdGV4dHVyZTJEKHRleCwgdGV4Q29vcmQpICogY29sb3I7CiAgICBoaWdocCB2ZWMzIF8zMiA9IHRleGNvbG9yLnh5eiAqIGNvbG9yLnc7CiAgICB0ZXhjb2xvciA9IHZlYzQoXzMyLngsIF8zMi55LCBfMzIueiwgdGV4Y29sb3Iudyk7CiAgICBnbF9GcmFnRGF0YVswXSA9IHRleGNvbG9yOwp9Cgo";
kha_Shaders.painter_video_fragData1 = "s444:I3ZlcnNpb24gMTAwCnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwpwcmVjaXNpb24gbWVkaXVtcCBpbnQ7Cgp1bmlmb3JtIG1lZGl1bXAgc2FtcGxlcjJEIHRleDsKCnZhcnlpbmcgdmVjMiB0ZXhDb29yZDsKdmFyeWluZyB2ZWM0IGNvbG9yOwoKdm9pZCBtYWluKCkKewogICAgdmVjNCB0ZXhjb2xvciA9IHRleHR1cmUyRCh0ZXgsIHRleENvb3JkKSAqIGNvbG9yOwogICAgdmVjMyBfMzIgPSB0ZXhjb2xvci54eXogKiBjb2xvci53OwogICAgdGV4Y29sb3IgPSB2ZWM0KF8zMi54LCBfMzIueSwgXzMyLnosIHRleGNvbG9yLncpOwogICAgZ2xfRnJhZ0RhdGFbMF0gPSB0ZXhjb2xvcjsKfQoK";
kha_Shaders.painter_video_fragData2 = "s452:I3ZlcnNpb24gMzAwIGVzCnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwpwcmVjaXNpb24gbWVkaXVtcCBpbnQ7Cgp1bmlmb3JtIG1lZGl1bXAgc2FtcGxlcjJEIHRleDsKCmluIHZlYzIgdGV4Q29vcmQ7CmluIHZlYzQgY29sb3I7Cm91dCB2ZWM0IEZyYWdDb2xvcjsKCnZvaWQgbWFpbigpCnsKICAgIHZlYzQgdGV4Y29sb3IgPSB0ZXh0dXJlKHRleCwgdGV4Q29vcmQpICogY29sb3I7CiAgICB2ZWMzIF8zMiA9IHRleGNvbG9yLnh5eiAqIGNvbG9yLnc7CiAgICB0ZXhjb2xvciA9IHZlYzQoXzMyLngsIF8zMi55LCBfMzIueiwgdGV4Y29sb3Iudyk7CiAgICBGcmFnQ29sb3IgPSB0ZXhjb2xvcjsKfQoK";
kha_Shaders.painter_video_vertData0 = "s415:I3ZlcnNpb24gMTAwCgp1bmlmb3JtIG1hdDQgcHJvamVjdGlvbk1hdHJpeDsKCmF0dHJpYnV0ZSB2ZWMzIHZlcnRleFBvc2l0aW9uOwp2YXJ5aW5nIHZlYzIgdGV4Q29vcmQ7CmF0dHJpYnV0ZSB2ZWMyIHRleFBvc2l0aW9uOwp2YXJ5aW5nIHZlYzQgY29sb3I7CmF0dHJpYnV0ZSB2ZWM0IHZlcnRleENvbG9yOwoKdm9pZCBtYWluKCkKewogICAgZ2xfUG9zaXRpb24gPSBwcm9qZWN0aW9uTWF0cml4ICogdmVjNCh2ZXJ0ZXhQb3NpdGlvbiwgMS4wKTsKICAgIHRleENvb3JkID0gdGV4UG9zaXRpb247CiAgICBjb2xvciA9IHZlcnRleENvbG9yOwp9Cgo";
kha_Shaders.painter_video_vertData1 = "s479:I3ZlcnNpb24gMTAwCgp1bmlmb3JtIG1lZGl1bXAgbWF0NCBwcm9qZWN0aW9uTWF0cml4OwoKYXR0cmlidXRlIG1lZGl1bXAgdmVjMyB2ZXJ0ZXhQb3NpdGlvbjsKdmFyeWluZyBtZWRpdW1wIHZlYzIgdGV4Q29vcmQ7CmF0dHJpYnV0ZSBtZWRpdW1wIHZlYzIgdGV4UG9zaXRpb247CnZhcnlpbmcgbWVkaXVtcCB2ZWM0IGNvbG9yOwphdHRyaWJ1dGUgbWVkaXVtcCB2ZWM0IHZlcnRleENvbG9yOwoKdm9pZCBtYWluKCkKewogICAgZ2xfUG9zaXRpb24gPSBwcm9qZWN0aW9uTWF0cml4ICogdmVjNCh2ZXJ0ZXhQb3NpdGlvbiwgMS4wKTsKICAgIHRleENvb3JkID0gdGV4UG9zaXRpb247CiAgICBjb2xvciA9IHZlcnRleENvbG9yOwp9Cgo";
kha_Shaders.painter_video_vertData2 = "s444:I3ZlcnNpb24gMzAwIGVzCgp1bmlmb3JtIG1lZGl1bXAgbWF0NCBwcm9qZWN0aW9uTWF0cml4OwoKaW4gbWVkaXVtcCB2ZWMzIHZlcnRleFBvc2l0aW9uOwpvdXQgbWVkaXVtcCB2ZWMyIHRleENvb3JkOwppbiBtZWRpdW1wIHZlYzIgdGV4UG9zaXRpb247Cm91dCBtZWRpdW1wIHZlYzQgY29sb3I7CmluIG1lZGl1bXAgdmVjNCB2ZXJ0ZXhDb2xvcjsKCnZvaWQgbWFpbigpCnsKICAgIGdsX1Bvc2l0aW9uID0gcHJvamVjdGlvbk1hdHJpeCAqIHZlYzQodmVydGV4UG9zaXRpb24sIDEuMCk7CiAgICB0ZXhDb29yZCA9IHRleFBvc2l0aW9uOwogICAgY29sb3IgPSB2ZXJ0ZXhDb2xvcjsKfQoK";
kha_System.renderListeners = [];
kha_System.foregroundListeners = [];
kha_System.resumeListeners = [];
kha_System.pauseListeners = [];
kha_System.backgroundListeners = [];
kha_System.shutdownListeners = [];
kha_System.dropFilesListeners = [];
kha_SystemImpl.mobile = false;
kha_SystemImpl.mobileAudioPlaying = false;
kha_SystemImpl.chrome = false;
kha_SystemImpl.firefox = false;
kha_SystemImpl.insideInputEvent = false;
kha_SystemImpl.maxGamepads = 4;
kha_SystemImpl.leftMouseCtrlDown = false;
kha_SystemImpl.minimumScroll = 999;
kha_SystemImpl.lastFirstTouchX = 0;
kha_SystemImpl.lastFirstTouchY = 0;
kha_SystemImpl.iosSoundEnabled = false;
kha_WebGLImage.GL_RGBA16F = 34842;
kha_WebGLImage.GL_RGBA32F = 34836;
kha_WebGLImage.GL_R16F = 33325;
kha_WebGLImage.GL_R32F = 33326;
kha_WebGLImage.GL_RED = 6403;
kha_WebGLImage.GL_DEPTH_COMPONENT24 = 33190;
kha_WebGLImage.GL_DEPTH24_STENCIL8 = 35056;
kha_WebGLImage.GL_DEPTH32F_STENCIL8 = 36013;
kha_audio2_Audio1.channelCount = 16;
kha_audio2_ogg_tools_Crc32.POLY = 79764919;
kha_audio2_ogg_vorbis_VorbisDecodeState.INVALID_BITS = -1;
kha_audio2_ogg_vorbis_VorbisTools.EOP = -1;
kha_audio2_ogg_vorbis_VorbisTools.M__PI = 3.14159265358979323846264;
kha_audio2_ogg_vorbis_VorbisTools.DIVTAB_NUMER = 32;
kha_audio2_ogg_vorbis_VorbisTools.DIVTAB_DENOM = 64;
kha_audio2_ogg_vorbis_VorbisTools.INVERSE_DB_TABLE = [1.0649863e-07,1.1341951e-07,1.2079015e-07,1.2863978e-07,1.3699951e-07,1.4590251e-07,1.5538408e-07,1.6548181e-07,1.7623575e-07,1.8768855e-07,1.9988561e-07,2.1287530e-07,2.2670913e-07,2.4144197e-07,2.5713223e-07,2.7384213e-07,2.9163793e-07,3.1059021e-07,3.3077411e-07,3.5226968e-07,3.7516214e-07,3.9954229e-07,4.2550680e-07,4.5315863e-07,4.8260743e-07,5.1396998e-07,5.4737065e-07,5.8294187e-07,6.2082472e-07,6.6116941e-07,7.0413592e-07,7.4989464e-07,7.9862701e-07,8.5052630e-07,9.0579828e-07,9.6466216e-07,1.0273513e-06,1.0941144e-06,1.1652161e-06,1.2409384e-06,1.3215816e-06,1.4074654e-06,1.4989305e-06,1.5963394e-06,1.7000785e-06,1.8105592e-06,1.9282195e-06,2.0535261e-06,2.1869758e-06,2.3290978e-06,2.4804557e-06,2.6416497e-06,2.8133190e-06,2.9961443e-06,3.1908506e-06,3.3982101e-06,3.6190449e-06,3.8542308e-06,4.1047004e-06,4.3714470e-06,4.6555282e-06,4.9580707e-06,5.2802740e-06,5.6234160e-06,5.9888572e-06,6.3780469e-06,6.7925283e-06,7.2339451e-06,7.7040476e-06,8.2047000e-06,8.7378876e-06,9.3057248e-06,9.9104632e-06,1.0554501e-05,1.1240392e-05,1.1970856e-05,1.2748789e-05,1.3577278e-05,1.4459606e-05,1.5399272e-05,1.6400004e-05,1.7465768e-05,1.8600792e-05,1.9809576e-05,2.1096914e-05,2.2467911e-05,2.3928002e-05,2.5482978e-05,2.7139006e-05,2.8902651e-05,3.0780908e-05,3.2781225e-05,3.4911534e-05,3.7180282e-05,3.9596466e-05,4.2169667e-05,4.4910090e-05,4.7828601e-05,5.0936773e-05,5.4246931e-05,5.7772202e-05,6.1526565e-05,6.5524908e-05,6.9783085e-05,7.4317983e-05,7.9147585e-05,8.4291040e-05,8.9768747e-05,9.5602426e-05,0.00010181521,0.00010843174,0.00011547824,0.00012298267,0.00013097477,0.00013948625,0.00014855085,0.00015820453,0.00016848555,0.00017943469,0.00019109536,0.00020351382,0.00021673929,0.00023082423,0.00024582449,0.00026179955,0.00027881276,0.00029693158,0.00031622787,0.00033677814,0.00035866388,0.00038197188,0.00040679456,0.00043323036,0.00046138411,0.00049136745,0.00052329927,0.00055730621,0.00059352311,0.00063209358,0.00067317058,0.00071691700,0.00076350630,0.00081312324,0.00086596457,0.00092223983,0.00098217216,0.0010459992,0.0011139742,0.0011863665,0.0012634633,0.0013455702,0.0014330129,0.0015261382,0.0016253153,0.0017309374,0.0018434235,0.0019632195,0.0020908006,0.0022266726,0.0023713743,0.0025254795,0.0026895994,0.0028643847,0.0030505286,0.0032487691,0.0034598925,0.0036847358,0.0039241906,0.0041792066,0.0044507950,0.0047400328,0.0050480668,0.0053761186,0.0057254891,0.0060975636,0.0064938176,0.0069158225,0.0073652516,0.0078438871,0.0083536271,0.0088964928,0.009474637,0.010090352,0.010746080,0.011444421,0.012188144,0.012980198,0.013823725,0.014722068,0.015678791,0.016697687,0.017782797,0.018938423,0.020169149,0.021479854,0.022875735,0.024362330,0.025945531,0.027631618,0.029427276,0.031339626,0.033376252,0.035545228,0.037855157,0.040315199,0.042935108,0.045725273,0.048696758,0.051861348,0.055231591,0.058820850,0.062643361,0.066714279,0.071049749,0.075666962,0.080584227,0.085821044,0.091398179,0.097337747,0.10366330,0.11039993,0.11757434,0.12521498,0.13335215,0.14201813,0.15124727,0.16107617,0.17154380,0.18269168,0.19456402,0.20720788,0.22067342,0.23501402,0.25028656,0.26655159,0.28387361,0.30232132,0.32196786,0.34289114,0.36517414,0.38890521,0.41417847,0.44109412,0.46975890,0.50028648,0.53279791,0.56742212,0.60429640,0.64356699,0.68538959,0.72993007,0.77736504,0.82788260,0.88168307,0.9389798,1.0];
kha_audio2_ogg_vorbis_data_Codebook.NO_CODE = 255;
kha_audio2_ogg_vorbis_data_Codebook.delay = 0;
kha_audio2_ogg_vorbis_data_Header.PACKET_ID = 1;
kha_audio2_ogg_vorbis_data_Header.PACKET_COMMENT = 3;
kha_audio2_ogg_vorbis_data_Header.PACKET_SETUP = 5;
kha_audio2_ogg_vorbis_data_PageFlag.CONTINUED_PACKET = 1;
kha_audio2_ogg_vorbis_data_PageFlag.FIRST_PAGE = 2;
kha_audio2_ogg_vorbis_data_PageFlag.LAST_PAGE = 4;
kha_audio2_ogg_vorbis_data_Setting.MAX_CHANNELS = 16;
kha_audio2_ogg_vorbis_data_Setting.PUSHDATA_CRC_COUNT = 4;
kha_audio2_ogg_vorbis_data_Setting.FAST_HUFFMAN_LENGTH = 10;
kha_audio2_ogg_vorbis_data_Setting.FAST_HUFFMAN_TABLE_SIZE = 1024;
kha_audio2_ogg_vorbis_data_Setting.FAST_HUFFMAN_TABLE_MASK = 1023;
kha_graphics2_truetype_StbTruetype.STBTT_vmove = 1;
kha_graphics2_truetype_StbTruetype.STBTT_vline = 2;
kha_graphics2_truetype_StbTruetype.STBTT_vcurve = 3;
kha_graphics2_truetype_StbTruetype.STBTT_MACSTYLE_DONTCARE = 0;
kha_graphics2_truetype_StbTruetype.STBTT_MACSTYLE_BOLD = 1;
kha_graphics2_truetype_StbTruetype.STBTT_MACSTYLE_ITALIC = 2;
kha_graphics2_truetype_StbTruetype.STBTT_MACSTYLE_UNDERSCORE = 4;
kha_graphics2_truetype_StbTruetype.STBTT_MACSTYLE_NONE = 8;
kha_graphics2_truetype_StbTruetype.STBTT_PLATFORM_ID_UNICODE = 0;
kha_graphics2_truetype_StbTruetype.STBTT_PLATFORM_ID_MAC = 1;
kha_graphics2_truetype_StbTruetype.STBTT_PLATFORM_ID_ISO = 2;
kha_graphics2_truetype_StbTruetype.STBTT_PLATFORM_ID_MICROSOFT = 3;
kha_graphics2_truetype_StbTruetype.STBTT_UNICODE_EID_UNICODE_1_0 = 0;
kha_graphics2_truetype_StbTruetype.STBTT_UNICODE_EID_UNICODE_1_1 = 1;
kha_graphics2_truetype_StbTruetype.STBTT_UNICODE_EID_ISO_10646 = 2;
kha_graphics2_truetype_StbTruetype.STBTT_UNICODE_EID_UNICODE_2_0_BMP = 3;
kha_graphics2_truetype_StbTruetype.STBTT_UNICODE_EID_UNICODE_2_0_FULL = 4;
kha_graphics2_truetype_StbTruetype.STBTT_MS_EID_SYMBOL = 0;
kha_graphics2_truetype_StbTruetype.STBTT_MS_EID_UNICODE_BMP = 1;
kha_graphics2_truetype_StbTruetype.STBTT_MS_EID_SHIFTJIS = 2;
kha_graphics2_truetype_StbTruetype.STBTT_MS_EID_UNICODE_FULL = 10;
kha_graphics2_truetype_StbTruetype.STBTT_MAC_EID_ROMAN = 0;
kha_graphics2_truetype_StbTruetype.STBTT_MAC_EID_ARABIC = 4;
kha_graphics2_truetype_StbTruetype.STBTT_MAC_EID_JAPANESE = 1;
kha_graphics2_truetype_StbTruetype.STBTT_MAC_EID_HEBREW = 5;
kha_graphics2_truetype_StbTruetype.STBTT_MAC_EID_CHINESE_TRAD = 2;
kha_graphics2_truetype_StbTruetype.STBTT_MAC_EID_GREEK = 6;
kha_graphics2_truetype_StbTruetype.STBTT_MAC_EID_KOREAN = 3;
kha_graphics2_truetype_StbTruetype.STBTT_MAC_EID_RUSSIAN = 7;
kha_graphics2_truetype_StbTruetype.STBTT_MS_LANG_ENGLISH = 1033;
kha_graphics2_truetype_StbTruetype.STBTT_MS_LANG_ITALIAN = 1040;
kha_graphics2_truetype_StbTruetype.STBTT_MS_LANG_CHINESE = 2052;
kha_graphics2_truetype_StbTruetype.STBTT_MS_LANG_JAPANESE = 1041;
kha_graphics2_truetype_StbTruetype.STBTT_MS_LANG_DUTCH = 1043;
kha_graphics2_truetype_StbTruetype.STBTT_MS_LANG_KOREAN = 1042;
kha_graphics2_truetype_StbTruetype.STBTT_MS_LANG_FRENCH = 1036;
kha_graphics2_truetype_StbTruetype.STBTT_MS_LANG_RUSSIAN = 1049;
kha_graphics2_truetype_StbTruetype.STBTT_MS_LANG_GERMAN = 1031;
kha_graphics2_truetype_StbTruetype.STBTT_MS_LANG_SPANISH = 1033;
kha_graphics2_truetype_StbTruetype.STBTT_MS_LANG_HEBREW = 1037;
kha_graphics2_truetype_StbTruetype.STBTT_MS_LANG_SWEDISH = 1053;
kha_graphics2_truetype_StbTruetype.STBTT_MAC_LANG_ENGLISH = 0;
kha_graphics2_truetype_StbTruetype.STBTT_MAC_LANG_JAPANESE = 11;
kha_graphics2_truetype_StbTruetype.STBTT_MAC_LANG_ARABIC = 12;
kha_graphics2_truetype_StbTruetype.STBTT_MAC_LANG_KOREAN = 23;
kha_graphics2_truetype_StbTruetype.STBTT_MAC_LANG_DUTCH = 4;
kha_graphics2_truetype_StbTruetype.STBTT_MAC_LANG_RUSSIAN = 32;
kha_graphics2_truetype_StbTruetype.STBTT_MAC_LANG_FRENCH = 1;
kha_graphics2_truetype_StbTruetype.STBTT_MAC_LANG_SPANISH = 6;
kha_graphics2_truetype_StbTruetype.STBTT_MAC_LANG_GERMAN = 2;
kha_graphics2_truetype_StbTruetype.STBTT_MAC_LANG_SWEDISH = 5;
kha_graphics2_truetype_StbTruetype.STBTT_MAC_LANG_HEBREW = 10;
kha_graphics2_truetype_StbTruetype.STBTT_MAC_LANG_CHINESE_SIMPLIFIED = 33;
kha_graphics2_truetype_StbTruetype.STBTT_MAC_LANG_ITALIAN = 3;
kha_graphics2_truetype_StbTruetype.STBTT_MAC_LANG_CHINESE_TRAD = 19;
kha_graphics2_truetype_StbTruetype.STBTT_MAX_OVERSAMPLE = 8;
kha_graphics2_truetype_StbTruetype.STBTT_RASTERIZER_VERSION = 2;
kha_graphics4_CubeMap.GL_RGBA16F = 34842;
kha_graphics4_CubeMap.GL_RGBA32F = 34836;
kha_graphics4_CubeMap.GL_R16F = 33325;
kha_graphics4_CubeMap.GL_R32F = 33326;
kha_graphics4_CubeMap.GL_DEPTH_COMPONENT24 = 33190;
kha_graphics4_CubeMap.GL_DEPTH24_STENCIL8 = 35056;
kha_graphics4_CubeMap.GL_DEPTH32F_STENCIL8 = 36013;
kha_graphics4_ImageShaderPainter.bufferSize = 1500;
kha_graphics4_ImageShaderPainter.vertexSize = 9;
kha_graphics4_ColoredShaderPainter.bufferSize = 100;
kha_graphics4_ColoredShaderPainter.triangleBufferSize = 100;
kha_graphics4_TextShaderPainter.bufferSize = 100;
kha_input_Gamepad.__meta__ = { fields : { sendAxisEvent : { input : null}, sendButtonEvent : { input : null}}};
kha_input_Gamepad.instances = [];
kha_input_Keyboard.__meta__ = { fields : { sendDownEvent : { input : null}, sendUpEvent : { input : null}, sendPressEvent : { input : null}}};
kha_input_Mouse.__meta__ = { fields : { sendLeaveEvent : { input : null}, sendDownEvent : { input : null}, sendUpEvent : { input : null}, sendMoveEvent : { input : null}, sendWheelEvent : { input : null}}};
kha_internal_HdrFormat.radiancePattern = new EReg("#\\?RADIANCE","i");
kha_internal_HdrFormat.commentPattern = new EReg("#.*","i");
kha_internal_HdrFormat.gammaPattern = new EReg("GAMMA=","i");
kha_internal_HdrFormat.exposurePattern = new EReg("EXPOSURE=\\s*([0-9]*[.][0-9]*)","i");
kha_internal_HdrFormat.formatPattern = new EReg("FORMAT=32-bit_rle_rgbe","i");
kha_internal_HdrFormat.widthHeightPattern = new EReg("-Y ([0-9]+) \\+X ([0-9]+)","i");
kha_js_AEAudioChannel.todo = [];
kha_js_Sound.loading = [];
kha_math_FastMatrix3.width = 3;
kha_math_FastMatrix3.height = 3;
kha_math_FastMatrix4.width = 4;
kha_math_FastMatrix4.height = 4;
kha_math_Matrix3.width = 3;
kha_math_Matrix3.height = 3;
kha_math_Matrix4.width = 4;
kha_math_Matrix4.height = 4;
kha_math_Quaternion.AXIS_X = 0;
kha_math_Quaternion.AXIS_Y = 1;
kha_math_Quaternion.AXIS_Z = 2;
kha_network_ControllerBuilder.nextId = 0;
kha_network_Session.START = 0;
kha_network_Session.ENTITY_UPDATES = 1;
kha_network_Session.CONTROLLER_UPDATES = 2;
kha_network_Session.REMOTE_CALL = 3;
kha_network_Session.PING = 4;
kha_network_Session.ERROR = 5;
kha_network_Session.PLAYER_UPDATES = 6;
kha_network_Session.RPC_SERVER = 0;
kha_network_Session.RPC_ALL = 1;
kha_network_SyncBuilder.nextId = 0;
kha_network_SyncBuilder.objects = [];
quake__$CL_CShift_$Impl_$.contents = 0;
quake__$CL_CShift_$Impl_$.damage = 1;
quake__$CL_CShift_$Impl_$.bonus = 2;
quake__$CL_CShift_$Impl_$.powerup = 3;
quake__$CL_CShift_$Impl_$.numtotal = 4;
quake_CL.temp_entities = [];
quake_CL.kbutton = { mlook : 0, klook : 1, left : 2, right : 3, forward : 4, back : 5, lookup : 6, lookdown : 7, moveleft : 8, moveright : 9, strafe : 10, speed : 11, 'use' : 12, jump : 13, attack : 14, moveup : 15, movedown : 16, num : 17};
quake_CL.kbuttons = [];
quake_CL.sendmovebuf = new quake_MSG(16);
quake_CL.cls = new quake__$CL_ClientStatic();
quake_CL.static_entities = [];
quake_CL.visedicts = [];
quake_CL.MAX_DLIGHTS = 32;
quake_CL.MAX_LIGHTSTYLES = 64;
quake_CL.MAX_BEAMS = 24;
quake_CL.svc_strings = ["bad","nop","disconnect","updatestat","version","setview","sound","time","print","stufftext","setangle","serverinfo","lightstyle","updatename","updatefrags","clientdata","stopsound","updatecolors","particle","damage","spawnstatic","OBSOLETE spawnbinary","spawnbaseline","temp_entity","setpause","signonnum","centerprint","killedmonster","foundsecret","spawnstaticsound","intermission","finale","cdtrack","sellscreen","cutscene"];
quake_CL.lastmsg = 0.0;
quake_COM.argv = [];
quake_COM.standard_quake = true;
quake_COM.rogue = false;
quake_COM.hipnotic = false;
quake_COM.modified = false;
quake_COM.searchpaths = [];
quake_COM.localStorage = js_Browser.getLocalStorage();
quake_CRC.table = [0,4129,8258,12387,16516,20645,24774,28903,33032,37161,41290,45419,49548,53677,57806,61935,4657,528,12915,8786,21173,17044,29431,25302,37689,33560,45947,41818,54205,50076,62463,58334,9314,13379,1056,5121,25830,29895,17572,21637,42346,46411,34088,38153,58862,62927,50604,54669,13907,9842,5649,1584,30423,26358,22165,18100,46939,42874,38681,34616,63455,59390,55197,51132,18628,22757,26758,30887,2112,6241,10242,14371,51660,55789,59790,63919,35144,39273,43274,47403,23285,19156,31415,27286,6769,2640,14899,10770,56317,52188,64447,60318,39801,35672,47931,43802,27814,31879,19684,23749,11298,15363,3168,7233,60846,64911,52716,56781,44330,48395,36200,40265,32407,28342,24277,20212,15891,11826,7761,3696,65439,61374,57309,53244,48923,44858,40793,36728,37256,33193,45514,41451,53516,49453,61774,57711,4224,161,12482,8419,20484,16421,28742,24679,33721,37784,41979,46042,49981,54044,58239,62302,689,4752,8947,13010,16949,21012,25207,29270,46570,42443,38312,34185,62830,58703,54572,50445,13538,9411,5280,1153,29798,25671,21540,17413,42971,47098,34713,38840,59231,63358,50973,55100,9939,14066,1681,5808,26199,30326,17941,22068,55628,51565,63758,59695,39368,35305,47498,43435,22596,18533,30726,26663,6336,2273,14466,10403,52093,56156,60223,64286,35833,39896,43963,48026,19061,23124,27191,31254,2801,6864,10931,14994,64814,60687,56684,52557,48554,44427,40424,36297,31782,27655,23652,19525,15522,11395,7392,3265,61215,65342,53085,57212,44955,49082,36825,40952,28183,32310,20053,24180,11923,16050,3793,7920];
quake_Cmd.text = "";
quake_Cmd.argv = [];
quake_Cmd.functions = new haxe_ds_StringMap();
quake_Cmd.alias = new haxe_ds_StringMap();
quake_Cmd.wait = false;
quake_Console.backscroll = 0;
quake_Console.text = [];
quake_Console.current = 0;
quake_Cvar.vars = new haxe_ds_StringMap();
quake_Def.timedate = "Exe: 12:39:20 Aug  7 2014\n";
quake_Def.max_edicts = 2048;
quake_Def.it = { shotgun : 1, super_shotgun : 2, nailgun : 4, super_nailgun : 8, grenade_launcher : 16, rocket_launcher : 32, lightning : 64, super_lightning : 128, shells : 256, nails : 512, rockets : 1024, cells : 2048, axe : 4096, armor1 : 8192, armor2 : 16384, armor3 : 32768, superhealth : 65536, key1 : 131072, key2 : 262144, invisibility : 524288, invulnerability : 1048576, suit : 2097152, quad : 4194304};
quake_Def.rit = { shells : 128, nails : 256, rockets : 512, cells : 1024, axe : 2048, lava_nailgun : 4096, lava_super_nailgun : 8192, multi_grenade : 16384, multi_rocket : 32768, plasma_gun : 65536, armor1 : 8388608, armor2 : 16777216, armor3 : 33554432, lava_nails : 67108864, plasma_ammo : 134217728, multi_rockets : 268435456, shield : 536870912, antigrav : 1073741824, superhealth : 2147483648};
quake_Def.hit = { proximity_gun_bit : 16, mjolnir_bit : 7, laser_cannon_bit : 23, proximity_gun : 65536, mjolnir : 128, laser_cannon : 8388608, wetsuit : 33554432, empathy_shields : 67108864};
quake_GL.textures = [];
quake_GL.programs = [];
quake_GL.ortho = [0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.00001,0.0,-1.0,1.0,0.0,1.0];
quake_GL.identity = [1.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,1.0];
quake_GL.currenttextures = new haxe_ds_IntMap();
quake_Host.initialized = false;
quake_Host.noclip_anglehack = false;
quake_Host.framecount = 0;
quake_Host.timetotal = 0.0;
quake_Host.timecount = 0;
quake_Host.time3 = 0.0;
quake_Host.inerror = false;
quake_Host.isdown = false;
quake_IN.mouse_x = 0.0;
quake_IN.mouse_y = 0.0;
quake_IN.old_mouse_x = 0.0;
quake_IN.old_mouse_y = 0.0;
quake_IN.mouse_avail = false;
quake_Key.lines = [""];
quake_Key.edit_line = "";
quake_Key.history_line = 1;
quake_Key.bindings = [];
quake_Key.consolekeys = [];
quake_Key.shift = [];
quake_Key.down = [];
quake_Key.names = [{ name : "TAB", keynum : 9},{ name : "ENTER", keynum : 13},{ name : "ESCAPE", keynum : 27},{ name : "SPACE", keynum : 32},{ name : "BACKSPACE", keynum : 127},{ name : "UPARROW", keynum : 128},{ name : "DOWNARROW", keynum : 129},{ name : "LEFTARROW", keynum : 130},{ name : "RIGHTARROW", keynum : 131},{ name : "ALT", keynum : 132},{ name : "CTRL", keynum : 133},{ name : "SHIFT", keynum : 134},{ name : "F1", keynum : 135},{ name : "F2", keynum : 136},{ name : "F3", keynum : 137},{ name : "F4", keynum : 138},{ name : "F5", keynum : 139},{ name : "F6", keynum : 140},{ name : "F7", keynum : 141},{ name : "F8", keynum : 142},{ name : "F9", keynum : 143},{ name : "F10", keynum : 144},{ name : "F11", keynum : 145},{ name : "F12", keynum : 146},{ name : "INS", keynum : 147},{ name : "DEL", keynum : 148},{ name : "PGDN", keynum : 149},{ name : "PGUP", keynum : 150},{ name : "HOME", keynum : 151},{ name : "END", keynum : 152},{ name : "MOUSE1", keynum : 200},{ name : "MOUSE2", keynum : 201},{ name : "MOUSE3", keynum : 202},{ name : "PAUSE", keynum : 255},{ name : "MWHEELUP", keynum : 239},{ name : "MWHEELDOWN", keynum : 240},{ name : "SEMICOLON", keynum : 59}];
quake_Key.chat_buffer = "";
quake_Menu.state = 0;
quake_Menu.localStorage = js_Browser.getLocalStorage();
quake_Menu.entersound = false;
quake_Menu.main_cursor = 0;
quake_Menu.main_items = 5;
quake_Menu.singleplayer_cursor = 0;
quake_Menu.singleplayer_items = 3;
quake_Menu.load_cursor = 0;
quake_Menu.max_savegames = 12;
quake_Menu.filenames = [];
quake_Menu.loadable = [];
quake_Menu.removable = [];
quake_Menu.multiplayer_cursor = 0;
quake_Menu.multiplayer_cursor_table = [56,72,96,120,156];
quake_Menu.multiplayer_joinname = "";
quake_Menu.multiplayer_items = 5;
quake_Menu.options_cursor = 0;
quake_Menu.options_items = 12;
quake_Menu.bindnames = [["+attack","attack"],["impulse 10","change weapon"],["+jump","jump / swim up"],["+forward","walk forward"],["+back","backpedal"],["+left","turn left"],["+right","turn right"],["+speed","run"],["+moveleft","step left"],["+moveright","step right"],["+strafe","sidestep"],["+lookup","look up"],["+lookdown","look down"],["centerview","center view"],["+mlook","mouse look"],["+klook","keyboard look"],["+moveup","swim up"],["+movedown","swim down"]];
quake_Menu.keys_cursor = 0;
quake_Menu.num_help_pages = 6;
quake_Menu.quitMessage = [["  Are you gonna quit","  this game just like","   everything else?",""],[" Milord, methinks that","   thou art a lowly"," quitter. Is this true?",""],[" Do I need to bust your","  face open for trying","        to quit?",""],[" Man, I oughta smack you","   for trying to quit!","     Press Y to get","      smacked out."],[" Press Y to quit like a","   big loser in life.","  Press N to stay proud","    and successful!"],["   If you press Y to","  quit, I will summon","  Satan all over your","      hard drive!"],["  Um, Asmodeus dislikes"," his children trying to"," quit. Press Y to return","   to your Tinkertoys."],["  If you quit now, I'll","  throw a blanket-party","   for you next time!",""]];
quake_Mod.known = [];
quake_Mod.IDPOLYHEADER = 1330660425;
quake_Mod.IDSPRITEHEADER = 1347634249;
quake_Mod_$Alias.VERSION = 6;
quake__$Mod_$Brush_LumpOffsets.entities = 4;
quake__$Mod_$Brush_LumpOffsets.planes = 12;
quake__$Mod_$Brush_LumpOffsets.textures = 20;
quake__$Mod_$Brush_LumpOffsets.vertexes = 28;
quake__$Mod_$Brush_LumpOffsets.visibility = 36;
quake__$Mod_$Brush_LumpOffsets.nodes = 44;
quake__$Mod_$Brush_LumpOffsets.texinfo = 52;
quake__$Mod_$Brush_LumpOffsets.faces = 60;
quake__$Mod_$Brush_LumpOffsets.lighting = 68;
quake__$Mod_$Brush_LumpOffsets.clipnodes = 76;
quake__$Mod_$Brush_LumpOffsets.leafs = 84;
quake__$Mod_$Brush_LumpOffsets.marksurfaces = 92;
quake__$Mod_$Brush_LumpOffsets.edges = 100;
quake__$Mod_$Brush_LumpOffsets.surfedges = 108;
quake__$Mod_$Brush_LumpOffsets.models = 116;
quake_Mod_$Brush.VERSION = 29;
quake_Mod_$Sprite.VERSION = 1;
quake_NET.activeSockets = [];
quake_NET.message = new quake_MSG(8192);
quake_NET.activeconnections = 0;
quake_NET_$Loop.localconnectpending = false;
quake_NET_$Loop.initialized = false;
quake_NET_$WEBS.available = false;
quake_NET_$WEBS.initialized = false;
quake_PR.version = 6;
quake_PR.progheader_crc = 5927;
quake_PR.localstack_size = 2048;
quake_PR.opnames = ["DONE","MUL_F","MUL_V","MUL_FV","MUL_VF","DIV","ADD_F","ADD_V","SUB_F","SUB_V","EQ_F","EQ_V","EQ_S","EQ_E","EQ_FNC","NE_F","NE_V","NE_S","NE_E","NE_FNC","LE","GE","LT","GT","INDIRECT","INDIRECT","INDIRECT","INDIRECT","INDIRECT","INDIRECT","ADDRESS","STORE_F","STORE_V","STORE_S","STORE_ENT","STORE_FLD","STORE_FNC","STOREP_F","STOREP_V","STOREP_S","STOREP_ENT","STOREP_FLD","STOREP_FNC","RETURN","NOT_F","NOT_V","NOT_S","NOT_ENT","NOT_FNC","IF","IFNOT","CALL0","CALL1","CALL2","CALL3","CALL4","CALL5","CALL6","CALL7","CALL8","STATE","GOTO","AND","OR","BITAND","BITOR"];
quake_VID.d_8to24table = new Uint32Array(new ArrayBuffer(1024));
quake_S.started = false;
quake_S.channels = [];
quake_S.static_channels = [];
quake_S.ambient_channels = [];
quake_S.listener_origin = (function($this) {
	var $r;
	var this1 = new Float32Array(3);
	$r = this1;
	return $r;
}(this));
quake_S.listener_forward = (function($this) {
	var $r;
	var this1 = new Float32Array(3);
	$r = this1;
	return $r;
}(this));
quake_S.listener_right = (function($this) {
	var $r;
	var this1 = new Float32Array(3);
	$r = this1;
	return $r;
}(this));
quake_S.listener_up = (function($this) {
	var $r;
	var this1 = new Float32Array(3);
	$r = this1;
	return $r;
}(this));
quake_S.known_sfx = [];
quake__$Vec_Vec_$Impl_$.origin = (function($this) {
	var $r;
	var this1 = new Float32Array(3);
	$r = this1;
	return $r;
}(this));
quake_SCR.con_current = 0;
quake_SCR.centertime_off = 0.0;
quake_SCR.recalc_refdef = false;
quake_SCR.disabled_for_loading = false;
quake_SCR.centerstring = [];
quake_SCR.count = 0;
quake_SCR.screenshot = false;
quake_SV.server = new quake__$SV_ServerState();
quake_SV.svs = new quake__$SV_ServerStatic();
quake_SV.clientdatagram = new quake_MSG(1024);
quake_SV.fatpvs = [];
quake_SV.readClientCmds = ["status","god","notarget","fly","name","noclip","say","say_team","tell","color","kill","pause","spawn","begin","prespawn","kick","ping","give","ban"];
quake_Render.dlightframecount = 0;
quake_Render.lightstylevalue = new Uint8Array(64);
quake_Render.visframecount = 0;
quake_Render.frustum = [new quake_Plane(),new quake_Plane(),new quake_Plane(),new quake_Plane()];
quake_Render.vup = (function($this) {
	var $r;
	var this1 = new Float32Array(3);
	$r = this1;
	return $r;
}(this));
quake_Render.vpn = (function($this) {
	var $r;
	var this1 = new Float32Array(3);
	$r = this1;
	return $r;
}(this));
quake_Render.vright = (function($this) {
	var $r;
	var this1 = new Float32Array(3);
	$r = this1;
	return $r;
}(this));
quake_Render.refdef = new quake__$Render_RefDef();
quake_Render.avertexnormals = new Float32Array([-0.525731,0.000000,0.850651,-0.442863,0.238856,0.864188,-0.295242,0.000000,0.955423,-0.309017,0.500000,0.809017,-0.162460,0.262866,0.951056,0.000000,0.000000,1.000000,0.000000,0.850651,0.525731,-0.147621,0.716567,0.681718,0.147621,0.716567,0.681718,0.000000,0.525731,0.850651,0.309017,0.500000,0.809017,0.525731,0.000000,0.850651,0.295242,0.000000,0.955423,0.442863,0.238856,0.864188,0.162460,0.262866,0.951056,-0.681718,0.147621,0.716567,-0.809017,0.309017,0.500000,-0.587785,0.425325,0.688191,-0.850651,0.525731,0.000000,-0.864188,0.442863,0.238856,-0.716567,0.681718,0.147621,-0.688191,0.587785,0.425325,-0.500000,0.809017,0.309017,-0.238856,0.864188,0.442863,-0.425325,0.688191,0.587785,-0.716567,0.681718,-0.147621,-0.500000,0.809017,-0.309017,-0.525731,0.850651,0.000000,0.000000,0.850651,-0.525731,-0.238856,0.864188,-0.442863,0.000000,0.955423,-0.295242,-0.262866,0.951056,-0.162460,0.000000,1.000000,0.000000,0.000000,0.955423,0.295242,-0.262866,0.951056,0.162460,0.238856,0.864188,0.442863,0.262866,0.951056,0.162460,0.500000,0.809017,0.309017,0.238856,0.864188,-0.442863,0.262866,0.951056,-0.162460,0.500000,0.809017,-0.309017,0.850651,0.525731,0.000000,0.716567,0.681718,0.147621,0.716567,0.681718,-0.147621,0.525731,0.850651,0.000000,0.425325,0.688191,0.587785,0.864188,0.442863,0.238856,0.688191,0.587785,0.425325,0.809017,0.309017,0.500000,0.681718,0.147621,0.716567,0.587785,0.425325,0.688191,0.955423,0.295242,0.000000,1.000000,0.000000,0.000000,0.951056,0.162460,0.262866,0.850651,-0.525731,0.000000,0.955423,-0.295242,0.000000,0.864188,-0.442863,0.238856,0.951056,-0.162460,0.262866,0.809017,-0.309017,0.500000,0.681718,-0.147621,0.716567,0.850651,0.000000,0.525731,0.864188,0.442863,-0.238856,0.809017,0.309017,-0.500000,0.951056,0.162460,-0.262866,0.525731,0.000000,-0.850651,0.681718,0.147621,-0.716567,0.681718,-0.147621,-0.716567,0.850651,0.000000,-0.525731,0.809017,-0.309017,-0.500000,0.864188,-0.442863,-0.238856,0.951056,-0.162460,-0.262866,0.147621,0.716567,-0.681718,0.309017,0.500000,-0.809017,0.425325,0.688191,-0.587785,0.442863,0.238856,-0.864188,0.587785,0.425325,-0.688191,0.688191,0.587785,-0.425325,-0.147621,0.716567,-0.681718,-0.309017,0.500000,-0.809017,0.000000,0.525731,-0.850651,-0.525731,0.000000,-0.850651,-0.442863,0.238856,-0.864188,-0.295242,0.000000,-0.955423,-0.162460,0.262866,-0.951056,0.000000,0.000000,-1.000000,0.295242,0.000000,-0.955423,0.162460,0.262866,-0.951056,-0.442863,-0.238856,-0.864188,-0.309017,-0.500000,-0.809017,-0.162460,-0.262866,-0.951056,0.000000,-0.850651,-0.525731,-0.147621,-0.716567,-0.681718,0.147621,-0.716567,-0.681718,0.000000,-0.525731,-0.850651,0.309017,-0.500000,-0.809017,0.442863,-0.238856,-0.864188,0.162460,-0.262866,-0.951056,0.238856,-0.864188,-0.442863,0.500000,-0.809017,-0.309017,0.425325,-0.688191,-0.587785,0.716567,-0.681718,-0.147621,0.688191,-0.587785,-0.425325,0.587785,-0.425325,-0.688191,0.000000,-0.955423,-0.295242,0.000000,-1.000000,0.000000,0.262866,-0.951056,-0.162460,0.000000,-0.850651,0.525731,0.000000,-0.955423,0.295242,0.238856,-0.864188,0.442863,0.262866,-0.951056,0.162460,0.500000,-0.809017,0.309017,0.716567,-0.681718,0.147621,0.525731,-0.850651,0.000000,-0.238856,-0.864188,-0.442863,-0.500000,-0.809017,-0.309017,-0.262866,-0.951056,-0.162460,-0.850651,-0.525731,0.000000,-0.716567,-0.681718,-0.147621,-0.716567,-0.681718,0.147621,-0.525731,-0.850651,0.000000,-0.500000,-0.809017,0.309017,-0.238856,-0.864188,0.442863,-0.262866,-0.951056,0.162460,-0.864188,-0.442863,0.238856,-0.809017,-0.309017,0.500000,-0.688191,-0.587785,0.425325,-0.681718,-0.147621,0.716567,-0.442863,-0.238856,0.864188,-0.587785,-0.425325,0.688191,-0.309017,-0.500000,0.809017,-0.147621,-0.716567,0.681718,-0.425325,-0.688191,0.587785,-0.162460,-0.262866,0.951056,0.442863,-0.238856,0.864188,0.162460,-0.262866,0.951056,0.309017,-0.500000,0.809017,0.147621,-0.716567,0.681718,0.000000,-0.525731,0.850651,0.425325,-0.688191,0.587785,0.587785,-0.425325,0.688191,0.688191,-0.587785,0.425325,-0.955423,0.295242,0.000000,-0.951056,0.162460,0.262866,-1.000000,0.000000,0.000000,-0.850651,0.000000,0.525731,-0.955423,-0.295242,0.000000,-0.951056,-0.162460,0.262866,-0.864188,0.442863,-0.238856,-0.951056,0.162460,-0.262866,-0.809017,0.309017,-0.500000,-0.864188,-0.442863,-0.238856,-0.951056,-0.162460,-0.262866,-0.809017,-0.309017,-0.500000,-0.681718,0.147621,-0.716567,-0.681718,-0.147621,-0.716567,-0.850651,0.000000,-0.525731,-0.688191,0.587785,-0.425325,-0.587785,0.425325,-0.688191,-0.425325,0.688191,-0.587785,-0.425325,-0.688191,-0.587785,-0.587785,-0.425325,-0.688191,-0.688191,-0.587785,-0.425325]);
quake_Render.perspective = [0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,-1.0001220777635353,-1.0,0.0,0.0,-8.0004883110541414,0.0];
quake_Render.ramp1 = [111,109,107,105,103,101,99,97];
quake_Render.ramp2 = [111,110,109,108,107,106,104,102];
quake_Render.ramp3 = [109,107,6,5,4,3];
quake_Render.MAX_PARTICLES = 2048;
quake_Render.ABSOLUTE_MIN_PARTICLES = 512;
quake_Render.NUMVERTEXNORMALS = 162;
quake_Render.tracercount = 0;
quake_Render.lightmap_modified = new Uint8Array(1024);
quake_Render.lightmaps = new Uint8Array(new ArrayBuffer(4194304));
quake_Render.dlightmaps = new Uint8Array(new ArrayBuffer(1048576));
quake_PF.builtin = [quake_PF.Fixme,quake_PF.makevectors,quake_PF.setorigin,quake_PF.setmodel,quake_PF.setsize,quake_PF.Fixme,quake_PF.breakstatement,quake_PF.random,quake_PF.sound,quake_PF.normalize,quake_PF.error,quake_PF.objerror,quake_PF.vlen,quake_PF.vectoyaw,quake_PF.Spawn,quake_PF.Remove,quake_PF.traceline,quake_PF.checkclient,quake_PF.Find,quake_PF.precache_sound,quake_PF.precache_model,quake_PF.stuffcmd,quake_PF.findradius,quake_PF.bprint,quake_PF.sprint,quake_PF.dprint,quake_PF.ftos,quake_PF.vtos,quake_PF.coredump,quake_PF.traceon,quake_PF.traceoff,quake_PF.eprint,quake_PF.walkmove,quake_PF.Fixme,quake_PF.droptofloor,quake_PF.lightstyle,quake_PF.rint,quake_PF.floor,quake_PF.ceil,quake_PF.Fixme,quake_PF.checkbottom,quake_PF.pointcontents,quake_PF.Fixme,quake_PF.fabs,quake_PF.aim,quake_PF.cvar,quake_PF.localcmd,quake_PF.nextent,quake_PF.particle,quake_PF.changeyaw,quake_PF.Fixme,quake_PF.vectoangles,quake_PF.WriteByte,quake_PF.WriteChar,quake_PF.WriteShort,quake_PF.WriteLong,quake_PF.WriteCoord,quake_PF.WriteAngle,quake_PF.WriteString,quake_PF.WriteEntity,quake_PF.Fixme,quake_PF.Fixme,quake_PF.Fixme,quake_PF.Fixme,quake_PF.Fixme,quake_PF.Fixme,quake_PF.Fixme,quake_PF.MoveToGoal,quake_PF.precache_file,quake_PF.makestatic,quake_PF.changelevel,quake_PF.Fixme,quake_PF.cvar_set,quake_PF.centerprint,quake_PF.ambientsound,quake_PF.precache_model,quake_PF.precache_sound,quake_PF.precache_file,quake_PF.setspawnparms];
quake_Protocol.version = 15;
quake_Protocol.default_viewheight = 22;
quake_Sbar.fragsort = [];
quake_Sbar.showscores = false;
quake_V.cshift_empty = [130.0,80.0,50.0,0.0];
quake_V.cshift_water = [130.0,80.0,50.0,128.0];
quake_V.cshift_slime = [0.0,25.0,5.0,150.0];
quake_V.cshift_lava = [255.0,80.0,0.0,150.0];
quake_V.blend = [0.0,0.0,0.0,0.0];
quake_V.oldz = 0.0;
quake_V.dmg_time = 0.0;
quake_W.lumps = new haxe_ds_StringMap();
Main.main();
})(typeof exports != "undefined" ? exports : typeof window != "undefined" ? window : typeof self != "undefined" ? self : this, typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
